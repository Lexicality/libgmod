[
  {
    "description": "List of all possible functions to manipulate angles.\n\nCreated by <page>Global.Angle</page>.\n\n| Type                | Name                                 | Description                      |\n| ------------------- | ------------------------------------ | -------------------------------- |\n| <page>number</page> | `p` or `pitch` or `x` or `1` | The pitch component of the angle. |\n| <page>number</page> | `y` or `yaw` or `2` | The yaw component of the angle. |\n| <page>number</page> | `r` or `roll`  or `z` or `3` | The roll  component of the angle. |\n\nMetamethod | Second Operand | Description\n---------- | -------------- | -----------\n`__add` | <page>Angle</page> | Returns new <page>Angle</page> with the result of addition.\n`__div` | <page>number</page> | Returns new <page>Angle</page> with the result of division.\n`__eq` | <page>any</page> | Compares 2 operands, if they both are <page>Angle</page>, compares each individual component. <br>Doesn't normalize the angles (360 is not equal to 0).\n`__index` | <page>number</page> or <page>string</page> | Gets the component of the <page>Angle</page>. Returns a <page>number</page>.\n`__mul` | <page>number</page> | Returns new <page>Angle</page> with the result of multiplication.\n`__newindex` | <page>number</page> or <page>string</page> | Sets the component of the <page>Angle</page>. Accepts <page>number</page> and <page>string</page>.\n`__sub` | <page>Angle</page> | Returns new <page>Angle</page> with the result of subtraction.\n`__tostring` | | Returns `p y r`.\n`__unm` | | Returns new <page>Angle</page> with the result of negation.",
    "functions": [
      {
        "arguments": [
          {
            "description": "The angle to add.",
            "name": "angle",
            "type": "Angle"
          }
        ],
        "description": "Adds the values of the argument angle to the orignal angle.\n\nThis functions the same as angle1 + angle2 without creating a new angle object, skipping object construction and garbage collection.",
        "name": "Add",
        "parent": "Angle",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The number to divide by.",
            "name": "scalar",
            "type": "number"
          }
        ],
        "description": "Divides all values of the original angle by a scalar. This functions the same as angle1 / num without creating a new angle object, skipping object construction and garbage collection.",
        "name": "Div",
        "parent": "Angle",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "description": "Returns a normal vector facing in the direction that the angle points.",
        "name": "Forward",
        "parent": "Angle",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The forward direction of the angle",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The angle to compare to.",
            "name": "compare",
            "type": "Angle"
          },
          {
            "description": "The tolerance range for each component.",
            "name": "tolerance",
            "type": "number"
          }
        ],
        "description": "Returns if the angle is equal to another angle with the given tolerance.",
        "name": "IsEqualTol",
        "parent": "Angle",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Are each of the the angle components equal or not within given tolerance.",
            "name": "eq",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the pitch, yaw and roll are 0 or not.",
        "name": "IsZero",
        "parent": "Angle",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the pitch, yaw and roll are 0 or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The number to multiply.",
            "name": "scalar",
            "type": "number"
          }
        ],
        "description": "Multiplies a scalar to all the values of the orignal angle. This functions the same as num * angle without creating a new angle object, skipping object construction and garbage collection.",
        "name": "Mul",
        "parent": "Angle",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "description": "Normalizes the angles by applying a module with 360 to pitch, yaw and roll.",
        "name": "Normalize",
        "parent": "Angle",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "-360",
            "description": "The minimum value for each component.",
            "name": "min",
            "type": "number"
          },
          {
            "default": "360",
            "description": "The maximum value for each component.",
            "name": "max",
            "type": "number"
          }
        ],
        "description": "Randomizes each element of this Angle object.",
        "name": "Random",
        "parent": "Angle",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "description": "Returns a normal vector facing in the direction that points right relative to the angle's direction.",
        "name": "Right",
        "parent": "Angle",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The right direction of the angle",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The axis to rotate around as a normalized unit vector. When argument is not a unit vector, you will experience numerical offset errors in the rotated angle.",
            "name": "axis",
            "type": "Vector"
          },
          {
            "description": "The degrees to rotate around the specified axis.",
            "name": "rotation",
            "type": "number"
          }
        ],
        "description": "Rotates the angle around the specified axis by the specified degrees.",
        "name": "RotateAroundAxis",
        "parent": "Angle",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The angle to copy the values from.",
            "name": "originalAngle",
            "type": "Angle"
          }
        ],
        "description": "Copies pitch, yaw and roll from the second angle to the first.",
        "name": "Set",
        "parent": "Angle",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The pitch component of the Angle",
            "name": "p",
            "type": "number"
          },
          {
            "description": "The yaw component of the Angle",
            "name": "y",
            "type": "number"
          },
          {
            "description": "The roll component of the Angle",
            "name": "r",
            "type": "number"
          }
        ],
        "description": "Sets the p, y, and r of the angle.",
        "name": "SetUnpacked",
        "parent": "Angle",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The component/axis to snap. Can be either `p`/`pitch`, `y`/`yaw` or `r`/`roll`.",
            "name": "axis",
            "type": "string"
          },
          {
            "description": "The target angle snap interval",
            "name": "target",
            "type": "number"
          }
        ],
        "description": "Snaps the angle to nearest interval of degrees.\n\n<note>This will modify the original angle too!</note>",
        "name": "SnapTo",
        "parent": "Angle",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The snapped angle.",
            "type": "Angle"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/angle.lua",
          "lineEnd": 18,
          "lineStart": 5
        }
      },
      {
        "arguments": [
          {
            "description": "The angle to subtract.",
            "name": "angle",
            "type": "Angle"
          }
        ],
        "description": "Subtracts the values of the argument angle to the orignal angle. This functions the same as angle1 - angle2 without creating a new angle object, skipping object construction and garbage collection.",
        "name": "Sub",
        "parent": "Angle",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "description": "Returns the angle as a table with three elements.",
        "name": "ToTable",
        "parent": "Angle",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The table with elements 1 = p, 2 = y, 3 = r.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns the pitch, yaw, and roll components of the angle.",
        "name": "Unpack",
        "parent": "Angle",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "p, pitch, x, or Angle[1].",
            "type": "number"
          },
          {
            "description": "y, yaw, or Angle[2].",
            "type": "number"
          },
          {
            "description": "r, roll, r, or Angle[3].",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns a normal vector facing in the direction that points up relative to the angle's direction.",
        "name": "Up",
        "parent": "Angle",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The up direction of the angle.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Sets pitch, yaw and roll to 0.\nThis function is faster than doing it manually.",
        "name": "Zero",
        "parent": "Angle",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      }
    ],
    "name": "Angle"
  },
  {
    "description": "This is the object passed to <page>usermessage.Hook</page> when a message is received. It contains each value stored in the message in sequential order. You should read values from it in the order you wrote them.\n<deprecated>You should be using <page>net</page> instead</deprecated>",
    "functions": [
      {
        "description": "Reads and returns an angle object from the bitstream.",
        "name": "ReadAngle",
        "parent": "bf_read",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The read angle",
            "type": "Angle"
          }
        ]
      },
      {
        "description": "Reads 1 bit and returns a bool representing the bit.",
        "name": "ReadBool",
        "parent": "bf_read",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "bit",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Reads a signed char and returns a number from -127 to 127 representing the ascii value of that char.",
        "name": "ReadChar",
        "parent": "bf_read",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "asciiVal",
            "type": "number"
          }
        ]
      },
      {
        "description": "Reads a short representing an entity index and returns the matching entity handle.",
        "name": "ReadEntity",
        "parent": "bf_read",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "ent",
            "type": "Entity"
          }
        ]
      },
      {
        "description": "Reads a 4 byte float from the bitstream and returns it.",
        "name": "ReadFloat",
        "parent": "bf_read",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "float",
            "type": "number"
          }
        ]
      },
      {
        "description": "Reads a 4 byte long from the bitstream and returns it.",
        "name": "ReadLong",
        "parent": "bf_read",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "int",
            "type": "number"
          }
        ]
      },
      {
        "description": "Reads a 2 byte short from the bitstream and returns it.",
        "name": "ReadShort",
        "parent": "bf_read",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "short",
            "type": "number"
          }
        ]
      },
      {
        "description": "Reads a null terminated string from the bitstream.",
        "name": "ReadString",
        "parent": "bf_read",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "str",
            "type": "string"
          }
        ]
      },
      {
        "description": "Reads a special encoded vector from the bitstream and returns it, this function is not suitable to send normals.",
        "name": "ReadVector",
        "parent": "bf_read",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "vec",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Reads a special encoded vector normal from the bitstream and returns it, this function is not suitable to send vectors that represent a position.",
        "name": "ReadVectorNormal",
        "parent": "bf_read",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "normal",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Rewinds the bitstream so it can be read again.",
        "name": "Reset",
        "parent": "bf_read",
        "realms": [
          "client"
        ]
      }
    ],
    "name": "bf_read"
  },
  {
    "description": "List of all possible functions available for effect data. This is the object returned by the <page text=\"EffectData\">Global.EffectData</page> function and is required for <page>util.Effect</page> function.",
    "functions": [
      {
        "description": "Returns the angles of the effect.",
        "name": "GetAngles",
        "parent": "CEffectData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The angles of the effect",
            "type": "Angle"
          }
        ]
      },
      {
        "description": "Returns the attachment ID for the effect.",
        "name": "GetAttachment",
        "parent": "CEffectData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The attachment ID of the effect.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns byte which represents the color of the effect.",
        "name": "GetColor",
        "parent": "CEffectData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The color of the effect",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the damage type of the effect",
        "name": "GetDamageType",
        "parent": "CEffectData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Damage type of the effect, see <page>Enums/DMG</page>",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the entity index of the entity set for the effect.",
        "name": "GetEntIndex",
        "parent": "CEffectData",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The entity index of the entity set for the effect.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the entity assigned to the effect.",
        "name": "GetEntity",
        "parent": "CEffectData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The entity assigned to the effect",
            "type": "Entity"
          }
        ]
      },
      {
        "description": "Returns the flags of the effect.",
        "name": "GetFlags",
        "parent": "CEffectData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The flags of the effect.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the hit box ID of the effect.",
        "name": "GetHitBox",
        "parent": "CEffectData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The hit box ID of the effect.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the magnitude of the effect.",
        "name": "GetMagnitude",
        "parent": "CEffectData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The magnitude of the effect.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the material ID of the effect.",
        "name": "GetMaterialIndex",
        "parent": "CEffectData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The material ID of the effect.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the normalized direction vector of the effect.",
        "name": "GetNormal",
        "parent": "CEffectData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The normalized direction vector of the effect.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the origin position of the effect.",
        "name": "GetOrigin",
        "parent": "CEffectData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The origin position of the effect.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the radius of the effect.",
        "name": "GetRadius",
        "parent": "CEffectData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The radius of the effect.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the scale of the effect.",
        "name": "GetScale",
        "parent": "CEffectData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The scale of the effect",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the start position of the effect.",
        "name": "GetStart",
        "parent": "CEffectData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The start position of the effect",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the surface property index of the effect. See <page>util.GetSurfaceData</page> for more details about what they are.\n\nSee <page>CEffectData:SetSurfaceProp</page> for details about limitations of this function.",
        "name": "GetSurfaceProp",
        "parent": "CEffectData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The surface property index of the effect.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The new angles to be set.",
            "name": "ang",
            "type": "Angle"
          }
        ],
        "description": "Sets the angles of the effect.",
        "name": "SetAngles",
        "parent": "CEffectData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "New attachment ID of the effect.",
            "name": "attachment",
            "type": "number"
          }
        ],
        "description": "Sets the attachment id of the effect to be created with this effect data.\n\n<note>This is internally stored as an integer, but only the first 5 bits will be networked, effectively limiting this function to 0-31 range.</note>",
        "name": "SetAttachment",
        "parent": "CEffectData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Color represented by a byte.",
            "name": "color",
            "type": "number"
          }
        ],
        "description": "Sets the \"color\" of the effect.\n\nAll this does is provide an addition 8 bits of data for the effect to use. What this will actually do will vary from effect to effect, depending on how a specific effect uses this given data, if at all.\n\n<note>Internally stored as an integer, but only first 8 bits are networked, effectively limiting this function to 0-255 range.</note>",
        "name": "SetColor",
        "parent": "CEffectData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Damage type, see <page>Enums/DMG</page>.",
            "name": "damageType",
            "type": "number"
          }
        ],
        "description": "Sets the damage type of the effect to be created with this effect data.",
        "name": "SetDamageType",
        "parent": "CEffectData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The entity index to be set.",
            "name": "entIndex",
            "type": "number"
          }
        ],
        "description": "Sets the entity of the effect via its index.",
        "name": "SetEntIndex",
        "parent": "CEffectData",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Entity of the effect, mostly used for parenting.",
            "name": "entity",
            "type": "Entity"
          }
        ],
        "description": "Sets the entity of the effect to be created with this effect data.",
        "name": "SetEntity",
        "parent": "CEffectData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The flags of the effect. Each effect has their own flags.",
            "name": "flags",
            "type": "number"
          }
        ],
        "description": "Sets the flags of the effect. Can be used to change the appearance of a MuzzleFlash effect.\n\n## Example values for MuzzleFlash effect\nFlags |  Description |\n------|--------------|\n1 | Regular muzzleflash|\n5 | Combine muzzleflash|\n7 | Regular muzzle but bigger|\n\n<note>Internally stored as an integer, but only first 8 bits are networked, effectively limiting this function to `0-255` range.</note>",
        "name": "SetFlags",
        "parent": "CEffectData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The hit box index of the effect, for example from <page>Structures/TraceResult#HitBox</page>",
            "name": "hitBoxIndex",
            "type": "number"
          }
        ],
        "description": "Sets the hit box index of the effect. Used by various effects for various purposes.\n\n<note>Internally stored as an integer, but only first 11 bits are networked, effectively limiting this function to 0-2047 range.</note>",
        "name": "SetHitBox",
        "parent": "CEffectData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The magnitude of the effect.",
            "name": "magnitude",
            "type": "number"
          }
        ],
        "description": "Sets the magnitude of the effect.\n<note>Internally stored as a float with 12 bit precision for networking purposes, limited to range of 0-1023.</note>",
        "name": "SetMagnitude",
        "parent": "CEffectData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The material index of the effect.",
            "name": "materialIndex",
            "type": "number"
          }
        ],
        "description": "Sets the material index of the effect.\n\n<note>Internally stored as an integer, but only first 12 bits are networked, effectively limiting this function to 0-4095 range.</note>",
        "name": "SetMaterialIndex",
        "parent": "CEffectData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The normalized direction vector of the effect.",
            "name": "normal",
            "type": "Vector"
          }
        ],
        "description": "Sets the normalized (length=1) direction vector of the effect to be created with this effect data. This **must** be a normalized vector for networking purposes.",
        "name": "SetNormal",
        "parent": "CEffectData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Origin of the effect.",
            "name": "origin",
            "type": "Vector"
          }
        ],
        "description": "Sets the origin of the effect to be created with this effect data.\n<note>Limited to world bounds (+-16386 on every axis) and has horrible networking precision. (17 bit float per component)</note>",
        "name": "SetOrigin",
        "parent": "CEffectData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Radius of the effect.",
            "name": "radius",
            "type": "number"
          }
        ],
        "description": "Sets the radius of the effect to be created with this effect data.\n\n<note>Internally stored as a float, but networked as a 10bit float, and is clamped to 0-1023 range.</note>",
        "name": "SetRadius",
        "parent": "CEffectData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Scale of the effect.",
            "name": "scale",
            "type": "number"
          }
        ],
        "description": "Sets the scale of the effect to be created with this effect data.",
        "name": "SetScale",
        "parent": "CEffectData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Start of the effect.",
            "name": "start",
            "type": "Vector"
          }
        ],
        "description": "Sets the start of the effect to be created with this effect data.\n<note>Limited to world bounds (+-16386 on every axis) and has horrible networking precision. (17 bit float per component)</note>",
        "name": "SetStart",
        "parent": "CEffectData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The surface property index of the effect.",
            "name": "surfaceProperties",
            "type": "number"
          }
        ],
        "description": "Sets the surface property index of the effect. See <page>util.GetSurfaceData</page> for more details about what they are.\n\n<note>Internally stored as an integer, but only first 8 bits are networked, effectively limiting this function to `-1`-`254` range. (Yes, that's not a mistake, `-1` signifying an invalid value.)</note>",
        "name": "SetSurfaceProp",
        "parent": "CEffectData",
        "realms": [
          "client",
          "server"
        ]
      }
    ],
    "name": "CEffectData"
  },
  {
    "description": "List of all possible functions available for LuaEmitters. This is the object returned by the <page>Global.ParticleEmitter</page> function.",
    "functions": [
      {
        "arguments": [
          {
            "description": "The particles material. Can also be an <page>IMaterial</page>.",
            "name": "material",
            "type": "string"
          },
          {
            "description": "The position to spawn the particle on.",
            "name": "position",
            "type": "Vector"
          }
        ],
        "description": "Creates a new <page>CLuaParticle</page> with the given material and position.",
        "name": "Add",
        "parent": "CLuaEmitter",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The created particle, if any.",
            "type": "CLuaParticle"
          }
        ]
      },
      {
        "description": "Manually renders all particles the emitter has created.",
        "name": "Draw",
        "parent": "CLuaEmitter",
        "realms": [
          "client"
        ]
      },
      {
        "description": "Removes the emitter, making it no longer usable from Lua. If particles remain, the emitter will be removed when all particles die.",
        "name": "Finish",
        "parent": "CLuaEmitter",
        "realms": [
          "client"
        ]
      },
      {
        "description": "Returns the amount of active particles of this emitter.",
        "name": "GetNumActiveParticles",
        "parent": "CLuaEmitter",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The amount of active particles of this emitter",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the position of this emitter. This is set when creating the emitter with <page>Global.ParticleEmitter</page>.",
        "name": "GetPos",
        "parent": "CLuaEmitter",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Position of this particle emitter.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns whether this emitter is 3D or not. This is set when creating the emitter with <page>Global.ParticleEmitter</page>.",
        "name": "Is3D",
        "parent": "CLuaEmitter",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Whether this emitter is 3D or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether this <page>CLuaEmitter</page> is valid or not.",
        "name": "IsValid",
        "parent": "CLuaEmitter",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Whether this <page>CLuaEmitter</page> is valid or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The minimum position of the box",
            "name": "mins",
            "type": "Vector"
          },
          {
            "description": "The maximum position of the box",
            "name": "maxs",
            "type": "Vector"
          }
        ],
        "description": "Sets the bounding box for this emitter.\n\nUsually the bounding box is automatically determined by the particles, but this function overrides it.",
        "name": "SetBBox",
        "parent": "CLuaEmitter",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "Min distance where the alpha becomes 0.",
            "name": "distanceMin",
            "type": "number"
          },
          {
            "description": "Max distance where the alpha starts fading.",
            "name": "distanceMax",
            "type": "number"
          }
        ],
        "description": "This function sets the the distance between the render camera and the emitter at which the particles should start fading and at which distance fade ends ( alpha becomes 0 ).",
        "name": "SetNearClip",
        "parent": "CLuaEmitter",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether we should draw the particles ( false ) or not ( true )",
            "name": "noDraw",
            "type": "boolean"
          }
        ],
        "description": "Prevents all particles of the emitter from automatically drawing.",
        "name": "SetNoDraw",
        "parent": "CLuaEmitter",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "Particle radius.",
            "name": "radius",
            "type": "number"
          }
        ],
        "description": "The function name has not much in common with its actual function, it applies a radius to every particles that affects the building of the bounding box, as it, usually is constructed by the particle that has the lowest x, y and z and the highest x, y and z, this function just adds/subtracts the radius and inflates the bounding box.",
        "name": "SetParticleCullRadius",
        "parent": "CLuaEmitter",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "New position.",
            "name": "position",
            "type": "Vector"
          }
        ],
        "description": "Sets the position of the particle emitter.",
        "name": "SetPos",
        "parent": "CLuaEmitter",
        "realms": [
          "client"
        ]
      }
    ],
    "name": "CLuaEmitter"
  },
  {
    "description": "This class is essentially what controls a <page>NextBot</page> NPC. You can access it in a <page>NextBot</page> NPC by using **self.loco** variable.",
    "functions": [
      {
        "arguments": [
          {
            "description": "The vector we want to get to.",
            "name": "goal",
            "type": "Vector"
          },
          {
            "description": "How influential the movement should be, in case of this function being called multiple times in between physical movements of the entity.\n\nIf unsure then set this to `1`.",
            "name": "goalWeight",
            "type": "number"
          }
        ],
        "description": "Moves the <page text=\"NextBot\">NextBot</page> incrementally closer to the provided goal location.\n\nEach time this function is called, the NextBot moves towards the goal position passed as an argument by the amount previously set by <page>CLuaLocomotion:SetDesiredSpeed</page>.\n\nTo achieve smooth movement, this function must be called frequently.\nThis is commonly accomplished by calling it in the <page>ENTITY:Think</page> hook.",
        "name": "Approach",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Removes the stuck status from the bot",
        "name": "ClearStuck",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The vector we want to face",
            "name": "goal",
            "type": "Vector"
          }
        ],
        "description": "Sets the direction we want to face",
        "name": "FaceTowards",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Returns the acceleration speed",
        "name": "GetAcceleration",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Current acceleration speed",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns whether the Nextbot is allowed to avoid obstacles or not.",
        "name": "GetAvoidAllowed",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether this bot is allowed to try to avoid obstacles.",
            "name": "allowed",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the Nextbot is allowed to climb or not.",
        "name": "GetClimbAllowed",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether this bot is allowed to climb.",
            "name": "allowed",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the current acceleration as a vector",
        "name": "GetCurrentAcceleration",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Current acceleration",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Gets the height the bot is scared to fall from",
        "name": "GetDeathDropHeight",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Current death drop height",
            "type": "number"
          }
        ]
      },
      {
        "description": "Gets the deceleration speed",
        "name": "GetDeceleration",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Current deceleration speed",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the desired movement speed set by <page>CLuaLocomotion:SetDesiredSpeed</page>",
        "name": "GetDesiredSpeed",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The desired movement speed.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the locomotion's gravity.",
        "name": "GetGravity",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The gravity.",
            "name": "gravity",
            "type": "number"
          }
        ]
      },
      {
        "description": "Return unit vector in XY plane describing our direction of motion - even if we are currently not moving",
        "name": "GetGroundMotionVector",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "A vector representing the X and Y movement",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the current ground normal.",
        "name": "GetGroundNormal",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The current ground normal.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns whether the Nextbot is allowed to jump gaps or not.",
        "name": "GetJumpGapsAllowed",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether this bot is allowed to jump gaps.",
            "name": "allowed",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Gets the height of the bot's jump",
        "name": "GetJumpHeight",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Current jump height",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns maximum jump height of this <page>CLuaLocomotion</page>.",
        "name": "GetMaxJumpHeight",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The maximum jump height.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the max rate at which the NextBot can visually rotate.",
        "name": "GetMaxYawRate",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Maximum yaw rate",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the <page>NextBot</page> this locomotion is associated with.",
        "name": "GetNextBot",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The nextbot",
            "type": "NextBot"
          }
        ]
      },
      {
        "description": "Gets the max height the bot can step up",
        "name": "GetStepHeight",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Current step height",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the current movement velocity as a vector",
        "name": "GetVelocity",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Current velocity",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The area to test",
            "name": "area",
            "type": "CNavArea"
          }
        ],
        "description": "Returns whether this <page>CLuaLocomotion</page> can reach and/or traverse/move in given <page>CNavArea</page>.",
        "name": "IsAreaTraversable",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether this <page>CLuaLocomotion</page> can traverse given <page>CNavArea</page>.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns true if we're trying to move.",
        "name": "IsAttemptingToMove",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether we're trying to move or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns true of the locomotion engine is jumping or climbing",
        "name": "IsClimbingOrJumping",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether we're climbing or jumping or not",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the nextbot this locomotion is attached to is on ground or not.",
        "name": "IsOnGround",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the nextbot is on ground or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns true if we're stuck",
        "name": "IsStuck",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether we're stuck or not",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether or not the target in question is on a ladder or not.",
        "name": "IsUsingLadder",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "If the target is on a ladder or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "default": "ACT_JUMP",
            "description": "The activity to use as the jumping animation.",
            "name": "act",
            "type": "number"
          }
        ],
        "description": "Makes the bot jump. It must be on ground (<page>Entity:IsOnGround</page>) and its model must have `ACT_JUMP` activity.",
        "name": "Jump",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "landingGoal",
            "type": "Vector"
          },
          {
            "description": "",
            "name": "landingForward",
            "type": "Vector"
          }
        ],
        "description": "Makes the bot jump across a gap. The bot must be on ground (<page>Entity:IsOnGround</page>) and its model must have `ACT_JUMP` activity.",
        "name": "JumpAcrossGap",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "400",
            "description": "Speed acceleration",
            "name": "speed",
            "type": "number"
          }
        ],
        "description": "Sets the acceleration speed",
        "name": "SetAcceleration",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether this bot should be allowed to try to avoid obstacles.",
            "name": "allowed",
            "type": "boolean"
          }
        ],
        "description": "Sets whether the Nextbot is allowed try to to avoid obstacles or not. This is used during path generation. Works similarly to `nb_allow_avoiding` convar. By default bots are allowed to try to avoid obstacles.",
        "name": "SetAvoidAllowed",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether this bot should be allowed to climb.",
            "name": "allowed",
            "type": "boolean"
          }
        ],
        "description": "Sets whether the Nextbot is allowed to climb or not. This is used during path generation. Works similarly to `nb_allow_climbing` convar. By default bots are allowed to climb.",
        "name": "SetClimbAllowed",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "200",
            "description": "Height",
            "name": "height",
            "type": "number"
          }
        ],
        "description": "Sets the height the bot is scared to fall from.",
        "name": "SetDeathDropHeight",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "400",
            "description": "New deceleration speed.",
            "name": "deceleration",
            "type": "number"
          }
        ],
        "description": "Sets the deceleration speed.",
        "name": "SetDeceleration",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "0",
            "description": "The new desired speed",
            "name": "speed",
            "type": "number"
          }
        ],
        "description": "Sets how far the NextBot will need to move each time <page>CLuaLocomotion:Approach</page> is called to move at given speed.\n\nThe default amount is 0. This means the bot will not move if this value has not been set.",
        "name": "SetDesiredSpeed",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "1000",
            "description": "New gravity to set.",
            "name": "gravity",
            "type": "number"
          }
        ],
        "description": "Sets the locomotion's gravity.\n\n<note>With values 0 or below, or even lower positive values, the nextbot will start to drift sideways, use <page>CLuaLocomotion:SetVelocity</page> to counteract this.</note>",
        "name": "SetGravity",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether this bot should be allowed to jump gaps.",
            "name": "allowed",
            "type": "boolean"
          }
        ],
        "description": "Sets whether the Nextbot is allowed to jump gaps or not. This is used during path generation. Works similarly to `nb_allow_gap_jumping` convar. By default bots are allowed to jump gaps.",
        "name": "SetJumpGapsAllowed",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "58",
            "description": "Height",
            "name": "height",
            "type": "number"
          }
        ],
        "description": "Sets the height of the bot's jump",
        "name": "SetJumpHeight",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "250",
            "description": "Desired new maximum yaw rate",
            "name": "yawRate",
            "type": "number"
          }
        ],
        "description": "Sets the max rate at which the NextBot can visually rotate. This will not affect moving or pathing.",
        "name": "SetMaxYawRate",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "18",
            "description": "Height",
            "name": "height",
            "type": "number"
          }
        ],
        "description": "Sets the max height the bot can step up",
        "name": "SetStepHeight",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "velocity",
            "type": "Vector"
          }
        ],
        "description": "Sets the current movement velocity",
        "name": "SetVelocity",
        "parent": "CLuaLocomotion",
        "realms": [
          "server"
        ]
      }
    ],
    "name": "CLuaLocomotion"
  },
  {
    "description": "List of all possible functions available for Lua particles. This is the object returned by the <page>CLuaEmitter:Add</page> function.",
    "functions": [
      {
        "description": "Returns the air resistance of the particle.",
        "name": "GetAirResistance",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The air resistance of the particle",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the current orientation of the particle.",
        "name": "GetAngles",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The angles of the particle",
            "type": "Angle"
          }
        ]
      },
      {
        "description": "Returns the angular velocity of the particle",
        "name": "GetAngleVelocity",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The angular velocity of the particle",
            "type": "Angle"
          }
        ]
      },
      {
        "description": "Returns the 'bounciness' of the particle.",
        "name": "GetBounce",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The 'bounciness' of the particle\n\n2 means it will gain 100% of its previous velocity,\n\n\n1 means it will not lose velocity,\n\n\n0.5 means it will lose half of its velocity with each bounce.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the color of the particle.",
        "name": "GetColor",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Red part of the color",
            "type": "number"
          },
          {
            "description": "Green part of the color",
            "type": "number"
          },
          {
            "description": "Blue part of the color",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the amount of time in seconds after which the particle will be destroyed.",
        "name": "GetDieTime",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The amount of time in seconds after which the particle will be destroyed",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the alpha value that the particle will reach on its death.",
        "name": "GetEndAlpha",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The alpha value the particle will fade to",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the length that the particle will reach on its death.",
        "name": "GetEndLength",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The length the particle will reach",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the size that the particle will reach on its death.",
        "name": "GetEndSize",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The size the particle will reach",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the gravity of the particle.",
        "name": "GetGravity",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The gravity of the particle.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the 'life time' of the particle, how long the particle existed since its creation.\n\nThis value will always be between 0 and <page>CLuaParticle:GetDieTime</page>.\n\n\nIt changes automatically as time goes.\n\nIt can be manipulated using <page>CLuaParticle:SetLifeTime</page>.\n\n\nIf the life time of the particle will be more than <page>CLuaParticle:GetDieTime</page>, it will be removed.",
        "name": "GetLifeTime",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "How long the particle existed, in seconds.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the current material of the particle.",
        "name": "GetMaterial",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The material.",
            "name": "mat",
            "type": "IMaterial"
          }
        ]
      },
      {
        "description": "Returns the absolute position of the particle.",
        "name": "GetPos",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The absolute position of the particle.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the current rotation of the particle in radians, this should only be used for 2D particles.",
        "name": "GetRoll",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The current rotation of the particle in radians",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the current rotation speed of the particle in radians, this should only be used for 2D particles.",
        "name": "GetRollDelta",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The current rotation speed of the particle in radians",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the alpha value which the particle has when it's created.",
        "name": "GetStartAlpha",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The alpha value which the particle has when it's created.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the length which the particle has when it's created.",
        "name": "GetStartLength",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The length which the particle has when it's created.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the size which the particle has when it's created.",
        "name": "GetStartSize",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The size which the particle has when it's created.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the current velocity of the particle.",
        "name": "GetVelocity",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The current velocity of the particle.",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "New air resistance.",
            "name": "airResistance",
            "type": "number"
          }
        ],
        "description": "Sets the air resistance of the the particle.",
        "name": "SetAirResistance",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "New angle.",
            "name": "ang",
            "type": "Angle"
          }
        ],
        "description": "Sets the angles of the particle.",
        "name": "SetAngles",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "New angular velocity.",
            "name": "angVel",
            "type": "Angle"
          }
        ],
        "description": "Sets the angular velocity of the the particle.",
        "name": "SetAngleVelocity",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "New 'bounciness' of the particle\n\n2 means it will gain 100% of its previous velocity,\n\n\n1 means it will not lose velocity,\n\n\n0.5 means it will lose half of its velocity with each bounce.",
            "name": "bounce",
            "type": "number"
          }
        ],
        "description": "Sets the 'bounciness' of the the particle.",
        "name": "SetBounce",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether the particle should collide with the world or not",
            "name": "shouldCollide",
            "type": "boolean"
          }
        ],
        "description": "Sets the whether the particle should collide with the world or not.",
        "name": "SetCollide",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The collision callback.\n\n<callback>\n<arg type=\"CLuaParticle\" name=\"particle\">The particle itself</arg>\n<arg type=\"Vector\" name=\"hitPos\">Position of the collision</arg>\n<arg type=\"Vector\" name=\"hitNormal\">Direction of the collision, perpendicular to the hit surface</arg>\n</callback>",
            "name": "collideFunc",
            "type": "function"
          }
        ],
        "description": "Sets the function that gets called whenever the particle collides with the world.",
        "name": "SetCollideCallback",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The red component.",
            "name": "r",
            "type": "number"
          },
          {
            "description": "The green component.",
            "name": "g",
            "type": "number"
          },
          {
            "description": "The blue component.",
            "name": "b",
            "type": "number"
          }
        ],
        "description": "Sets the color of the particle.",
        "name": "SetColor",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new die time.",
            "name": "dieTime",
            "type": "number"
          }
        ],
        "description": "Sets the time where the particle will be removed.",
        "name": "SetDieTime",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new alpha value of the particle that it will reach when it dies.",
            "name": "endAlpha",
            "type": "number"
          }
        ],
        "description": "Sets the alpha value of the particle that it will reach when it dies.",
        "name": "SetEndAlpha",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new length of the particle that it will reach when it dies.",
            "name": "endLength",
            "type": "number"
          }
        ],
        "description": "Sets the length of the particle that it will reach when it dies.",
        "name": "SetEndLength",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new size of the particle that it will reach when it dies.",
            "name": "endSize",
            "type": "number"
          }
        ],
        "description": "Sets the size of the particle that it will reach when it dies.",
        "name": "SetEndSize",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The directional gravity.",
            "name": "gravity",
            "type": "Vector"
          }
        ],
        "description": "Sets the directional gravity aka. acceleration of the particle.",
        "name": "SetGravity",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new life time of the particle.",
            "name": "lifeTime",
            "type": "number"
          }
        ],
        "description": "Sets the 'life time' of the particle, how long the particle existed since its creation.\n\nThis value should always be between 0 and <page>CLuaParticle:GetDieTime</page>.\n\n\nIt changes automatically as time goes.\n\n\nIf the life time of the particle will be more than <page>CLuaParticle:GetDieTime</page>, it will be removed.",
        "name": "SetLifeTime",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether the particle should be affected by lighting.",
            "name": "useLighting",
            "type": "boolean"
          }
        ],
        "description": "Sets whether the particle should be affected by lighting.",
        "name": "SetLighting",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new material to set. Can also be a string.",
            "name": "mat",
            "type": "IMaterial"
          }
        ],
        "description": "Sets the material of the particle.",
        "name": "SetMaterial",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "Next think time.",
            "name": "nextThink",
            "type": "number"
          }
        ],
        "description": "Sets when the particles think function should be called next, this uses the synchronized server time returned by <page>Global.CurTime</page>.",
        "name": "SetNextThink",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new particle position.",
            "name": "pos",
            "type": "Vector"
          }
        ],
        "description": "Sets the absolute position of the particle.",
        "name": "SetPos",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new rotation of the particle in radians.",
            "name": "roll",
            "type": "number"
          }
        ],
        "description": "Sets the roll of the particle in radians. This should only be used for 2D particles.",
        "name": "SetRoll",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new rotation speed of the particle in radians.",
            "name": "rollDelta",
            "type": "number"
          }
        ],
        "description": "Sets the rotation speed of the particle in radians. This should only be used for 2D particles.",
        "name": "SetRollDelta",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "Initial alpha.",
            "name": "startAlpha",
            "type": "number"
          }
        ],
        "description": "Sets the initial alpha value of the particle.",
        "name": "SetStartAlpha",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "Initial length.",
            "name": "startLength",
            "type": "number"
          }
        ],
        "description": "Sets the initial length value of the particle.",
        "name": "SetStartLength",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "Initial size.",
            "name": "startSize",
            "type": "number"
          }
        ],
        "description": "Sets the initial size value of the particle.",
        "name": "SetStartSize",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "Think function.\n\n<callback>\n<arg type=\"CLuaParticle\" name=\"particle\">The particle the think hook is set on</arg>\n</callback>",
            "name": "thinkFunc",
            "type": "function"
          }
        ],
        "description": "Sets the think function of the particle.",
        "name": "SetThinkFunction",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new velocity of the particle.",
            "name": "vel",
            "type": "Vector"
          }
        ],
        "description": "Sets the velocity of the particle.",
        "name": "SetVelocity",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "default": "false",
            "description": "Use velocity scaling.",
            "name": "doScale",
            "type": "boolean"
          }
        ],
        "description": "Scales the velocity based on the particle speed.",
        "name": "SetVelocityScale",
        "parent": "CLuaParticle",
        "realms": [
          "client"
        ]
      }
    ],
    "name": "CLuaParticle"
  },
  {
    "description": "A class used to store the inputs from <page>CUserCmd</page> and other information related to the current movement simulation, such as velocity, position and so on.\n\nThis can only be accessed during <page>GM:SetupMove</page> , <page>GM:Move</page> , <page>GM:PlayerTick</page> and <page>GM:FinishMove</page>.",
    "functions": [
      {
        "arguments": [
          {
            "description": "Keys to add, see <page>Enums/IN</page>",
            "name": "keys",
            "type": "number"
          }
        ],
        "description": "Adds keys to the move data, as if player pressed them.",
        "name": "AddKey",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Gets the aim angle. Seems to be same as <page>CMoveData:GetAngles</page>.",
        "name": "GetAbsMoveAngles",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Aiming angle",
            "type": "Angle"
          }
        ]
      },
      {
        "description": "Gets the aim angle. On client is the same as <page>Entity:GetAngles</page>.",
        "name": "GetAngles",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Aiming angle",
            "type": "Angle"
          }
        ]
      },
      {
        "description": "Gets which buttons are down",
        "name": "GetButtons",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "An integer representing which buttons are down, see <page>Enums/IN</page>",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the center of the player movement constraint. See <page>CMoveData:SetConstraintCenter</page>.",
        "name": "GetConstraintCenter",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The constraint origin.",
            "name": "pos",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the radius that constrains the players movement. See <page>CMoveData:SetConstraintRadius</page>.",
        "name": "GetConstraintRadius",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The constraint radius",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the player movement constraint speed scale. See <page>CMoveData:SetConstraintSpeedScale</page>.",
        "name": "GetConstraintSpeedScale",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The constraint speed scale",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the width (distance from the edge of the radius, inward) where the actual movement constraint functions.",
        "name": "GetConstraintWidth",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The constraint width",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns an internal player movement variable `m_outWishVel`.",
        "name": "GetFinalIdealVelocity",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "name": "idealVel",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns an internal player movement variable `m_outJumpVel`.",
        "name": "GetFinalJumpVelocity",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "name": "jumpVel",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns an internal player movement variable `m_outStepHeight`.",
        "name": "GetFinalStepHeight",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "name": "stepHeight",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the players forward speed.",
        "name": "GetForwardSpeed",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "speed",
            "type": "number"
          }
        ]
      },
      {
        "description": "Gets the number passed to \"impulse\" console command",
        "name": "GetImpulseCommand",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The impulse",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the maximum client speed of the player",
        "name": "GetMaxClientSpeed",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The maximum client speed",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the maximum speed of the player.",
        "name": "GetMaxSpeed",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The maximum speed",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the angle the player is moving at. For more info, see <page>CMoveData:SetMoveAngles</page>.",
        "name": "GetMoveAngles",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The move direction",
            "type": "Angle"
          }
        ]
      },
      {
        "description": "Gets the aim angle. Only works clientside, server returns same as <page>CMoveData:GetAngles</page>.",
        "name": "GetOldAngles",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The aim angle",
            "type": "Angle"
          }
        ]
      },
      {
        "description": "Get which buttons were down last frame",
        "name": "GetOldButtons",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "An integer representing which buttons were down, see <page>Enums/IN</page>",
            "type": "number"
          }
        ]
      },
      {
        "description": "Gets the player's position.",
        "name": "GetOrigin",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The player's position.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the strafe speed of the player.",
        "name": "GetSideSpeed",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "speed",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the vertical speed of the player. ( Z axis of <page>CMoveData:GetVelocity</page> )",
        "name": "GetUpSpeed",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Vertical speed",
            "type": "number"
          }
        ]
      },
      {
        "description": "Gets the players velocity.\n\n<bug issue=\"3413\">This will return Vector(0,0,0) sometimes when walking on props.</bug>",
        "name": "GetVelocity",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The players velocity",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key to test, see <page>Enums/IN</page>",
            "name": "key",
            "type": "number"
          }
        ],
        "description": "Returns whether the key is down or not",
        "name": "KeyDown",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Is the key down or not",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key to test, see <page>Enums/IN</page>",
            "name": "key",
            "type": "number"
          }
        ],
        "description": "Returns whether the key was pressed. If you want to check if the key is held down, try <page>CMoveData:KeyDown</page>",
        "name": "KeyPressed",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Was the key pressed or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "A key to test, see <page>Enums/IN</page>",
            "name": "key",
            "type": "number"
          }
        ],
        "description": "Returns whether the key was released",
        "name": "KeyReleased",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Was the key released or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key to test, see <page>Enums/IN</page>",
            "name": "key",
            "type": "number"
          }
        ],
        "description": "Returns whether the key was down or not.\n\n\n\n\nUnlike <page>CMoveData:KeyDown</page>, it will return false if <page>CMoveData:KeyPressed</page> is true and it will return true if <page>CMoveData:KeyReleased</page> is true.",
        "name": "KeyWasDown",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Was the key down or not",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "New absolute move angles",
            "name": "ang",
            "type": "Angle"
          }
        ],
        "description": "Sets absolute move angles.( ? ) Doesn't seem to do anything.",
        "name": "SetAbsMoveAngles",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The angles.",
            "name": "ang",
            "type": "Angle"
          }
        ],
        "description": "Sets angles.\n\n<bug issue=\"2382\">This function does nothing.</bug>",
        "name": "SetAngles",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "A number representing which buttons are down, see <page>Enums/IN</page>",
            "name": "buttons",
            "type": "number"
          }
        ],
        "description": "Sets the pressed buttons on the move data",
        "name": "SetButtons",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The constraint origin.",
            "name": "pos",
            "type": "Vector"
          }
        ],
        "description": "Sets the center of the player movement constraint. See <page>CMoveData:SetConstraintRadius</page>.",
        "name": "SetConstraintCenter",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new constraint radius",
            "name": "radius",
            "type": "number"
          }
        ],
        "description": "Sets the radius that constrains the players movement.\n\nWorks with conjunction of:\n* <page>CMoveData:SetConstraintWidth</page>\n* <page>CMoveData:SetConstraintSpeedScale</page>\n* <page>CMoveData:SetConstraintCenter</page>",
        "name": "SetConstraintRadius",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The constraint speed scale",
            "name": "",
            "type": "number"
          }
        ],
        "description": "Sets the player movement constraint speed scale. This will be applied to the player within the <page text=\"constraint radius\">CMoveData:SetConstraintRadius</page> when approaching its edge.",
        "name": "SetConstraintSpeedScale",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The constraint width",
            "name": "",
            "type": "number"
          }
        ],
        "description": "Sets  the width (distance from the edge of the <page text=\"radius\">CMoveData:SetConstraintRadius</page>, inward) where the actual movement constraint functions.",
        "name": "SetConstraintWidth",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "idealVel",
            "type": "Vector"
          }
        ],
        "description": "Sets an internal player movement variable `m_outWishVel`.",
        "name": "SetFinalIdealVelocity",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "jumpVel",
            "type": "Vector"
          }
        ],
        "description": "Sets an internal player movement variable `m_outJumpVel`.",
        "name": "SetFinalJumpVelocity",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "stepHeight",
            "type": "number"
          }
        ],
        "description": "Sets an internal player movement variable `m_outStepHeight`.",
        "name": "SetFinalStepHeight",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "New forward speed",
            "name": "speed",
            "type": "number"
          }
        ],
        "description": "Sets players forward speed.",
        "name": "SetForwardSpeed",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The impulse to set",
            "name": "impulse",
            "type": "number"
          }
        ],
        "description": "Sets the impulse command. This isn't actually utilised in the engine anywhere.",
        "name": "SetImpulseCommand",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new maximum speed",
            "name": "maxSpeed",
            "type": "number"
          }
        ],
        "description": "Sets the maximum player speed. Player won't be able to run or sprint faster then this value.\n\n\nThis also automatically sets <page>CMoveData:SetMaxSpeed</page> when used in the <page>GM:SetupMove</page> hook. You must set it manually in the <page>GM:Move</page> hook.\n\n\nThis must be called on both client and server to avoid prediction errors.\n\n\nThis will **not** reduce speed in air.\n<note>Setting this to 0 will not make the player stationary. It won't do anything.</note>",
        "name": "SetMaxClientSpeed",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new maximum speed",
            "name": "maxSpeed",
            "type": "number"
          }
        ],
        "description": "Sets the maximum speed of the player. This must match with <page>CMoveData:SetMaxClientSpeed</page> both, on server and client.\n\n\nDoesn't seem to be doing anything on it's own, use <page>CMoveData:SetMaxClientSpeed</page> instead.",
        "name": "SetMaxSpeed",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The aim direction.",
            "name": "dir",
            "type": "Angle"
          }
        ],
        "description": "Sets the serverside move angles, making the movement keys act as if player was facing that direction.\n\nThis function is predicted, and should be called shared with matching data on client and server.",
        "name": "SetMoveAngles",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The old angles",
            "name": "aimAng",
            "type": "Angle"
          }
        ],
        "description": "Sets old aim angles. ( ? ) Doesn't seem to be doing anything.",
        "name": "SetOldAngles",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "A number representing which buttons were down, see <page>Enums/IN</page>",
            "name": "buttons",
            "type": "number"
          }
        ],
        "description": "Sets the 'old' pressed buttons on the move data. These buttons are used to work out which buttons have been released, which have just been pressed and which are being held down.",
        "name": "SetOldButtons",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The position",
            "name": "pos",
            "type": "Vector"
          }
        ],
        "description": "Sets the players position.",
        "name": "SetOrigin",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Strafe speed",
            "name": "speed",
            "type": "number"
          }
        ],
        "description": "Sets players strafe speed.",
        "name": "SetSideSpeed",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Vertical speed to set",
            "name": "speed",
            "type": "number"
          }
        ],
        "description": "Sets vertical speed of the player. ( Z axis of <page>CMoveData:SetVelocity</page> )",
        "name": "SetUpSpeed",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The velocity to set",
            "name": "velocity",
            "type": "Vector"
          }
        ],
        "description": "Sets the player's velocity",
        "name": "SetVelocity",
        "parent": "CMoveData",
        "realms": [
          "client",
          "server"
        ]
      }
    ],
    "name": "CMoveData"
  },
  {
    "description": "An object returned by <page>navmesh</page> functions.",
    "functions": [
      {
        "arguments": [
          {
            "description": "The attributes to add, as a bitflag. See <page>Enums/NAV_MESH</page>.",
            "name": "attribs",
            "type": "number"
          }
        ],
        "description": "Adds given attributes to given <page>CNavArea</page>. See <page>CNavArea:HasAttributes</page> and <page>CNavArea:SetAttributes</page>.",
        "name": "AddAttributes",
        "parent": "CNavArea",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The position on the nav area",
            "name": "pos",
            "type": "Vector"
          },
          {
            "default": "7",
            "description": "Flags describing what kind of hiding spot this is.\n* 0 = None (Not recommended)\n* 1 = In Cover/basically a hiding spot, in a corner with good hard cover nearby\n* 2 = good sniper spot, had at least one decent sniping corridor\n* 4 = perfect sniper spot, can see either very far, or a large area, or both\n* 8 = exposed, spot in the open, usually on a ledge or cliff\n\nValues over 255 will be clamped.",
            "name": "flags",
            "type": "number"
          }
        ],
        "description": "Adds a hiding spot onto this nav area.\n\nThere's a limit of 255 hiding spots per area.",
        "name": "AddHidingSpot",
        "parent": "CNavArea",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Adds this <page>CNavArea</page> to the closed list, a list of areas that have been checked by A* pathfinding algorithm.\n\nUsed in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).\n\n\nMore information can be found on the <page>Simple Pathfinding</page> page.",
        "name": "AddToClosedList",
        "parent": "CNavArea",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Adds this <page>CNavArea</page> to the Open List.\n\nUsed in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).\n\n\nMore information can be found on the <page>Simple Pathfinding</page> page.",
        "name": "AddToOpenList",
        "parent": "CNavArea",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Clears the open and closed lists for a new search.\n\nUsed in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).\n\n\nMore information can be found on the <page>Simple Pathfinding</page> page.",
        "name": "ClearSearchLists",
        "parent": "CNavArea",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "navarea",
            "type": "CNavArea"
          }
        ],
        "description": "Returns the height difference between the edges of two connected navareas.",
        "name": "ComputeAdjacentConnectionHeightChange",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The height change",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The position to compute direction towards.",
            "name": "pos",
            "type": "Vector"
          }
        ],
        "description": "Returns the <page>Enums/NavDir</page> direction that the given vector faces on this <page>CNavArea</page>.",
        "name": "ComputeDirection",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The direction the vector is in relation to this <page>CNavArea</page>. See <page>Enums/NavDir</page>.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The nav area to test against.",
            "name": "navArea",
            "type": "CNavArea"
          }
        ],
        "description": "Returns the height difference on the Z axis of the two <page>CNavArea</page>s. This is calculated from the center most point on both <page>CNavArea</page>s.",
        "name": "ComputeGroundHeightChange",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The ground height change.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page>CNavArea</page> or <page>CNavLadder</page> this area leads to.",
            "name": "area",
            "type": "CNavArea"
          }
        ],
        "description": "Connects this <page>CNavArea</page> to another <page>CNavArea</page> or <page>CNavLadder</page> with a one way connection. ( From this area to the target )\n\nSee <page>CNavLadder:ConnectTo</page> for making the connection from ladder to area.",
        "name": "ConnectTo",
        "parent": "CNavArea",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The position to test.",
            "name": "pos",
            "type": "Vector"
          }
        ],
        "description": "Returns true if this <page>CNavArea</page> contains the given vector.",
        "name": "Contains",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "True if the vector was inside and false otherwise.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page>CNavArea</page> or <page>CNavLadder</page> this to disconnect from.",
            "name": "area",
            "type": "CNavArea"
          }
        ],
        "description": "Disconnects this nav area from given area or ladder. (Only disconnects one way)",
        "name": "Disconnect",
        "parent": "CNavArea",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Draws this navarea on debug overlay.",
        "name": "Draw",
        "parent": "CNavArea",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Draws the hiding spots on debug overlay. This includes sniper/exposed spots too!",
        "name": "DrawSpots",
        "parent": "CNavArea",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "nil",
            "description": "If set, will only return areas in the specified direction. See <page>Enums/NavDir</page>.",
            "name": "dir",
            "type": "number"
          }
        ],
        "description": "Returns a list of all the <page>CNavArea</page>s that have a (one and two way) connection **from** this <page>CNavArea</page> and their pre-computed distances.\n\nIf an area has a one-way incoming connection to this <page>CNavArea</page>, then it will **not** be returned from this function, use <page>CNavArea:GetIncomingConnectionDistances</page> to get all one-way incoming connections.",
        "name": "GetAdjacentAreaDistances",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "A list of tables in the following format:\n* <page>CNavArea</page> **area** - the area that is connected to this area.\n* <page>number</page> **dist** - Distance from the area to this area.\n* <page>number</page> **dir** - Direction in which the area is in relative to this area.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns a list of all the <page>CNavArea</page>s that have a  (one and two way) connection **from** this <page>CNavArea</page>.\n\nIf an area has a one-way incoming connection to this <page>CNavArea</page>, then it will **not** be returned from this function, use <page>CNavArea:GetIncomingConnections</page> to get all one-way incoming connections.\n\nSee <page>CNavArea:GetAdjacentAreasAtSide</page> for a function that only returns areas from one side/direction.",
        "name": "GetAdjacentAreas",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "A list of all <page>CNavArea</page> that have a (one and two way) connection **from** this <page>CNavArea</page>.\n\nReturns an empty table if this area has no outgoing connections to any other areas.",
            "type": "table"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The direction, in which to look for <page>CNavArea</page>s, see <page>Enums/NavDir</page>.",
            "name": "navDir",
            "type": "number"
          }
        ],
        "description": "Returns a table of all the <page>CNavArea</page>s that have a ( one and two way ) connection **from** this <page>CNavArea</page> in given direction.\n\nIf an area has a one-way incoming connection to this <page>CNavArea</page>, then it will **not** be returned from this function, use <page>CNavArea:GetIncomingConnections</page> to get all incoming connections.\n\nSee <page>CNavArea:GetAdjacentAreas</page> for a function that returns all areas from all sides/directions.",
        "name": "GetAdjacentAreasAtSide",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "A table of all <page>CNavArea</page> that have a ( one and two way ) connection **from** this <page>CNavArea</page> in given direction.\n\nReturns an empty table if this area has no outgoing connections to any other areas in given direction.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns the amount of <page>CNavArea</page>s that have a connection ( one and two way ) **from** this <page>CNavArea</page>.\n\nSee <page>CNavArea:GetAdjacentCountAtSide</page> for a function that only returns area count from one side/direction.",
        "name": "GetAdjacentCount",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The amount of <page>CNavArea</page>s that have a connection ( one and two way ) **from** this <page>CNavArea</page>.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The direction, in which to look for <page>CNavArea</page>s, see <page>Enums/NavDir</page>.",
            "name": "navDir",
            "type": "number"
          }
        ],
        "description": "Returns the amount of <page>CNavArea</page>s that have a connection ( one or two way ) **from** this <page>CNavArea</page> in given direction.\n\nSee <page>CNavArea:GetAdjacentCount</page> for a function that returns <page>CNavArea</page> count from/in all sides/directions.",
        "name": "GetAdjacentCountAtSide",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The amount of <page>CNavArea</page>s that have a connection ( one or two way ) **from** this <page>CNavArea</page> in given direction.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the attribute mask for the given <page>CNavArea</page>.",
        "name": "GetAttributes",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Attribute mask for this <page>CNavArea</page>, see <page>Enums/NAV_MESH</page> for the specific flags.\n\n\n<note>A navmesh that was generated with nav_quicksave set to 1 will have all <page>CNavArea</page>s attribute masks set to 0</note>",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the center most vector point for the given <page>CNavArea</page>.",
        "name": "GetCenter",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The center vector.",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The given position, can be outside of the Nav Area bounds.",
            "name": "pos",
            "type": "Vector"
          }
        ],
        "description": "Returns the closest point of this Nav Area from the given position.",
        "name": "GetClosestPointOnArea",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The closest position on this Nav Area.",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The target corner to get the position of, takes <page>Enums/NavCorner</page>.",
            "name": "cornerid",
            "type": "number"
          }
        ],
        "description": "Returns the vector position of the corner for the given <page>CNavArea</page>.",
        "name": "GetCorner",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The corner position.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the cost from starting area this area when pathfinding. Set by <page>CNavArea:SetCostSoFar</page>.\n\nUsed in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).\n\n\nMore information can be found on the <page>Simple Pathfinding</page> page.",
        "name": "GetCostSoFar",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The cost so far.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns a table of very bad hiding spots in this area.\n\nSee also <page>CNavArea:GetHidingSpots</page>.",
        "name": "GetExposedSpots",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "A table of <page>Vector</page>s",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns size info about the nav area.",
        "name": "GetExtentInfo",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Returns a table containing the following keys:\n* <page>Vector</page> hi|\n* <page>Vector</page> lo|\n* <page>number</page> SizeX|\n* <page>number</page> SizeY|\n* <page>number</page> SizeZ|",
            "type": "table"
          }
        ]
      },
      {
        "arguments": [
          {
            "default": "1",
            "description": "The type of spots to include.\n\n* 0 = None (Not recommended)\n* 1 = In Cover/basically a hiding spot, in a corner with good hard cover nearby\n* 2 = good sniper spot, had at least one decent sniping corridor\n* 4 = perfect sniper spot, can see either very far, or a large area, or both\n* 8 = exposed, spot in the open, usually on a ledge or cliff, same as GetExposedSpots\n* Values over 255 and below 0 will be clamped.",
            "name": "type",
            "type": "number"
          }
        ],
        "description": "Returns a table of good hiding spots in this area.\n\nSee also <page>CNavArea:GetExposedSpots</page>.",
        "name": "GetHidingSpots",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "A table of <page>Vector</page>s",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns this <page>CNavArea</page>s unique ID.",
        "name": "GetID",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The unique ID.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "default": "nil",
            "description": "If set, will only return areas in the specified direction. See <page>Enums/NavDir</page>.",
            "name": "dir",
            "type": "number"
          }
        ],
        "description": "Returns a table of all the <page>CNavArea</page>s that have a one-way connection **to** this <page>CNavArea</page> and their pre-computed distances.\n\nIf a <page>CNavArea</page> has a two-way connection **to or from** this <page>CNavArea</page> then it will not be returned from this function, use <page>CNavArea:GetAdjacentAreaDistances</page> to get outgoing (one and two way) connections.",
        "name": "GetIncomingConnectionDistances",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "A list of tables in the following format:\n* <page>CNavArea</page> **area** - the area that is connected to this area.\n* <page>number</page> **dist** - Distance from the area to this area.\n* <page>number</page> **dir** - Direction in which the area is in relative to this area.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns a table of all the <page>CNavArea</page>s that have a one-way connection **to** this <page>CNavArea</page>.\n\nIf a <page>CNavArea</page> has a two-way connection **to or from** this <page>CNavArea</page> then it will not be returned from this function, use <page>CNavArea:GetAdjacentAreas</page> to get outgoing ( one and two way ) connections.\n\nSee <page>CNavArea:GetIncomingConnectionsAtSide</page> for a function that returns one-way incoming connections from  only one side/direction.",
        "name": "GetIncomingConnections",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "A table of all <page>CNavArea</page>s with one-way connection **to** this <page>CNavArea</page>.\n\nReturns an empty table if there are no one-way incoming connections **to** this <page>CNavArea</page>.",
            "type": "table<CNavArea>"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The direction, from which to look for <page>CNavArea</page>s, see <page>Enums/NavDir</page>.",
            "name": "navDir",
            "type": "number"
          }
        ],
        "description": "Returns a table of all the <page>CNavArea</page>s that have a one-way connection **to** this <page>CNavArea</page> from given direction.\n\nIf a <page>CNavArea</page> has a two-way connection **to or from** this <page>CNavArea</page> then it will not be returned from this function, use <page>CNavArea:GetAdjacentAreas</page> to get outgoing ( one and two way ) connections.\n\nSee <page>CNavArea:GetIncomingConnections</page> for a function that returns one-way incoming connections from  all sides/directions.",
        "name": "GetIncomingConnectionsAtSide",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "A table of all <page>CNavArea</page>s with one-way connection **to** this <page>CNavArea</page> from given direction.\n\nReturns an empty table if there are no one-way incoming connections **to** this <page>CNavArea</page> from given direction.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns all <page>CNavLadder</page>s that have a ( one or two way ) connection **from** this <page>CNavArea</page>.\n\nSee <page>CNavArea:GetLaddersAtSide</page> for a function that only returns <page>CNavLadder</page>s in given direction.",
        "name": "GetLadders",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The <page>CNavLadder</page>s that have a ( one or two way ) connection **from** this <page>CNavArea</page>.",
            "type": "table<CNavLadder>"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The direction, in which to look for <page>CNavLadder</page>s.\n\n0 = Up ( LadderDirectionType::LADDER_UP )\n1 = Down ( LadderDirectionType::LADDER_DOWN )",
            "name": "navDir",
            "type": "number"
          }
        ],
        "description": "Returns all <page>CNavLadder</page>s that have a ( one or two way ) connection **from** ( one and two way ) this <page>CNavArea</page> in given direction.\n\nSee <page>CNavArea:GetLadders</page> for a function that returns <page>CNavLadder</page> from/in all sides/directions.",
        "name": "GetLaddersAtSide",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The <page>CNavLadder</page>s that have a ( one or two way ) connection **from** this <page>CNavArea</page> in given direction.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns the parent <page>CNavArea</page>",
        "name": "GetParent",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The parent <page>CNavArea</page>",
            "type": "CNavArea"
          }
        ]
      },
      {
        "description": "Returns how this <page>CNavArea</page> is connected to its parent.",
        "name": "GetParentHow",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "See <page>Enums/NavTraverseType</page>",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the Place of the nav area.",
        "name": "GetPlace",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The place of the nav area, or no value if it doesn't have a place set.",
            "type": "string"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The direction, in which to look for <page>CNavArea</page>s, see <page>Enums/NavDir</page>.",
            "name": "navDir",
            "type": "number"
          }
        ],
        "description": "Returns a random <page>CNavArea</page> that has an outgoing ( one or two way ) connection **from** this <page>CNavArea</page> in given direction.",
        "name": "GetRandomAdjacentAreaAtSide",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The random <page>CNavArea</page> that has an outgoing ( one or two way ) connection **from** this <page>CNavArea</page> in given direction, if any.",
            "type": "CNavArea"
          }
        ]
      },
      {
        "description": "Returns a random point on the nav area.",
        "name": "GetRandomPoint",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The random point on the nav area.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the width this Nav Area.",
        "name": "GetSizeX",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the height of this Nav Area.",
        "name": "GetSizeY",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns all possible path segments through a <page>CNavArea</page>, and the dangerous spots to look at as we traverse that path segment.",
        "name": "GetSpotEncounters",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "A sequential list of spot encounters in the following format:\n* <page>CNavArea</page> **from** - What <page>CNavArea</page> the path segment is coming from\n* <page>Vector</page> **from_pos** - Origin position of the path segment\n* <page>number</page> **from_dir** - Source <page>Enums/NavDir</page> direction of the path segment\n* <page>CNavArea</page> **to** - What <page>CNavArea</page> the path segment is going towards\n* <page>Vector</page> **to_pos** - Target position of the path segment\n* <page>number</page> **to_dir** - Target <page>Enums/NavDir</page> direction of the path segment\n* <page>table</page> **spots** - List of spots to look at, a sequential list of the following structures:\n* <page>Vector</page> **pos** - Position of the spot\n* <page>table</page> **flags** - Type of spot this is\n* <page>CNavArea</page> **area** - The nav area the spot belongs to",
            "name": "encounters",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns the total cost when passing from starting area to the goal area through this node. Set by <page>CNavArea:SetTotalCost</page>.\n\nUsed in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).\n\n\nMore information can be found on the <page>Simple Pathfinding</page> page.",
        "name": "GetTotalCost",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The total cost",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns all <page>CNavArea</page>s that are visible from this <page>CNavArea</page>.",
        "name": "GetVisibleAreas",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "A sequential table containing all <page>CNavArea</page>s that are visible from this <page>CNavArea</page>.",
            "name": "areas",
            "type": "table"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The position to get the elevation from, the z value from this position is ignored and only the X and Y values are used to this task.",
            "name": "pos",
            "type": "Vector"
          }
        ],
        "description": "Returns the elevation of this Nav Area at the given position.",
        "name": "GetZ",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The elevation.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Attribute mask to check for, see <page>Enums/NAV_MESH</page>",
            "name": "attribs",
            "type": "number"
          }
        ],
        "description": "Returns true if the given <page>CNavArea</page> has this attribute flag set.",
        "name": "HasAttributes",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "True if the <page>CNavArea</page> matches the given mask. False otherwise.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "default": "-2",
            "description": "The team ID to test, -2 = any team.\n\nOnly 2 actual teams are available, 0 and 1.",
            "name": "teamID",
            "type": "number"
          },
          {
            "default": "false",
            "description": "Whether to ignore [func_nav_blocker](https://developer.valvesoftware.com/wiki/Func_nav_blocker) entities.",
            "name": "ignoreNavBlockers",
            "type": "boolean"
          }
        ],
        "description": "Returns whether the nav area is blocked or not, i.e. whether it can be walked through or not.",
        "name": "IsBlocked",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the area is blocked or not",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether this node is in the Closed List.\n\nUsed in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).\n\n\nMore information can be found on the <page>Simple Pathfinding</page> page.",
        "name": "IsClosed",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether this node is in the Closed List.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page>CNavArea</page> to test.",
            "name": "area",
            "type": "CNavArea"
          }
        ],
        "description": "Returns whether this <page>CNavArea</page> can completely (i.e. all corners of this area can see all corners of the given area) see the given <page>CNavArea</page>.",
        "name": "IsCompletelyVisible",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the given area is visible from this area",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page>CNavArea</page> to test against.",
            "name": "navArea",
            "type": "CNavArea"
          }
        ],
        "description": "Returns whether this <page>CNavArea</page> has an outgoing ( one or two way ) connection **to** given <page>CNavArea</page>.\n\nSee <page>CNavArea:IsConnectedAtSide</page> for a function that only checks for outgoing connections in one direction.",
        "name": "IsConnected",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether this <page>CNavArea</page> has an outgoing ( one or two way ) connection **to** given <page>CNavArea</page>.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page>CNavArea</page> to test against.",
            "name": "navArea",
            "type": "CNavArea"
          },
          {
            "description": "The direction, in which to look for the connection. See <page>Enums/NavDir</page>",
            "name": "navDirType",
            "type": "number"
          }
        ],
        "description": "Returns whether this <page>CNavArea</page> has an outgoing ( one or two way ) connection **to** given <page>CNavArea</page> in given direction.\n\nSee <page>CNavArea:IsConnected</page> for a function that checks all sides.",
        "name": "IsConnectedAtSide",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether this <page>CNavArea</page> has an outgoing ( one or two way ) connection **to** given <page>CNavArea</page> in given direction.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The Nav Area to test.",
            "name": "navArea",
            "type": "CNavArea"
          }
        ],
        "description": "Returns whether this Nav Area is in the same plane as the given one.",
        "name": "IsCoplanar",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether we're coplanar or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the <page>CNavArea</page> would damage if traversed, as set by <page>CNavArea:MarkAsDamaging</page>.",
        "name": "IsDamaging",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the area is damaging or not",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether this Nav Area is flat within the tolerance of the **nav_coplanar_slope_limit_displacement** and **nav_coplanar_slope_limit** convars.",
        "name": "IsFlat",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether this CNavArea is mostly flat.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether this area is in the Open List.\n\nUsed in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).\n\n\nMore information can be found on the <page>Simple Pathfinding</page> page.",
        "name": "IsOpen",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether this area is in the Open List.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the Open List is empty or not.\n\nUsed in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).\n\n\nMore information can be found on the <page>Simple Pathfinding</page> page.",
        "name": "IsOpenListEmpty",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the Open List is empty or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The overlapping position to test.",
            "name": "pos",
            "type": "Vector"
          },
          {
            "default": "0",
            "description": "The tolerance of the overlapping, set to 0 for no tolerance.",
            "name": "tolerance",
            "type": "number"
          }
        ],
        "description": "Returns if this position overlaps the Nav Area within the given tolerance.",
        "name": "IsOverlapping",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the given position overlaps the Nav Area or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page>CNavArea</page> to test against.",
            "name": "navArea",
            "type": "CNavArea"
          }
        ],
        "description": "Returns true if this <page>CNavArea</page> is overlapping the given <page>CNavArea</page>.",
        "name": "IsOverlappingArea",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "True if the given <page>CNavArea</page> overlaps this <page>CNavArea</page> at any point.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The position to test.",
            "name": "pos",
            "type": "Vector"
          },
          {
            "default": "NULL",
            "description": "If set, the given entity will be ignored when doing LOS tests",
            "name": "ignoreEnt",
            "type": "Entity"
          }
        ],
        "description": "Returns whether this <page>CNavArea</page> can see given position.",
        "name": "IsPartiallyVisible",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the given position is visible from this area",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page>CNavArea</page> to test.",
            "name": "area",
            "type": "CNavArea"
          }
        ],
        "description": "Returns whether this <page>CNavArea</page> can potentially see the given <page>CNavArea</page>.",
        "name": "IsPotentiallyVisible",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the given area is visible from this area",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns if we're shaped like a square.",
        "name": "IsRoughlySquare",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "If we're a square or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Whether this Nav Area is placed underwater.",
        "name": "IsUnderwater",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether we're underwater or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether this <page>CNavArea</page> is valid or not.",
        "name": "IsValid",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether this <page>CNavArea</page> is valid or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The position to check.",
            "name": "pos",
            "type": "Vector"
          }
        ],
        "description": "Returns whether we can be seen from the given position.",
        "name": "IsVisible",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether we can be seen or not.",
            "type": "boolean"
          },
          {
            "description": "If we can be seen, this is returned with either the center or one of the corners of the Nav Area.",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "default": "-2",
            "description": "TeamID to mark the area as blocked for. `-2` means all teams. Only 2 valid teamIDs are supported: `0` and `1`.",
            "name": "teamID",
            "type": "number"
          }
        ],
        "description": "Marks the area as blocked and unable to be traversed. See <page>CNavArea:IsBlocked</page> and <page>CNavArea:MarkAsUnblocked</page>.",
        "name": "MarkAsBlocked",
        "parent": "CNavArea",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "For how long the area should stay marked as damaging. Multiple calls will overwrite the previous value.",
            "name": "duration",
            "type": "number"
          }
        ],
        "description": "Marks the area as damaging if traversed, for example when, for example having poisonous or no atmosphere, or a temporary fire present. See <page>CNavArea:IsDamaging</page>.",
        "name": "MarkAsDamaging",
        "parent": "CNavArea",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "-2",
            "description": "TeamID to unblock the area for. `-2` means all teams. Only 2 valid teamIDs are supported: `0` and `1`.",
            "name": "teamID",
            "type": "number"
          }
        ],
        "description": "Unblocked this area if it was previously blocked by <page>CNavArea:MarkAsBlocked</page>.",
        "name": "MarkAsUnblocked",
        "parent": "CNavArea",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The corner(s) to drop, uses <page>Enums/NavCorner</page>",
            "name": "corner",
            "type": "number"
          }
        ],
        "description": "Drops a corner or all corners of a <page>CNavArea</page> to the ground below it.",
        "name": "PlaceOnGround",
        "parent": "CNavArea",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Removes a CNavArea from the Open List with the lowest cost to traverse to from the starting node, and returns it.\n\nUsed in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).\n\n\nMore information can be found on the <page>Simple Pathfinding</page> page.",
        "name": "PopOpenList",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The CNavArea from the Open List with the lowest cost to traverse to from the starting node.",
            "type": "CNavArea"
          }
        ]
      },
      {
        "description": "Removes the given nav area.",
        "name": "Remove",
        "parent": "CNavArea",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The attributes to remove, as a bitflag. See <page>Enums/NAV_MESH</page>.",
            "name": "attribs",
            "type": "number"
          }
        ],
        "description": "Removes given attributes from given <page>CNavArea</page>. See also <page>CNavArea:SetAttributes</page>.",
        "name": "RemoveAttributes",
        "parent": "CNavArea",
        "realms": [
          "server"
        ]
      },
      {
        "description": "<deprecated>Does nothing</deprecated>\n\nRemoves this node from the Closed List.\n\nUsed in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).\n\n\nMore information can be found on the <page>Simple Pathfinding</page> page.",
        "name": "RemoveFromClosedList",
        "parent": "CNavArea",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The attributes to set, as a bitflag. See <page>Enums/NAV_MESH</page>.",
            "name": "attribs",
            "type": "number"
          }
        ],
        "description": "Sets the attributes for given <page>CNavArea</page>. See <page>CNavArea:HasAttributes</page>.",
        "name": "SetAttributes",
        "parent": "CNavArea",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The corner to set, uses <page>Enums/NavCorner</page>",
            "name": "corner",
            "type": "number"
          },
          {
            "description": "The new position to set.",
            "name": "position",
            "type": "Vector"
          }
        ],
        "description": "Sets the position of a corner of a nav area.",
        "name": "SetCorner",
        "parent": "CNavArea",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The cost so far",
            "name": "cost",
            "type": "number"
          }
        ],
        "description": "Sets the cost from starting area this area when pathfinding.\n\nUsed in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).\n\n\nMore information can be found on the <page>Simple Pathfinding</page> page.",
        "name": "SetCostSoFar",
        "parent": "CNavArea",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new parent to set",
            "name": "parent",
            "type": "CNavArea"
          },
          {
            "description": "How we get from parent to us using <page>Enums/NavTraverseType</page>",
            "name": "how",
            "type": "number"
          }
        ],
        "description": "Sets the new parent of this <page>CNavArea</page>.",
        "name": "SetParent",
        "parent": "CNavArea",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Set to `\"\"` to remove place from the nav area. There's a limit of 255 characters.",
            "name": "place",
            "type": "string"
          }
        ],
        "description": "Sets the Place of the nav area.\n\nThere is a limit of 256 unique places per `.nav` file.",
        "name": "SetPlace",
        "parent": "CNavArea",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Returns true of operation succeeded, false otherwise.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The total cost of the path to set.\n\nMust be above or equal 0.",
            "name": "cost",
            "type": "number"
          }
        ],
        "description": "Sets the total cost when passing from starting area to the goal area through this node.\n\nUsed in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).\n\n\nMore information can be found on the <page>Simple Pathfinding</page> page.",
        "name": "SetTotalCost",
        "parent": "CNavArea",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Moves this open list to appropriate position based on its <page>CNavArea:GetTotalCost</page> compared to the total cost of other areas in the open list.\n\nUsed in pathfinding via the [A* algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).\n\n\nMore information can be found on the <page>Simple Pathfinding</page> page.",
        "name": "UpdateOnOpenList",
        "parent": "CNavArea",
        "realms": [
          "server"
        ]
      }
    ],
    "name": "CNavArea"
  },
  {
    "description": "An object that represents a ladder for Nextbots.",
    "functions": [
      {
        "arguments": [
          {
            "description": "The area this ladder leads to.",
            "name": "area",
            "type": "CNavArea"
          }
        ],
        "description": "Connects this ladder to a <page>CNavArea</page> with a one way connection. ( From this ladder to the target area ).\n\nSee <page>CNavArea:ConnectTo</page> for making the connection from area to ladder.",
        "name": "ConnectTo",
        "parent": "CNavLadder",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page>CNavArea</page> this to disconnect from.",
            "name": "area",
            "type": "CNavArea"
          }
        ],
        "description": "Disconnects this ladder from given area in a single direction.",
        "name": "Disconnect",
        "parent": "CNavLadder",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Returns the bottom most position of the ladder.",
        "name": "GetBottom",
        "parent": "CNavLadder",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The bottom most position of the ladder.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the bottom area of the <page>CNavLadder</page>.",
        "name": "GetBottomArea",
        "parent": "CNavLadder",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "type": "CNavArea"
          }
        ]
      },
      {
        "description": "Returns this <page>CNavLadder</page>s unique ID.",
        "name": "GetID",
        "parent": "CNavLadder",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The unique ID.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the length of the ladder.",
        "name": "GetLength",
        "parent": "CNavLadder",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The length of the ladder.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the direction of this <page>CNavLadder</page>. ( The direction in which players back will be facing if they are looking directly at the ladder )",
        "name": "GetNormal",
        "parent": "CNavLadder",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The direction of this <page>CNavLadder</page>.",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The Z position in world space coordinates.",
            "name": "height",
            "type": "number"
          }
        ],
        "description": "Returns the world position based on given height relative to the ladder.",
        "name": "GetPosAtHeight",
        "parent": "CNavLadder",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The closest point on the ladder to that height.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the topmost position of the ladder.",
        "name": "GetTop",
        "parent": "CNavLadder",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The topmost position of the ladder.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the top behind <page>CNavArea</page> of the <page>CNavLadder</page>.",
        "name": "GetTopBehindArea",
        "parent": "CNavLadder",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The top behind <page>CNavArea</page> of the <page>CNavLadder</page>.",
            "type": "CNavArea"
          }
        ]
      },
      {
        "description": "Returns the top forward <page>CNavArea</page> of the <page>CNavLadder</page>.",
        "name": "GetTopForwardArea",
        "parent": "CNavLadder",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The top forward <page>CNavArea</page> of the <page>CNavLadder</page>.",
            "type": "CNavArea"
          }
        ]
      },
      {
        "description": "Returns the top left <page>CNavArea</page> of the <page>CNavLadder</page>.",
        "name": "GetTopLeftArea",
        "parent": "CNavLadder",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The top left <page>CNavArea</page> of the <page>CNavLadder</page>.",
            "type": "CNavArea"
          }
        ]
      },
      {
        "description": "Returns the top right <page>CNavArea</page> of the <page>CNavLadder</page>.",
        "name": "GetTopRightArea",
        "parent": "CNavLadder",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The top right <page>CNavArea</page> of the <page>CNavLadder</page>.",
            "type": "CNavArea"
          }
        ]
      },
      {
        "description": "Returns the width of the ladder in Hammer Units.",
        "name": "GetWidth",
        "parent": "CNavLadder",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The width of the ladder in Hammer Units.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page>CNavArea</page> to test against.",
            "name": "navArea",
            "type": "CNavArea"
          },
          {
            "description": "The direction, in which to look for the connection. See <page>Enums/NavDir</page>",
            "name": "navDirType",
            "type": "number"
          }
        ],
        "description": "Returns whether this <page>CNavLadder</page> has an outgoing ( one or two way ) connection **to** given <page>CNavArea</page> in given direction.",
        "name": "IsConnectedAtSide",
        "parent": "CNavLadder",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether this <page>CNavLadder</page> has an outgoing ( one or two way ) connection **to** given <page>CNavArea</page> in given direction.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether this <page>CNavLadder</page> is valid or not.",
        "name": "IsValid",
        "parent": "CNavLadder",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether this <page>CNavLadder</page> is valid or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Removes the given nav ladder.",
        "name": "Remove",
        "parent": "CNavLadder",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "area",
            "type": "CNavArea"
          }
        ],
        "description": "Sets the bottom area of the <page>CNavLadder</page>.",
        "name": "SetBottomArea",
        "parent": "CNavLadder",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "area",
            "type": "CNavArea"
          }
        ],
        "description": "Sets the top behind area of the <page>CNavLadder</page>.",
        "name": "SetTopBehindArea",
        "parent": "CNavLadder",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "area",
            "type": "CNavArea"
          }
        ],
        "description": "Sets the top forward area of the <page>CNavLadder</page>.",
        "name": "SetTopForwardArea",
        "parent": "CNavLadder",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "area",
            "type": "CNavArea"
          }
        ],
        "description": "Sets the top left area of the <page>CNavLadder</page>.",
        "name": "SetTopLeftArea",
        "parent": "CNavLadder",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "area",
            "type": "CNavArea"
          }
        ],
        "description": "Sets the top right area of the <page>CNavLadder</page>.",
        "name": "SetTopRightArea",
        "parent": "CNavLadder",
        "realms": [
          "server"
        ]
      }
    ],
    "name": "CNavLadder"
  },
  {
    "description": "This object represents a .pcf ( Orange Box ) particle system. Created by <page>Entity:CreateParticleEffect</page> and <page>Global.CreateParticleSystem</page>.",
    "functions": [
      {
        "arguments": [
          {
            "description": "The control point ID, 0 to 63.",
            "name": "cpID",
            "type": "number"
          },
          {
            "description": "The entity to attach the control point to.",
            "name": "ent",
            "type": "Entity"
          },
          {
            "description": "See <page>Enums/PATTACH</page>.",
            "name": "partAttachment",
            "type": "number"
          },
          {
            "default": "nil",
            "description": "The attachment name on the entity to attach the particle system to",
            "name": "entAttachment",
            "type": "string"
          },
          {
            "default": "Vector( 0, 0, 0 )",
            "description": "The offset from the <page>Entity:GetPos</page> of the entity we are attaching this CP to.",
            "name": "offset",
            "type": "Vector"
          }
        ],
        "description": "Adds a control point to the particle system.\n\n<note>This function will not work if the <page>CNewParticleEffect:GetOwner</page> entity is not valid</note>",
        "name": "AddControlPoint",
        "parent": "CNewParticleEffect",
        "realms": [
          "client"
        ]
      },
      {
        "name": "GetAutoUpdateBBox",
        "parent": "CNewParticleEffect",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the name of the particle effect this system is set to emit.",
        "name": "GetEffectName",
        "parent": "CNewParticleEffect",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The name of the particle effect.",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns the highest control point number for given particle system.",
        "name": "GetHighestControlPoint",
        "parent": "CNewParticleEffect",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The highest control point number for given particle system, 0 to 63.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the owner of the particle system, the entity the particle system is attached to.",
        "name": "GetOwner",
        "parent": "CNewParticleEffect",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The owner of the particle system.",
            "type": "Entity"
          }
        ]
      },
      {
        "description": "Returns the bounding box of the particle effect, including all the particles it emitted.",
        "name": "GetRenderBounds",
        "parent": "CNewParticleEffect",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Mins of the bounding box.",
            "type": "Vector"
          },
          {
            "description": "Maxs of the bounding box.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns whether the particle system has finished emitting particles or not.",
        "name": "IsFinished",
        "parent": "CNewParticleEffect",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Whether the particle system has finished emitting particles or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the particle system is valid or not.",
        "name": "IsValid",
        "parent": "CNewParticleEffect",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Whether the particle system is valid or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the particle system is intended to be used on a view model?",
        "name": "IsViewModelEffect",
        "parent": "CNewParticleEffect",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Forces the particle system to render using current rendering context.\n\nCan be used to render the particle system in vgui panels, etc.\n\nUsed in conjunction with <page>CNewParticleEffect:SetShouldDraw</page>.",
        "name": "Render",
        "parent": "CNewParticleEffect",
        "realms": [
          "client"
        ]
      },
      {
        "description": "Forces the particle system to restart emitting particles.",
        "name": "Restart",
        "parent": "CNewParticleEffect",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The control point ID, 0 to 63.",
            "name": "cpID",
            "type": "number"
          },
          {
            "description": "The value to set for given control point.",
            "name": "value",
            "type": "Vector"
          }
        ],
        "description": "Sets a value for given control point.",
        "name": "SetControlPoint",
        "parent": "CNewParticleEffect",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The control point ID, 0 to 63.",
            "name": "cpID",
            "type": "number"
          },
          {
            "description": "The entity to set.",
            "name": "parent",
            "type": "Entity"
          }
        ],
        "description": "Sets an entity to given control point for particle to use.",
        "name": "SetControlPointEntity",
        "parent": "CNewParticleEffect",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The control point ID, 0 to 63.",
            "name": "cpID",
            "type": "number"
          },
          {
            "description": "The forward direction for given control point",
            "name": "forward",
            "type": "Vector"
          }
        ],
        "description": "Sets the forward direction for given control point.",
        "name": "SetControlPointForwardVector",
        "parent": "CNewParticleEffect",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The control point ID, 0 to 63.",
            "name": "cpID",
            "type": "number"
          },
          {
            "description": "The forward direction for given control point.\n\nThis can also be an <page>Angle</page>, in which case the other 2 arguments are not used.",
            "name": "forward",
            "type": "Vector"
          },
          {
            "description": "The right direction for given control point",
            "name": "right",
            "type": "Vector"
          },
          {
            "description": "The up direction for given control point",
            "name": "up",
            "type": "Vector"
          }
        ],
        "description": "Sets the orientation for given control point.",
        "name": "SetControlPointOrientation",
        "parent": "CNewParticleEffect",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The child control point ID, 0 to 63.",
            "name": "childID",
            "type": "number"
          },
          {
            "description": "The parent control point ID, 0 to 63.",
            "name": "parentID",
            "type": "number"
          }
        ],
        "description": "Essentially makes child control point follow the parent control point.",
        "name": "SetControlPointParent",
        "parent": "CNewParticleEffect",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The control point ID, 0 to 63.",
            "name": "cpID",
            "type": "number"
          },
          {
            "description": "The right direction for given control point.",
            "name": "right",
            "type": "Vector"
          }
        ],
        "description": "Sets the right direction for given control point.",
        "name": "SetControlPointRightVector",
        "parent": "CNewParticleEffect",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The control point ID, 0 to 63.",
            "name": "cpID",
            "type": "number"
          },
          {
            "description": "The upward direction for given control point",
            "name": "upward",
            "type": "Vector"
          }
        ],
        "description": "Sets the upward direction for given control point.",
        "name": "SetControlPointUpVector",
        "parent": "CNewParticleEffect",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether this particle effect is a view model effect or not.",
            "name": "isViewModel",
            "type": "boolean"
          }
        ],
        "description": "Set whether this particle effect is a view model effect or not. This will have an effect on attachment positioning and other things.",
        "name": "SetIsViewModelEffect",
        "parent": "CNewParticleEffect",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether to automatically draw the particle effect or not.",
            "name": "should",
            "type": "boolean"
          }
        ],
        "description": "Forces the particle system to stop automatically rendering.\n\nUsed in conjunction with <page>CNewParticleEffect:Render</page>.",
        "name": "SetShouldDraw",
        "parent": "CNewParticleEffect",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new sort origin.",
            "name": "origin",
            "type": "Vector"
          }
        ],
        "description": "Sets the sort origin for given particle system. This is used as a helper to determine which particles are in front of which.",
        "name": "SetSortOrigin",
        "parent": "CNewParticleEffect",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "default": "false",
            "description": "",
            "name": "infiniteOnly",
            "type": "boolean"
          }
        ],
        "description": "Starts the particle emission.",
        "name": "StartEmission",
        "parent": "CNewParticleEffect",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "default": "false",
            "description": "",
            "name": "infiniteOnly",
            "type": "boolean"
          },
          {
            "default": "false",
            "description": "",
            "name": "removeAllParticles",
            "type": "boolean"
          },
          {
            "default": "false",
            "description": "",
            "name": "wakeOnStop",
            "type": "boolean"
          }
        ],
        "description": "Stops the particle emission.",
        "name": "StopEmission",
        "parent": "CNewParticleEffect",
        "realms": [
          "client"
        ]
      },
      {
        "description": "Stops particle emission and destroys all particles instantly. Also detaches the particle effect from the entity it was attached to.\n\n<note>This function will work identically to <page>CNewParticleEffect:StopEmission</page>( false, true ) if  <page>CNewParticleEffect:GetOwner</page> entity is not valid.</note>\n\nConsider using <page>CNewParticleEffect:StopEmission</page>( false, true ) instead, which has same effect, but doesn't require owner entity, and does't detach the particle system from its entity.",
        "name": "StopEmissionAndDestroyImmediately",
        "parent": "CNewParticleEffect",
        "realms": [
          "client"
        ]
      }
    ],
    "name": "CNewParticleEffect"
  },
  {
    "description": "List of all possible functions to manipulate colors.\n\nColors are implemented in Lua thus <page>Global.type</page>(color) == \"table\" and <page>Global.TypeID</page>(color) == <page text=\"TYPE_TABLE\">Enums/TYPE#table</page>.\n\nFor type checking use <page>Global.IsColor</page>.\n\nCreated by <page>Global.Color</page>, <page>Global.HSVToColor</page>, and <page>Global.HSLToColor</page>.\n\n| Type                | Name  | Description                       |\n| ------------------- | ----- | --------------------------------- |\n| <page>number</page> | **r** | The red component of the color.   |\n| <page>number</page> | **g** | The green component of the color. |\n| <page>number</page> | **b** | The blue component of the color.  |\n| <page>number</page> | **a** | The alpha component of the color. |",
    "functions": [
      {
        "arguments": [
          {
            "description": "The \"blackness\" value to add in range [0, 1]",
            "name": "blackness",
            "type": "number"
          }
        ],
        "description": "Converts a <page>Color</page> into [HWB color space](https://en.wikipedia.org/wiki/HWB_color_model), adds given value to the \"blackness\" and converts it back into an RGB color.\n\nA slightly more efficient combination of <page>COLOR:GetBlackness</page> &amp; <page>COLOR:SetBlackness</page>",
        "name": "AddBlackness",
        "parent": "Color",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The brightness value to add in range [0, 1]",
            "name": "saturation",
            "type": "number"
          }
        ],
        "description": "Converts a <page>Color</page> into [HSV color space](https://en.wikipedia.org/wiki/HSL_and_HSV), adds given value to the [brightness also known as \"value\"](https://en.wikipedia.org/wiki/Brightness) and converts it back into an RGB color.\n\nA slightly more efficient combination of <page>COLOR:GetBrightness</page> &amp; <page>COLOR:SetBrightness</page>\n\nThis is useful to quickly change the saturation of the color without changing hue or luminance, allowing for things like easy theming.",
        "name": "AddBrightness",
        "parent": "Color",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The hue value to add in degrees [0, 360).",
            "name": "hue",
            "type": "number"
          }
        ],
        "description": "Converts a <page>Color</page> into [HSV color space](https://en.wikipedia.org/wiki/HSL_and_HSV), adds given value to the [hue](https://en.wikipedia.org/wiki/Hue) and converts it back into an RGB color.\n\nA slightly more efficient combination of <page>COLOR:GetHue</page> &amp; <page>COLOR:SetHue</page>\n\nThis is useful to quickly change the hue of the color without changing saturation or luminance, allowing for things like easy theming.",
        "name": "AddHue",
        "parent": "Color",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The lightness value to add in range [0, 1]",
            "name": "lightness",
            "type": "number"
          }
        ],
        "description": "Converts a <page>Color</page> into [HSL color space](https://en.wikipedia.org/wiki/HSL_and_HSV), adds given value to the [\"lightness\"](https://en.wikipedia.org/wiki/Lightness) and converts it back into an RGB color.\n\nA slightly more efficient combination of <page>COLOR:GetLightness</page> &amp; <page>COLOR:SetLightness</page>\n\nThis is useful to quickly change the lightness of the color without changing hue or saturation, allowing for things like easy theming.",
        "name": "AddLightness",
        "parent": "Color",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The saturation value to add in range [0, 1]",
            "name": "saturation",
            "type": "number"
          }
        ],
        "description": "Converts a <page>Color</page> into [HSV color space](https://en.wikipedia.org/wiki/HSL_and_HSV), adds given value to the [saturation](https://en.wikipedia.org/wiki/Colorfulness) and converts it back into an RGB color.\n\nA slightly more efficient combination of <page>COLOR:GetSaturation</page> &amp; <page>COLOR:SetSaturation</page>\n\nThis is useful to quickly change the saturation of the color without changing hue or luminance, allowing for things like easy theming.",
        "name": "AddSaturation",
        "parent": "Color",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The \"whiteness\" value to add in range [0, 1]",
            "name": "whiteness",
            "type": "number"
          }
        ],
        "description": "Converts a <page>Color</page> into [HWB color space](https://en.wikipedia.org/wiki/HWB_color_model), adds given value to the \"whiteness\" and converts it back into an RGB color.\n\nA slightly more efficient combination of <page>COLOR:GetWhiteness</page> &amp; <page>COLOR:SetWhiteness</page>",
        "name": "AddWhiteness",
        "parent": "Color",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "description": "Returns a copy of this color, usually so it can be safely modified later without affecting the original color.",
        "name": "Copy",
        "parent": "Color",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The copy of the given color, safe to modify.",
            "type": "Color"
          }
        ],
        "source": {
          "file": "lua/includes/util/color.lua",
          "lineEnd": 187,
          "lineStart": 183
        }
      },
      {
        "description": "Converts a <page>Color</page> into [HWB color space](https://en.wikipedia.org/wiki/HWB_color_model) and returns the \"blackness\" of the color.\n\nSee <page>COLOR:ToHWB</page> if you want to get all 3 components.",
        "name": "GetBlackness",
        "parent": "Color",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Blackness of the color in range [0, 1]",
            "name": "blackness",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/includes/util/color.lua",
          "lineEnd": 354,
          "lineStart": 349
        }
      },
      {
        "description": "Converts a <page>Color</page> into [HSV color space](https://en.wikipedia.org/wiki/HSL_and_HSV) and returns the [brightness also known as \"value\"](https://en.wikipedia.org/wiki/Brightness).\n\nSee <page>COLOR:ToHSV</page> if you want to get all 3 components.",
        "name": "GetBrightness",
        "parent": "Color",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Brightness in range [0, 1]",
            "name": "brightness",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/includes/util/color.lua",
          "lineEnd": 282,
          "lineStart": 277
        }
      },
      {
        "description": "Converts a <page>Color</page> into [HSV color space](https://en.wikipedia.org/wiki/HSL_and_HSV) and returns the [hue](https://en.wikipedia.org/wiki/Hue).\n\nSee <page>COLOR:ToHSV</page> if you want to get all 3 components.",
        "name": "GetHue",
        "parent": "Color",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The hue in degrees [0, 360).",
            "name": "hue",
            "type": "number"
          }
        ]
      },
      {
        "description": "Converts a <page>Color</page> into [HSL color space](https://en.wikipedia.org/wiki/HSL_and_HSV) and returns the [\"lightness\"](https://en.wikipedia.org/wiki/Lightness) of the color.\n\nSee <page>COLOR:ToHSL</page> if you want to get all 3 components.",
        "name": "GetLightness",
        "parent": "Color",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Lightness in range [0, 1]",
            "name": "lightness",
            "type": "number"
          }
        ]
      },
      {
        "description": "Converts a <page>Color</page> into [HSV color space](https://en.wikipedia.org/wiki/HSL_and_HSV) and returns the [saturation](https://en.wikipedia.org/wiki/Colorfulness).\n\nSee <page>COLOR:ToHSV</page> if you want to get all 3 components.",
        "name": "GetSaturation",
        "parent": "Color",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Saturation in range [0, 1]",
            "name": "saturation",
            "type": "number"
          }
        ]
      },
      {
        "description": "Converts a <page>Color</page> into [HWB color space](https://en.wikipedia.org/wiki/HWB_color_model) and returns the \"whiteness\" of the color.\n\nSee <page>COLOR:ToHWB</page> if you want to get all 3 components.",
        "name": "GetWhiteness",
        "parent": "Color",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whiteness of the color in range [0, 1]",
            "name": "whiteness",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The target color to interpolate towards.",
            "name": "target",
            "type": "Color"
          },
          {
            "description": "The interpolation fraction. `0` means fully original color, `0.5` means in the middle between the 2 colors, `1` means fully target color, etc.",
            "name": "fraction",
            "type": "number"
          }
        ],
        "description": "Performs linear interpolation between this and given colors.",
        "name": "Lerp",
        "parent": "Color",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The result of linear interpolation.",
            "type": "Color"
          }
        ],
        "source": {
          "file": "lua/includes/util/color.lua",
          "lineEnd": 192,
          "lineStart": 183
        }
      },
      {
        "arguments": [
          {
            "description": "The new \"blackness\" value in range [0, 1]",
            "name": "blackness",
            "type": "number"
          }
        ],
        "description": "Converts a <page>Color</page> into [HWB color space](https://en.wikipedia.org/wiki/HWB_color_model), sets the \"blackness\" and converts it back into an RGB color.",
        "name": "SetBlackness",
        "parent": "Color",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new brightness value in range [0, 1]",
            "name": "saturation",
            "type": "number"
          }
        ],
        "description": "Converts a <page>Color</page> into [HSV color space](https://en.wikipedia.org/wiki/HSL_and_HSV), sets the [brightness also known as \"value\"](https://en.wikipedia.org/wiki/Brightness) and converts it back into an RGB color.\n\nThis is useful to quickly change the brightness of the color without changing hue or saturation, allowing for things like easy theming.",
        "name": "SetBrightness",
        "parent": "Color",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new hue value in degrees [0, 360).",
            "name": "hue",
            "type": "number"
          }
        ],
        "description": "Converts a <page>Color</page> into [HSV color space](https://en.wikipedia.org/wiki/HSL_and_HSV), sets the [hue](https://en.wikipedia.org/wiki/Hue) and converts it back into an RGB color.\n\nThis is useful to quickly change the hue of the color without changing saturation or luminance, allowing for things like easy theming.",
        "name": "SetHue",
        "parent": "Color",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new lightness value in range [0, 1]",
            "name": "lightness",
            "type": "number"
          }
        ],
        "description": "Converts a <page>Color</page> into [HSL color space](https://en.wikipedia.org/wiki/HSL_and_HSV), sets the [\"lightness\"](https://en.wikipedia.org/wiki/Lightness) and converts it back into an RGB color.\n\nThis is useful to quickly change the lightness of the color without changing hue or saturation, allowing for things like easy theming.",
        "name": "SetLightness",
        "parent": "Color",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new saturation value in range [0, 1]",
            "name": "saturation",
            "type": "number"
          }
        ],
        "description": "Converts a <page>Color</page> into [HSV color space](https://en.wikipedia.org/wiki/HSL_and_HSV), sets the [saturation](https://en.wikipedia.org/wiki/Colorfulness) and converts it back into an RGB color.\n\nThis is useful to quickly change the saturation of the color without changing hue or luminance, allowing for things like easy theming.",
        "name": "SetSaturation",
        "parent": "Color",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The red component",
            "name": "r",
            "type": "number"
          },
          {
            "description": "The green component",
            "name": "g",
            "type": "number"
          },
          {
            "description": "The blue component",
            "name": "b",
            "type": "number"
          },
          {
            "description": "The alpha component",
            "name": "a",
            "type": "number"
          }
        ],
        "description": "Sets the red, green, blue, and alpha of the color.",
        "name": "SetUnpacked",
        "parent": "Color",
        "realms": [
          "client",
          "server"
        ],
        "source": {
          "file": "lua/includes/util/color.lua",
          "lineEnd": 101,
          "lineStart": 94
        }
      },
      {
        "arguments": [
          {
            "description": "The new \"whiteness\" value in range [0, 1]",
            "name": "whiteness",
            "type": "number"
          }
        ],
        "description": "Converts a <page>Color</page> into [HWB color space](https://en.wikipedia.org/wiki/HWB_color_model), sets the \"whiteness\" and converts it back into an RGB color.",
        "name": "SetWhiteness",
        "parent": "Color",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "false",
            "description": "Whether to forcibly omit the alpha channel from the output.",
            "name": "",
            "type": "boolean"
          }
        ],
        "description": "Converts a <page>Color</page> to its hexadecimal representation.",
        "name": "ToHex",
        "parent": "Color",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The hexadecimal representation of the color. (`#RRGGBBAA`)\n\nIf the alpha channel is `255`, it will be omitted from the output (`#RRGGBB`)",
            "type": "string"
          }
        ]
      },
      {
        "description": "Converts a <page>Color</page> into [HSL color space](https://en.wikipedia.org/wiki/HSL_and_HSV) .\n\nThis calls <page>Global.ColorToHSL</page> internally.",
        "name": "ToHSL",
        "parent": "Color",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The hue in degrees [0, 360).",
            "type": "number"
          },
          {
            "description": "The saturation in the range [0, 1].",
            "type": "number"
          },
          {
            "description": "The lightness in the range [0, 1].",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/includes/util/color.lua",
          "lineEnd": 144,
          "lineStart": 140
        }
      },
      {
        "description": "Encodes a RGB <page>Color</page> into the [HSV color space](https://en.wikipedia.org/wiki/HSL_and_HSV).\n\nThis function uses <page>Global.ColorToHSV</page> internally.",
        "name": "ToHSV",
        "parent": "Color",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Hue in degrees in range [0, 360)",
            "name": "hue",
            "type": "number"
          },
          {
            "description": "Saturation in range [0, 1]",
            "name": "saturation",
            "type": "number"
          },
          {
            "description": "Brightness in range [0, 1]",
            "name": "brightness",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/includes/util/color.lua",
          "lineEnd": 153,
          "lineStart": 149
        }
      },
      {
        "description": "Converts a <page>Color</page> into [HWB color space](https://en.wikipedia.org/wiki/HWB_color_model). See <page>Global.HWBToColor</page> for more info.",
        "name": "ToHWB",
        "parent": "Color",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The hue in degrees [0, 360).",
            "name": "hue",
            "type": "number"
          },
          {
            "description": "The whiteness in the range [0, 1].",
            "name": "whiteness",
            "type": "number"
          },
          {
            "description": "The blacknessin the range [0, 1].",
            "name": "blackness",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/includes/util/color.lua",
          "lineEnd": 163,
          "lineStart": 158
        }
      },
      {
        "description": "Returns the color as a table (an array or a list) with four elements.",
        "name": "ToTable",
        "parent": "Color",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The table with elements 1 = r, 2 = g, 3 = b, 4 = a,( `{ r, g, b, a }` )",
            "type": "table<number>"
          }
        ],
        "source": {
          "file": "lua/includes/util/color.lua",
          "lineEnd": 107,
          "lineStart": 103
        }
      },
      {
        "description": "Translates the <page>Color</page> into a <page>Vector</page>, losing the alpha channel.\nThis will also range the values from 0 - 255 to 0 - 1\n\nr / 255 -&gt; x<br>\ng / 255 -&gt; y<br>\nb / 255 -&gt; z\n\nThis is the opposite of <page>Vector:ToColor</page>",
        "name": "ToVector",
        "parent": "Color",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The created <page>Vector</page>",
            "type": "Vector"
          }
        ],
        "source": {
          "file": "lua/includes/util/color.lua",
          "lineEnd": 172,
          "lineStart": 168
        }
      },
      {
        "description": "Returns the red, green, blue, and alpha of the color.",
        "name": "Unpack",
        "parent": "Color",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Red",
            "type": "number"
          },
          {
            "description": "Green",
            "type": "number"
          },
          {
            "description": "Blue",
            "type": "number"
          },
          {
            "description": "Alpha",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/includes/util/color.lua",
          "lineEnd": 181,
          "lineStart": 177
        }
      }
    ],
    "name": "Color"
  },
  {
    "description": "An object returned by <page>Global.CreateConVar</page>, <page>Global.CreateClientConVar</page> (which uses <page>Global.CreateConVar</page> internally), and <page>Global.GetConVar</page>.\n\nIt represents a console variable. See <page text=\"this\">ConVars</page> page for more information.",
    "functions": [
      {
        "description": "Tries to convert the current string value of a <page>ConVar</page> to a boolean.",
        "name": "GetBool",
        "parent": "ConVar",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The boolean value of the console variable. If the variable is numeric and not 0, the result will be `true`. Otherwise the result will be `false`.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the default value of the <page>ConVar</page>",
        "name": "GetDefault",
        "parent": "ConVar",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The default value of the console variable.",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns the <page>Enums/FCVAR</page> flags of the ConVar",
        "name": "GetFlags",
        "parent": "ConVar",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The bitflag. See <page>Enums/FCVAR</page>",
            "name": "flag",
            "type": "number"
          }
        ]
      },
      {
        "description": "Attempts to convert the <page>ConVar</page> value to a float",
        "name": "GetFloat",
        "parent": "ConVar",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The float value of the console variable.\n\n\nIf the value cannot be converted to a float, it will return 0.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the help text assigned to that convar.",
        "name": "GetHelpText",
        "parent": "ConVar",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The help text",
            "type": "string"
          }
        ]
      },
      {
        "description": "Attempts to convert the <page>ConVar</page> value to a integer.",
        "name": "GetInt",
        "parent": "ConVar",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The integer value of the console variable.\n\n\nIf it fails to convert to an integer, it will return 0.\n\n\nAll float/decimal values will be rounded down. ( With <page>math.floor</page> )",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the maximum value of the <page>ConVar</page>",
        "name": "GetMax",
        "parent": "ConVar",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The maximum value of the <page>ConVar</page>",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the minimum value of the <page>ConVar</page>",
        "name": "GetMin",
        "parent": "ConVar",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The minimum value of the <page>ConVar</page>",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the name of the <page>ConVar</page>.",
        "name": "GetName",
        "parent": "ConVar",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The name of the console variable.",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns the current <page>ConVar</page> value as a string.",
        "name": "GetString",
        "parent": "ConVar",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The current console variable value as a string.",
            "type": "string"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page>Enums/FCVAR</page> flag to test",
            "name": "flag",
            "type": "number"
          }
        ],
        "description": "Returns whether the specified flag is set on the <page>ConVar</page>",
        "name": "IsFlagSet",
        "parent": "ConVar",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the flag is set or not",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Reverts <page>ConVar</page> to its default value\n\n<note>This can only be ran on ConVars created from within Lua.</note>",
        "name": "Revert",
        "parent": "ConVar",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Value to set the ConVar to.",
            "name": "value",
            "type": "boolean"
          }
        ],
        "description": "Sets a ConVar's value to 1 or 0 based on the input boolean. This can only be ran on ConVars created from within Lua.",
        "name": "SetBool",
        "parent": "ConVar",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Value to set the ConVar to.",
            "name": "value",
            "type": "number"
          }
        ],
        "description": "Sets a ConVar's value to the input number.\n<note>This can only be ran on ConVars created from within Lua.</note>",
        "name": "SetFloat",
        "parent": "ConVar",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Value to set the ConVar to.",
            "name": "value",
            "type": "number"
          }
        ],
        "description": "Sets a ConVar's value to the input number after converting it to an integer.\n\n<note>This can only be ran on ConVars created from within Lua.</note>",
        "name": "SetInt",
        "parent": "ConVar",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Value to set the ConVar to.",
            "name": "value",
            "type": "string"
          }
        ],
        "description": "Sets a ConVar's value to the input string. This can only be ran on ConVars created from within Lua.",
        "name": "SetString",
        "parent": "ConVar",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      }
    ],
    "name": "ConVar"
  },
  {
    "description": "List of all possible functions to manipulate Recipient Filters. Can be created with <page>Global.RecipientFilter</page>.",
    "functions": [
      {
        "description": "Adds all players to the recipient filter.",
        "name": "AddAllPlayers",
        "parent": "CRecipientFilter",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "A position that players may be able to hear, usually the position of an entity the sound is playing played from.",
            "name": "pos",
            "type": "Vector"
          }
        ],
        "description": "Adds all players that are in the same [PAS (Potentially Audible Set)](https://developer.valvesoftware.com/wiki/PAS \"PAS - Valve Developer Community\") as this position.",
        "name": "AddPAS",
        "parent": "CRecipientFilter",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Player to add to the recipient filter.",
            "name": "Player",
            "type": "Player"
          }
        ],
        "description": "Adds a player to the recipient filter",
        "name": "AddPlayer",
        "parent": "CRecipientFilter",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The filter to add players from. This can also be a sequential table of players. Non player entities or duplicate players will be ignored.",
            "name": "input",
            "type": "CRecipientFilter|table<Player>"
          }
        ],
        "description": "Adds players to the recipient filter from a given table or another recipient filter.",
        "name": "AddPlayers",
        "parent": "CRecipientFilter",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "PVS position that players may be able to see.",
            "name": "Position",
            "type": "Vector"
          }
        ],
        "description": "Adds all players that are in the same [PVS (Potential Visibility Set)](https://developer.valvesoftware.com/wiki/PVS \"PVS - Valve Developer Community\") as this position.",
        "name": "AddPVS",
        "parent": "CRecipientFilter",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Team index to add players from.",
            "name": "teamid",
            "type": "number"
          }
        ],
        "description": "Adds all players that are on the given team to the filter.",
        "name": "AddRecipientsByTeam",
        "parent": "CRecipientFilter",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Returns the number of valid players in the recipient filter.",
        "name": "GetCount",
        "parent": "CRecipientFilter",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Number of valid players in the recipient filter.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns a table of all valid players currently in the recipient filter.",
        "name": "GetPlayers",
        "parent": "CRecipientFilter",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "A table of all valid players currently in the recipient filter.",
            "type": "table<Player>"
          }
        ]
      },
      {
        "description": "Removes all players from the recipient filter.",
        "name": "RemoveAllPlayers",
        "parent": "CRecipientFilter",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The filter that contains a list of players to test against. Players **NOT** in the given filter will be removed from this filter.\n\nThis can also be a sequential table of players. Non player entities will be ignored.",
            "name": "input",
            "type": "CRecipientFilter"
          }
        ],
        "description": "Remove players from this recipient filter that are **NOT** present in a given table or recipient filter.",
        "name": "RemoveMismatchedPlayers",
        "parent": "CRecipientFilter",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The position to test",
            "name": "position",
            "type": "Vector"
          }
        ],
        "description": "Removes all players from the filter that are in [PAS (Potentially Audible Set)](https://developer.valvesoftware.com/wiki/PAS \"PAS - Valve Developer Community\") for given position.",
        "name": "RemovePAS",
        "parent": "CRecipientFilter",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The player that should be in the recipient filter if you call this function.",
            "name": "Player",
            "type": "Player"
          }
        ],
        "description": "Removes the player from the recipient filter.",
        "name": "RemovePlayer",
        "parent": "CRecipientFilter",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The filter that contains a list of players to remove. This can also be a sequential table of players. Non player entities will be ignored. If a player in the given table/filter is not present in this filter, it is ignored.",
            "name": "input",
            "type": "CRecipientFilter"
          }
        ],
        "description": "Remove players from this recipient filter that are present in a given table or recipient filter.",
        "name": "RemovePlayers",
        "parent": "CRecipientFilter",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Position that players may be able to see.",
            "name": "pos",
            "type": "Vector"
          }
        ],
        "description": "Removes all players that can see this [PVS (Potential Visibility Set)](https://developer.valvesoftware.com/wiki/PVS \"PVS - Valve Developer Community\") from the recipient filter.",
        "name": "RemovePVS",
        "parent": "CRecipientFilter",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Team index to remove players from.",
            "name": "teamid",
            "type": "number"
          }
        ],
        "description": "Removes all players that are on the given team from the filter.",
        "name": "RemoveRecipientsByTeam",
        "parent": "CRecipientFilter",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Team index.",
            "name": "teamid",
            "type": "number"
          }
        ],
        "description": "Removes all players that are not on the given team from the filter.",
        "name": "RemoveRecipientsNotOnTeam",
        "parent": "CRecipientFilter",
        "realms": [
          "server"
        ]
      }
    ],
    "name": "CRecipientFilter"
  },
  {
    "description": "CSEnt is a client-side only entity which can be created with <page>Global.ClientsideModel</page>, <page>Global.ClientsideRagdoll</page> and <page>Global.ClientsideScene</page>.\n\nIts base class is <page>Entity</page> so it inherits all of the client and shared functions used by <page>Entity</page>.",
    "functions": [
      {
        "description": "Removes the clientside entity",
        "name": "Remove",
        "parent": "CSEnt",
        "realms": [
          "client"
        ]
      }
    ],
    "name": "CSEnt"
  },
  {
    "description": "CSoundPatch class.\n\nCreated with <page>Global.CreateSound</page>",
    "functions": [
      {
        "arguments": [
          {
            "description": "The pitch can range from 0-255. Where 100 is the original pitch.",
            "name": "pitch",
            "type": "number"
          },
          {
            "default": "0",
            "description": "The time to fade from previous to the new pitch.",
            "name": "deltaTime",
            "type": "number"
          }
        ],
        "description": "Adjust the pitch, alias the speed at which the sound is being played.\n\nThis invokes the <page>GM:EntityEmitSound</page>.",
        "name": "ChangePitch",
        "parent": "CSoundPatch",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The volume ranges from 0 to 1.",
            "name": "volume",
            "type": "number"
          },
          {
            "default": "0",
            "description": "Time to fade the volume from previous to new value from.",
            "name": "deltaTime",
            "type": "number"
          }
        ],
        "description": "Adjusts the volume of the sound played.<br>\nAppears to only work while the sound is being played.",
        "name": "ChangeVolume",
        "parent": "CSoundPatch",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Fade time.",
            "name": "seconds",
            "type": "number"
          }
        ],
        "description": "Fades out the volume of the sound from the current volume to 0 in the given amount of seconds.",
        "name": "FadeOut",
        "parent": "CSoundPatch",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Returns the DSP (Digital Signal Processor) effect ID for the sound.",
        "name": "GetDSP",
        "parent": "CSoundPatch",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The numerical ID for the DSP effect currently enabled on the sound.\n\nFor a list of the available IDs and their meaning, see <page text=\"DSP Presets\">DSP_Presets</page>.",
            "name": "dspEffectId",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the current pitch.",
        "name": "GetPitch",
        "parent": "CSoundPatch",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The current pitch, can range from 0-255.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the current sound level.",
        "name": "GetSoundLevel",
        "parent": "CSoundPatch",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The current sound level, see <page>Enums/SNDLVL</page>.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the current volume.",
        "name": "GetVolume",
        "parent": "CSoundPatch",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The current volume, ranging from 0 to 1.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns whenever the sound is being played.",
        "name": "IsPlaying",
        "parent": "CSoundPatch",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Is playing or not",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Starts to play the sound. This will reset the sound's volume and pitch to their default values. See <page>CSoundPatch:PlayEx</page>",
        "name": "Play",
        "parent": "CSoundPatch",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The volume ranges from 0 to 1.",
            "name": "volume",
            "type": "number"
          },
          {
            "description": "The pitch can range from 0-255.",
            "name": "pitch",
            "type": "number"
          }
        ],
        "description": "Same as <page>CSoundPatch:Play</page> but with 2 extra arguments allowing to set volume and pitch directly.",
        "name": "PlayEx",
        "parent": "CSoundPatch",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The numerical ID for the DSP effect to be enabled on the sound.\n\nFor a list of the available IDs and their meaning, see <page text=\"DSP Presets\">DSP_Presets</page>.",
            "name": "dspEffectId",
            "type": "number"
          }
        ],
        "description": "Sets the DSP (Digital Signal Processor) effect for the sound.\n\nSimilar to <page>Player:SetDSP</page> but for individual sounds.",
        "name": "SetDSP",
        "parent": "CSoundPatch",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The sound level in decibel. See <page>Enums/SNDLVL</page>",
            "name": "level",
            "type": "number"
          }
        ],
        "description": "Sets the sound level in decibel.",
        "name": "SetSoundLevel",
        "parent": "CSoundPatch",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Stops the sound from being played.\n\n<bug issue=\"3260\">This will not work if the entity attached to this sound patch (specified by <page>Global.CreateSound</page>) is invalid.</bug>",
        "name": "Stop",
        "parent": "CSoundPatch",
        "realms": [
          "client",
          "server"
        ]
      }
    ],
    "name": "CSoundPatch"
  },
  {
    "description": "A class used to store and modify all the data concerning a damage event.\nAn empty CTakeDamageInfo object can be created with <page>Global.DamageInfo</page>\n\nList of hooks that this object is passed to:\n* <page>ENTITY:OnTakeDamage</page>\n* <page>GM:DoPlayerDeath</page>\n* <page>GM:EntityTakeDamage</page>\n* <page>GM:PostEntityTakeDamage</page>\n* <page>GM:OnDamagedByExplosion</page>\n* <page>GM:ScaleNPCDamage</page>\n* <page>GM:ScalePlayerDamage</page>\n* <page>NEXTBOT:OnInjured</page>\n* <page>NEXTBOT:OnKilled</page>\n* <page>NEXTBOT:OnOtherKilled</page>\n\nList of functions that use this object:\n* <page>util.BlastDamageInfo</page>\n* <page>Entity:TakeDamageInfo</page>\n* <page>Entity:TakePhysicsDamage</page>\n* <page>Entity:DispatchTraceAttack</page>",
    "functions": [
      {
        "arguments": [
          {
            "description": "The damage to add.",
            "name": "damageIncrease",
            "type": "number"
          }
        ],
        "description": "Increases the damage by damageIncrease.",
        "name": "AddDamage",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Returns the ammo type used by the weapon that inflicted the damage.",
        "name": "GetAmmoType",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Ammo type ID",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the attacker ( character who originated the attack ), for example a player or an NPC that shot the weapon.",
        "name": "GetAttacker",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The attacker",
            "type": "Entity"
          }
        ]
      },
      {
        "description": "Returns the initial unmodified by skill level ( <page>game.GetSkillLevel</page> ) damage.",
        "name": "GetBaseDamage",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "baseDamage",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the total damage.",
        "name": "GetDamage",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "damage",
            "type": "number"
          }
        ]
      },
      {
        "description": "Gets the current bonus damage.",
        "name": "GetDamageBonus",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Bonus damage",
            "type": "number"
          }
        ]
      },
      {
        "description": "Gets the custom damage type. This is used by Day of Defeat: Source and Team Fortress 2 for extended damage info, but isn't used in Garry's Mod by default.",
        "name": "GetDamageCustom",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The custom damage type",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns a vector representing the damage force.\n\nCan be set with <page>CTakeDamageInfo:SetDamageForce</page>.",
        "name": "GetDamageForce",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The damage force",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the position where the damage was or is going to be applied to.\n\nCan be set using <page>CTakeDamageInfo:SetDamagePosition</page>.",
        "name": "GetDamagePosition",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The damage position",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns a bitflag which indicates the damage type(s) of the damage.\n\nConsider using <page>CTakeDamageInfo:IsDamageType</page> instead. Value returned by this function can contain multiple damage types.",
        "name": "GetDamageType",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Damage type(s), a combination of <page>Enums/DMG</page>",
            "type": "number{DMG}"
          }
        ]
      },
      {
        "description": "Returns the inflictor of the damage. This is not necessarily a weapon.\n\nFor hitscan weapons this is the weapon.\n\nFor projectile weapons this is the projectile.\n\nFor a more reliable method of getting the weapon that damaged an entity, use <page>CTakeDamageInfo:GetWeapon</page> or <page text=\"GetAttacker\">CTakeDamageInfo:GetAttacker</page> with <page text=\"GetActiveWeapon\">Player:GetActiveWeapon</page>.",
        "name": "GetInflictor",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The inflictor entity.",
            "type": "Entity"
          }
        ]
      },
      {
        "description": "Returns the maximum damage. See <page>CTakeDamageInfo:SetMaxDamage</page>",
        "name": "GetMaxDamage",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "maxDmg",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the initial, unmodified position where the damage occured.",
        "name": "GetReportedPosition",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "position",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the inflicting weapon of the damage event, if there is any.\n\nThis is not necessarily a <page>Weapon</page> entity, but it is very likely to be one.\n\nSee <page>CTakeDamageInfo:GetInflictor</page> for the actual entity that did the damage.",
        "name": "GetWeapon",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The damage-inflicting weapon or <page>NULL</page>.",
            "type": "Entity"
          }
        ]
      },
      {
        "description": "Returns true if the damage was caused by a bullet.",
        "name": "IsBulletDamage",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "isBulletDmg",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Damage type to test. See <page>Enums/DMG</page>.",
            "name": "dmgType",
            "type": "number{DMG}"
          }
        ],
        "description": "Returns whenever the damageinfo contains the damage type specified.",
        "name": "IsDamageType",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether this damage contains specified damage type or not",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whenever the damageinfo contains explosion damage.",
        "name": "IsExplosionDamage",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "isExplDamage",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whenever the damageinfo contains fall damage.",
        "name": "IsFallDamage",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "isFallDmg",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Value to scale the damage with.",
            "name": "scale",
            "type": "number"
          }
        ],
        "description": "Scales the damage by the given value.",
        "name": "ScaleDamage",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Ammo type ID",
            "name": "ammoType",
            "type": "number"
          }
        ],
        "description": "Changes the ammo type used by the weapon that inflicted the damage.",
        "name": "SetAmmoType",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The entity to be set as the attacker.",
            "name": "ent",
            "type": "Entity"
          }
        ],
        "description": "Sets the attacker ( character who originated the attack ) of the damage, for example a player or an NPC.",
        "name": "SetAttacker",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "baseDamage",
            "name": "",
            "type": "number"
          }
        ],
        "description": "Sets the initial unmodified by skill level ( <page>game.GetSkillLevel</page> ) damage. This function will not update or touch <page>CTakeDamageInfo:GetDamage</page>.",
        "name": "SetBaseDamage",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The value to set the absolute damage to.",
            "name": "damage",
            "type": "number"
          }
        ],
        "description": "Sets the amount of damage.",
        "name": "SetDamage",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The extra damage to be added.",
            "name": "damage",
            "type": "number"
          }
        ],
        "description": "Sets the bonus damage. Bonus damage isn't automatically applied, so this will have no outer effect by default.",
        "name": "SetDamageBonus",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Any integer - can be based on your own custom enums.",
            "name": "DamageType",
            "type": "number"
          }
        ],
        "description": "Sets the custom damage type. This is used by Day of Defeat: Source and Team Fortress 2 for extended damage info, but isn't used in Garry's Mod by default.",
        "name": "SetDamageCustom",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The vector to set the force to.",
            "name": "force",
            "type": "Vector"
          }
        ],
        "description": "Sets the directional force of the damage.\n<note>\nThis function only affects entities using the VPHYSICS movetype. This means players and most NPCs won't receive the force vector you provide as knockback.\n\nIf the entity taking damage is using the WALK or STEP movetypes, the damage force is instead automatically calculated. It will push the entity away from the inflictor's <page>Entity:WorldSpaceCenter</page>, scaling the push by a calculated value involving the total amount of damage and the size of the entity. [Source](https://github.com/ValveSoftware/source-sdk-2013/blob/0565403b153dfcde602f6f58d8f4d13483696a13/src/game/server/baseentity.cpp#L1525)\n\nTo disable knockback entirely, see [EFL_NO_DAMAGE_FORCES](https://wiki.facepunch.com/gmod/Enums/EFL#EFL_NO_DAMAGE_FORCES) or use the workaround example below.\n</note>",
        "name": "SetDamageForce",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The position where the damage will be applied.",
            "name": "pos",
            "type": "Vector"
          }
        ],
        "description": "Sets the position of where the damage gets applied to.",
        "name": "SetDamagePosition",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The damage type, see <page>Enums/DMG</page>.",
            "name": "type",
            "type": "number{DMG}"
          }
        ],
        "description": "Sets the damage type.",
        "name": "SetDamageType",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new inflictor.",
            "name": "inflictor",
            "type": "Entity"
          }
        ],
        "description": "Sets the inflictor of the damage for example a weapon.\n\nFor hitscan/bullet weapons this should the weapon.\n\nFor projectile (rocket launchers, grenades, etc) weapons this should be the projectile and <page>CTakeDamageInfo:SetWeapon</page> should be the weapon.",
        "name": "SetInflictor",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Maximum damage value.",
            "name": "maxDamage",
            "type": "number"
          }
        ],
        "description": "Sets the maximum damage this damage event can cause.",
        "name": "SetMaxDamage",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The location of where the damage is originating",
            "name": "pos",
            "type": "Vector"
          }
        ],
        "description": "Sets the origin of the damage.",
        "name": "SetReportedPosition",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The damage-inflicting weapon or <page>NULL</page>.",
            "name": "",
            "type": "Entity"
          }
        ],
        "description": "Sets the damage-inflicting weapon of the damage event.\n\nThis should be a <page>Weapon</page> entity, not a projectile. See also <page>CTakeDamageInfo:SetInflictor</page>.",
        "name": "SetWeapon",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Value to subtract.",
            "name": "damage",
            "type": "number"
          }
        ],
        "description": "Subtracts the specified amount from the damage.",
        "name": "SubtractDamage",
        "parent": "CTakeDamageInfo",
        "realms": [
          "client",
          "server"
        ]
      }
    ],
    "name": "CTakeDamageInfo"
  },
  {
    "description": "A class used to store the player inputs, such as mouse movement, view angles, <page>Enums/IN</page> buttons pressed and analog movement, the data from this class is then transfered to a <page>CMoveData</page> during actual movement simulation.\n\nCan be modified during <page>GM:CreateMove</page>, <page>GM:StartCommand</page> and used in read only with <page>GM:SetupMove</page> and <page>Player:GetCurrentCommand</page>.",
    "functions": [
      {
        "arguments": [
          {
            "description": "Key to add, see <page>Enums/IN</page>.",
            "name": "key",
            "type": "number"
          }
        ],
        "description": "Adds a single key to the active buttons bitflag. See also <page>CUserCmd:SetButtons</page>.",
        "name": "AddKey",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Removes all keys from the command.\n\n<note>If you are looking to affect player movement, you may need to use <page>CUserCmd:ClearMovement</page> instead of clearing the buttons.</note>",
        "name": "ClearButtons",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Clears the movement from the command.\n\nSee also <page>CUserCmd:SetForwardMove</page>, <page>CUserCmd:SetSideMove</page> and  <page>CUserCmd:SetUpMove</page>.",
        "name": "ClearMovement",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Returns an increasing number representing the index of the user cmd.\n\n<warning>The value returned is occasionally 0 inside <page>GM:CreateMove</page> and <page>GM:StartCommand</page>. It is advised to check for a non-zero value if you wish to get the correct number.</warning>",
        "name": "CommandNumber",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The command number",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns a bitflag indicating which buttons are pressed.",
        "name": "GetButtons",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Pressed buttons, see <page>Enums/IN</page>",
            "type": "number"
          }
        ]
      },
      {
        "description": "The speed the client wishes to move forward with, negative if the clients wants to move backwards.",
        "name": "GetForwardMove",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The desired speed",
            "type": "number"
          }
        ]
      },
      {
        "description": "Gets the current impulse from the client, usually 0. [See impulses list](https://developer.valvesoftware.com/wiki/Impulse) and some <page text=\"GMod specific impulses\">CUserCmd:SetImpulse</page>.",
        "name": "GetImpulse",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The impulse",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the scroll delta as whole number.",
        "name": "GetMouseWheel",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Scroll delta",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the delta of the angular horizontal mouse movement of the player.",
        "name": "GetMouseX",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "xDelta",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the delta of the angular vertical mouse movement of the player.",
        "name": "GetMouseY",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "yDelta",
            "type": "number"
          }
        ]
      },
      {
        "description": "The speed the client wishes to move sideways with, positive if it wants to move right, negative if it wants to move left.",
        "name": "GetSideMove",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "requestSpeed",
            "type": "number"
          }
        ]
      },
      {
        "description": "The speed the client wishes to move up with, negative if the clients wants to move down.",
        "name": "GetUpMove",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "requestSpeed",
            "type": "number"
          }
        ]
      },
      {
        "description": "Gets the direction the player is looking in.",
        "name": "GetViewAngles",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The direction the player is looking in.",
            "type": "Angle"
          }
        ]
      },
      {
        "description": "When players are not sending usercommands to the server (often due to lag), their last usercommand will be executed multiple times as a backup. This function returns true if that is happening.\n\nThis will never return true clientside.",
        "name": "IsForced",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "isForced",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Bitflag representing which button to check, see <page>Enums/IN</page>.",
            "name": "key",
            "type": "number"
          }
        ],
        "description": "Returns true if the specified button(s) is pressed.",
        "name": "KeyDown",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Is key down or not",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Bitflag to be removed from the key bitflag, see <page>Enums/IN</page>.",
            "name": "button",
            "type": "number"
          }
        ],
        "description": "Removes a key bit from the current key bitflag.\n\nFor movement you will want to use <page>CUserCmd:SetForwardMove</page>, <page>CUserCmd:SetUpMove</page> and <page>CUserCmd:SetSideMove</page>.",
        "name": "RemoveKey",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The weapon entity to select.",
            "name": "weapon",
            "type": "Weapon"
          }
        ],
        "description": "Forces the associated player to select a weapon. This is used internally in the default HL2 weapon selection HUD.\n\nThis may not work immediately if the current command is in prediction. Use <page>input.SelectWeapon</page> to switch the weapon from the client when the next available command can do so.\n\n<note>This is the ideal function to use to create a custom weapon selection HUD, as it allows prediction to run properly for <page>WEAPON:Deploy</page> and <page>GM:PlayerSwitchWeapon</page></note>",
        "name": "SelectWeapon",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Bitflag representing which buttons are \"down\", see <page>Enums/IN</page>.",
            "name": "buttons",
            "type": "number"
          }
        ],
        "description": "Sets the buttons as a bitflag. See also <page>CUserCmd:GetButtons</page>.\n\n<note>If you are looking to affect player movement, you may need to use <page>CUserCmd:SetForwardMove</page> instead of setting the keys.</note>",
        "name": "SetButtons",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new speed to request. The client will not be able to move faster than their set walk/sprint speed.",
            "name": "speed",
            "type": "number"
          }
        ],
        "description": "Sets speed the client wishes to move forward with, negative if the clients wants to move backwards.\n\nSee also <page>CUserCmd:ClearMovement</page>, <page>CUserCmd:SetSideMove</page> and <page>CUserCmd:SetUpMove</page>.",
        "name": "SetForwardMove",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The impulse to send.",
            "name": "impulse",
            "type": "number"
          }
        ],
        "description": "Sets the impulse command to be sent to the server.\n\nHere are a few examples of impulse numbers:\n- `100` toggles their flashlight\n- `101` gives the player all Half-Life 2 weapons with `sv_cheats` set to `1`\n- `200` toggles holstering / restoring the current weapon\nWhen holstered, the `EF_NODRAW` flag is set on the active weapon.\n- `154` toggles noclip\n\n[See full list](https://developer.valvesoftware.com/wiki/Impulse)",
        "name": "SetImpulse",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The scroll delta.",
            "name": "speed",
            "type": "number"
          }
        ],
        "description": "Sets the scroll delta.",
        "name": "SetMouseWheel",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Angular horizontal move delta.",
            "name": "speed",
            "type": "number"
          }
        ],
        "description": "Sets the delta of the angular horizontal mouse movement of the player.\n\nSee also <page>CUserCmd:SetMouseY</page>.",
        "name": "SetMouseX",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Angular vertical move delta.",
            "name": "speed",
            "type": "number"
          }
        ],
        "description": "Sets the delta of the angular vertical mouse movement of the player.\n\nSee also <page>CUserCmd:SetMouseX</page>.",
        "name": "SetMouseY",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new speed to request.",
            "name": "speed",
            "type": "number"
          }
        ],
        "description": "Sets speed the client wishes to move sidewards with, positive to move right, negative to move left.\n\nSee also <page>CUserCmd:SetForwardMove</page> and  <page>CUserCmd:SetUpMove</page>.",
        "name": "SetSideMove",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new speed to request.",
            "name": "speed",
            "type": "number"
          }
        ],
        "description": "Sets speed the client wishes to move upwards with, negative to move down.\n\nSee also <page>CUserCmd:SetSideMove</page> and  <page>CUserCmd:SetForwardMove</page>.\n<note>This function does **not** move the client up/down ladders. To force ladder movement, consider <page>CUserCMD:SetButtons</page> and use IN_FORWARD from <page>Enums/IN</page>.</note>",
        "name": "SetUpMove",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "New view angles.",
            "name": "viewAngle",
            "type": "Angle"
          }
        ],
        "description": "Sets the direction the client wants to move in.\n\n<note>For human players, the pitch (vertical) angle should be clamped to +/- 89° to prevent the player's view from glitching.</note>\n<note>For fake clients (those created with <page>player.CreateNextBot</page>), this functionally dictates the 'move angles' of the bot. This typically functions separately from the colloquial view angles. This can be utilized by <page>CUserCmd:SetForwardMove</page> and its related functions.</note>",
        "name": "SetViewAngles",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Returns tick count since joining the server.\n\n<note>This will always return 0 for bots.</note>\n\n<note>Returns 0 clientside during prediction calls. If you are trying to use CUserCmd:Set*() on the client in a movement or command hook, keep doing so till TickCount returns a non-zero number to maintain prediction.</note>",
        "name": "TickCount",
        "parent": "CUserCmd",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The amount of ticks passed since joining the server.",
            "type": "number"
          }
        ]
      }
    ],
    "name": "CUserCmd"
  },
  {
    "description": "This is a list of all available methods for all entities, which includes <page text=\"Players\">Player</page>, <page text=\"Weapons\">Weapon</page>, <page text=\"NPCs\">NPC</page> and <page text=\"Vehicles\">Vehicle</page>.\n\nFor a list of possible members of <page>Scripted Entities</page> see <page text=\"ENT Structure\">Structures/ENT</page>",
    "functions": [
      {
        "description": "Activates the entity. This needs to be used on some entities (like constraints) after being spawned.\n\n<note>For some entity types when this function is used after <page>Entity:SetModelScale</page>, the physics object will be recreated with the new scale. [Source-sdk-2013](https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/server/baseanimating.cpp#L321-L327).\n\nCalling this method after <page>Entity:SetModelScale</page> will recreate a new scaled `SOLID_VPHYSICS` <page>PhysObj</page> on scripted entities. This can be a problem if you made a properly scaled <page>PhysObj</page> of another kind (using <page>Entity:PhysicsInitSphere</page> for instance) or if you edited the <page>PhysObj</page>'s properties. This is especially the behavior of the Sandbox spawn menu.</note>",
        "name": "Activate",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The hook name to hook onto. See <page>Entity Callbacks</page>",
            "name": "hook",
            "type": "string"
          },
          {
            "description": "The function to call. It's arguments and return values will depend on the hook specified in the first argument.",
            "name": "func",
            "type": "function"
          }
        ],
        "description": "Add a callback function to a specific event. This is used instead of hooks to avoid calling empty functions unnecessarily.\n\nThis also allows you to use certain hooks in engine entities (non-scripted entities).\n\n<warning>This method does not check if the function has already been added to this object before, so if you add the same callback twice, it will be run twice! Make sure to add your callback only once.</warning>",
        "name": "AddCallback",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The callback ID that was just added, which can later be used in <page>Entity:RemoveCallback</page>.\n\nReturns nothing if the passed callback function was invalid or when asking for a non-existent hook.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The effect to apply, see <page>Enums/EF</page>.",
            "name": "effect",
            "type": "number{EF}"
          }
        ],
        "description": "Applies an engine effect to an entity.\n\nSee also <page>Entity:IsEffectActive</page> and  <page>Entity:RemoveEffects</page>.",
        "name": "AddEffects",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Engine flag to add, see <page>Enums/EFL</page>",
            "name": "flag",
            "type": "number{EFL}"
          }
        ],
        "description": "Adds engine flags.",
        "name": "AddEFlags",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Flag to add, see <page>Enums/FL</page>",
            "name": "flag",
            "type": "number{FL}"
          }
        ],
        "description": "Adds flags to the entity.",
        "name": "AddFlags",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The activity to play as the gesture. See <page>Enums/ACT</page>.",
            "name": "activity",
            "type": "number"
          },
          {
            "default": "true",
            "description": "Automatically remove the gesture when it fully plays (<page>Entity:GetLayerCycle</page> reaches 1).",
            "name": "autokill",
            "type": "boolean"
          }
        ],
        "description": "Adds a gesture animation to the entity and plays it.\n\n\nSee <page>Entity:AddGestureSequence</page> and <page>Entity:AddLayeredSequence</page> for functions that takes sequences instead of <page>Enums/ACT</page>.\n\n<note>This function only works on <page>BaseAnimatingOverlay</page> entites!</note>",
        "name": "AddGesture",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Layer ID of the started gesture, used to manipulate the played gesture by other functions.\n<note>If a layer has already been allocated for supplied <page>Enums/ACT</page>, it will return existing layer ID instead of allocating a new layer. </note>",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The sequence ID to play as the gesture. See <page>Entity:LookupSequence</page>.",
            "name": "sequence",
            "type": "number"
          },
          {
            "default": "true",
            "description": "Automatically remove the gesture when it fully plays (<page>Entity:GetLayerCycle</page> reaches 1).",
            "name": "autokill",
            "type": "boolean"
          }
        ],
        "description": "Adds a gesture animation to the entity and plays it.\n\n\nSee <page>Entity:AddGesture</page> for a function that takes <page>Enums/ACT</page>.\n\n\nSee also <page>Entity:AddLayeredSequence</page>.\n\n<note>This function only works on <page>BaseAnimatingOverlay</page> entites!</note>",
        "name": "AddGestureSequence",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Layer ID of the started gesture, used to manipulate the played gesture by other functions.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The sequence ID to play as the gesture. See <page>Entity:LookupSequence</page>.",
            "name": "sequence",
            "type": "number"
          },
          {
            "description": "",
            "name": "priority",
            "type": "number"
          }
        ],
        "description": "Adds a gesture animation to the entity and plays it.\n\n\nSee <page>Entity:AddGestureSequence</page> for a function that doesn't take priority.\n\n\nSee <page>Entity:AddGesture</page> for a function that takes <page>Enums/ACT</page>.\n\n<note>This function only works on <page>BaseAnimatingOverlay</page> entites!</note>",
        "name": "AddLayeredSequence",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Layer ID of created layer",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The flag(s) to apply, see <page>Enums/FSOLID</page>.",
            "name": "flags",
            "type": "number"
          }
        ],
        "description": "Adds solid flag(s) to the entity.",
        "name": "AddSolidFlags",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The SpawnFlag to add to the Entity",
            "name": "flag",
            "type": "number"
          }
        ],
        "description": "Adds onto the current SpawnFlags of an Entity.\n\nSpawnFlags can easily be found on https://developer.valvesoftware.com/wiki/.\n\n<note>See also <page>Entity:RemoveSpawnFlags</page>, <page>Entity:SetSpawnFlags</page>\n\nUsing <page text=\"SF Enumerations\">Enums/SF</page> won't work, if this function is ran clientside due to the enumerations being defined only Serverside. Use the actual SpawnFlag number.\n</note>",
        "name": "AddSpawnFlags",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "source": {
          "file": "lua/includes/extensions/entity.lua",
          "lineEnd": 13,
          "lineStart": 11
        }
      },
      {
        "arguments": [
          {
            "description": "The <page>PhysObj</page> to add to the motion controller.",
            "name": "physObj",
            "type": "PhysObj"
          }
        ],
        "description": "Adds a <page>PhysObj</page>ect to the entity's motion controller so that <page>ENTITY:PhysicsSimulate</page> will be called for given <page>PhysObj</page>ect as well.\n\nYou must first create a motion controller with <page>Entity:StartMotionController</page>.\n\nYou can remove added <page>PhysObj</page>ects by using <page>Entity:RemoveFromMotionController</page>.\n\n<note>Only works on a scripted <page>Entity</page> of anim type</note>",
        "name": "AddToMotionController",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The angle you want to align from",
            "name": "from",
            "type": "Angle"
          },
          {
            "description": "The angle you want to align to",
            "name": "to",
            "type": "Angle"
          }
        ],
        "description": "Returns an angle based on the ones inputted that you can use to align an object.\n\n<note>This function doesn't change the angle of the entity on its own (see example).</note>",
        "name": "AlignAngles",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The resulting aligned angle",
            "type": "Angle"
          }
        ]
      },
      {
        "description": "Checks if the entity is considered alive.\n\nChecks entity's internal life state variable. Does not check health, but it is generally expected the health to be 0 or below at the point of an entity being considered dead. This internally looks up the save value `m_lifeState`",
        "name": "Alive",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the entity is considered alive.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Spawns a clientside ragdoll for the entity, positioning it in place of the original entity, and makes the entity invisible. It doesn't preserve flex values (face posing) as CSRagdolls don't support flex.\n\nIt does not work on players. Use <page>Player:CreateRagdoll</page> instead.\n\nThe original entity is not removed, and neither are any ragdolls previously generated with this function.\n\nTo make the entity re-appear, run <page>Entity:SetNoDraw</page>( false )",
        "name": "BecomeRagdollOnClient",
        "parent": "Entity",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The created ragdoll. (`class C_ClientRagdoll`)",
            "type": "Entity"
          }
        ]
      },
      {
        "description": "Returns true if the entity is being looked at by the local player and is within 256 units of distance.\n\n<note>This function is only available in entities that are based off of sandbox's base_gmodentity.</note>",
        "name": "BeingLookedAtByLocalPlayer",
        "parent": "Entity",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Is the entity being looked at by the local player and within 256 units.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/entities/entities/base_gmodentity.lua",
          "lineEnd": 35,
          "lineStart": 10
        }
      },
      {
        "arguments": [
          {
            "description": "The entity that is blocking us",
            "name": "entity",
            "type": "Entity"
          }
        ],
        "description": "<internal></internal> Dispatches blocked events to this entity's blocked handler. This function is only useful when interacting with entities like func_movelinear.",
        "name": "Blocked",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The vector of where the the attack comes from.",
            "name": "origin",
            "type": "Vector"
          },
          {
            "default": "false",
            "description": "Decides if it should return the centered vector with a random offset to it.",
            "name": "noisy",
            "type": "boolean"
          }
        ],
        "description": "Returns a centered vector of this entity, NPCs use this internally to aim at their targets.\n\n<note>This only works on players and NPCs.</note>",
        "name": "BodyTarget",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The centered vector.",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Bone ID to test flag of.",
            "name": "boneID",
            "type": "number"
          },
          {
            "description": "The flag to test, see <page>Enums/BONE</page>",
            "name": "flag",
            "type": "number{BONE}"
          }
        ],
        "description": "Returns whether the entity's bone has the flag or not.",
        "name": "BoneHasFlag",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the bone has that flag or not",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The ID of the bone you want the length of. You may want to get the length of the next bone ( boneID + 1 ) for decent results",
            "name": "boneID",
            "type": "number"
          }
        ],
        "description": "Returns the length between given bone's position and the position of given bone's parent.",
        "name": "BoneLength",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The length of the bone",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the distance between the center of the bounding box and the furthest bounding box corner.",
        "name": "BoundingRadius",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The radius of the bounding box.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The NetworkVar Type. Supported choices:\n\n* `String` (up to 511 characters)\n* `Bool`\n* `Float`\n* `Int` (32-bit signed integer)\n* `Vector`\n* `Angle`\n* `Entity`",
            "name": "type",
            "type": "string"
          },
          {
            "description": "The NetworkVar slot. See <page>Entity:NetworkVar</page> for more detailed explanation.",
            "name": "slot",
            "type": "number"
          },
          {
            "description": "The new value.",
            "name": "newValue",
            "type": "any"
          }
        ],
        "description": "Calls all <page>Entity:NetworkVarNotify</page> functions with the given new value, but doesn't change the real value.",
        "name": "CallDTVarProxies",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "source": {
          "file": "lua/includes/extensions/entity.lua",
          "lineEnd": 352,
          "lineStart": 345
        }
      },
      {
        "arguments": [
          {
            "description": "Identifier that can be optionally used with <page>Entity:RemoveCallOnRemove</page> to undo this call on remove.",
            "name": "identifier",
            "type": "string"
          },
          {
            "description": "Function to be called on remove.\n\n<callback>\n<arg type=\"Entity\" name=\"ent\">The entity about to be removed.</arg>\n<arg type=\"vararg\" name=\"data\">Data passed from the arguments to `CallOnRemove`.</arg>\n</callback>",
            "name": "removeFunc",
            "type": "function"
          },
          {
            "description": "Optional arguments to pass to removeFunc. Do note that the first argument passed to the function will always be the entity being removed, and the arguments passed on here start after that.",
            "name": "args",
            "type": "vararg"
          }
        ],
        "description": "Causes a specified function to be run if the entity is removed by any means. This can later be undone by <page>Entity:RemoveCallOnRemove</page> if you need it to not run.\n\n<warning>This hook is called clientside during full updates. See <page>GM:EntityRemoved</page> for more information.</warning>\n<warning>An error being thrown inside `removeFunc` will stop other `EntityRemoved` hooks from executing. </warning>",
        "name": "CallOnRemove",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "source": {
          "file": "lua/includes/extensions/entity.lua",
          "lineEnd": 120,
          "lineStart": 108
        }
      },
      {
        "arguments": [
          {
            "default": "nil",
            "description": "An optional string that will be used to limit removed outputs by name matches, supports wildcards.",
            "name": "outputName",
            "type": "string"
          }
        ],
        "description": "Clears all registered events for map I/O outputs on this entity. If a string is given, will use the string as a wildcard to limit removed outputs by name matches.",
        "name": "ClearAllOutputs",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Resets all pose parameters such as aim_yaw, aim_pitch and rotation.",
        "name": "ClearPoseParameters",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Declares that the collision rules of the entity have changed, and subsequent calls for <page>GM:ShouldCollide</page> with this entity may return a different value than they did previously.\n\n<warning>This function must **not** be called inside of <page>GM:ShouldCollide</page>. Instead, it must be called in advance when the condition is known to change.</warning>\n\n<warning>Failure to use this function correctly will result in a crash of the physics engine.</warning>",
        "name": "CollisionRulesChanged",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "nil",
            "description": "If set, a whitelist of bone names to create bone followers for. If a models' bone name is not in this list, a bone follower entity will not be created for it.",
            "name": "bone_whitelist",
            "type": "table"
          }
        ],
        "description": "Creates bone followers based on the current entity model.\n\nBone followers are <page text=\"Entities\">Entity</page> whose <page text=\"Physics Object\">PhysObj</page> follows a specific bone on another Entity's model.\nThis is what is used by `prop_dynamic` for things like big combine doors for vehicles with multiple physics objects which follow the visual mesh of the door when it animates.\n\nBe mindful that bone followers create a separate entity (`phys_bone_follower`) for each physics object.\n\nYou must call <page>Entity:UpdateBoneFollowers</page> every tick for bone followers to update their positions.\n\n<note>This function only works on `anim`, `nextbot` and `ai` type entities.</note>",
        "name": "CreateBoneFollowers",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Returns whether the entity was created by map or not.",
        "name": "CreatedByMap",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Is created by map?",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The particle name to create",
            "name": "particle",
            "type": "string"
          },
          {
            "description": "Attachment ID to attach the particle to",
            "name": "attachment",
            "type": "number"
          },
          {
            "default": "nil",
            "description": "A table of tables ( IDs 1 to 64 ) having the following structure:\n* <page>number</page> attachtype - The particle attach type. See <page text=\"PATTACH\">Enums/PATTACH</page>. **Default:** PATTACH_ABSORIGIN\n* <page>Entity</page> entity - The parent entity? **Default:** NULL\n* <page>Vector</page> position - The offset position for given control point. **Default:**  nil\n\nThis only affects the control points of the particle effects and will do nothing if the effect doesn't use control points.",
            "name": "options",
            "type": "table"
          }
        ],
        "description": "Creates a clientside particle system attached to the entity. See also <page>Global.CreateParticleSystem</page>\n\n<note>The particle effect must be precached with <page>Global.PrecacheParticleSystem</page> and the file its from must be added via <page>game.AddParticles</page> before it can be used!</note>",
        "name": "CreateParticleEffect",
        "parent": "Entity",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The created particle system.",
            "type": "CNewParticleEffect"
          }
        ]
      },
      {
        "description": "Draws the shadow of an entity.",
        "name": "CreateShadow",
        "parent": "Entity",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The entity to be removed",
            "name": "entityToRemove",
            "type": "Entity"
          }
        ],
        "description": "Whenever the entity is removed, entityToRemove will be removed also.",
        "name": "DeleteOnRemove",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Destroys bone followers created by <page>Entity:CreateBoneFollowers</page>.\n\n<note>This function only works on `anim` type entities.</note>",
        "name": "DestroyBoneFollowers",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Removes the shadow for the entity.\n\nThe shadow will be recreated as soon as the entity wakes.\n\n<note>\nDoesn't affect shadows from flashlight/lamps/env_projectedtexture.</note>",
        "name": "DestroyShadow",
        "parent": "Entity",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the matrix type to disable.\n\n\n\n\nThe only known matrix type is \"RenderMultiply\".",
            "name": "matrixType",
            "type": "string"
          }
        ],
        "description": "Disables an active matrix.",
        "name": "DisableMatrix",
        "parent": "Entity",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The damage to apply.",
            "name": "damageInfo",
            "type": "CTakeDamageInfo"
          },
          {
            "description": "Trace result to use to deal damage. See <page>Structures/TraceResult</page>",
            "name": "traceRes",
            "type": "table"
          },
          {
            "default": "traceRes.HitNormal",
            "description": "Direction of the attack.",
            "name": "dir",
            "type": "Vector"
          }
        ],
        "description": "Performs a trace attack towards the entity this function is called on, as if an invisible bullet is shot towards it. Visually identical to <page>Entity:TakeDamageInfo</page>.\n<warning>Calling this function on the victim entity in <page>ENTITY:OnTakeDamage</page> can cause infinite loops.</warning>\n<note>This function correctly applies damage to [func_breakable_surf](https://developer.valvesoftware.com/wiki/Func_breakable_surf) entities, unlike <page>Entity:TakeDamageInfo</page>.</note>",
        "name": "DispatchTraceAttack",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "0",
            "description": "Dissolve type. Should be one of the following values:\n\n| ID | Description |\n|||\n| 0 | ENTITY_DISSOLVE_NORMAL |\n| 1 | ELECTRICAL|\n| 2 | ELECTRICAL_LIGHT |\n| 3 | ENTITY_DISSOLVE_CORE |",
            "name": "type",
            "type": "number"
          },
          {
            "default": "0",
            "description": "Magnitude of the dissolve effect, its effect depends on the dissolve type.",
            "name": "magnitude",
            "type": "number"
          },
          {
            "default": "nil",
            "description": "The origin for the dissolve effect, its effect depends on the dissolve type. Defaults to entity's origin.",
            "name": "origin",
            "type": "Vector"
          }
        ],
        "description": "Dissolves the entity.\n\nThis function creates `env_entity_dissolver` entity internally.",
        "name": "Dissolve",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The entity to be removed from the list of entities to delete",
            "name": "entityToUnremove",
            "type": "Entity"
          }
        ],
        "description": "This removes the argument entity from an ent's list of entities to 'delete on remove'\n<note>Also see <page>Entity:DeleteOnRemove</page></note>",
        "name": "DontDeleteOnRemove",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "STUDIO_RENDER",
            "description": "The optional <page text=\"STUDIO_\">Enums/STUDIO</page> flags, usually taken from <page>ENTITY:Draw</page> and similar hooks.",
            "name": "flags",
            "type": "number"
          }
        ],
        "description": "Draws the entity or model.\n\nIf called inside <page>ENTITY:Draw</page> or <page>ENTITY:DrawTranslucent</page>, it only draws the entity's model itself.\n\nIf called outside of those hooks, it will call both of said hooks depending on <page>Entity:GetRenderGroup</page>, drawing the entire entity again.\n\nWhen drawing an entity more than once per frame in different positions, you should call <page>Entity:SetupBones</page> before each draw; Otherwise, the entity will retain its first drawn position.\n\n<rendercontext hook=\"false\" type=\"3D\"></rendercontext>\n\n<bug issue=\"1558\">Calling this on entities with <page text=\"EF_BONEMERGE\">Enums/EF</page> and <page text=\"EF_NODRAW\">Enums/EF</page> applied causes a crash.</bug>\n\n<bug issue=\"2688\">Using this with a map model (<page>game.GetWorld</page>():<page text=\"GetModel\">Entity:GetModel</page>()) crashes the game.</bug>",
        "name": "DrawModel",
        "parent": "Entity",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "True to enable, false to disable shadow drawing.",
            "name": "shouldDraw",
            "type": "boolean"
          }
        ],
        "description": "Sets whether an entity's shadow should be drawn.",
        "name": "DrawShadow",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Move an entity down until it collides with something.\n<warning>The entity needs to already have something below it within 256 units.</warning>",
        "name": "DropToFloor",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The type of the DTVar being set up. Supported choices:\n\n* `String` (up to 511 characters)\n* `Bool`\n* `Float`\n* `Int` (32-bit signed integer)\n* `Vector`\n* `Angle`\n* `Entity`",
            "name": "type",
            "type": "string"
          },
          {
            "description": "The ID of the DTVar. Can be between `0` and `3` for strings, `0` and `31` for everything else.\n\nThis can be omitted entirely (arguments will shift) and it will use the next available slot.",
            "name": "slot",
            "type": "number"
          },
          {
            "description": "Name by which you will refer to DTVar. It must be a valid variable name. (No spaces!)",
            "name": "name",
            "type": "string"
          }
        ],
        "description": "<internal><br><br>You should use <page>Entity:NetworkVar</page> instead</internal>\n\nSets up a self.dt.NAME alias for a Data Table variable.",
        "name": "DTVar",
        "overloads": [
          {
            "arguments": [
              {
                "description": "The type of the DTVar being set up. Supported choices:\n\n* `String` (up to 511 characters)\n* `Bool`\n* `Float`\n* `Int` (32-bit signed integer)\n* `Vector`\n* `Angle`\n* `Entity`",
                "name": "type",
                "type": "string"
              },
              {
                "description": "Name by which you will refer to DTVar. It must be a valid variable name. (No spaces!)",
                "name": "name",
                "type": "string"
              }
            ]
          }
        ],
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the sound to be played.\n\nThis should either be a sound script name (<page>sound.Add</page>) or a file path relative to the `sound/` folder. (so don't include `sound/`, and make note that it's not sound**s** when moving the sound file itself)\n\n<warning>The string cannot have whitespace at the start or end. You can remove this with <page>string.Trim</page>.</warning>",
            "name": "soundName",
            "type": "string"
          },
          {
            "default": "75",
            "description": "A modifier for the distance this sound will reach, acceptable range is 0 to 511. 100 means no adjustment to the level. See <page>Enums/SNDLVL</page>\n\nWill not work if a [sound script](https://developer.valvesoftware.com/wiki/Soundscripts) is used.",
            "name": "soundLevel",
            "type": "number"
          },
          {
            "default": "100",
            "description": "The pitch applied to the sound. The acceptable range is from 0 to 255. 100 means the pitch is not changed.",
            "name": "pitchPercent",
            "type": "number"
          },
          {
            "default": "1",
            "description": "The volume, from 0 to 1.",
            "name": "volume",
            "type": "number"
          },
          {
            "default": "CHAN_AUTO, CHAN_WEAPON for weapons",
            "description": "The sound channel, see <page>Enums/CHAN</page>.\n\nWill not work if a [sound script](https://developer.valvesoftware.com/wiki/Soundscripts) is used.",
            "name": "channel",
            "type": "number"
          },
          {
            "default": "0",
            "description": "The flags of the sound, see <page>Enums/SND</page>",
            "name": "soundFlags",
            "type": "number"
          },
          {
            "default": "1",
            "description": "The DSP preset for this sound. [List of DSP presets](https://developer.valvesoftware.com/wiki/Dsp_presets)",
            "name": "dsp",
            "type": "number"
          },
          {
            "default": "nil",
            "description": "If set serverside, the sound will only be networked to the clients in the filter.",
            "name": "filter",
            "type": "CRecipientFilter"
          }
        ],
        "description": "Plays a sound on an entity.\n\nIf run clientside, the sound will only be heard locally.\nIf used on a player or NPC character with the mouth rigged, the character will \"lip-sync\" if the sound file contains lipsync data. See [this page](https://developer.valvesoftware.com/wiki/Choreography_creation/Lip_syncing) for more information.\n\n<note>When using this function with weapons, use the <page>Weapon</page> itself as the entity, not its owner!</note>\n\n<bug issue=\"2651\">This does not respond to <page>Global.SuppressHostEvents</page>.</bug>",
        "name": "EmitSound",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Set to true to enable the constraints and false to disable them.\n\nDisabling constraints will delete the constraint entities.",
            "name": "toggleConstraints",
            "type": "boolean"
          }
        ],
        "description": "Toggles the constraints of this ragdoll entity on and off.",
        "name": "EnableConstraints",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Flags an entity as using custom lua defined collisions. Fixes entities having spongy player collisions or not hitting traces, such as after <page>Entity:PhysicsFromMesh</page>\n\nInternally identical to `Entity:AddSolidFlags( bit.bor( FSOLID_CUSTOMRAYTEST, FSOLID_CUSTOMBOXTEST ) )`\n\nDo not confuse this function with <page>Entity:SetCustomCollisionCheck</page>, they are not the same.",
        "name": "EnableCustomCollisions",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the matrix type. <br>\nThe only implemented matrix type is \"RenderMultiply\".",
            "name": "matrixType",
            "type": "string"
          },
          {
            "description": "The matrix to apply before drawing the entity.",
            "name": "matrix",
            "type": "VMatrix"
          }
        ],
        "description": "Can be used to apply a custom <page>VMatrix</page> to the entity, mostly used for scaling the model by a <page>Vector</page>.\n\nTo disable it, use <page>Entity:DisableMatrix</page>.\n\nIf your old scales are wrong due to a recent update, use <page>Entity:SetLegacyTransform</page> as a quick fix.\n\n<note>The matrix can also be modified to apply a custom rotation and offset via the <page>VMatrix:SetAngles</page> and <page>VMatrix:SetTranslation</page> functions.</note>\n<bug issue=\"3502\">This does not scale procedural bones, and disables inverse kinematics of the entity.</bug>",
        "name": "EnableMatrix",
        "parent": "Entity",
        "realms": [
          "client"
        ]
      },
      {
        "description": "Gets the unique entity index of an entity.\n\n<note>Entity indices are marked as unused after deletion, and can be reused by newly-created entities</note>",
        "name": "EntIndex",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The index of the entity.\n\n`-1` for clientside-only or `0` for serverside-only entities.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Extinguishes the entity if it is on fire.\n\nHas no effect if called inside <page>GM:EntityTakeDamage</page> (and the attacker is the flame that's hurting the entity)\n\nSee also <page>Entity:Ignite</page>.",
        "name": "Extinguish",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Returns the direction a player, npc or ragdoll is looking as a world-oriented angle.\n\n<bug issue=\"1150\">This can return an incorrect value in vehicles (like pods, buggy, ...). **This bug has been fixed in the past but was causing many addons being broken, so the fix has been removed but applied to <page>Player:GetAimVector</page> only**.</bug>\n\n<bug issue=\"2620\">This may return local angles in jeeps when used with <page>Player:EnterVehicle</page>. **A workaround is available in the second example.**</bug>",
        "name": "EyeAngles",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Player's eye angle.",
            "type": "Angle"
          }
        ]
      },
      {
        "description": "Returns the position of an Player/NPC's view.",
        "name": "EyePos",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "View position of the entity.",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The name to search for.",
            "name": "name",
            "type": "string"
          }
        ],
        "description": "Searches the <page text=\"Entity's\">Entity</page> model for a Body Group with a given name.\n<note>\nWeapons will return results from their viewmodels.\n</note>",
        "name": "FindBodygroupByName",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The <page text=\"Body Group's ID\">Structures/BodyGroupData#id</page> or `-1` if no Body Group has the provided name.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The activity to search for.",
            "name": "activity",
            "type": "number{ACT}"
          }
        ],
        "description": "Searches the currently active layers for a layer playing animation with given activity.\n\n<note>This function only works on <page>BaseAnimatingOverlay</page> entites!</note>",
        "name": "FindGestureLayer",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "A layer ID for given activity, or `-1` if not found.",
            "name": "layerID",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The sequence ID to search for. See <page>Entity:LookupSequence</page>.",
            "name": "sequenceID",
            "type": "number"
          }
        ],
        "description": "Searches the currently active layers for a layer playing animation with given sequence.\n\n<note>This function only works on <page>BaseAnimatingOverlay</page> entites!</note>",
        "name": "FindGestureLayer",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "A layer ID for given activity, or `-1` if not found.",
            "name": "layerID",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The currently playing sequence",
            "name": "currentSequence",
            "type": "number"
          },
          {
            "description": "The goal sequence.",
            "name": "goalSequence",
            "type": "number"
          }
        ],
        "description": "Returns a transition from the given start and end sequence.\n\nThis function was only used by HL1 entities and NPCs, before the advent of sequence blending and gestures.",
        "name": "FindTransitionSequence",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The transition sequence, -1 if not available.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the input to fire",
            "name": "input",
            "type": "string"
          },
          {
            "default": "nil",
            "description": "The value to give to the input, can also be a <page>number</page> or a <page>boolean</page>.",
            "name": "param",
            "type": "string"
          },
          {
            "default": "0",
            "description": "Delay in seconds before firing",
            "name": "delay",
            "type": "number"
          },
          {
            "default": "nil",
            "description": "The entity that caused this input (i.e. the player who pushed a button)",
            "name": "activator",
            "type": "Entity"
          },
          {
            "default": "nil",
            "description": "The entity that is triggering this input (i.e. the button that was pushed)",
            "name": "caller",
            "type": "Entity"
          }
        ],
        "description": "Fires an entity's input, conforming to the map IO event queue system. You can find inputs for most entities on the [Valve Developer Wiki](https://developer.valvesoftware.com/wiki/Output)\n\nSee also <page>Entity:Input</page> for a function that bypasses the event queue and <page>GM:AcceptInput</page>.",
        "name": "Fire",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The bullet data to be used. See the <page>Structures/Bullet</page>.",
            "name": "bulletInfo",
            "type": "table{Bullet}"
          },
          {
            "default": "false",
            "description": "Has the effect of encasing the FireBullets call in <page>Global.SuppressHostEvents</page>, only works in multiplayer.",
            "name": "suppressHostEvents",
            "type": "boolean"
          }
        ],
        "description": "Fires a bullet.\n\nWhen used in a  hook such as <page>WEAPON:Think</page> or <page>WEAPON:PrimaryAttack</page>, it will use <page>Player:LagCompensation</page> internally.\n\nLag compensation will not work if this function is called in a timer, regardless if the timer was made in a predicted hook.\n\nDue to how `Entity:FireBullets` is set up internally, bullet tracers will always originate from attachment 1. This can be avoided by supplying your own tracer effect.\n\nWhen firing bullets from a <page>Weapon</page>, it is recommended to fire bullets from the weapon owner entity (<page>Player</page> or <page>NPC</page>), not the <page>Weapon</page> itself.",
        "name": "FireBullets",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "NULL",
            "description": "The entity to follow the bone of. If unset, removes the FollowBone effect.",
            "name": "parent",
            "type": "Entity"
          },
          {
            "description": "The bone to follow",
            "name": "boneid",
            "type": "number"
          }
        ],
        "description": "Makes an entity follow another entity's bone.\n\nInternally this function calls <page>Entity:SetParent</page>( parent, boneid ), <page>Entity:AddEffects</page>( EF_FOLLOWBONE\n) and sets an internal flag to always rebuild all bones.\n<note>If the entity vibrates or stops following the parent, you probably need to run <page>Entity:SetPredictable</page>( true ) clientside.</note>\n<warning>This function will not work if the target bone's parent bone is invalid or if the bone is not used by VERTEX LOD0</warning>",
        "name": "FollowBone",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Forces the entity to be dropped, if it is being held by a player's Gravity Gun, Physics Gun or `+use` pickup.\n\nSee also <page>Player:DropObject</page>.",
        "name": "ForcePlayerDrop",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Advances the cycle of an animated entity.\n\nAnimations that loop will automatically reset the cycle so you don't have to - ones that do not will stop animating once you reach the end of their sequence.\n\n<warning>Do not call this function multiple times a frame, as it can cause unexpected results, such as animations playing at increased rate, etc.\n\n<page>NextBot:BodyMoveXY</page> calls this internally, so do not call this function before or after <page>NextBot:BodyMoveXY</page>.</warning>",
        "name": "FrameAdvance",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Returns the entity's velocity.\n\n<note>Actually binds to CBaseEntity::GetLocalVelocity() which retrieves the velocity of the entity due to its movement in the world from forces such as gravity. Does not include velocity from entity-on-entity collision.</note>",
        "name": "GetAbsVelocity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The velocity of the entity.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Gets the angles of given entity.\n\n<bug issue=\"2764\">This returns incorrect results for the local player clientside.</bug>\n\n<bug issue=\"3106\">This will return the local player's <page>Global.EyeAngles</page> in <page text=\"rendering hooks\">3D_Rendering_Hooks</page>.</bug>\n\n<bug issue=\"3107\">This will return <page>Global.Angle</page>(0,0,0) in <page text=\"rendering hooks\">3D_Rendering_Hooks</page> while paused in single-player.</bug>",
        "name": "GetAngles",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The angles of the entity.",
            "type": "Angle"
          }
        ]
      },
      {
        "description": "Returns the amount of animations (not to be confused with sequences) the entity's model has. A sequence can consist of multiple animations.\n\nSee also <page>Entity:GetAnimInfo</page>",
        "name": "GetAnimCount",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The amount of animations the entity's model has.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The animation ID to look up, starting at 0.",
            "name": "animIndex",
            "type": "number"
          }
        ],
        "description": "Returns a table containing the number of frames, flags, name, and FPS of an entity's animation ID.\n\n<note>Animation ID is not the same as sequence ID. See <page>Entity:GetAnimCount</page></note>",
        "name": "GetAnimInfo",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Information about the animation, or `nil` if the index is out of bounds.\n\nA table with the following keys:\n* <page>string</page> label - Animation name\n* <page>number</page> fps - How many frames per second the animation should be played at\n* <page>number</page> flags - [STUDIO_](https://github.com/ZeqMacaw/Crowbar/blob/0d46f3b6a694b74453db407c72c12a9685d8eb1d/Crowbar/Core/GameModel/SourceCommon/SourceMdlFileData/SourceMdlAnimationDesc.vb#L181) flags, such as looping\n* <page>number</page> numframes - Number of frames the animation has",
            "type": "table|nil"
          }
        ]
      },
      {
        "description": "Returns the last time the entity had an animation update. Returns 0 if the entity doesn't animate.",
        "name": "GetAnimTime",
        "parent": "Entity",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The last time the entity had an animation update.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the amount of time since last animation.\n\nWorks only on `CBaseAnimating` entities.",
        "name": "GetAnimTimeInterval",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The amount of time since last animation.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The internal ID of the attachment.",
            "name": "attachmentId",
            "type": "number"
          }
        ],
        "description": "Gets the orientation and position of the attachment by its ID, returns nothing if the attachment does not exist.\n\n<note>The update rate of this function is limited by the setting of ENT.AutomaticFrameAdvance for <page>Scripted Entities</page>!</note>\n\n<bug issue=\"1255\">This will return improper values for viewmodels if used in <page>GM:CalcView</page>.</bug>",
        "name": "GetAttachment",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The table with angle and position of the attachment or `nil` if does not exist. See the <page>Structures/AngPos</page>. Most notably, the table contains the keys `Ang` and `Pos` as well as `Bone`.",
            "type": "table{AngPos}|nil"
          }
        ]
      },
      {
        "description": "Returns a table containing all attachments of the given entity's model.\n\n<bug issue=\"3167\">This can have inconsistent results in single-player.</bug>",
        "name": "GetAttachments",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Attachment data. See <page>Structures/AttachmentData</page>.\n\nReturns an empty table in case its model has no attachments or there's a some kind of other issue.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns the entity's base velocity which is their velocity due to forces applied by other entities. This includes entity-on-entity collision or riding a treadmill.",
        "name": "GetBaseVelocity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The base velocity of the entity.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the blood color of this entity. This can be set with <page>Entity:SetBloodColor</page>.",
        "name": "GetBloodColor",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Color from <page>Enums/BLOOD_COLOR</page> or <page>nil</page>",
            "type": "number{BLOOD_COLOR}"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The Body Group ID to retrieve the active Sub Model ID for.\nBody Group IDs start at `0`.",
            "name": "bodyGroupId",
            "type": "number"
          }
        ],
        "description": "Returns the <page text=\"Sub Model ID\">Structures/BodyGroupData#submodels</page> for the currently active <page text=\"Sub Model\">Entity:GetSubModels</page> of the Body Group corresponding to the given <page text=\"Body Group ID\">Structures/BodyGroupData#id</page>.\n\n<note>\nWeapons will return results from their viewmodels.\n</note>",
        "name": "GetBodygroup",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The currently active Sub Model ID.\nSub Model IDs start at `0`.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The Body Group ID to retrieve the Sub Model count of.\nBody Group IDs start at `0`.",
            "name": "bodyGroupId",
            "type": "number"
          }
        ],
        "description": "Returns the number of <page text=\"Sub Models\">Entity:GetSubModels</page> in the Body Group corresponding to a given <page text=\"Body Group ID\">Structures/BodyGroupData#id</page> of the <page text=\"Entity's\">Entity</page> model.\n<note>\nWeapons will return results from their viewmodels.\n</note>",
        "name": "GetBodygroupCount",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The number of Sub Models in the Body Group.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The Body Group ID to get the name of.",
            "name": "bodyGroupId",
            "type": "number"
          }
        ],
        "description": "Retrieves the name of the Body Group corresponding to a given <page text=\"Body Group ID\">Structures/BodyGroupData#id</page> on the <page text=\"Entity's\">Entity</page> model.\n<note>\nWeapons will return results from their viewmodels.\n</note>",
        "name": "GetBodygroupName",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The name of the Body Group.",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns a list of information about each Body Group present on the <page text=\"Entity's\">Entity</page> model.\n<note>\nWeapons will return results from their viewmodels.\n</note>",
        "name": "GetBodyGroups",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "A table of Body Group information where each value is a <page>Structures/BodyGroupData</page>.",
            "type": "table"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The bone id, starting at index 0. See <page>Entity:LookupBone</page>.",
            "name": "bone",
            "type": "number"
          }
        ],
        "description": "Returns the contents of the specified bone.",
        "name": "GetBoneContents",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The contents as a <page>Enums/CONTENTS</page> or 0 on failure.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "ID of the bone controller. Goes from 0 to 3.",
            "name": "boneID",
            "type": "number"
          }
        ],
        "description": "Returns the value of the bone controller with the specified ID.\n\n<note>This is the precursor of pose parameters, and only works for Half Life 1: Source models supporting it.</note>",
        "name": "GetBoneController",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value set on the bone controller.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the amount of bones in the entity.\n\n<note>Will return `0` for <page>Global.ClientsideModel</page> or undrawn entities until <page>Entity:SetupBones</page> is called on the entity.</note>",
        "name": "GetBoneCount",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The amount of bones in given entity, starting at index 0.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The bone ID to retrieve matrix of, starting at index 0.\n* Bones clientside and serverside will differ",
            "name": "boneID",
            "type": "number"
          }
        ],
        "description": "Returns the transformation matrix of a given bone on the entity's model. The matrix contains the transformation used to position the bone in the world. It is not relative to the parent bone.\n\nThis is equivalent to constructing a <page>VMatrix</page> using <page>Entity:GetBonePosition</page>.\n\n<bug issue=\"884\">This can return the server's matrix during server lag.</bug>\n\n<bug issue=\"3285\">This can return garbage serverside or a 0,0,0 fourth column (represents position) for v49 models.</bug>",
        "name": "GetBoneMatrix",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The matrix\n\n* Some entities don't update animation every frame such as prop_physics and won't have accurate bone matrix.",
            "type": "VMatrix"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "ID of bone to lookup name of, starting at index 0.",
            "name": "index",
            "type": "number"
          }
        ],
        "description": "Returns name of given bone id.\n\nSee <page>Entity:LookupBone</page> for the inverse of this function.",
        "name": "GetBoneName",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The name of given bone.\n\n* `\"__INVALIDBONE__\"` in case the name cannot be read or the index is out of range, or we failed or entity doesn't have a model.",
            "type": "string"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The bone ID of the bone to get parent of, starting at index 0.",
            "name": "bone",
            "type": "number"
          }
        ],
        "description": "Returns parent bone of given bone.\n\n<note>Will return -1 for <page>Global.ClientsideModel</page> until <page>Entity:SetupBones</page> is called on the entity.</note>",
        "name": "GetBoneParent",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Parent bone ID or -1 if we failed for some reason.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The bone index of the bone to get the position of, starting at index 0. See <page>Entity:LookupBone</page>.",
            "name": "boneIndex",
            "type": "number"
          }
        ],
        "description": "Returns the position and angle of the given attachment, relative to the world.\n\n<warning>This function can return entity's `GetPos()` instead if the entity doesn't have it's bone cache set up.\n\nTo ensure the bone position is correct use this:\n```lua\nlocal pos = ent:GetBonePosition(0)\nif pos == ent:GetPos() then\npos = ent:GetBoneMatrix(0):GetTranslation()\nend\n```\n</warning>\n\n<note>This function returns the bone position from the last tick, so if your framerate is higher than the server's tickrate it may appear to lag behind if used on a fast moving entity. You can fix this by using the bone's matrix instead:\n```lua\nlocal matrix = entity:GetBoneMatrix(0)\nlocal pos = matrix:GetTranslation()\nlocal ang = matrix:GetAngles()\n```\n</note>\n\n<bug issue=\"884\">This can return the server's position during server lag.</bug>\n\n<bug issue=\"3285\">This can return garbage serverside or <page>Global.Vector</page>(0,0,0) for v49 models.</bug>\n\n<bug issue=\"3739\">This can return garbage if a trace passed through the target bone during bone matrix access.</bug>",
        "name": "GetBonePosition",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The bone's position relative to the world. It can return nothing if the requested bone is out of bounds, or the entity has no model.",
            "type": "Vector"
          },
          {
            "description": "The bone's angle relative to the world.",
            "type": "Angle"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The bone id, starting at index 0. See <page>Entity:LookupBone</page>.",
            "name": "bone",
            "type": "number"
          }
        ],
        "description": "Returns the surface property of the specified bone. See <page>util.GetSurfaceData</page> for more details about what they are.",
        "name": "GetBoneSurfaceProp",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The surface property of the bone to be used with <page>util.GetSurfaceIndex</page> or an empty string on failure.",
            "type": "string"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The index of the plane to get info of. Starts from 0.",
            "name": "id",
            "type": "number"
          }
        ],
        "description": "Returns info about given plane of non-nodraw brush model surfaces of the entity's model. Works on worldspawn as well.\n\n<warning>This only works on entities with brush models.</warning>",
        "name": "GetBrushPlane",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The origin of the plane.\n\nThis will be either the first vertex's position (if available) or the plane's normal multiplied by the plane's distance.",
            "type": "Vector"
          },
          {
            "description": "The normal of the plane.",
            "type": "Vector"
          },
          {
            "description": "The \"distance\" of the plane.\n\nThe distance is the dot product of the plane's normal and the point it was initialized with.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the amount of planes of non-nodraw brush model surfaces of the entity's model.",
        "name": "GetBrushPlaneCount",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The amount of brush model planes of the entity's model. This will be 0 for any non-brush model.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns a table of brushes surfaces for brush model entities.",
        "name": "GetBrushSurfaces",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Table of <page>SurfaceInfo</page>s if the entity has a brush model, or <page>no value</page> otherwise.",
            "type": "table"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The hook to retrieve the callbacks from, see <page>Entity Callbacks</page> for the possible hooks.",
            "name": "hook",
            "type": "string"
          }
        ],
        "description": "Returns the specified hook callbacks for this entity added with <page>Entity:AddCallback</page>\n\nThe callbacks can then be removed with <page>Entity:RemoveCallback</page>.",
        "name": "GetCallbacks",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "A table containing the callbackid and function of all the callbacks for the specified hook",
            "type": "table"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Bone id to lookup children of",
            "name": "boneid",
            "type": "number"
          }
        ],
        "description": "Returns ids of child bones of given bone.",
        "name": "GetChildBones",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "A table of bone ids",
            "type": "table"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/entity.lua",
          "lineEnd": 210,
          "lineStart": 196
        }
      },
      {
        "description": "Gets the children of the entity - that is, every entity whose move parent is this entity.\n\n<note>This function returns <page>Entity:SetMoveParent</page> children, **NOT** <page>Entity:SetParent</page>!\n\n<page>Entity:SetParent</page> however also calls <page>Entity:SetMoveParent</page>.\n\n\n\nThis means that some entities in the returned list might have a NULL <page>Entity:GetParent</page>.\n\nThis also means that using this function on players will return their weapons on the client but not the server.</note>",
        "name": "GetChildren",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "A list of movement children entities",
            "type": "table<Entity>"
          }
        ]
      },
      {
        "description": "Returns the classname of a entity. This is often the name of the Lua file or folder containing the files for the entity",
        "name": "GetClass",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The entity's classname",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns an entity's collision bounding box.\n\nIn most cases, this will return the same bounding box as <page>Entity:GetModelBounds</page> unless the entity does not have a physics mesh or it has a <page>PhysObj</page> different from the default.\n\nCollision bounds can be previewed in singleplayer via `ent_bbox` console command, while looking at a desired entity and with `developer 1`. (Will appear as an orange wireframe box)",
        "name": "GetCollisionBounds",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The minimum vector of the collision bounds, basically <page>Entity:OBBMins</page>.",
            "type": "Vector"
          },
          {
            "description": "The maximum vector of the collision bounds, basically <page>Entity:OBBMaxs</page>.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the entity's collision group",
        "name": "GetCollisionGroup",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The collision group. See <page>Enums/COLLISION_GROUP</page>",
            "type": "number{COLLISION_GROUP}"
          }
        ]
      },
      {
        "description": "Returns the color the entity is set to.",
        "name": "GetColor",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The color of the entity as a <page>Color</page>.",
            "type": "Color"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/entity.lua",
          "lineEnd": 176,
          "lineStart": 167
        }
      },
      {
        "description": "Returns the color the entity is set to without using a color object.\n\n<internal>Internally used to implement <page>Entity:GetColor</page>.</internal>",
        "name": "GetColor4Part",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "name": "r",
            "type": "number"
          },
          {
            "name": "g",
            "type": "number"
          },
          {
            "name": "b",
            "type": "number"
          },
          {
            "name": "a",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the two entities involved in a constraint ent, or nil if the entity is not a constraint.",
        "name": "GetConstrainedEntities",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "ent1",
            "type": "Entity"
          },
          {
            "description": "ent2",
            "type": "Entity"
          }
        ]
      },
      {
        "description": "Returns the two entities physobjects involved in a constraint ent, or no value if the entity is not a constraint.",
        "name": "GetConstrainedPhysObjects",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "phys1",
            "type": "PhysObj"
          },
          {
            "description": "phys2",
            "type": "PhysObj"
          }
        ]
      },
      {
        "description": "Returns entity's creation ID. Unlike <page>Entity:EntIndex</page> or <page>Entity:MapCreationID</page>.\n\nIt will increase up until value of `10 000 000`, at which point it will reset back to `0`.",
        "name": "GetCreationID",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The creation ID",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the time the entity was created on, relative to <page>Global.CurTime</page>.",
        "name": "GetCreationTime",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The time the entity was created on.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Gets the creator of the SENT.",
        "name": "GetCreator",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The creator, NULL for no creator.",
            "type": "Player"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/entity.lua",
          "lineEnd": 83,
          "lineStart": 81
        }
      },
      {
        "description": "Returns whether this entity uses custom collision check set by <page>Entity:SetCustomCollisionCheck</page>.",
        "name": "GetCustomCollisionCheck",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether this entity uses custom collision check or not",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the frame of the currently played sequence. This will be a number between 0 and 1 as a representation of sequence progress.",
        "name": "GetCycle",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The frame of the currently played sequence",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Goes from 0 to 31.\nSpecifies what key to grab from datatable.",
            "name": "key",
            "type": "number"
          }
        ],
        "description": "<internal></internal>\nThis is called internally by the <page>Entity:NetworkVar</page> system, you can use this in cases where using NetworkVar is not possible.\n\nGet an angle stored in the datatable of the entity.",
        "name": "GetDTAngle",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Requested angle.",
            "type": "Angle"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Goes from 0 to 31.\nSpecifies what key to grab from datatable.",
            "name": "key",
            "type": "number"
          }
        ],
        "description": "<internal></internal>\nThis is called internally by the <page>Entity:NetworkVar</page> system, you can use this in cases where using NetworkVar is not possible.\n\nGet a boolean stored in the datatable of the entity.",
        "name": "GetDTBool",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Requested boolean.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Goes from 0 to 31.\nSpecifies what key to grab from datatable.",
            "name": "key",
            "type": "number"
          }
        ],
        "description": "<internal></internal>\nThis is called internally by the <page>Entity:NetworkVar</page> system, you can use this in cases where using NetworkVar is not possible.\n\nReturns an entity stored in the datatable of the entity.",
        "name": "GetDTEntity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Requested entity.",
            "type": "Entity"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Goes from 0 to 31.\nSpecifies what key to grab from datatable.",
            "name": "key",
            "type": "number"
          }
        ],
        "description": "<internal></internal>\nThis is called internally by the <page>Entity:NetworkVar</page> system, you can use this in cases where using NetworkVar is not possible.\n\nGet a float stored in the datatable of the entity.",
        "name": "GetDTFloat",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Requested float.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Goes from 0 to 31.\nSpecifies what key to grab from datatable.",
            "name": "key",
            "type": "number"
          }
        ],
        "description": "<internal></internal>\nThis is called internally by the <page>Entity:NetworkVar</page> system, you can use this in cases where using NetworkVar is not possible.\n\nGet an integer stored in the datatable of the entity.",
        "name": "GetDTInt",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "32-bit signed integer",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Goes from 0 to 3.\nSpecifies what key to grab from datatable.",
            "name": "key",
            "type": "number"
          }
        ],
        "description": "<internal></internal>\nThis is called internally by the <page>Entity:NetworkVar</page> system, you can use this in cases where using NetworkVar is not possible.\n\nGet a string stored in the datatable of the entity.",
        "name": "GetDTString",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Requested string.",
            "type": "string"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Goes from 0 to 31.\nSpecifies what key to grab from datatable.",
            "name": "key",
            "type": "number"
          }
        ],
        "description": "<internal></internal>\nThis is called internally by the <page>Entity:NetworkVar</page> system, you can use this in cases where using NetworkVar is not possible.\n\nGet a vector stored in the datatable of the entity.",
        "name": "GetDTVector",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Requested vector.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns internal data about editable <page>Entity:NetworkVar</page>s.\n\nThis is used internally by <page>DEntityProperties</page> and <page>Editable Entities</page> system.\n\n<note>This function will only work on entities which had <page>Entity:InstallDataTable</page> called on them, which is done automatically for players and all <page>Scripted Entities</page>\n</note>",
        "name": "GetEditingData",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The internal data",
            "name": "data",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns a bit flag of all engine effect flags of the entity.",
        "name": "GetEffects",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Engine effect flags, see <page>Enums/EF</page>",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns a bit flag of all engine flags of the entity.",
        "name": "GetEFlags",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Engine flags, see <page>Enums/EFL</page>",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the elasticity of this entity, used by some flying entities such as the Helicopter NPC to determine how much it should bounce around when colliding.",
        "name": "GetElasticity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "elasticity",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns all flags of given entity.",
        "name": "GetFlags",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Flags of given entity as a bitflag, see <page>Enums/FL</page>",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The ID of the flex to look up bounds of",
            "name": "flex",
            "type": "number"
          }
        ],
        "description": "Returns acceptable value range for the flex controller, as defined by the model.\n\nUsed with <page>Entity:SetFlexWeight</page>.",
        "name": "GetFlexBounds",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The minimum value for this flex",
            "type": "number"
          },
          {
            "description": "The maximum value for this flex",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the flex to get the ID of. Case sensitive.",
            "name": "name",
            "type": "string"
          }
        ],
        "description": "Returns the ID of the flex based on the beginning or the entire name.",
        "name": "GetFlexIDByName",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The ID of flex\n* `nil` if no flex with given name was found",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The flex index to look up name of. The range is between `0` and <page>Entity:GetFlexNum</page> - 1.",
            "name": "id",
            "type": "number"
          }
        ],
        "description": "Returns the flex controller name at given index.",
        "name": "GetFlexName",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The flex name, or <page>no value</page> if the requested ID is out of bounds.",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns the number of flex controllers this entity's model has.\n\n<note>Please note that while this function can return the real number of flex controllers, the game supports only a certain amount due to networking limitations. See <page>Entity:SetFlexWeight</page>.</note>",
        "name": "GetFlexNum",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The number of flexes.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the flex scale of the entity.",
        "name": "GetFlexScale",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The flex scale",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The flex index to look up type of. The range is between `0` and <page>Entity:GetFlexNum</page> - 1.",
            "name": "id",
            "type": "number"
          }
        ],
        "description": "Returns flex controller type or \"category\". Used internally by Faceposer to categorize flex controllers.",
        "name": "GetFlexType",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The flex type, or <page>no value</page> if the requested ID is out of bounds.",
            "type": "string"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The ID of the flex to get weight of",
            "name": "flex",
            "type": "number"
          }
        ],
        "description": "Returns current weight ( value ) of given flex controller. Please see <page>Entity:SetFlexWeight</page> regarding limitations.",
        "name": "GetFlexWeight",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The current weight of the flex, or 0 if out of bounds.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the forward vector of the entity, as a normalized direction vector",
        "name": "GetForward",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "forwardDir",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the friction modifier for this entity. Entities default to `1` (100%) and can be higher.",
        "name": "GetFriction",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "friction",
            "type": "number"
          }
        ]
      },
      {
        "description": "Gets the gravity multiplier of the entity.",
        "name": "GetGravity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "gravityMultiplier",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the object the entity is standing on.",
        "name": "GetGroundEntity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The ground entity.",
            "type": "Entity"
          }
        ]
      },
      {
        "description": "Returns the entity's ground speed velocity, which is based on the entity's walk/run speed and/or the ground speed of their sequence ( <page>Entity:GetSequenceGroundSpeed</page> ). Will return an empty <page>Vector</page> if the entity isn't moving on the ground.",
        "name": "GetGroundSpeedVelocity",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The ground speed velocity.",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The number of the hit box.",
            "name": "hitbox",
            "type": "number"
          },
          {
            "description": "The number of the hit box set. This should be 0 in most cases.\n\nNumbering for these sets start from 0. The total amount of sets can be found with <page>Entity:GetHitBoxSetCount</page>.",
            "name": "hboxset",
            "type": "number"
          }
        ],
        "description": "Gets the bone the hit box is attached to.",
        "name": "GetHitBoxBone",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The number of the bone. Will be nil if the hit box index was out of range.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The number of the hit box.",
            "name": "hitbox",
            "type": "number"
          },
          {
            "description": "The hitbox set of the hit box. This should be 0 in most cases.",
            "name": "set",
            "type": "number"
          }
        ],
        "description": "Gets the bounds (min and max corners) of a hit box.",
        "name": "GetHitBoxBounds",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Hit box mins. Will be nil if the hit box index was out of range.",
            "type": "Vector"
          },
          {
            "description": "Hit box maxs. Will be nil if the hit box index was out of range.",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The number of the hit box set.",
            "name": "set",
            "type": "number"
          }
        ],
        "description": "Gets how many hit boxes are in a given hit box set.",
        "name": "GetHitBoxCount",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The number of hit boxes.",
            "type": "number"
          }
        ]
      },
      {
        "description": "<deprecated>You should use <page>Entity:GetHitboxSetCount</page> instead.</deprecated>\n\nReturns the number of hit box sets that an entity has. Functionally identical to <page>Entity:GetHitboxSetCount</page>",
        "name": "GetHitBoxGroupCount",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "number of hit box sets",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The number of the hit box.",
            "name": "hitbox",
            "type": "number"
          },
          {
            "description": "The number of the hit box set. This should be 0 in most cases.\n\nNumbering for these sets start from 0. The total group count can be found with <page>Entity:GetHitBoxSetCount</page>.",
            "name": "hitboxset",
            "type": "number"
          }
        ],
        "description": "Gets the hit group of a given hitbox in a given hitbox set.",
        "name": "GetHitBoxHitGroup",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The hitbox group of given hitbox. See <page>Enums/HITGROUP</page>",
            "name": "group",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns entity's current hit box set",
        "name": "GetHitboxSet",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The current hit box set id, or no value if the entity doesn't have hit boxes",
            "type": "number"
          },
          {
            "description": "The current hit box set name, or no value if the entity doesn't have hit boxes",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns the amount of hitbox sets in the entity.",
        "name": "GetHitboxSetCount",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The amount of hitbox sets in the entity.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Name of variable corresponding to an entity save value.",
            "name": "variableName",
            "type": "string"
          }
        ],
        "description": "An interface for accessing internal key values on entities.\n\nSee <page>Entity:GetSaveTable</page> for a more detailed explanation. See <page>Entity:SetSaveValue</page> for the opposite of this function.",
        "name": "GetInternalVariable",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The internal variable value.",
            "type": "any"
          }
        ]
      },
      {
        "description": "Returns a table containing Hammer key values the entity has stored. **Not all key values will be accessible this way.** Use <page>GM:EntityKeyValue</page> or <page>ENTITY:KeyValue</page> to capture and store every key value.\n\nSingle key values can usually be retrieved with <page>Entity:GetInternalVariable</page>.\n\nHere's a list of keyvalues that will not appear in this list, as they are not stored/defined as actual keyvalues internally:\n* rendercolor - <page>Entity:GetColor</page> (Only RGB)\n* rendercolor32 - <page>Entity:GetColor</page> (RGBA)\n* renderamt - <page>Entity:GetColor</page> (Alpha)\n* disableshadows - <page text=\"EF_NOSHADOW\">Enums/EF#EF_NOSHADOW</page>\n* mins - <page>Entity:GetCollisionBounds</page>\n* maxs - <page>Entity:GetCollisionBounds</page>\n* disablereceiveshadows - <page text=\"EF_NORECEIVESHADOW\">Enums/EF#EF_NORECEIVESHADOW</page>\n* nodamageforces - <page text=\"EFL_NO_DAMAGE_FORCES\">Enums/EFL#EFL_NO_DAMAGE_FORCES</page>\n* angle - <page>Entity:GetAngles</page>\n* angles - <page>Entity:GetAngles</page>\n* origin - <page>Entity:GetPos</page>\n* targetname - <page>Entity:GetName</page>",
        "name": "GetKeyValues",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "A table of key values.",
            "type": "table"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The Layer ID",
            "name": "layerID",
            "type": "number"
          }
        ],
        "description": "Returns the animation cycle/frame for given layer.\n\n<note>This function only works on <page>BaseAnimatingOverlay</page> entities.</note>",
        "name": "GetLayerCycle",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The animation cycle/frame for given layer.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The Layer ID",
            "name": "layerID",
            "type": "number"
          }
        ],
        "description": "Returns the duration of given layer.\n\n<note>This function only works on <page>BaseAnimatingOverlay</page> entities.</note>",
        "name": "GetLayerDuration",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The duration of the layer",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The Layer ID",
            "name": "layerID",
            "type": "number"
          }
        ],
        "description": "Returns the layer playback rate. See also <page>Entity:GetLayerDuration</page>.\n<note>This function only works on <page>BaseAnimatingOverlay</page> entities.</note>",
        "name": "GetLayerPlaybackRate",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The current playback rate.",
            "name": "rate",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The Layer ID.",
            "name": "layerID",
            "type": "number"
          }
        ],
        "description": "Returns the sequence id of given layer.\n\n<note>This function only works on <page>BaseAnimatingOverlay</page> entities.</note>",
        "name": "GetLayerSequence",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The sequenceID of the layer.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The Layer ID",
            "name": "layerID",
            "type": "number"
          }
        ],
        "description": "Returns the current weight of the layer. See <page>Entity:SetLayerWeight</page> for more information.\n\n<note>This function only works on <page>BaseAnimatingOverlay</page> entities.</note>",
        "name": "GetLayerWeight",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The current weight of the layer",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the entity that is being used as the light origin position for this entity.",
        "name": "GetLightingOriginEntity",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The lighting entity. This will usually be NULL.",
            "type": "Entity"
          }
        ]
      },
      {
        "description": "Returns the rotation of the entity relative to its parent entity.",
        "name": "GetLocalAngles",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Relative angle",
            "type": "Angle"
          }
        ]
      },
      {
        "description": "Returns the non-VPhysics angular velocity of the entity relative to its parent entity.",
        "name": "GetLocalAngularVelocity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The velocity",
            "type": "Angle"
          }
        ]
      },
      {
        "description": "Returns entity's position relative to it's <page>Entity:GetParent</page>.\n\nSee <page>Entity:GetPos</page> for the absolute position.",
        "name": "GetLocalPos",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Relative position",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The bone's ID",
            "name": "boneID",
            "type": "number"
          }
        ],
        "description": "Gets the entity's angle manipulation of the given bone. This is relative to the default angle, so the angle is zero when unmodified.",
        "name": "GetManipulateBoneAngles",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The entity's angle manipulation of the given bone.",
            "type": "Angle"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The bone ID",
            "name": "boneID",
            "type": "number"
          }
        ],
        "description": "Returns the jiggle amount of the entity's bone.\n\nSee <page>Entity:ManipulateBoneJiggle</page> for more info.",
        "name": "GetManipulateBoneJiggle",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The jiggle bone type, as set by <page>Entity:ManipulateBoneJiggle</page>.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The bone's ID",
            "name": "boneId",
            "type": "number"
          }
        ],
        "description": "Gets the entity's position manipulation of the given bone. This is relative to the default position, so it is zero when unmodified.",
        "name": "GetManipulateBonePosition",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The entity's position manipulation of the given bone.",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The bone's ID",
            "name": "boneID",
            "type": "number"
          }
        ],
        "description": "Gets the entity's scale manipulation of the given bone. Normal scale is Vector( 1, 1, 1 )",
        "name": "GetManipulateBoneScale",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The entity's scale manipulation of the given bone",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the material override for this entity.\n\nReturns an empty string if no material override exists. Use <page>Entity:GetMaterials</page> to list its default materials.\n\n<bug issue=\"3362\">The server's value takes priority on the client.</bug>",
        "name": "GetMaterial",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "material",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns all materials of the entity's model.\n\nThis function is unaffected by <page>Entity:SetSubMaterial</page> as it returns the original materials.\n\n<bug>The table returned by this function will not contain materials if they are missing from the disk/repository. This means that if you are attempting to find the ID of a material to replace with <page>Entity:SetSubMaterial</page> and there are missing materials on the model, all subsequent materials will be offset in the table, meaning that the ID you are trying to get will be incorrect.</bug>",
        "name": "GetMaterials",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "A table containing full paths to the materials of the model.\n\nFor models, it's limited to 128 materials.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns the [surface material type](https://developer.valvesoftware.com/wiki/Material_Types) of this entity.\n\nThis can be approximated clientside via <page>util.GetModelInfo</page>.\n\nInternally, all this does is return `gamematerial` of the surface property on the first physics object of the entity. You can do this yourself using <page>PhysObj:GetMaterial</page> and <page>util.GetSurfaceData</page>.",
        "name": "GetMaterialType",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Surface material type.",
            "type": "number{MAT}"
          }
        ]
      },
      {
        "description": "Returns the max health that the entity was given. It can be set via <page>Entity:SetMaxHealth</page>.",
        "name": "GetMaxHealth",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Max health.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Gets the model of given entity.\n\n<bug>This does not necessarily return the model's path, as is the case for brush and virtual models. This is intentional behaviour, however, there is currently no way to retrieve the actual file path.\n\nThis also affects certain models that are edited by 3rd party programs after being compiled.</bug>",
        "name": "GetModel",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The entity's model. Will be a filesystem path for most models.\n\nThis will be <page>nil</page> for entities which cannot have models, such as point entities.",
            "type": "string|nil"
          }
        ]
      },
      {
        "description": "Returns the entity's model bounds, not scaled by <page>Entity:SetModelScale</page>.\n\nThese bounds are affected by all the animations the model has at compile time, if they go outside of the models' render bounds at any point.\nSee <page>Entity:GetModelRenderBounds</page> for just the render bounds of the model.\n\nThis is different than the collision bounds/hull, which are set via <page>Entity:SetCollisionBounds</page>.",
        "name": "GetModelBounds",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The minimum vector of the bounds",
            "type": "Vector"
          },
          {
            "description": "The maximum vector of the bounds",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the contents of the entity's current model.",
        "name": "GetModelContents",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The contents of the entity's model. See <page>Enums/CONTENTS</page>.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Gets the physics bone count of the entity's model. This is only applicable to `anim` type <page>Scripted Entities</page> with ragdoll models.",
        "name": "GetModelPhysBoneCount",
        "parent": "Entity",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "How many physics bones exist on the model.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Gets the models radius.",
        "name": "GetModelRadius",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The radius of the model.\n<warning>This can return <page>nil</page> instead of a <page>number</page> in some cases.</warning>",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the entity's model render bounds. Unlike <page>Entity:GetModelBounds</page>, bounds returning by this function will not be affected by animations (at compile time).",
        "name": "GetModelRenderBounds",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The minimum vector of the bounds",
            "type": "Vector"
          },
          {
            "description": "The maximum vector of the bounds",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Gets the selected entity's model scale.",
        "name": "GetModelScale",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Scale of that entity's model.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The angle of rotation to compare - usually should be <page>Entity:GetAngles</page>.",
            "name": "turnAngle",
            "type": "Angle"
          }
        ],
        "description": "Returns the amount a momentary_rot_button entity is turned based on the given angle. 0 meaning completely turned closed, 1 meaning completely turned open.\n\n<warning>This only works on momentary_rot_button entities.</warning>",
        "name": "GetMomentaryRotButtonPos",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The amount the momentary_rot_button is turned, ranging from 0 to 1, or nil if the entity is not a momentary_rot_button.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the move collide type of the entity. The move collide is the way a physics object reacts to hitting an object - will it bounce, slide?",
        "name": "GetMoveCollide",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The move collide type, see <page>Enums/MOVECOLLIDE</page>",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the movement parent of this entity.\n\nSee <page>Entity:SetMoveParent</page> for more info.",
        "name": "GetMoveParent",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The movement parent of this entity.",
            "type": "Entity"
          }
        ]
      },
      {
        "description": "Returns the entity's movetype",
        "name": "GetMoveType",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Move type. See <page>Enums/MOVETYPE</page>",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the map/hammer targetname of this entity.",
        "name": "GetName",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The name of the Entity",
            "type": "string"
          }
        ]
      },
      {
        "description": "Gets networked angles for entity.",
        "name": "GetNetworkAngles",
        "parent": "Entity",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "angle",
            "type": "Angle"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key that is associated with the value",
            "name": "key",
            "type": "string"
          },
          {
            "default": "Angle( 0, 0, 0 )",
            "description": "The value to return if we failed to retrieve the value. (If it isn't set)",
            "name": "fallback",
            "type": "any"
          }
        ],
        "description": "Retrieves a networked angle value at specified index on the entity that is set by <page>Entity:SetNetworked2Angle</page>.\n<deprecated>You should be using <page>Entity:GetNW2Angle</page> instead.</deprecated>",
        "name": "GetNetworked2Angle",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value associated with the key",
            "type": "any"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key that is associated with the value",
            "name": "key",
            "type": "string"
          },
          {
            "default": "false",
            "description": "The value to return if we failed to retrieve the value. (If it isn't set)",
            "name": "fallback",
            "type": "any"
          }
        ],
        "description": "Retrieves a networked boolean value at specified index on the entity that is set by <page>Entity:SetNetworked2Bool</page>.\n<deprecated>You should be using <page>Entity:GetNW2Bool</page> instead.</deprecated>",
        "name": "GetNetworked2Bool",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value associated with the key",
            "type": "any"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key that is associated with the value",
            "name": "key",
            "type": "string"
          },
          {
            "default": "NULL",
            "description": "The value to return if we failed to retrieve the value. (If it isn't set)",
            "name": "fallback",
            "type": "any"
          }
        ],
        "description": "Retrieves a networked entity value at specified index on the entity that is set by <page>Entity:SetNetworked2Entity</page>.\n<deprecated>You should be using <page>Entity:GetNW2Entity</page> instead.</deprecated>",
        "name": "GetNetworked2Entity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value associated with the key",
            "type": "any"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key that is associated with the value",
            "name": "key",
            "type": "string"
          },
          {
            "default": "0",
            "description": "The value to return if we failed to retrieve the value. (If it isn't set)",
            "name": "fallback",
            "type": "any"
          }
        ],
        "description": "Retrieves a networked float value at specified index on the entity that is set by <page>Entity:SetNetworked2Float</page>.\n<deprecated>You should be using <page>Entity:GetNW2Float</page> instead.</deprecated>",
        "name": "GetNetworked2Float",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value associated with the key",
            "type": "any"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key that is associated with the value",
            "name": "key",
            "type": "string"
          },
          {
            "default": "0",
            "description": "The value to return if we failed to retrieve the value (If it isn't set).",
            "name": "fallback",
            "type": "any"
          }
        ],
        "description": "Retrieves a networked integer (whole number) value that was previously set by <page>Entity:SetNetworked2Int</page>.\n<deprecated>You should be using <page>Entity:GetNW2Int</page> instead.</deprecated>\n<warning>The integer has a 32 bit limit. Use <page>Entity:SetNWInt</page> and <page>Entity:GetNWInt</page> instead</warning>",
        "name": "GetNetworked2Int",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value associated with the key",
            "type": "any"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key that is associated with the value",
            "name": "key",
            "type": "string"
          },
          {
            "default": "",
            "description": "The value to return if we failed to retrieve the value. (If it isn't set)",
            "name": "fallback",
            "type": "any"
          }
        ],
        "description": "Retrieves a networked string value at specified index on the entity that is set by <page>Entity:SetNetworked2String</page>.\n<deprecated>You should be using <page>Entity:GetNW2String</page> instead.</deprecated>",
        "name": "GetNetworked2String",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value associated with the key",
            "type": "any"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key that is associated with the value",
            "name": "key",
            "type": "string"
          },
          {
            "default": "nil",
            "description": "The value to return if we failed to retrieve the value. (If it isn't set)",
            "name": "fallback",
            "type": "any"
          }
        ],
        "description": "Retrieves a networked value at specified index on the entity that is set by <page>Entity:SetNetworked2Var</page>.\n<deprecated>You should be using <page>Entity:GetNW2Var</page> instead.</deprecated>",
        "name": "GetNetworked2Var",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value associated with the key",
            "type": "any"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key of the NWVar to get callback of.",
            "name": "key",
            "type": "any"
          }
        ],
        "description": "<deprecated>You should be using <page>Entity:GetNW2VarProxy</page> instead.</deprecated>\n\nReturns callback function for given NWVar of this entity. Alias of <page>Entity:GetNW2VarProxy</page>",
        "name": "GetNetworked2VarProxy",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The callback of given NWVar, or nil if not found.",
            "type": "function"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/entity.lua",
          "lineEnd": 624,
          "lineStart": 613
        }
      },
      {
        "description": "Returns all the networked2 variables in an entity.\n<deprecated>You should be using <page>Entity:GetNW2VarTable</page> instead.</deprecated>",
        "name": "GetNetworked2VarTable",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Key-Value table of all networked2 variables.",
            "type": "table"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key that is associated with the value",
            "name": "key",
            "type": "string"
          },
          {
            "default": "Vector( 0, 0, 0 )",
            "description": "The value to return if we failed to retrieve the value. (If it isn't set)",
            "name": "fallback",
            "type": "any"
          }
        ],
        "description": "Retrieves a networked vector value at specified index on the entity that is set by <page>Entity:SetNetworked2Vector</page>.\n<deprecated>You should be using <page>Entity:GetNW2Vector</page> instead.</deprecated>",
        "name": "GetNetworked2Vector",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value associated with the key",
            "type": "any"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key that is associated with the value",
            "name": "key",
            "type": "string"
          },
          {
            "default": "Angle( 0, 0, 0 )",
            "description": "The value to return if we failed to retrieve the value. ( If it isn't set )",
            "name": "fallback",
            "type": "Angle"
          }
        ],
        "description": "<deprecated>You should use <page>Entity:GetNWAngle</page> instead.</deprecated>\n\nRetrieves a networked angle value at specified index on the entity that is set by <page>Entity:SetNetworkedAngle</page>.",
        "name": "GetNetworkedAngle",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The retrieved value",
            "type": "Angle"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key that is associated with the value",
            "name": "key",
            "type": "string"
          },
          {
            "default": "false",
            "description": "The value to return if we failed to retrieve the value. ( If it isn't set )",
            "name": "fallback",
            "type": "boolean"
          }
        ],
        "description": "<deprecated>You should use <page>Entity:GetNWBool</page> instead.</deprecated>\n\nRetrieves a networked boolean value at specified index on the entity that is set by <page>Entity:SetNetworkedBool</page>.",
        "name": "GetNetworkedBool",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The retrieved value",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key that is associated with the value",
            "name": "key",
            "type": "string"
          },
          {
            "default": "NULL",
            "description": "The value to return if we failed to retrieve the value. ( If it isn't set )",
            "name": "fallback",
            "type": "Entity"
          }
        ],
        "description": "<deprecated>You should use <page>Entity:GetNWEntity</page> instead.</deprecated>\n\nRetrieves a networked float value at specified index on the entity that is set by <page>Entity:SetNetworkedEntity</page>.",
        "name": "GetNetworkedEntity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The retrieved value",
            "type": "Entity"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key that is associated with the value",
            "name": "key",
            "type": "string"
          },
          {
            "default": "0",
            "description": "The value to return if we failed to retrieve the value. ( If it isn't set )",
            "name": "fallback",
            "type": "number"
          }
        ],
        "description": "<deprecated>You should use <page>Entity:GetNWFloat</page> instead.</deprecated>\n\nRetrieves a networked float value at specified index on the entity that is set by <page>Entity:SetNetworkedFloat</page>.\n\nSeems to be the same as <page>Entity:GetNetworkedInt</page>.",
        "name": "GetNetworkedFloat",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The retrieved value",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key that is associated with the value",
            "name": "key",
            "type": "string"
          },
          {
            "default": "0",
            "description": "The value to return if we failed to retrieve the value. ( If it isn't set )",
            "name": "fallback",
            "type": "number"
          }
        ],
        "description": "<deprecated>You should use <page>Entity:GetNWInt</page> instead.</deprecated>\n\nRetrieves a networked integer value at specified index on the entity that is set by <page>Entity:SetNetworkedInt</page>.",
        "name": "GetNetworkedInt",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The retrieved value",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key that is associated with the value",
            "name": "key",
            "type": "string"
          },
          {
            "default": "",
            "description": "The value to return if we failed to retrieve the value. ( If it isn't set )",
            "name": "fallback",
            "type": "string"
          }
        ],
        "description": "<deprecated>You should use <page>Entity:GetNWString</page> instead.</deprecated>\n\nRetrieves a networked string value at specified index on the entity that is set by <page>Entity:SetNetworkedString</page>.",
        "name": "GetNetworkedString",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The retrieved value",
            "type": "string"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key that is associated with the value",
            "name": "key",
            "type": "string"
          },
          {
            "default": "nil",
            "description": "The value to return if we failed to retrieve the value. (If it isn't set)",
            "name": "fallback",
            "type": "any"
          }
        ],
        "description": "Retrieves a networked value at specified index on the entity that is set by <page>Entity:SetNetworkedVar</page>.\n<deprecated></deprecated>",
        "name": "GetNetworkedVar",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value associated with the key",
            "type": "any"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the NWVar to get callback of.",
            "name": "name",
            "type": "string"
          }
        ],
        "description": "<removed>This function was superseded by <page>Entity:GetNetworked2VarProxy</page>. This page still exists an archive in case anybody ever stumbles across old code and needs to know what it is</removed>\nReturns callback function for given NWVar of this entity, previously set by <page>Entity:SetNWVarProxy</page>.",
        "name": "GetNetworkedVarProxy",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The callback of given NWVar, if any.\n<callback>\n<arg type=\"Entity\" name=\"ent\">The entity</arg>\n<arg type=\"string\" name=\"name\">Name of the NWVar that has changed</arg>\n<arg type=\"any\" name=\"oldval\">The old value</arg>\n<arg type=\"any\" name=\"newval\">The new value</arg>\n</callback>",
            "type": "function"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/entity.lua",
          "lineEnd": 506,
          "lineStart": 495
        }
      },
      {
        "description": "<deprecated>You should be using <page>Entity:GetNWVarTable</page> instead.</deprecated>\n\nReturns all the networked variables in an entity.",
        "name": "GetNetworkedVarTable",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Key-Value table of all networked variables.",
            "type": "table<string,any>"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key that is associated with the value",
            "name": "key",
            "type": "string"
          },
          {
            "default": "Vector( 0, 0, 0 )",
            "description": "The value to return if we failed to retrieve the value. ( If it isn't set )",
            "name": "fallback",
            "type": "Vector"
          }
        ],
        "description": "<deprecated>You should use <page>Entity:GetNWVector</page> instead.</deprecated>\n\nRetrieves a networked vector value at specified index on the entity that is set by <page>Entity:SetNetworkedVector</page>.",
        "name": "GetNetworkedVector",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The retrieved value",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Gets networked origin for entity.\n<note>\nOn the Client, this seems to return the position relative to the parent (if it has one). On the server-side this will return what you expect even if it has a parent.\n</note>",
        "name": "GetNetworkOrigin",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The last received origin of the entity.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns all network vars created by <page>Entity:NetworkVar</page> and <page>Entity:NetworkVarElement</page> and their current values.\n\nThis is used internally by the duplicator. `Entity` type Network vars will not be returned!\n\nFor NWVars see <page>Entity:GetNWVarTable</page>.\n\n<note>This function will only work on entities which had <page>Entity:InstallDataTable</page> called on them, which is done automatically for players and all <page>Scripted Entities</page></note>",
        "name": "GetNetworkVars",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The Key-Value formatted table of network var names and their current values",
            "name": "data",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns if the entity's rendering and transmitting has been disabled.\n\n<note>This is equivalent to calling <page>Entity:IsEffectActive</page>( EF_NODRAW )</note>",
        "name": "GetNoDraw",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the entity's rendering and transmitting has been disabled.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the number of Body Groups that the <page text=\"Entity's\">Entity</page> model contains.\n\n<note>\nWeapons will return results from their viewmodels.\n</note>",
        "name": "GetNumBodyGroups",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The amount of Body Groups on the Entity's model.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the number of pose parameters this entity has.",
        "name": "GetNumPoseParameters",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Amount of pose parameters the entity has",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key that is associated with the value",
            "name": "key",
            "type": "string"
          },
          {
            "default": "Angle( 0, 0, 0 )",
            "description": "The value to return if we failed to retrieve the value. (If it isn't set)",
            "name": "fallback",
            "type": "any"
          }
        ],
        "description": "Retrieves a networked angle value at specified index on the entity that is set by <page>Entity:SetNW2Angle</page>.",
        "name": "GetNW2Angle",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value associated with the key",
            "type": "any"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key that is associated with the value",
            "name": "key",
            "type": "string"
          },
          {
            "default": "false",
            "description": "The value to return if we failed to retrieve the value. (If it isn't set)",
            "name": "fallback",
            "type": "any"
          }
        ],
        "description": "Retrieves a networked boolean value at specified index on the entity that is set by <page>Entity:SetNW2Bool</page>.",
        "name": "GetNW2Bool",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value associated with the key",
            "type": "any"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key that is associated with the value",
            "name": "key",
            "type": "string"
          },
          {
            "default": "NULL",
            "description": "The value to return if we failed to retrieve the value. (If it isn't set)",
            "name": "fallback",
            "type": "any"
          }
        ],
        "description": "Retrieves a networked entity value at specified index on the entity that is set by <page>Entity:SetNW2Entity</page>.",
        "name": "GetNW2Entity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value associated with the key",
            "type": "any"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key that is associated with the value",
            "name": "key",
            "type": "string"
          },
          {
            "default": "0",
            "description": "The value to return if we failed to retrieve the value. (If it isn't set)",
            "name": "fallback",
            "type": "any"
          }
        ],
        "description": "Retrieves a networked float value at specified index on the entity that is set by <page>Entity:SetNW2Float</page>.",
        "name": "GetNW2Float",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value associated with the key",
            "type": "any"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key that is associated with the value",
            "name": "key",
            "type": "string"
          },
          {
            "default": "0",
            "description": "The value to return if we failed to retrieve the value (If it isn't set).",
            "name": "fallback",
            "type": "any"
          }
        ],
        "description": "Retrieves a networked integer (whole number) value that was previously set by <page>Entity:SetNW2Int</page>.\n<warning>The integer has a 32 bit limit. Use <page>Entity:SetNWInt</page> and <page>Entity:GetNWInt</page> instead</warning>",
        "name": "GetNW2Int",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value associated with the key",
            "type": "any"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key that is associated with the value",
            "name": "key",
            "type": "string"
          },
          {
            "default": "",
            "description": "The value to return if we failed to retrieve the value. (If it isn't set)",
            "name": "fallback",
            "type": "any"
          }
        ],
        "description": "Retrieves a networked string value at specified index on the entity that is set by <page>Entity:SetNW2String</page>.",
        "name": "GetNW2String",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value associated with the key",
            "type": "any"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key that is associated with the value",
            "name": "key",
            "type": "string"
          },
          {
            "default": "nil",
            "description": "The value to return if we failed to retrieve the value. (If it isn't set)",
            "name": "fallback",
            "type": "any"
          }
        ],
        "description": "Retrieves a networked value at specified index on the entity that is set by <page>Entity:SetNW2Var</page>.",
        "name": "GetNW2Var",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value associated with the key",
            "type": "any"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key of the NWVar to get callback of.",
            "name": "key",
            "type": "any"
          }
        ],
        "description": "Returns callback function for given NWVar of this entity.",
        "name": "GetNW2VarProxy",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The callback of given NWVar, or nil if not found.\n\n<callback>\n<arg type=\"Entity\" name=\"ent\">The entity</arg>\n<arg type=\"string\" name=\"name\">Name of the NW2Var that has changed</arg>\n<arg type=\"any\" name=\"oldval\">The old value</arg>\n<arg type=\"any\" name=\"newval\">The new value</arg>\n</callback>",
            "type": "function"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/entity.lua",
          "lineStart": 627
        }
      },
      {
        "description": "Returns all the NW2 variables in an entity.\n<bug issue=\"5396\">This function will return keys with empty tables if the NW2Var is nil.</bug>",
        "name": "GetNW2VarTable",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Key-Value table of all NW2 variables.",
            "type": "table"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key that is associated with the value",
            "name": "key",
            "type": "string"
          },
          {
            "default": "Vector( 0, 0, 0 )",
            "description": "The value to return if we failed to retrieve the value. (If it isn't set)",
            "name": "fallback",
            "type": "any"
          }
        ],
        "description": "Retrieves a networked vector value at specified index on the entity that is set by <page>Entity:SetNW2Vector</page>.",
        "name": "GetNW2Vector",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value associated with the key",
            "type": "any"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key that is associated with the value",
            "name": "key",
            "type": "string"
          },
          {
            "default": "Angle( 0, 0, 0 )",
            "description": "The value to return if we failed to retrieve the value. (If it isn't set)",
            "name": "fallback",
            "type": "any"
          }
        ],
        "description": "Retrieves a networked angle value at specified index on the entity that is set by <page>Entity:SetNWAngle</page>.",
        "name": "GetNWAngle",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value associated with the key",
            "type": "any"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key that is associated with the value",
            "name": "key",
            "type": "string"
          },
          {
            "default": "false",
            "description": "The value to return if we failed to retrieve the value. (If it isn't set)",
            "name": "fallback",
            "type": "any"
          }
        ],
        "description": "Retrieves a networked boolean value at specified index on the entity that is set by <page>Entity:SetNWBool</page>.",
        "name": "GetNWBool",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value associated with the key",
            "type": "any"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key that is associated with the value",
            "name": "key",
            "type": "string"
          },
          {
            "default": "NULL",
            "description": "The value to return if we failed to retrieve the value. (If it isn't set)",
            "name": "fallback",
            "type": "any"
          }
        ],
        "description": "Retrieves a networked entity value at specified index on the entity that is set by <page>Entity:SetNWEntity</page>.",
        "name": "GetNWEntity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value associated with the key",
            "type": "any"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key that is associated with the value",
            "name": "key",
            "type": "string"
          },
          {
            "default": "0",
            "description": "The value to return if we failed to retrieve the value. (If it isn't set)",
            "name": "fallback",
            "type": "any"
          }
        ],
        "description": "Retrieves a networked float value at specified index on the entity that is set by <page>Entity:SetNWFloat</page>.",
        "name": "GetNWFloat",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value associated with the key",
            "type": "any"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key that is associated with the value",
            "name": "key",
            "type": "string"
          },
          {
            "default": "0",
            "description": "The value to return if we failed to retrieve the value (If it isn't set).",
            "name": "fallback",
            "type": "any"
          }
        ],
        "description": "Retrieves a networked integer (whole number) value that was previously set by <page>Entity:SetNWInt</page>.\n\n<bug issue=\"3374\">This function will not round decimal values as it actually networks a float internally.</bug>",
        "name": "GetNWInt",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value associated with the key",
            "type": "any"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key that is associated with the value",
            "name": "key",
            "type": "string"
          },
          {
            "default": "",
            "description": "The value to return if we failed to retrieve the value. (If it isn't set)",
            "name": "fallback",
            "type": "any"
          }
        ],
        "description": "Retrieves a networked string value at specified index on the entity that is set by <page>Entity:SetNWString</page>.",
        "name": "GetNWString",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value associated with the key",
            "type": "any"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key of the NWVar to get callback of.",
            "name": "key",
            "type": "string"
          }
        ],
        "description": "Returns callback function for given NWVar of this entity, previously set by <page>Entity:SetNWVarProxy</page>.\n<removed>This function was superseded by <page>Entity:GetNW2VarProxy</page>. This page still exists an archive in case anybody ever stumbles across old code and needs to know what it is</removed>",
        "name": "GetNWVarProxy",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The callback of given NWVar, or nil if not found.\n\n<callback>\n<arg type=\"Entity\" name=\"ent\">The entity</arg>\n<arg type=\"string\" name=\"name\">Name of the NWVar that has changed</arg>\n<arg type=\"any\" name=\"oldval\">The old value</arg>\n<arg type=\"any\" name=\"newval\">The new value</arg>\n</callback>",
            "type": "function"
          }
        ]
      },
      {
        "description": "Returns all the networked variables in an entity.",
        "name": "GetNWVarTable",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Key-Value table of all networked variables.",
            "type": "table<string,any>"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key that is associated with the value",
            "name": "key",
            "type": "string"
          },
          {
            "default": "Vector( 0, 0, 0 )",
            "description": "The value to return if we failed to retrieve the value. (If it isn't set)",
            "name": "fallback",
            "type": "any"
          }
        ],
        "description": "Retrieves a networked vector value at specified index on the entity that is set by <page>Entity:SetNWVector</page>.",
        "name": "GetNWVector",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value associated with the key",
            "type": "any"
          }
        ]
      },
      {
        "description": "Returns the owner entity of this entity. See <page>Entity:SetOwner</page> for more info.\n\n<note>This function is generally used to disable physics interactions on projectiles being fired by their owner, but can also be used for normal ownership in case physics interactions are not involved at all. The Gravity gun will be able to pick up the entity even if the owner can't collide with it, the Physics gun however will not.</note>",
        "name": "GetOwner",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The owner entity of this entity.",
            "type": "Entity"
          }
        ]
      },
      {
        "description": "Returns the parent entity of this entity.",
        "name": "GetParent",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "parentEntity",
            "type": "Entity"
          }
        ]
      },
      {
        "description": "Returns the attachment/bone index of the entity's parent. Returns 0 if the entity is not parented to an attachment/bone or if it isn't parented at all.\n\nThis is set by second argument of <page>Entity:SetParent</page> or the **SetParentAttachment** input.",
        "name": "GetParentAttachment",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The parented attachment/bone index\n<note>Will return bone index instead of attachment index if the **EF_FOLLOWBONE** effect is active on the entity. See <page>Entity:IsEffectActive</page>.</note>",
            "type": "number"
          }
        ]
      },
      {
        "description": "If the entity is parented to an entity that has a model with multiple physics objects (like a ragdoll), this is used to retrieve what physics object number the entity is parented to on it's parent.",
        "name": "GetParentPhysNum",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The physics object id, or nil if the entity has no parent",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the position and angle of the entity's move parent as a 3x4 matrix (<page>VMatrix</page> is 4x4 so the fourth row goes unused). The first three columns store the angle as a [rotation matrix](https://en.wikipedia.org/wiki/Rotation_matrix), and the fourth column stores the position vector.",
        "name": "GetParentWorldTransformMatrix",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The position and angle matrix.\n\nIf the entity has no move parent, an identity matrix will be returned.\nIf the entity is <page text=\"parented to attachment\">Entity:GetParentAttachment</page> 0 or the parent isn't a BaseAnimating entity, the equivalent of <page>Entity</page>:<page text=\"GetMoveParent()\">Entity:GetMoveParent</page>:<page text=\"GetWorldTransformMatrix()\">Entity:GetWorldTransformMatrix</page> will be returned.",
            "type": "VMatrix"
          }
        ]
      },
      {
        "description": "Returns whether the entity is persistent or not.\n\nSee <page>Entity:SetPersistent</page> for more information on persistence.",
        "name": "GetPersistent",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "True if the entity is set to be persistent.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "default": "1",
            "description": "The time to check if the entity was still a proper physics attacker.\n\n<note>Some entities such as the Combine Ball disregard the time limit and always return the physics attacker.</note>",
            "name": "timeLimit",
            "type": "number"
          }
        ],
        "description": "Returns player who is claiming kills of physics damage the entity deals.",
        "name": "GetPhysicsAttacker",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The player. If entity that was set is not a player, it will return NULL entity.",
            "type": "Player"
          }
        ]
      },
      {
        "description": "Returns the entity's physics object, if the entity has physics.\n\n<note>Entities don't have clientside physics objects by default, so this will return `[NULL PHYSOBJ]` on the client in most cases.</note>",
        "name": "GetPhysicsObject",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The entity's physics object.",
            "type": "PhysObj"
          }
        ]
      },
      {
        "description": "Returns the number of physics objects an entity has (usually 1 for non-ragdolls)",
        "name": "GetPhysicsObjectCount",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "numObjects",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The number corresponding to the <page>PhysObj</page> to grab. Starts at 0.",
            "name": "physNum",
            "type": "number"
          }
        ],
        "description": "Returns a specific physics object from an entity with multiple <page>PhysObj</page>ects (like ragdolls)\n\nSee also <page>Entity:TranslateBoneToPhysBone</page>.",
        "name": "GetPhysicsObjectNum",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The physics object or nil if not found",
            "type": "PhysObj"
          }
        ]
      },
      {
        "description": "Returns the playback rate of the main sequence on this entity, with 1.0 being the default speed.",
        "name": "GetPlaybackRate",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The playback rate.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Gets the position of given entity in the world.\n\nSee <page>Entity:GetLocalPos</page> for the position relative to the entity's <page>Entity:GetParent</page>.",
        "name": "GetPos",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The position of the entity.",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Pose parameter name to look up. Can also be a pose parameter ID.",
            "name": "name",
            "type": "string"
          }
        ],
        "description": "Returns the pose parameter value",
        "name": "GetPoseParameter",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Value of given pose parameter.\n\n<warning>This value will be from 0 - 1 on the client and from minimum range to maximum range on the server! You'll have to <page text=\"remap\">math.Remap</page> this value clientside to <page>Entity:GetPoseParameterRange</page>'s returns if you want get the actual pose parameter value. See <page>Entity:SetPoseParameter</page>'s example.</warning>",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Id of the pose paremeter",
            "name": "id",
            "type": "number"
          }
        ],
        "description": "Returns name of given pose parameter",
        "name": "GetPoseParameterName",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Name of given pose parameter",
            "type": "string"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Pose parameter ID to look up. Can also be a pose parameter name.",
            "name": "id",
            "type": "number"
          }
        ],
        "description": "Returns pose parameter range",
        "name": "GetPoseParameterRange",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The minimum value",
            "type": "number"
          },
          {
            "description": "The maximum value",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns whether this entity is predictable or not.\n\nSee <page>Entity:SetPredictable</page> for more information",
        "name": "GetPredictable",
        "parent": "Entity",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Whether this entity is predictable or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The player who is holding the object.",
            "name": "ply",
            "type": "Player"
          }
        ],
        "description": "Called to override the preferred carry angles of this object.\n\n<note>This callback is only called for `anim` and `ai` type entities. For rest use <page>GM:GetPreferredCarryAngles</page>.</note>",
        "name": "GetPreferredCarryAngles",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Return an angle to override the carry angles.",
            "type": "Angle"
          }
        ]
      },
      {
        "description": "Returns the entity which the ragdoll came from. The opposite of <page>Player:GetRagdollEntity</page>.",
        "name": "GetRagdollOwner",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The entity who owns the ragdoll.",
            "type": "Entity"
          }
        ]
      },
      {
        "description": "Returns the entity's render angles, set by <page>Entity:SetRenderAngles</page> in a drawing hook.",
        "name": "GetRenderAngles",
        "parent": "Entity",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The entitys render angles",
            "type": "Angle"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/entity.lua",
          "lineStart": 16
        }
      },
      {
        "description": "Returns render bounds of the entity as local vectors. Can be overridden by <page>Entity:SetRenderBounds</page>.\n\nIf the render bounds are not inside players view, the entity will not be drawn!",
        "name": "GetRenderBounds",
        "parent": "Entity",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The minimum vector of the bounds",
            "type": "Vector"
          },
          {
            "description": "The maximum vector of the bounds.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns current render FX of the entity.",
        "name": "GetRenderFX",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The current render FX of the entity. See <page>Enums/kRenderFx</page>",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the render group of the entity.",
        "name": "GetRenderGroup",
        "parent": "Entity",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The render group. See <page>Enums/RENDERGROUP</page>",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the render mode of the entity.",
        "name": "GetRenderMode",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The render Mode. See <page>Enums/RENDERMODE</page>",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the entity's render origin, set by <page>Entity:SetRenderOrigin</page> in a drawing hook.",
        "name": "GetRenderOrigin",
        "parent": "Entity",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The entitys render origin",
            "type": "Vector"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/entity.lua",
          "lineStart": 17
        }
      },
      {
        "description": "Returns the rightward vector of the entity, as a normalized direction vector",
        "name": "GetRight",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "rightDir",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Minimum extent of an OBB in local coordinates.",
            "name": "min",
            "type": "Vector"
          },
          {
            "description": "Maximum extent of an OBB in local coordinates.",
            "name": "max",
            "type": "Vector"
          }
        ],
        "description": "Returns axis-aligned bounding box (AABB) of a orientated bounding box (OBB) based on entity's rotation.",
        "name": "GetRotatedAABB",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Minimum extent of the AABB relative to entity's position.",
            "type": "Vector"
          },
          {
            "description": "Maximum extent of the AABB relative to entity's position.",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "If set, shows all variables, not just the ones marked for save/load system.",
            "name": "showAll",
            "type": "boolean"
          }
        ],
        "description": "Returns a table of save values for an entity.\n\nThese tables are not the same between the client and the server, and different entities may have different fields.\n\n<note>It is highly recommended to use <page>Entity:GetInternalVariable</page> for retrieving a single key of the save table for performance reasons.</note>\n\nYou can get the list different fields an entity has by looking at it's source code (the 2013 SDK can be found [online](https://github.com/ValveSoftware/source-sdk-2013)). Accessible fields are defined by each `DEFINE_FIELD` and `DEFINE_KEYFIELD` inside the `DATADESC` block.\n\nTake the headcrab, for example:\n\n```\nBEGIN_DATADESC( CBaseHeadcrab )\n// m_nGibCount - don't save\nDEFINE_FIELD( m_bHidden, FIELD_BOOLEAN ),\nDEFINE_FIELD( m_flTimeDrown, FIELD_TIME ),\nDEFINE_FIELD( m_bCommittedToJump, FIELD_BOOLEAN ),\nDEFINE_FIELD( m_vecCommittedJumpPos, FIELD_POSITION_VECTOR ),\nDEFINE_FIELD( m_flNextNPCThink, FIELD_TIME ),\nDEFINE_FIELD( m_flIgnoreWorldCollisionTime, FIELD_TIME ),\n\nDEFINE_KEYFIELD( m_bStartBurrowed, FIELD_BOOLEAN, \"startburrowed\" ),\nDEFINE_FIELD( m_bBurrowed, FIELD_BOOLEAN ),\nDEFINE_FIELD( m_flBurrowTime, FIELD_TIME ),\nDEFINE_FIELD( m_nContext, FIELD_INTEGER ),\nDEFINE_FIELD( m_bCrawlFromCanister, FIELD_BOOLEAN ),\nDEFINE_FIELD( m_bMidJump, FIELD_BOOLEAN ),\nDEFINE_FIELD( m_nJumpFromCanisterDir, FIELD_INTEGER ),\nDEFINE_FIELD( m_bHangingFromCeiling, FIELD_BOOLEAN ),\nDEFINE_FIELD( m_flIlluminatedTime, FIELD_TIME ),\n\nDEFINE_INPUTFUNC( FIELD_VOID, \"Burrow\", InputBurrow ),\nDEFINE_INPUTFUNC( FIELD_VOID, \"BurrowImmediate\", InputBurrowImmediate ),\nDEFINE_INPUTFUNC( FIELD_VOID, \"Unburrow\", InputUnburrow ),\nDEFINE_INPUTFUNC( FIELD_VOID, \"StartHangingFromCeiling\", InputStartHangingFromCeiling ),\nDEFINE_INPUTFUNC( FIELD_VOID, \"DropFromCeiling\", InputDropFromCeiling ),\n\n// Function Pointers\nDEFINE_THINKFUNC( EliminateRollAndPitch ),\nDEFINE_THINKFUNC( ThrowThink ),\nDEFINE_ENTITYFUNC( LeapTouch ),\nEND_DATADESC()\n```\n\n* For each **DEFINE_FIELD**, the save table will have a key with name of **first** argument.\n* For each **DEFINE_KEYFIELD**, the save table will have a key with name of the **third** argument.",
        "name": "GetSaveTable",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "A table containing all save values in key/value format.\n\nThe value may be a sequential table (starting with **1**) if the field in question is an array in engine.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Return the index of the model sequence that is currently active for the entity.",
        "name": "GetSequence",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The index of the model sequence.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The sequence ID",
            "name": "seq",
            "type": "number"
          }
        ],
        "description": "Return activity id out of sequence id. Opposite of <page>Entity:SelectWeightedSequence</page>.",
        "name": "GetSequenceActivity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The activity ID, ie <page>Enums/ACT</page>",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The sequence id.",
            "name": "sequenceId",
            "type": "number"
          }
        ],
        "description": "Returns the activity name for the given sequence id.",
        "name": "GetSequenceActivityName",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The <page>Enums/ACT</page> as a string, returns \"Not Found!\" with an invalid sequence and \"No model!\" when no model is set.",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns the amount of sequences ( animations ) the entity's model has.",
        "name": "GetSequenceCount",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The amount of sequences ( animations ) the entity's model has.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The sequence ID.",
            "name": "sequenceId",
            "type": "number"
          }
        ],
        "description": "Returns the ground speed of the entity's sequence.",
        "name": "GetSequenceGroundSpeed",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The ground speed of this sequence.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The sequence id of the entity.",
            "name": "sequenceId",
            "type": "number"
          }
        ],
        "description": "Returns a table of information about an entity's sequence.",
        "name": "GetSequenceInfo",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Table of information about the entity's sequence, or `nil` is ID is out of range. See <page>Structures/SequenceInfo</page>.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns a list of all sequences ( animations ) the model has.",
        "name": "GetSequenceList",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The list of all sequences ( animations ) the model has. The indices start with 0!",
            "type": "table"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The sequence index.",
            "name": "sequenceId",
            "type": "number"
          }
        ],
        "description": "Returns an entity's sequence move distance (the change in position over the course of the entire sequence).\n\nSee <page>Entity:GetSequenceMovement</page> for a similar function with more options.",
        "name": "GetSequenceMoveDist",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The move distance of the sequence.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The sequence index. See <page>Entity:LookupSequence</page>.",
            "name": "sequenceId",
            "type": "number"
          },
          {
            "default": "0",
            "description": "The sequence start cycle. 0 is the start of the animation, 1 is the end.",
            "name": "startCycle",
            "type": "number"
          },
          {
            "default": "1",
            "description": "The sequence end cycle. 0 is the start of the animation, 1 is the end. Values like 2, etc are allowed.",
            "name": "endCyclnde",
            "type": "number"
          }
        ],
        "description": "Returns the delta movement and angles of a sequence of the entity's model.",
        "name": "GetSequenceMovement",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the operation was successful",
            "type": "boolean"
          },
          {
            "description": "The delta vector of the animation, how much the model's origin point moved.",
            "type": "Vector"
          },
          {
            "description": "The delta angle of the animation.",
            "type": "Angle"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The sequence index. See <page>Entity:LookupSequence</page>.",
            "name": "seq",
            "type": "number"
          }
        ],
        "description": "Returns the change in heading direction in between the start and the end of the sequence.",
        "name": "GetSequenceMoveYaw",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The yaw delta. Returns 99999 for no movement.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The index of the sequence to look up.",
            "name": "index",
            "type": "number"
          }
        ],
        "description": "Return the name of the sequence for the index provided.\nRefer to <page>Entity:GetSequence</page> to find the current active sequence on this entity.\n\nSee <page>Entity:LookupSequence</page> for a function that does the opposite.",
        "name": "GetSequenceName",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Name of the sequence, `\"Unknown\"` if it was out of bounds or `\"Not Found!\"` if -1 is provided.",
            "type": "string"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The sequence index.",
            "name": "sequenceId",
            "type": "number"
          },
          {
            "description": "The point in animation, from `0` to `1`.",
            "name": "cycle",
            "type": "number"
          }
        ],
        "description": "Returns an entity's sequence velocity at given animation frame.",
        "name": "GetSequenceVelocity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Velocity of the sequence at given point in the animation.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Checks if the entity plays a sound when picked up by a player.",
        "name": "GetShouldPlayPickupSound",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "`true` if it plays the pickup sound, `false` otherwise.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/entity.lua",
          "lineEnd": 9,
          "lineStart": 7
        }
      },
      {
        "description": "Returns if entity should create a server ragdoll on death or a client one.",
        "name": "GetShouldServerRagdoll",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Returns true if ragdoll will be created on server, false if on client",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the skin index of the current skin.",
        "name": "GetSkin",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "skinIndex",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns solid type of an entity.",
        "name": "GetSolid",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The solid type. See the <page>Enums/SOLID</page>.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns solid flag(s) of an entity.",
        "name": "GetSolidFlags",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The flag(s) of the entity, see <page>Enums/FSOLID</page>.",
            "type": "number{FSOLID}"
          }
        ]
      },
      {
        "description": "Returns if we should show a spawn effect on spawn on this entity.",
        "name": "GetSpawnEffect",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The flag to allow or disallow the spawn effect.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the bitwise spawn flags used by the entity. These can be set by <page>Entity:SetKeyValue</page>.",
        "name": "GetSpawnFlags",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The spawn flags of the entity, see <page text=\"SF_Enums\">Enums/SF</page>.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The index of the sub material. Acceptable values are from 0 to 31.",
            "name": "index",
            "type": "number"
          }
        ],
        "description": "Returns the material override for the given index.\n\nReturns \"\" if no material override exists. Use <page>Entity:GetMaterials</page> to list it's default materials.\n\n<bug issue=\"3362\">The server's value takes priority on the client.</bug>",
        "name": "GetSubMaterial",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The material that overrides this index, if any.",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns a list of models included into the entity's model in the .qc file.",
        "name": "GetSubModels",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The list of models included into the entity's model in the .qc file.",
            "type": "table<table>"
          }
        ]
      },
      {
        "description": "Returns two vectors representing the minimum and maximum extent of the entity's axis-aligned bounding box for hitbox detection. In most cases, this will return the same bounding box as <page>Entity:WorldSpaceAABB</page> unless it was changed by <page>Entity:SetSurroundingBounds</page> or <page>Entity:SetSurroundingBoundsType</page>.",
        "name": "GetSurroundingBounds",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The minimum vector for the entity's bounding box in world space.",
            "type": "Vector"
          },
          {
            "description": "The maximum vector for the entity's bounding box in world space.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns a <page>table</page> that contains all lua-based key-value pairs saved on the <page>Entity</page>.\n\nFor retrieving engine-based key-value pairs, see <page>Entity:GetSaveTable</page>",
        "name": "GetTable",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "A table of the lua data stored on the Entity, or `nil` if the Entity is NULL.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns the last trace used in the collision callbacks such as <page>ENTITY:StartTouch</page>, <page>ENTITY:Touch</page> and <page>ENTITY:EndTouch</page>.\n\n<note>This returns the last collision trace used, regardless of the entity that caused it. As such, it's only reliable when used in the hooks mentioned above</note>",
        "name": "GetTouchTrace",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The <page>Structures/TraceResult</page>",
            "type": "table{TraceResult}"
          }
        ]
      },
      {
        "description": "Returns true if the TransmitWithParent flag is set or not.",
        "name": "GetTransmitWithParent",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Is the TransmitWithParent flag is set or not",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns if the entity is unfreezable, meaning it can't be frozen with the physgun. By default props are freezable, so this function will typically return false.",
        "name": "GetUnFreezable",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "True if the entity is unfreezable, false otherwise.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/entity.lua",
          "lineEnd": 592,
          "lineStart": 590
        }
      },
      {
        "description": "Returns the upward vector of the entity, as a normalized direction vector",
        "name": "GetUp",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "upDir",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Key of the value to retrieve",
            "name": "key",
            "type": "any"
          },
          {
            "default": "nil",
            "description": "A default value to fallback to if we couldn't retrieve the value from entity",
            "name": "default",
            "type": "any"
          }
        ],
        "description": "Retrieves a value from entity's <page>Entity:GetTable</page>. Set by <page>Entity:SetVar</page>.",
        "name": "GetVar",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Retrieved value",
            "type": "any"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/entity.lua",
          "lineEnd": 55,
          "lineStart": 45
        }
      },
      {
        "description": "Returns the entity's velocity.\n\nThis returns the total velocity of the entity and is equal to local velocity + base velocity.\n\nClientside the velocity may be estimated for certain entities, such as physics based entities, instead of returning the \"real\" velocity from the server.\n\n<bug issue=\"774\">This can become out-of-sync on the client if the server has been up for a long time.</bug>",
        "name": "GetVelocity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The velocity of the entity.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "<deprecated>The function **currently** does nothing and always returns nil</deprecated>\n\nReturns ID of workshop addon that the entity is from.",
        "name": "GetWorkshopID",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The workshop ID",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the position and angle of the entity as a 3x4 matrix (<page>VMatrix</page> is 4x4 so the fourth row goes unused). The first three columns store the angle as a [rotation matrix](https://en.wikipedia.org/wiki/Rotation_matrix), and the fourth column stores the position vector.\n\n<bug issue=\"2764\">This returns incorrect results for the angular component (columns 1-3) for the local player clientside.</bug>\n\n<bug issue=\"3106\">This will use the local player's <page>Global.EyeAngles</page> in <page text=\"rendering hooks\">3D_Rendering_Hooks</page>.</bug>\n\n<bug issue=\"3107\">Columns 1-3 will be all 0 (angular component) in <page text=\"rendering hooks\">3D_Rendering_Hooks</page> while paused in single-player.</bug>",
        "name": "GetWorldTransformMatrix",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The position and angle matrix.",
            "type": "VMatrix"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The force to apply to the created gibs.",
            "name": "force",
            "type": "Vector"
          },
          {
            "default": "nil",
            "description": "If set, this will be color of the broken gibs instead of the entity's color.",
            "name": "clr",
            "type": "table"
          }
        ],
        "description": "Causes the entity to break into its current models gibs, if it has any.\n\nYou must call <page>Entity:PrecacheGibs</page> on the entity before using this function, or it will not create any gibs.\n\nIf called on server, the gibs will be spawned on the currently connected clients and will not be synchronized. Otherwise the gibs will be spawned only for the client the function is called on.\n\n<note>\nthis function will not remove or hide the entity it is called on.\nFor more expensive version of this function see <page>Entity:GibBreakServer</page>.\n</note>",
        "name": "GibBreakClient",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The force to apply to the created gibs",
            "name": "force",
            "type": "Vector"
          }
        ],
        "description": "Causes the entity to break into its current models gibs, if it has any.\n\nYou must call <page>Entity:PrecacheGibs</page> on the entity before using this function, or it will not create any gibs.\n\nThe gibs will be spawned on the server and be synchronized with all clients.\n\nNote, that this function will not remove or hide the entity it is called on.\n\nThis function is affected by `props_break_max_pieces_perframe`, `props_break_max_pieces`, `prop_active_gib_limit` and `prop_active_gib_max_fade_time` console variables.\n\n<warning>Large numbers of serverside gibs will cause lag.\n\nYou can avoid this cost by spawning the gibs on the client using <page>Entity:GibBreakClient</page></warning>\n\n<note>Despite existing on client, it doesn't actually do anything on client.</note>",
        "name": "GibBreakServer",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Returns whether or not the bone manipulation functions have ever been called on given  entity.\n\nRelated functions are <page>Entity:ManipulateBonePosition</page>, <page>Entity:ManipulateBoneAngles</page>, <page>Entity:ManipulateBoneJiggle</page>, and <page>Entity:ManipulateBoneScale</page>.\n\n<bug issue=\"3131\">This will return true if the entity's bones have ever been manipulated. Resetting the position/angles/jiggle/scaling to 0,0,0 will not affect this function.</bug>",
        "name": "HasBoneManipulations",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "True if the entity has been bone manipulated, false otherwise.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether or not the the entity has had flex manipulations performed with <page>Entity:SetFlexWeight</page> or <page>Entity:SetFlexScale</page>.",
        "name": "HasFlexManipulatior",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "True if the entity has flex manipulations, false otherwise.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The spawnflag bits to check, see <page>Enums/SF</page>.",
            "name": "spawnFlags",
            "type": "number"
          }
        ],
        "description": "Returns whether this entity has the specified spawnflags bits set.",
        "name": "HasSpawnFlags",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the entity has that spawnflag set or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The vector of where the attack comes from.",
            "name": "origin",
            "type": "Vector"
          }
        ],
        "description": "Returns the position of the head of this entity, NPCs use this internally to aim at their targets.\n\n<note>This only works on players and NPCs.</note>",
        "name": "HeadTarget",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The head position.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the health of the entity.",
        "name": "Health",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "health",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "How long to keep the entity ignited, in seconds.",
            "name": "length",
            "type": "number"
          },
          {
            "default": "0",
            "description": "The radius of the ignition, will ignite everything around the entity that is in this radius.",
            "name": "radius",
            "type": "number"
          }
        ],
        "description": "Sets the entity on fire.\n\nSee also <page>Entity:Extinguish</page>.",
        "name": "Ignite",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "description": "<deprecated>\nThis function got disabled and will always throw an error if it's used. This is the error:\n```\n[ERROR] InitializeAsClientEntity is deprecated and should no longer be used.\n```\n</deprecated>\n\nInitializes this entity as being clientside only.\n\nOnly works on entities fully created clientside, and as such it currently has no use due to this being automatically called by <page>ents.CreateClientProp</page>, <page>ents.CreateClientside</page>, <page>Global.ClientsideModel</page> and <page>Global.ClientsideScene</page>.",
        "name": "InitializeAsClientEntity",
        "parent": "Entity",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the input to fire",
            "name": "input",
            "type": "string"
          },
          {
            "default": "nil",
            "description": "The entity that caused this input (i.e. the player who pushed a button)",
            "name": "activator",
            "type": "Entity"
          },
          {
            "default": "nil",
            "description": "The entity that is triggering this input (i.e. the button that was pushed)",
            "name": "caller",
            "type": "Entity"
          },
          {
            "default": "nil",
            "description": "The value to give to the input. Can be either a <page>string</page>, a <page>number</page> or a <page>boolean</page>.",
            "name": "param",
            "type": "any"
          }
        ],
        "description": "Fires input to the entity with the ability to make another entity responsible, bypassing the event queue system.\n\nYou should only use this function over <page>Entity:Fire</page> if you know what you are doing.\n\nSee <page>Entity:Fire</page> for a function that conforms to the internal map IO event queue and <page>GM:AcceptInput</page> for a hook that can intercept inputs.",
        "name": "Input",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "description": "<internal></internal> Sets up Data Tables from entity to use with <page>Entity:NetworkVar</page>.",
        "name": "InstallDataTable",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "source": {
          "file": "lua/includes/extensions/entity.lua",
          "lineEnd": 590,
          "lineStart": 217
        }
      },
      {
        "description": "Resets the entity's bone cache values in order to prepare for a model change.\n\nThis should be called after calling <page>Entity:SetPoseParameter</page>.",
        "name": "InvalidateBoneCache",
        "parent": "Entity",
        "realms": [
          "client"
        ]
      },
      {
        "description": "Returns true if the entity has constraints attached to it\n\n<bug issue=\"3837\">This will only update clientside if the server calls it first. This only checks constraints added through the <page>constraint</page> so this will not react to map constraints.\n\nFor a serverside alternative, see <page>constraint.HasConstraints</page></bug>",
        "name": "IsConstrained",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the entity is constrained or not.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/entity.lua",
          "lineEnd": 97,
          "lineStart": 75
        }
      },
      {
        "description": "Returns if entity is constraint or not.\n\nThis also means that <page>Entity:GetConstrainedPhysObjects</page>. <page>Entity:GetConstrainedEntities</page> and  <page>Entity:SetPhysConstraintObjects</page> can be used on this entity.\n\n<warning>For some constraint entities, such as `phys_spring`, `phys_slideconstraint`, `phys_torque` and `logic_collision_pair`, this function will return `false`!</warning>",
        "name": "IsConstraint",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Is the entity a constraint or not",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the entity is dormant or not.\n\nClient/server entities become dormant when they leave the PVS on the server. Client side entities can decide for themselves whether to become dormant.\nThis mainly applies to [PVS (Potential Visibility Set)](https://developer.valvesoftware.com/wiki/PVS \"PVS - Valve Developer Community\").",
        "name": "IsDormant",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the entity is dormant or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The effect to check for, see <page>Enums/EF</page>.",
            "name": "effect",
            "type": "number{EF}"
          }
        ],
        "description": "Returns whether an entity has engine effect applied or not.",
        "name": "IsEffectActive",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the entity has the engine effect applied or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The engine flag to test, see <page>Enums/EFL</page>",
            "name": "flag",
            "type": "number{EFL}"
          }
        ],
        "description": "Checks if given flag is set or not.",
        "name": "IsEFlagSet",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Is set or not",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The engine flag(s) to test, see <page>Enums/FL</page>",
            "name": "flag",
            "type": "number{FL}"
          }
        ],
        "description": "Checks if given flag(s) is set or not.",
        "name": "IsFlagSet",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Is set or not",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the entity is in the world (not inside a wall or outside of the map).\n\n<note>Internally this function uses <page>util.IsInWorld</page>, that means that this function only checks <page>Entity:GetPos</page> of the entity. If an entity is only partially inside a wall, or has a weird GetPos offset, this function may not give reliable output.</note>",
        "name": "IsInWorld",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "False if the entity is inside a wall or outside of the map, true otherwise.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the entity is lag compensated or not.",
        "name": "IsLagCompensated",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the entity is lag compensated or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The target to test. You can also supply an <page>Entity</page> instead of a <page>Vector</page>",
            "name": "target",
            "type": "Vector"
          }
        ],
        "description": "Returns true if the target is in line of sight.\n<note>This will only work when called on CBaseCombatCharacter entities. This includes players, NPCs, grenades, RPG rockets, crossbow bolts, and physics cannisters.</note>",
        "name": "IsLineOfSightClear",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Returns true if the line of sight is clear",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns if the entity is going to be deleted in the next frame. Entities marked for deletion should not be accessed.",
        "name": "IsMarkedForDeletion",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "If the entity is going to be deleted.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Checks if the entity is a <page>NextBot</page> or not.",
        "name": "IsNextBot",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the entity is an NextBot entity or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Checks if the entity is an NPC or not.\n\nThis will return false for <page>NextBot</page>s, see <page>Entity:IsNextBot</page> for that.",
        "name": "IsNPC",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the entity is an NPC.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the entity is on fire.",
        "name": "IsOnFire",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the entity is on fire or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the entity is on ground or not.\n\nInternally, this checks if <page text=\"FL_ONGROUND\">Enums/FL</page> is set on the entity.\n\nThis function is an alias of <page>Entity:OnGround</page>.",
        "name": "IsOnGround",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the entity is on ground or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Checks if the entity is a player or not.",
        "name": "IsPlayer",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the entity is a player.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns true if the entity is being held by a player. Either by physics gun, gravity gun or use-key (+use).\n\n<bug issue=\"2046\">If multiple players are holding an object and one drops it, this will return false despite the object still being held.</bug>",
        "name": "IsPlayerHolding",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "IsBeingHeld",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The activity to test. See <page>Enums/ACT</page>.",
            "name": "activity",
            "type": "number"
          }
        ],
        "description": "Returns whether there's a gesture with the given activity being played.\n\n<note>This function only works on <page>BaseAnimatingOverlay</page> entites!</note>",
        "name": "IsPlayingGesture",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether there's a gesture is given activity being played.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The point to test, in world space coordinates.",
            "name": "point",
            "type": "Vector"
          }
        ],
        "description": "Returns whether a given point is within the entity's Orientated Bounding Box.\n\nThis relies on the entity having a collision mesh (not a physics object) and will be affected by `SOLID_NONE`.",
        "name": "IsPointInBounds",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the point is within the entity's bounds.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Checks if the entity is a ragdoll, or became a ragdoll. Internally checks whether [kRenderFXRagdoll](kRenderFX) is set.",
        "name": "IsRagdoll",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Is ragdoll or not",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Checks if the entity is a SENT or a built-in entity.",
        "name": "IsScripted",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Returns true if entity is scripted ( SENT ), false if not ( A built-in engine entity )",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the entity's current sequence is finished or not.",
        "name": "IsSequenceFinished",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the entity's sequence is finished or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns if the entity is solid or not.\nVery useful for determining if the entity is a trigger or not.",
        "name": "IsSolid",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the entity is solid or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the entity is a valid entity or not.\n\nAn entity is valid if:\n* It is not a <page text=\"NULL\">Global_Variables</page> entity\n* It is not the worldspawn entity (<page>game.GetWorld</page>)\n\n<note>Instead of calling this method directly, it's a good idea to call the global <page>Global.IsValid</page> instead, however if you're sure the variable you're using is always an entity object it's better to use this method</note>\n\nIt will check whether the given variable contains an object (an Entity) or nothing at all for you. See examples.\n\n<warning>NULL entities can still be assigned with key/value pairs, but they will be instantly negated. See example 3</warning>\nThis might be a cause for a lot of headache. Usually happening during networking etc., when completely valid entities suddenly become invalid on the client, but are never filtered with IsValid(). See <page>GM:InitPostEntity</page> for more details.",
        "name": "IsValid",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "true if the entity is valid, false otherwise",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The Layer ID",
            "name": "layerID",
            "type": "number"
          }
        ],
        "description": "Returns whether the given layer ID is valid and exists on this entity.\n\n<note>This function only works on <page>BaseAnimatingOverlay</page> entities.</note>",
        "name": "IsValidLayer",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the given layer ID is valid and exists on this entity.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Checks if the entity is a vehicle or not.",
        "name": "IsVehicle",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the entity is a vehicle.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Checks if the entity is a weapon or not.",
        "name": "IsWeapon",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the entity is a weapon",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the entity is a widget or not.\n\nThis is used by the \"Edit Bones\" context menu property.",
        "name": "IsWidget",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the entity is a widget or not.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/includes/modules/widget.lua",
          "lineStart": 161
        }
      },
      {
        "description": "Returns if this entity is the map entity `Entity[0] worldspawn`.",
        "name": "IsWorld",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether this entity is the world entity.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The local vector",
            "name": "lpos",
            "type": "Vector"
          }
        ],
        "description": "Converts a vector local to an entity into a worldspace vector",
        "name": "LocalToWorld",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The translated to world coordinates vector",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The local angle",
            "name": "ang",
            "type": "Angle"
          }
        ],
        "description": "Converts a local angle (local to the entity) to a world angle.",
        "name": "LocalToWorldAngles",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The world angle",
            "type": "Angle"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the attachment.",
            "name": "attachmentName",
            "type": "string"
          }
        ],
        "description": "Returns the attachment index of the given attachment name.",
        "name": "LookupAttachment",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The attachment index, or 0 if the attachment does not exist and -1 if the model is invalid.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the bone.\n\nCommon generic bones ( for player models and some HL2 models ):\n* ValveBiped.Bip01_Head1\n* ValveBiped.Bip01_Spine\n* ValveBiped.Anim_Attachment_RH\n\nCommon hand bones (left hand equivalents also available, replace _R_ with _L_)\n* ValveBiped.Bip01_R_Hand\n* ValveBiped.Bip01_R_Forearm\n* ValveBiped.Bip01_R_Foot\n* ValveBiped.Bip01_R_Thigh\n* ValveBiped.Bip01_R_Calf\n* ValveBiped.Bip01_R_Shoulder\n* ValveBiped.Bip01_R_Elbow",
            "name": "boneName",
            "type": "string"
          }
        ],
        "description": "Gets the bone index of the given bone name, returns `nil` if the bone does not exist.\n\nSee <page>Entity:GetBoneName</page> for the inverse of this function.",
        "name": "LookupBone",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Index of the given bone name, or `nil` if the bone doesn't exist on the Entity",
            "type": "number|nil"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Pose parameter name",
            "name": "name",
            "type": "string"
          }
        ],
        "description": "Returns pose parameter ID from its name.",
        "name": "LookupPoseParameter",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The ID of the given pose parameter name, if it exists, -1 otherwise",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Sequence name. Input string can alternatively be an activity name, to lookup an activity from its name and get a sequence as result.",
            "name": "name",
            "type": "string"
          }
        ],
        "description": "Returns sequence ID from either sequence name or activity name. See <page>Entity:GetSequenceName</page> for a function that does the opposite.\n\n**Sequences** are animations tied to a specific model. Different models can have sequences with same names, but have different IDs.\nSequences can also be tied to certain activities (<page>Enums/ACT</page>), see <page>Entity:SelectWeightedSequence</page>.",
        "name": "LookupSequence",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Sequence ID for that name. This **will** differ for models with same sequence names. Will be `-1` when the sequence is invalid or not found.",
            "type": "number"
          },
          {
            "description": "The sequence duration, or `0` if the sequence is invalid or there's no sequence with given name on entity's current model.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "default": "true",
            "description": "Whether to allow the physics shadow to move under stress.",
            "name": "allowPhysicsMovement",
            "type": "boolean"
          },
          {
            "default": "true",
            "description": "Whether to allow the physics shadow to rotate under stress.",
            "name": "allowPhysicsRotation",
            "type": "boolean"
          }
        ],
        "description": "Turns the <page>Entity:GetPhysicsObject</page> into a physics shadow.\nIt's used internally for the Player's and NPC's physics object, and certain HL2 entities such as the crane.\n\nA physics shadow can be used to have static entities that never move by setting both arguments to false.\n\n<note>Unlike <page>Entity:PhysicsInitShadow</page>, this function doesn't remove the current physics object.</note>",
        "name": "MakePhysicsObjectAShadow",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Index of the bone you want to manipulate",
            "name": "boneID",
            "type": "number"
          },
          {
            "description": "Angle to apply.\n\nThe angle is relative to the original bone angle, not relative to the world or the entity.",
            "name": "ang",
            "type": "Angle"
          },
          {
            "default": "true",
            "description": "boolean to network these changes (if called from server)",
            "name": "networking",
            "type": "boolean"
          }
        ],
        "description": "Sets custom bone angles.\n\n<bug issue=\"5148\">When used repeatedly serverside, this method is strongly discouraged due to the huge network traffic produced\n\nAs of update `2024.10.29` this has been resolved. However, network traffic is still generated and should be taken into consideration.\n</bug>",
        "name": "ManipulateBoneAngles",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Index of the bone you want to manipulate.",
            "name": "boneID",
            "type": "number"
          },
          {
            "description": "The jiggle bone type. There are currently the following options:\n* `0` = No jiggle override, use model default\n* `1` = Force jiggle, with hardcoded settings\n* `2` = Force disable jiggle bone",
            "name": "type",
            "type": "number"
          }
        ],
        "description": "Manipulates the bone's jiggle status. This allows non jiggly bones to become jiggly.",
        "name": "ManipulateBoneJiggle",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Index of the bone you want to manipulate.",
            "name": "boneID",
            "type": "number"
          },
          {
            "description": "Position vector to apply. Note that the position is relative to the original bone position, not relative to the world or the entity.",
            "name": "pos",
            "type": "Vector"
          },
          {
            "default": "true",
            "description": "boolean to network these changes (if called from server)",
            "name": "networking",
            "type": "boolean"
          }
        ],
        "description": "Sets custom bone offsets.",
        "name": "ManipulateBonePosition",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Index of the bone you want to manipulate",
            "name": "boneID",
            "type": "number"
          },
          {
            "description": "Scale vector to apply. Note that the scale is relative to the original bone scale, not relative to the world or the entity.",
            "name": "scale",
            "type": "Vector"
          }
        ],
        "description": "Sets custom bone scale.\n<bug issue=\"3502\">This does not scale procedural bones.</bug>\n<note>This silently fails when given a Vector with nan values, hiding the vertices associated with the bone. See example below.</note>",
        "name": "ManipulateBoneScale",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Returns entity's map creation ID. Unlike <page>Entity:EntIndex</page> or <page>Entity:GetCreationID</page>, it will always be the same on same map, no matter how much you clean up or restart it.\n\nIt may change if the map is recompiled, even if no edits were made. It will definitely change if entities are added or removed from the map file.\n\nTo be used in conjunction with <page>ents.GetMapCreatedEntity</page>. See also <page>Entity:CreatedByMap</page>.",
        "name": "MapCreationID",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The map creation ID or -1 if the entity is not compiled into the map.\n<note>If the ID exists, it is identical to the entity's order number as it appears in Lump 1 of the BSP file. It is believed to start at 1234 for some reason.</note>",
            "type": "number"
          }
        ]
      },
      {
        "description": "Refreshes the shadow of the entity.",
        "name": "MarkShadowAsDirty",
        "parent": "Entity",
        "realms": [
          "client"
        ]
      },
      {
        "description": "Fires the muzzle flash effect of the weapon the entity is carrying. This only creates a light effect and is often called alongside <page>Weapon:SendWeaponAnim</page>",
        "name": "MuzzleFlash",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The vector to start the intersection from.",
            "name": "position",
            "type": "Vector"
          }
        ],
        "description": "Performs a Ray-Orientated Bounding Box intersection from the given position to the origin of the OBBox with the entity and returns the hit position on the OBBox.\n\nThis relies on the entity having a collision mesh (not a physics object) and will be affected by `SOLID_NONE`",
        "name": "NearestPoint",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The nearest hit point of the entity's bounding box in world coordinates.",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Supported choices:\n\n* `String` (up to 511 characters)\n* `Bool`\n* `Float`\n* `Int` (32-bit signed integer)\n* `Vector`\n* `Angle`\n* `Entity`",
            "name": "type",
            "type": "string"
          },
          {
            "description": "Each network variable has to have a unique slot. The slot is per type - so you can have an int in slot `0`, a bool in slot `0` and a float in slot `0` etc. You can't have two ints in slot `0`, instead you would do a int in slot `0` and another int in slot `1`.\n\nThe max slots for strings `4` - so you should pick a number between `0` and `3`.\n\nThe max slots for everything else `32` - so you should pick a number between `0` and `31`.\n\nThis can be omitted entirely (arguments will shift) and it will use the next available slot.",
            "name": "slot",
            "type": "number"
          },
          {
            "description": "The name will affect how you access it. If you call it `Foo` you would add two new functions on your entity - `SetFoo()` and `GetFoo()`. So be careful that what you call it won't collide with any existing functions (don't call it `Pos` for example).",
            "name": "name",
            "type": "string"
          },
          {
            "default": "nil",
            "description": "A table of extended information.\n\n`KeyName`\n* Allows the NetworkVar to be set using <page>Entity:SetKeyValue</page>.\n* This is **required** for the entity editing to work.\n\nThis is useful if you're making an entity that you want to be loaded in a map. The sky entity uses this.\n\n`Edit`\n* The edit key lets you mark this variable as editable. See <page>Editable Entities</page> for more information.",
            "name": "extended",
            "type": "table"
          }
        ],
        "description": "Creates a network variable on the entity and adds Set/Get functions for it. This function should only be called in <page>ENTITY:SetupDataTables</page>.\n\nSee <page>Entity:NetworkVarNotify</page> for a function to hook NetworkVar changes.\n\n<note>\nEntity NetworkVars are influenced by the return value of&nbsp;<page>ENTITY:UpdateTransmitState</page>.\nSo if you use the **PVS**(**default**), then the NetworkVars can be different for each client.\n</note>\n\n<warning>Make sure to not call the SetDT* and your custom set methods on the client realm unless you know exactly what you are doing.</warning>\nCombining this function with <page>util.TableToJSON</page> can also provide a way to network tables as serialized strings.",
        "name": "NetworkVar",
        "overloads": [
          {
            "arguments": [
              {
                "description": "Supported choices:\n\n* `String` (up to 511 characters)\n* `Bool`\n* `Float`\n* `Int` (32-bit signed integer)\n* `Vector`\n* `Angle`\n* `Entity`",
                "name": "type",
                "type": "string"
              },
              {
                "description": "The name will affect how you access it. If you call it `Foo` you would add two new functions on your entity - `SetFoo()` and `GetFoo()`. So be careful that what you call it won't collide with any existing functions (don't call it `Pos` for example).",
                "name": "name",
                "type": "string"
              },
              {
                "default": "nil",
                "description": "A table of extended information.\n\n`KeyName`\n* Allows the NetworkVar to be set using <page>Entity:SetKeyValue</page>.\n* This is **required** for the entity editing to work.\n\nThis is useful if you're making an entity that you want to be loaded in a map. The sky entity uses this.\n\n`Edit`\n* The edit key lets you mark this variable as editable. See <page>Editable Entities</page> for more information.",
                "name": "extended",
                "type": "table"
              }
            ]
          }
        ],
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Supported choices:\n* `Vector`\n* `Angle`",
            "name": "type",
            "type": "string"
          },
          {
            "description": "The slot for this `Vector` or `Angle`, from `0` to `31`. See <page>Entity:NetworkVar</page> for more detailed explanation.\n\nThis can be omitted entirely (arguments will shift) and it will use the next available slot.",
            "name": "slot",
            "type": "number"
          },
          {
            "description": "Which element of a `Vector` or an `Angle` to store the value on. This can be `p`, `y`, `r` for <page>Angle</page>s, and `x`, `y`, `z` for <page>Vector</page>s",
            "name": "element",
            "type": "string"
          },
          {
            "description": "The name will affect how you access it. If you call it `Foo` you would add two new functions on your entity - `SetFoo()` and `GetFoo()`. So be careful that what you call it won't collide with any existing functions (don't call it \"Pos\" for example).",
            "name": "name",
            "type": "string"
          },
          {
            "default": "nil",
            "description": "A table of extra information. See <page>Entity:NetworkVar</page> for details.",
            "name": "extended",
            "type": "table"
          }
        ],
        "description": "Similarly to <page>Entity:NetworkVar</page>, creates a network variable on the entity and adds Set/Get functions for it. This method stores it's value as a member value of a vector or an angle. This allows to go beyond the normal variable limit of <page>Entity:NetworkVar</page> for `Int` and `Float` types, at the expense of `Vector` and `Angle` limit.\n\nThis function should only be called in <page>ENTITY:SetupDataTables</page>.\n\n<warning>Make sure to not call the SetDT* and your custom set methods on the client realm unless you know exactly what you are doing.</warning>",
        "name": "NetworkVarElement",
        "overloads": [
          {
            "arguments": [
              {
                "description": "Supported choices:\n* `Vector`\n* `Angle`",
                "name": "type",
                "type": "string"
              },
              {
                "description": "Which element of a `Vector` or an `Angle` to store the value on. This can be `p`, `y`, `r` for <page>Angle</page>s, and `x`, `y`, `z` for <page>Vector</page>s",
                "name": "element",
                "type": "string"
              },
              {
                "description": "The name will affect how you access it. If you call it `Foo` you would add two new functions on your entity - `SetFoo()` and `GetFoo()`. So be careful that what you call it won't collide with any existing functions (don't call it \"Pos\" for example).",
                "name": "name",
                "type": "string"
              },
              {
                "default": "nil",
                "description": "A table of extra information. See <page>Entity:NetworkVar</page> for details.",
                "name": "extended",
                "type": "table"
              }
            ]
          }
        ],
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Name of variable to track changes of.",
            "name": "name",
            "type": "string"
          },
          {
            "description": "The function to call when the variable changes.\n\n<callback>\n<arg type=\"Entity\" name=\"entity\">Entity whos variable changed.</arg>\n<arg type=\"string\" name=\"name\">Name of changed variable.</arg>\n<arg type=\"any\" name=\"old\">Old/current variable value.</arg>\n<arg type=\"any\" name=\"new\">New variable value that it was set to.</arg>\n</callback>",
            "name": "callback",
            "type": "function"
          }
        ],
        "description": "Creates a callback that will execute when the given network variable changes - that is, when the `Set<name>()` function is run.\n\nThe callback is executed **before** the value is changed, and is called even if the new and old values are the same.\n\nThis function does not exist on entities in which <page>Entity:InstallDataTable</page> has not been called.\n\nBy default, this means this function only exists on SENTs (both serverside and clientside) and on players with a <page text=\"Player Class\">Player_Classes</page> (serverside and clientside <page>Global.LocalPlayer</page> only).\n\nIt's therefore safest to only use this in <page>ENTITY:SetupDataTables</page>.\n\n<bug request=\"324\">The callback will not be called clientside if the var is changed right after entity spawn.</bug>\n</name>",
        "name": "NetworkVarNotify",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "source": {
          "file": "lua/includes/extensions/entity.lua",
          "lineEnd": 325,
          "lineStart": 315
        }
      },
      {
        "arguments": [
          {
            "description": "The timestamp, relative to <page>Global.CurTime</page>, when the next think should occur.",
            "name": "timestamp",
            "type": "number"
          }
        ],
        "description": "Controls when, relative to <page>Global.CurTime</page>, the <page>Entity</page> will next run its Think function.\n\nFor Scripted Entities, this is the <page>ENTITY:Think</page> function.\nFor engine Entities, this is an internal function whose behavior will depend on the specific Entity type.\n\n\nFor a Client-side equivalent, see <page>Entity:SetNextClientThink</page>.\n\n<bug issue=\"3269\">This does not work with SWEPs or Nextbots.</bug>",
        "name": "NextThink",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Returns the center of an entity's collision bounding box as a local vector.\n\nSee also <page>Entity:GetCollisionBounds</page>, <page>Entity:OBBMins</page> and <page>Entity:OBBMaxs</page>.",
        "name": "OBBCenter",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The center of an entity's bounding box relative to its <page>Entity:GetPos</page>.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the highest corner of an entity's collision bounding box as a local vector.\n\nSee also <page>Entity:GetCollisionBounds</page>, <page>Entity:OBBMins</page> and <page>Entity:OBBCenter</page>.",
        "name": "OBBMaxs",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The local position of the highest corner of the entity's oriented bounding box.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the lowest corner of an entity's collision bounding box as a local vector.\n\nSee also <page>Entity:GetCollisionBounds</page>, <page>Entity:OBBMaxs</page> and <page>Entity:OBBCenter</page>.",
        "name": "OBBMins",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The local position of the lowest corner of the entity's oriented bounding box.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the entity's capabilities as a bitfield.\n\nIn the engine this function is mostly used to check the use type, the save/restore system and level transitions flags.\n\nEven though the function is defined shared, it is not guaranteed to return the same value across states.\n\n<note>The enums for this are not currently implemented in Lua, however you can access the defines [here](https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/shared/baseentity_shared.h#L21-L38).</note>",
        "name": "ObjectCaps",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The bitfield, a combination of the [FCAP_](https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/shared/baseentity_shared.h#L21-L38) flags.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns true if the entity is on the ground, and false if it isn't.\n\nInternally, this checks if <page text=\"FL_ONGROUND\">Enums/FL</page> is set on the entity. This is only updated for players and NPCs, and thus won't inherently work for other entities.",
        "name": "OnGround",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the entity is on the ground or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The damage info to test",
            "name": "dmg",
            "type": "CTakeDamageInfo"
          }
        ],
        "description": "Tests whether the damage passes the entity filter.\n\nThis will call <page>ENTITY:PassesDamageFilter</page> on scripted entities of the type \"filter\".\n\n<note>This function only works on entities of the type \"filter\". ( filter_* entities, including base game filter entites )</note>",
        "name": "PassesDamageFilter",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the damage info passes the entity filter.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The initiator of the test.\n\nFor example the trigger this filter entity is used in.",
            "name": "caller",
            "type": "Entity"
          },
          {
            "description": "The entity to test against the entity filter.",
            "name": "ent",
            "type": "Entity"
          }
        ],
        "description": "Tests whether the entity passes the entity filter.\n\nThis will call <page>ENTITY:PassesFilter</page> on scripted entities of the type \"filter\".\n\n<note>This function only works on entities of the type \"filter\". ( filter_* entities, including base game filter entites )</note>",
        "name": "PassesFilter",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the entity info passes the entity filter.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Destroys the current physics object of an entity.\n\n<note>Cannot be used on a ragdoll or the world entity.</note>",
        "name": "PhysicsDestroy",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "A table consisting of <page>Structures/MeshVertex</page> (only the `pos` element is taken into account). Every 3 vertices define a triangle in the physics mesh.",
            "name": "vertices",
            "type": "table"
          },
          {
            "default": "default",
            "description": "Physical material from [surfaceproperties.txt](https://github.com/Facepunch/garrysmod/blob/master/garrysmod/scripts/surfaceproperties.txt) or added with <page>physenv.AddSurfaceData</page>.",
            "name": "surfaceprop",
            "type": "string"
          },
          {
            "default": "nil",
            "description": "If set, overwrites the center of mass for the created physics object.",
            "name": "massCenterOveride",
            "type": "Vector"
          }
        ],
        "description": "Initializes the physics mesh of the entity from a triangle soup defined by a table of vertices. The resulting mesh is hollow, may contain holes, and always has a volume of 0.\n\nWhile this is very useful for static geometry such as terrain displacements, it is advised to use <page>Entity:PhysicsInitConvex</page> or <page>Entity:PhysicsInitMultiConvex</page> for moving solid objects instead.\n\n<page>Entity:EnableCustomCollisions</page> needs to be called if you want players to collide with the entity correctly.",
        "name": "PhysicsFromMesh",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Returns `true` on success, `nil` otherwise.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The solid type of the physics object to create, see <page>Enums/SOLID</page>. Should be `SOLID_VPHYSICS` in most cases.\n\n<note>Using `SOLID_NONE` will only delete the current physics object - it does not create a new one.</note>",
            "name": "solidType",
            "type": "number"
          },
          {
            "default": "nil",
            "description": "If set, overwrites the center of mass for the created physics object.",
            "name": "massCenterOverride",
            "type": "Vector"
          }
        ],
        "description": "Initializes the <page text=\"physics object\">Entity:GetPhysicsObject</page> of the entity using its current <page text=\"model\">Entity:GetModel</page>. Deletes the previous physics object if it existed and the new object creation was successful.\n\nIf the entity's current model has no physics mesh associated to it, no physics object will be created and the previous object will still exist, if applicable.\n\n<note>When called clientside, this will not create a valid <page>PhysObj</page> if the model hasn't been <page text=\"precached\">util.PrecacheModel</page> serverside.\n\nIf successful, this function will automatically call <page>Entity:SetSolid</page>( solidType ) and <page>Entity:SetSolidFlags</page>( 0 ).</note>\n\n<bug issue=\"5060\">Clientside physics objects on serverside entities do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.\n\nA workaround is available on the <page>Entity:PhysicsInitConvex</page> page.</bug>",
        "name": "PhysicsInit",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Returns `true` on success, `false` otherwise.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The minimum position of the box. This is automatically ordered with the maxs.",
            "name": "mins",
            "type": "Vector"
          },
          {
            "description": "The maximum position of the box. This is automatically ordered with the mins.",
            "name": "maxs",
            "type": "Vector"
          },
          {
            "default": "default",
            "description": "Physical material from [surfaceproperties.txt](https://github.com/Facepunch/garrysmod/blob/master/garrysmod/scripts/surfaceproperties.txt) or added with <page>physenv.AddSurfaceData</page>.",
            "name": "surfaceprop",
            "type": "string"
          },
          {
            "default": "nil",
            "description": "If set, overwrites the center of mass for the created physics object.",
            "name": "massCenterOverride",
            "type": "Vector"
          }
        ],
        "description": "Makes the physics object of the entity a AABB.\n\nThis function will automatically destroy any previous physics objects and do the following:\n* <page>Entity:SetSolid</page>( `SOLID_BBOX` )\n* <page>Entity:SetMoveType</page>( `MOVETYPE_VPHYSICS` )\n* <page>Entity:SetCollisionBounds</page>( `mins`, `maxs` )\n\n<note>If the volume of the resulting box is 0 (the mins and maxs are the same), the mins and maxs will be changed to <page>Global.Vector</page>( -1, -1, -1 ) and <page>Global.Vector</page>( 1, 1, 1 ), respectively.</note>\n\n<bug issue=\"5060\">Clientside physics objects on serverside entities do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.\n\nA workaround is available on the <page>Entity:PhysicsInitConvex</page> page.</bug>",
        "name": "PhysicsInitBox",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Returns `true` on success, `nil` otherwise. This fails when the game cannot create any more <page>PhysCollide</page>s.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "A table of eight <page>Vector</page>s, in local coordinates, to be used in the computation of the convex mesh. Order does not matter.",
            "name": "points",
            "type": "table"
          },
          {
            "default": "default",
            "description": "Physical material from [surfaceproperties.txt](https://github.com/Facepunch/garrysmod/blob/master/garrysmod/scripts/surfaceproperties.txt) or added with <page>physenv.AddSurfaceData</page>.",
            "name": "surfaceprop",
            "type": "string"
          },
          {
            "default": "nil",
            "description": "If set, overwrites the center of mass for the created physics object.",
            "name": "massCenterOverride",
            "type": "Vector"
          }
        ],
        "description": "Initializes the physics mesh of the entity with a convex mesh defined by a table of points. The resulting mesh is the  of all the input points. If successful, the previous physics object will be removed.\n\nThis is the standard way of creating moving physics objects with a custom convex shape. For more complex, concave shapes, see <page>Entity:PhysicsInitMultiConvex</page>.\n\nYou may be expected to call <page>Entity:SetSolid</page> with desired solid type **before** calling this function.\n\n<bug issue=\"5060\">Clientside physics objects on serverside entities do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.\n\nYou can use the following workaround for movement, though clientside collisions will still be broken.\n```\nfunction ENT:Think()\nif ( CLIENT ) then\nlocal physobj = self:GetPhysicsObject()\n\nif ( IsValid( physobj ) ) then\nphysobj:SetPos( self:GetPos() )\nphysobj:SetAngles( self:GetAngles() )\nend\nend\nend\n```\n</bug>",
        "name": "PhysicsInitConvex",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Returns `true` on success, `false` otherwise.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "A table consisting of tables of <page>Vector</page>s. Each sub-table defines a set of points to be used in the computation of one convex mesh.",
            "name": "vertices",
            "type": "table"
          },
          {
            "default": "default",
            "description": "Physical material from [surfaceproperties.txt](https://github.com/Facepunch/garrysmod/blob/master/garrysmod/scripts/surfaceproperties.txt) or added with <page>physenv.AddSurfaceData</page>.",
            "name": "surfaceprop",
            "type": "string"
          },
          {
            "default": "nil",
            "description": "If set, overwrites the center of mass for the created physics object.",
            "name": "massCenterOverride",
            "type": "Vector"
          }
        ],
        "description": "An advanced version of <page>Entity:PhysicsInitConvex</page> which initializes a physics object from multiple convex meshes. This should be used for physics objects with a custom shape which cannot be represented by a single convex mesh.\n\nIf successful, the previous physics object will be removed.\n\nYou may be expected to call <page>Entity:SetSolid</page> with desired solid type **before** calling this function.\n\n<bug issue=\"5060\">Clientside physics objects on serverside entities do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.\n\nA workaround is available on the <page>Entity:PhysicsInitConvex</page> page.</bug>",
        "name": "PhysicsInitMultiConvex",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Returns `true` on success, `nil` otherwise.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "default": "true",
            "description": "Whether to allow the physics shadow to move under stress.",
            "name": "allowPhysicsMovement",
            "type": "boolean"
          },
          {
            "default": "true",
            "description": "Whether to allow the physics shadow to rotate under stress.",
            "name": "allowPhysicsRotation",
            "type": "boolean"
          }
        ],
        "description": "Initializes the entity's physics object as a physics shadow. Removes the previous physics object if successful. This is used internally for the Player's and NPC's physics object, and certain HL2 entities such as the crane.\n\nA physics shadow can be used to have static entities that never move by setting both arguments to false.\n\nThe created physics object will depend on the entity's solidity `SOLID_NONE` will not create a physics object, `SOLID_BBOX` will create a Axis-Aligned BBox one, `SOLID_OBB` will create Orientated Bounding Box one, and anything else will use the models' physics mesh.\n\n<bug issue=\"5060\">Clientside physics objects on serverside entities do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.\n\nA workaround is available on the <page>Entity:PhysicsInitConvex</page> page.</bug>",
        "name": "PhysicsInitShadow",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Return `true` on success, `nil` otherwise.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The radius of the sphere.",
            "name": "radius",
            "type": "number"
          },
          {
            "default": "default",
            "description": "Physical material from [surfaceproperties.txt](https://github.com/Facepunch/garrysmod/blob/master/garrysmod/scripts/surfaceproperties.txt) or added with <page>physenv.AddSurfaceData</page>.",
            "name": "physmat",
            "type": "string"
          }
        ],
        "description": "Makes the physics object of the entity a sphere.\n\nThis function will automatically destroy any previous physics objects and do the following:\n* <page>Entity:SetSolid</page>( `SOLID_BBOX` )\n* <page>Entity:SetMoveType</page>( `MOVETYPE_VPHYSICS` )\n\n<bug issue=\"5060\">Clientside physics objects on serverside entities do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.\n\nA workaround is available on the <page>Entity:PhysicsInitConvex</page> page.</bug>",
        "name": "PhysicsInitSphere",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Returns `true` on success, `false` otherwise",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The solid type of the physics object to create, see <page>Enums/SOLID</page>. Should be `SOLID_VPHYSICS` in most cases.",
            "name": "solidType",
            "type": "number"
          }
        ],
        "description": "Initializes a static physics object of the entity using its <page text=\"current model\">Entity:GetModel</page>. If successful, the previous physics object is removed.\n\nThis is what used by entities such as `func_breakable`, `prop_dynamic`, `item_suitcharger`, `prop_thumper` and `npc_rollermine` while it is in its \"buried\" state in the Half-Life 2 Campaign.\n\nIf the entity's current model has no physics mesh associated to it, no physics object will be created.\n\n<note>This function will automatically call <page>Entity:SetSolid</page>( `solidType` ).</note>\n\n<bug issue=\"5060\">Clientside physics objects on serverside entities do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.\n\nA workaround is available on the <page>Entity:PhysicsInitConvex</page> page.</bug>",
        "name": "PhysicsInitStatic",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Returns `true` on success, `false` otherwise. This will fail if the entity's current model has no associated physics mesh.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Wakes up the entity's physics object",
        "name": "PhysWake",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "source": {
          "file": "lua/includes/extensions/entity.lua",
          "lineEnd": 175,
          "lineStart": 168
        }
      },
      {
        "arguments": [
          {
            "description": "Filepath to scene.",
            "name": "scene",
            "type": "string"
          },
          {
            "default": "0",
            "description": "Delay in seconds until the scene starts playing.",
            "name": "delay",
            "type": "number"
          }
        ],
        "description": "Makes the entity play a .vcd scene. [All scenes from Half-Life 2](https://developer.valvesoftware.com/wiki/Half-Life_2_Scenes_List).",
        "name": "PlayScene",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Estimated length of the scene.",
            "type": "number"
          },
          {
            "description": "The scene entity, removing which will stop the scene from continuing to play.",
            "type": "Entity"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The entity to face.",
            "name": "target",
            "type": "Entity"
          }
        ],
        "description": "Changes an entities angles so that it faces the target entity.",
        "name": "PointAtEntity",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Precaches gibs for the entity's model.\n\nNormally this function should be ran when the entity is spawned, for example the <page>ENTITY:Initialize</page>, after <page>Entity:SetModel</page> is called.\n\nThis is required for <page>Entity:GibBreakServer</page> and <page>Entity:GibBreakClient</page> to work.",
        "name": "PrecacheGibs",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The amount of gibs the prop has",
            "name": "gibCount",
            "type": "number"
          }
        ]
      },
      {
        "description": "Normalizes the ragdoll. This is used alongside Kinect in <page>Entity:SetRagdollBuildFunction</page>, for more info see ragdoll_motion entity.",
        "name": "RagdollSolve",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Sets the function to build the ragdoll. This is used alongside Kinect in <page>Entity:SetRagdollBuildFunction</page>, for more info see ragdoll_motion entity.",
        "name": "RagdollStopControlling",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Makes the physics objects follow the set bone positions. This is used alongside Kinect in <page>Entity:SetRagdollBuildFunction</page>, for more info see ragdoll_motion entity.",
        "name": "RagdollUpdatePhysics",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Removes the entity it is used on. The entity will be removed at the start of next tick.",
        "name": "Remove",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Removes all decals from the entities surface.",
        "name": "RemoveAllDecals",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Removes and stops all gestures.\n\n<note>This function only works on <page>BaseAnimatingOverlay</page> entites!</note>\n<note>Layer removal procedures aren't immediate. Layer removal functions actually manipulate <page>Entity:GetLayerWeight</page> down to 0, then remove the layer in next intervals. If the targeted layer's weight keeps changing, your layer will not be removed.</note>",
        "name": "RemoveAllGestures",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The hook name to remove. See <page>Entity Callbacks</page>",
            "name": "hook",
            "type": "string"
          },
          {
            "description": "The callback id previously retrieved with the return of <page>Entity:AddCallback</page> or <page>Entity:GetCallbacks</page>",
            "name": "callbackid",
            "type": "number"
          }
        ],
        "description": "Removes a callback previously added with <page>Entity:AddCallback</page>",
        "name": "RemoveCallback",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Identifier of the function given to <page>Entity:CallOnRemove</page>.",
            "name": "identifier",
            "type": "string"
          }
        ],
        "description": "Removes a function previously added via <page>Entity:CallOnRemove</page>.",
        "name": "RemoveCallOnRemove",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "source": {
          "file": "lua/includes/extensions/entity.lua",
          "lineEnd": 132,
          "lineStart": 122
        }
      },
      {
        "arguments": [
          {
            "description": "The effect to remove, see <page>Enums/EF</page>.",
            "name": "effect",
            "type": "number{EF}"
          }
        ],
        "description": "Removes an engine effect applied to an entity.",
        "name": "RemoveEffects",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The flag to remove, see <page>Enums/EFL</page>",
            "name": "flag",
            "type": "number{EFL}"
          }
        ],
        "description": "Removes specified engine flag",
        "name": "RemoveEFlags",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The flag(s) to remove, see <page>Enums/FL</page>",
            "name": "flag",
            "type": "number{FL}"
          }
        ],
        "description": "Removes specified flag(s) from the entity",
        "name": "RemoveFlags",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page>PhysObj</page> to remove from the motion controller.",
            "name": "physObj",
            "type": "PhysObj"
          }
        ],
        "description": "Removes a <page>PhysObj</page>ect from the entity's motion controller so that <page>ENTITY:PhysicsSimulate</page> will no longer be called for given <page>PhysObj</page>ect.\n\nYou must first create a motion controller with <page>Entity:StartMotionController</page>.\n\n<note>Only works on a scripted <page>Entity</page> of anim type</note>",
        "name": "RemoveFromMotionController",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The activity remove. See <page>Enums/ACT</page>.",
            "name": "activity",
            "type": "number"
          }
        ],
        "description": "Removes and stops the gesture with given activity. Same as <page>Entity:RemoveLayer</page> with <page>Entity:FindGestureLayer</page>.\n\n<note>This function only works on <page>BaseAnimatingOverlay</page> entites!</note>\n<note>Layer removal procedures aren't immediate. Layer removal functions actually manipulate <page>Entity:GetLayerWeight</page> down to 0, then remove the layer in next intervals. If the targeted layer's weight keeps changing, your layer will not be removed.</note>",
        "name": "RemoveGesture",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "-1",
            "description": "Which constraint to break, values below 0 mean break them all",
            "name": "num",
            "type": "number"
          }
        ],
        "description": "Breaks internal Ragdoll constrains, so you can for example separate an arm from the body of a ragdoll and preserve all physics.\n\nThe visual mesh will still stretch as if it was properly connected unless the ragdoll model is specifically designed to avoid that.",
        "name": "RemoveInternalConstraint",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The layer ID to remove.",
            "name": "layerID",
            "type": "number"
          }
        ],
        "description": "Removes the given layer by ID. See also <page>Entity:RemoveGesture</page>.\n\n<note>This function only works on <page>BaseAnimatingOverlay</page> entites!</note>\n<note>Layer removal procedures aren't immediate. Layer removal functions actually manipulate <page>Entity:GetLayerWeight</page> down to 0, then remove the layer in next intervals. If the targeted layer's weight keeps changing, your layer will not be removed.</note>",
        "name": "RemoveLayer",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The flag(s) to remove, see <page>Enums/FSOLID</page>.",
            "name": "flags",
            "type": "number"
          }
        ],
        "description": "Removes solid flag(s) from the entity.",
        "name": "RemoveSolidFlags",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The SpawnFlag to remove from the Entity",
            "name": "flag",
            "type": "number"
          }
        ],
        "description": "Removes a SpawnFlag from the current SpawnFlags of an Entity.\n\nSpawnFlags can easily be found on https://developer.valvesoftware.com/wiki/.\n\n<note>See also <page>Entity:AddSpawnFlags</page>, <page>Entity:SetSpawnFlags</page>\n\nUsing <page text=\"SF Enumerations\">Enums/SF</page> won't work, if this function is ran clientside due to the enumerations being defined only Serverside. Use the actual SpawnFlag number.\n</note>",
        "name": "RemoveSpawnFlags",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "source": {
          "file": "lua/includes/extensions/entity.lua",
          "lineEnd": 17,
          "lineStart": 15
        }
      },
      {
        "arguments": [
          {
            "description": "The sequence to play. Also accepts strings.\n\n<note>If set to a string, the function will automatically call <page>Entity:LookupSequence</page> to retrieve the sequence ID as a number.</note>",
            "name": "sequence",
            "type": "number"
          }
        ],
        "description": "Plays an animation on the entity. This may not always work on engine entities.\n\n<warning>This will not reset the animation on viewmodels, use <page>Entity:SendViewModelMatchingSequence</page> instead.</warning>\n\n<note>This will not work properly if called directly after calling <page>Entity:SetModel</page>. Consider waiting until the next Tick.\n\nWill not work on players due to the animations being reset every frame by the base gamemode animation system. See <page>GM:CalcMainActivity</page>.\n\nFor custom scripted entities you will want to apply example from <page>ENTITY:Think</page> to make animations work.</note>",
        "name": "ResetSequence",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Reset entity sequence info such as playback rate, ground speed, last event check, etc.",
        "name": "ResetSequenceInfo",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Makes the entity/weapon respawn.\n\nOnly usable on HL2/HL:S pickups and any weapons. Seems to be buggy with weapons.\nVery unreliable.",
        "name": "Respawn",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The activity number to send to the entity. See <page>Enums/ACT</page> and <page>Entity:GetSequenceActivity</page>",
            "name": "activity",
            "type": "number"
          },
          {
            "default": "true",
            "description": "Add/start the gesture to if it has not been yet started.",
            "name": "addIfMissing",
            "type": "boolean"
          },
          {
            "default": "true",
            "description": "",
            "name": "autokill",
            "type": "boolean"
          }
        ],
        "description": "Restarts the entity's animation gesture. If the given gesture is already playing, it will reset it and play it from the beginning.\n\n<note>This function only works on <page>BaseAnimatingOverlay</page> entites.</note>",
        "name": "RestartGesture",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The data from <page>Entity:GetNetworkVars</page>.",
            "name": "data",
            "type": "table"
          }
        ],
        "description": "Calls the associated `Entity:Set*` function for each network var provided.\n\n<internal>Used for the built-in duplicator, you do not need to call this yourself.</internal>\n\n<note>This function will only work on entities which had <page>Entity:InstallDataTable</page> called on them, which is done automatically for players and all <page>Scripted Entities</page></note>",
        "name": "RestoreNetworkVars",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The activity ID, see <page>Enums/ACT</page>.",
            "name": "act",
            "type": "number{ACT}"
          }
        ],
        "description": "Returns sequence ID corresponding to given activity ID.\n\nMultiple sequences can be assigned to a single <page>Enums/ACT</page>, in which case a random one will be selected. This can be used for example to randomize idle animations (and is used for that by built-in weapons) without the need to code logic for this.\nSee also <page>Entity:SelectWeightedSequenceSeeded</page>.\n\nOpposite of <page>Entity:GetSequenceActivity</page>.\n\nSimilar to <page>Entity:LookupSequence</page>.",
        "name": "SelectWeightedSequence",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The sequence ID",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The activity ID, see <page>Enums/ACT</page>.",
            "name": "act",
            "type": "number"
          },
          {
            "description": "The seed to use for randomly selecting a sequence in the case the activity ID has multiple sequences bound to it. <page>Entity:SelectWeightedSequence</page> uses the same seed as <page>util.SharedRandom</page> internally for this.",
            "name": "seed",
            "type": "number"
          }
        ],
        "description": "Returns the sequence ID corresponding to given activity ID, and uses the provided seed for random selection. The seed should be the same server-side and client-side if used in a predicted environment.\n\nSee <page>Entity:SelectWeightedSequence</page> for a provided-seed version of this function.",
        "name": "SelectWeightedSequenceSeeded",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The sequence ID",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The sequence ID returned by <page>Entity:LookupSequence</page> or  <page>Entity:SelectWeightedSequence</page>.",
            "name": "seq",
            "type": "number"
          }
        ],
        "description": "Sends sequence animation to the view model. It is recommended to use this for view model animations, instead of <page>Entity:ResetSequence</page>.\n\nThis function is only usable on view models.\n\n<note>Predicted viewmodels will have their sequence and cycle reset during prediction checks, making this function appear to do nothing unless also called on the server.</note>",
        "name": "SendViewModelMatchingSequence",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "nil",
            "description": "A sequence ID to return the length specific sequence of instead of the entity's main/currently playing sequence.",
            "name": "seqid",
            "type": "number"
          }
        ],
        "description": "Returns length of currently played sequence.\n\n<bug issue=\"2783\">This will return incorrect results for weapons and viewmodels clientside in thirdperson.</bug>",
        "name": "SequenceDuration",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The length of the sequence",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The new velocity to set.",
            "name": "velocity",
            "type": "Vector"
          }
        ],
        "description": "Sets the entity's velocity.\n\n<note>Actually binds to CBaseEntity::SetLocalVelocity() which sets the entity's velocity due to movement in the world from forces such as gravity. Does not include velocity from entity-on-entity collision or other world movement.</note>",
        "name": "SetAbsVelocity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new angles.",
            "name": "angles",
            "type": "Angle"
          }
        ],
        "description": "Sets the angles of the entity.\n\n<note>To set a player's angles, use <page>Player:SetEyeAngles</page> instead.</note>",
        "name": "SetAngles",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Player animation, see <page>Enums/PLAYER</page>.",
            "name": "playerAnim",
            "type": "number"
          }
        ],
        "description": "Sets a player's third-person animation. Mainly used by <page>Weapon</page>s to start the player's weapon attack and reload animations.",
        "name": "SetAnimation",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The time the animation was supposed to begin.",
            "name": "time",
            "type": "number"
          }
        ],
        "description": "Sets the start time (relative to <page>Global.CurTime</page>) of the current animation, which is used to determine <page>Entity:GetCycle</page>. Should be less than CurTime to play an animation from the middle.",
        "name": "SetAnimTime",
        "parent": "Entity",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The entity to attach/parent to",
            "name": "ent",
            "type": "Entity"
          },
          {
            "description": "The attachment ID to parent to",
            "name": "attachment",
            "type": "number"
          }
        ],
        "description": "<deprecated>You should be using <page>Entity:SetParent</page> instead.</deprecated>\n\nParents the sprite to an attachment on another model.\n\nWorks only on `env_sprite` entities.\n\nDespite existing on client, it doesn't actually do anything on client.",
        "name": "SetAttachment",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "An integer corresponding to <page>Enums/BLOOD_COLOR</page>.",
            "name": "bloodColor",
            "type": "number{BLOOD_COLOR}"
          }
        ],
        "description": "Sets the blood color this entity uses.",
        "name": "SetBloodColor",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The Body Group ID to set the Sub Model ID of.\nBody Group IDs start at `0`.",
            "name": "bodyGroupId",
            "type": "number"
          },
          {
            "description": "The Sub Model ID to set as active for this Body Group.\nSub Model IDs start at `0`.",
            "name": "subModelId",
            "type": "number"
          }
        ],
        "description": "Sets the currently active <page text=\"Sub Model ID\">Structures/BodyGroupData#submodels</page> for the Body Group corresponding to the given <page text=\"Body Group ID\">Structures/BodyGroupData#id</page> of the <page text=\"Entity's\">Entity</page> model.\n\nBodygroups, for which <page>Entity:GetBodygroupCount</page> returns `1` or less are considered invalid, and will have no effect in-game.\n<note>When used on a Weapon, this will modify its viewmodel.</note>",
        "name": "SetBodygroup",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The Sub Model IDs to activate for each Body Group on the Entity's model.\n\nThe first character corresponds with Body Group ID `0`, the second character coressponds to Body Group ID `1`, etc.\n\nTo support Body Groups with more than `0`-`9` options, values above `9` are represented using alphabetical characters starting with `a` and ending with `z`.",
            "name": "subModelIds",
            "type": "string"
          }
        ],
        "description": "Sets the <page text=\"Entity's\">Entity</page> active Sub Models via a string of <page text=\"Sub Model IDs\">Structures/BodyGroupData#submodels</page> in order from the first <page text=\"Body Group ID\">Structures/BodyGroupData#id</page> to the last.\n\nThis is a convenience function for <page>Entity:SetBodygroup</page>.\n<note>\nWhen used on a Weapon, this will modify its viewmodel.\n</note>",
        "name": "SetBodyGroups",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The ID of the bone controller to set the value to.\nGoes from 0 to 3.",
            "name": "boneControllerID",
            "type": "number"
          },
          {
            "description": "The value to set on the specified bone controller.",
            "name": "value",
            "type": "number"
          }
        ],
        "description": "Sets the specified value on the bone controller with the given ID of this entity, it's used in HL1 to change the head rotation of NPCs, turret aiming and so on.\n\n<note>This is the precursor of pose parameters, and only works for Half Life 1: Source models supporting it.</note>",
        "name": "SetBoneController",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The ID of the bone",
            "name": "boneid",
            "type": "number"
          },
          {
            "description": "The matrix to set.",
            "name": "matrix",
            "type": "VMatrix"
          }
        ],
        "description": "Sets the bone matrix of given bone to given matrix. See also <page>Entity:GetBoneMatrix</page>. Will cause a uncatchable error when used on `__INVALIDBONE__` bones, see the examples on a way to prevent this.\n\n<note>Despite existing serverside, it does nothing.</note>",
        "name": "SetBoneMatrix",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The bone ID to manipulate",
            "name": "bone",
            "type": "number"
          },
          {
            "description": "The position to set",
            "name": "pos",
            "type": "Vector"
          },
          {
            "description": "The angles to set",
            "name": "ang",
            "type": "Angle"
          }
        ],
        "description": "Sets the bone position and angles.\n\n<validate>For changes to happen, this must be called in a <page text=\"rendering\">Render_Order</page> hook.</validate>",
        "name": "SetBonePosition",
        "parent": "Entity",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The minimum vector of the bounds.",
            "name": "mins",
            "type": "Vector"
          },
          {
            "description": "The maximum vector of the bounds.",
            "name": "maxs",
            "type": "Vector"
          }
        ],
        "description": "Sets the collision bounds for the entity, which are used for triggers (<page>Entity:SetTrigger</page>, <page>ENTITY:Touch</page>), and collision (If <page>Entity:SetSolid</page> set as <page text=\"SOLID_BBOX\">Enums/SOLID</page>).\n\nInput bounds are relative to <page>Entity:GetPos</page>!\nSee also <page>Entity:SetCollisionBoundsWS</page>.\n\n<note>Player collision bounds are reset every frame to player's <page>Player:SetHull</page> values.</note>",
        "name": "SetCollisionBounds",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The first vector of the bounds.",
            "name": "vec1",
            "type": "Vector"
          },
          {
            "description": "The second vector of the bounds.",
            "name": "vec2",
            "type": "Vector"
          }
        ],
        "description": "A convenience function that sets the collision bounds for the entity in world space coordinates by transforming given vectors to entity's local space and passing them to <page>Entity:SetCollisionBounds</page>",
        "name": "SetCollisionBoundsWS",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Collision group of the entity, see <page>Enums/COLLISION_GROUP</page>",
            "name": "group",
            "type": "number{COLLISION_GROUP}"
          }
        ],
        "description": "Sets the entity's collision group.",
        "name": "SetCollisionGroup",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "Color(255, 255, 255, 255)",
            "description": "The color to set. Uses the <page>Color</page>.",
            "name": "color",
            "type": "Color"
          }
        ],
        "description": "Sets the color of an entity.\n\nSome entities may need a custom [render mode](Enums/RENDERMODE) set for transparency to work. See example 2.<br>\nEntities also must have a proper [render group](Enums/RENDERGROUP) set for transparency to work.\n\nWhen rendering a model manually via <page>Entity:SetNoDraw</page> inside <page>ENTITY:Draw</page>, you may need to use <page>render.SetColorModulation</page> in the render hook (where you call <page>Entity:DrawModel</page>) instead.",
        "name": "SetColor",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "source": {
          "file": "lua/includes/extensions/entity.lua",
          "lineEnd": 194,
          "lineStart": 180
        }
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "r",
            "type": "number"
          },
          {
            "description": "",
            "name": "g",
            "type": "number"
          },
          {
            "description": "",
            "name": "b",
            "type": "number"
          },
          {
            "description": "",
            "name": "a",
            "type": "number"
          }
        ],
        "description": "Sets the color of an entity without usage of a <page>Global.Color</page> object.\n\n<internal>Used internally to implement <page>Entity:SetColor</page>.</internal>",
        "name": "SetColor4Part",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "NULL",
            "description": "The creator",
            "name": "ply",
            "type": "Player"
          }
        ],
        "description": "Sets the creator of this entity. This is set automatically in Sandbox gamemode when spawning SENTs, but is never used/read by default.",
        "name": "SetCreator",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "source": {
          "file": "lua/includes/extensions/entity.lua",
          "lineEnd": 67,
          "lineStart": 59
        }
      },
      {
        "arguments": [
          {
            "description": "Enable or disable the custom collision check",
            "name": "enable",
            "type": "boolean"
          }
        ],
        "description": "Marks the entity to call <page>GM:ShouldCollide</page>. Not to be confused with <page>Entity:EnableCustomCollisions</page>.\n<note>\nMake sure to use <page>Entity:CollisionRulesChanged</page> after changing this value.\nOtherwise it can cause crashes.\n</note>",
        "name": "SetCustomCollisionCheck",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The desired cycle value",
            "name": "value",
            "type": "number"
          }
        ],
        "description": "Sets the progress of the current animation to a specific value between 0 and 1.\n\n<bug issue=\"3038\">Viewmodels overwrite their animation cycle every frame, for prediction/interpolation purposes.</bug>",
        "name": "SetCycle",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Goes from 0 to 31.",
            "name": "key",
            "type": "number"
          },
          {
            "description": "The angle to write on the entity's datatable.",
            "name": "ang",
            "type": "Angle"
          }
        ],
        "description": "<internal></internal>\nThis is called internally by the <page>Entity:NetworkVar</page> system, you can use this in cases where using NetworkVar is not possible.\n\nSets the specified angle on the entity's datatable.",
        "name": "SetDTAngle",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Goes from 0 to 31.",
            "name": "key",
            "type": "number"
          },
          {
            "description": "The boolean to write on the entity's metatable.",
            "name": "bool",
            "type": "boolean"
          }
        ],
        "description": "<internal></internal>\nThis is called internally by the <page>Entity:NetworkVar</page> system, you can use this in cases where using NetworkVar is not possible.\n\nSets the specified bool on the entity's datatable.",
        "name": "SetDTBool",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Goes from 0 to 31.",
            "name": "key",
            "type": "number"
          },
          {
            "description": "The entity to write on this entity's datatable.",
            "name": "ent",
            "type": "Entity"
          }
        ],
        "description": "<internal></internal>\nThis is called internally by the <page>Entity:NetworkVar</page> system, you can use this in cases where using NetworkVar is not possible.\n\nSets the specified entity on this entity's datatable.",
        "name": "SetDTEntity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Goes from 0 to 31.",
            "name": "key",
            "type": "number"
          },
          {
            "description": "The float to write on the entity's datatable.",
            "name": "float",
            "type": "number"
          }
        ],
        "description": "<internal></internal>\nThis is called internally by the <page>Entity:NetworkVar</page> system, you can use this in cases where using NetworkVar is not possible.\n\nSets the specified float on the entity's datatable.",
        "name": "SetDTFloat",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Goes from 0 to 31.",
            "name": "key",
            "type": "number"
          },
          {
            "description": "The integer to write on the entity's datatable. This will be cast to a 32-bit signed integer internally.",
            "name": "integer",
            "type": "number"
          }
        ],
        "description": "<internal></internal>\nThis is called internally by the <page>Entity:NetworkVar</page> system, you can use this in cases where using NetworkVar is not possible.\n\nSets the specified integer on the entity's datatable.",
        "name": "SetDTInt",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Goes from 0 to 3.",
            "name": "key",
            "type": "number"
          },
          {
            "description": "The string to write on the entity's datatable, can't be more than 512 characters per string.",
            "name": "str",
            "type": "string"
          }
        ],
        "description": "<internal></internal>\nThis is called internally by the <page>Entity:NetworkVar</page> system, you can use this in cases where using NetworkVar is not possible.\n\nSets the specified string on the entity's datatable.\n\n<note>The length of these strings are capped at 512 characters.</note>",
        "name": "SetDTString",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Goes from 0 to 31.",
            "name": "key",
            "type": "number"
          },
          {
            "description": "The vector to write on the entity's datatable.",
            "name": "vec",
            "type": "Vector"
          }
        ],
        "description": "<internal></internal>\nThis is called internally by the <page>Entity:NetworkVar</page> system, you can use this in cases where using NetworkVar is not possible.\n\nSets the specified vector on the entity's datatable.",
        "name": "SetDTVector",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The elasticity to set.",
            "name": "elasticity",
            "type": "number"
          }
        ],
        "description": "Sets the elasticity of this entity, used by some flying entities such as the Helicopter NPC to determine how much it should bounce around when colliding.",
        "name": "SetElasticity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the variable to modify.\nAccepted names are StartEntity and EndEntity.",
            "name": "name",
            "type": "string"
          },
          {
            "description": "The entity to apply to the specific attachment.",
            "name": "entity",
            "type": "Entity"
          }
        ],
        "description": "Allows you to set the Start or End entity attachment for the rope.",
        "name": "SetEntity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "If NPC, the **world position** for the entity to look towards, for Ragdolls, a **local position** in front of their `eyes` attachment.",
            "name": "pos",
            "type": "Vector"
          }
        ],
        "description": "Sets the position an entity's eyes look toward. This works as an override for default behavior. Set to `0,0,0` to disable the override.",
        "name": "SetEyeTarget",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new flex scale to set to",
            "name": "scale",
            "type": "number"
          }
        ],
        "description": "Sets the scale of all the flexes of this entity. See <page>Entity:SetFlexWeight</page>.",
        "name": "SetFlexScale",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The ID of the flex to modify weight of.  The range is between `0` and <page>Entity:GetFlexNum</page> - 1.",
            "name": "flex",
            "type": "number"
          },
          {
            "description": "The new weight to set. See <page>Entity:GetFlexBounds</page> for the model-defined input range.",
            "name": "weight",
            "type": "number"
          }
        ],
        "description": "Sets the weight/value of given flex controller.\n\nSetting flex weights spawns an internal networked entity (one per entity face posed) to accommodate networking to clients.\n\n<note>Only `96` flex controllers can be set! Flex controllers on models with higher amounts will not be accessible.</note>",
        "name": "SetFlexWeight",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Friction multiplier",
            "name": "friction",
            "type": "number"
          }
        ],
        "description": "Sets friction multiplier for this entity when sliding against a surface. Entities default to 1 (100%) and can be higher.\n\nThis may not affect all entities, but does work for players (the range is 0 to 10), as well as other entities using <page text=\"MOVETYPE_STEP \">Enums/MOVETYPE#MOVETYPE_STEP </page>\n\nThis only multiplies the friction of the entity, to change the value itself use <page>PhysObj:SetMaterial</page>.",
        "name": "SetFriction",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "By how much to multiply the gravity. `1` is normal gravity, `0.5` is half-gravity, etc.",
            "name": "multiplier",
            "type": "number"
          }
        ],
        "description": "Sets the gravity multiplier of the entity.\n\nThis may not affect affect all entities, but does affect players, and entities with <page text=\"MOVETYPE_FLYGRAVITY\">Enums/MOVETYPE#MOVETYPE_FLYGRAVITY</page>, such as projectiles.\n\n<bug issue=\"3648\">This function is not predicted or networked.</bug>",
        "name": "SetGravity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The ground entity.",
            "name": "ground",
            "type": "Entity"
          }
        ],
        "description": "Sets the ground the entity is standing on.",
        "name": "SetGroundEntity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "New health value.",
            "name": "newHealth",
            "type": "number"
          }
        ],
        "description": "Sets the health of the entity.\n\n<note>\nYou may want to take <page>Entity:GetMaxHealth</page> into account when calculating what to set health to, in case a gamemode has a different max health than 100.\nIn some cases, setting health only serverside can cause hitches in movement, for example if something is modifying the player speed based on health.\nTo solve this issue, it is better to set it shared in a predicted hook.\n</note>",
        "name": "SetHealth",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new hitbox set to set. Can be a name as a <page>string</page>, or the ID as a <page>number</page>.\n\nIf the operation failed, the function will silently fail.",
            "name": "id",
            "type": "number"
          }
        ],
        "description": "Sets the current Hitbox set for the entity.",
        "name": "SetHitboxSet",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "false",
            "description": "The state of the IK.",
            "name": "useIK",
            "type": "boolean"
          }
        ],
        "description": "Enables or disable the inverse kinematic usage of this entity.\n<warning>Calling this with false outside of <page>ENTITY:Initialize</page> requires a model change to take effect.</warning>",
        "name": "SetIK",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The internal key name",
            "name": "key",
            "type": "string"
          },
          {
            "description": "The value to set",
            "name": "value",
            "type": "string"
          }
        ],
        "description": "Sets Hammer key values on an entity.\n\nYou can look up which entities have what key values on the [Valve Developer Community](https://developer.valvesoftware.com/wiki/) on entity pages.\n\n\nA  list of basic entities can be found [here](https://developer.valvesoftware.com/wiki/List_of_entities).\n\nAlternatively you can look at the .fgd files shipped with Garry's Mod in the bin/ folder with a text editor to see the key values as they appear in Hammer.",
        "name": "SetKeyValue",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether the entity should be lag compensated or not.",
            "name": "enable",
            "type": "boolean"
          }
        ],
        "description": "This allows the entity to be lag compensated during <page>Player:LagCompensation</page>.\n\n<note>Players are lag compensated by default and there's no need to call this function for them.\n\nIt's best to not enable lag compensation on parented entities, as the system does not handle it that well ( they will be moved back but then the entity will lag behind ).\nParented entities move back with the parent if it's lag compensated, so if you are making some kind of armor piece you shouldn't do anything.</note>\n\nAs a side note for parented entities, if your entity can be shot at, keep in mind that its collision bounds need to be bigger than the bone's hitbox the entity is parented to, or hull/line traces ( such as the crowbar attack or bullets ) might not hit at all.",
        "name": "SetLagCompensated",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The layer ID to change.",
            "name": "layerID",
            "type": "number"
          },
          {
            "description": "Whether to set or unset the autokill flag.",
            "name": "autoKill",
            "type": "boolean"
          }
        ],
        "description": "Sets the autokill flag on the layer, making the layer be automatically removed once the animation playback finishes.\n\n<note>This function only works on <page>BaseAnimatingOverlay</page> entites!</note>",
        "name": "SetLayerAutokill",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The Layer ID",
            "name": "layerID",
            "type": "number"
          },
          {
            "description": "Blend range from 0 to 1.",
            "name": "blendIn",
            "type": "number"
          }
        ],
        "description": "Sets the interval the layer will fully blend in since startup, based on <page>Entity:GetLayerCycle</page>. Setting this above 0 will enable internal blending of <page>Entity:GetLayerWeight</page>.\n<note>This function only works on <page>BaseAnimatingOverlay</page> entites!</note>\n<bug> Enabling this will prevent looping gestures with autokill disabled to be removed with <page>Entity:RemoveGesture</page> or <page>Entity:RemoveAllGestures</page> because layer removal functions mark the layer to decrement <page>Entity:GetLayerWeight</page> and unallocate layer ID in next frames if the layer weight is `0`, but blending functions will still keep manipulating layer weight.\n\nTherefore; before calling layer cleanup functions, make sure both <page>Entity:SetLayerBlendIn</page> and <page>Entity:SetLayerBlendOut</page> are set to `0`. </bug>",
        "name": "SetLayerBlendIn",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The Layer ID",
            "name": "layerID",
            "type": "number"
          },
          {
            "description": "Blend range from 0 to 1.",
            "name": "blendOut",
            "type": "number"
          }
        ],
        "description": "Sets the interval the layer will fully blend out, based on <page>Entity:GetLayerCycle</page>. Setting this above 0 will enable internal blending of <page>Entity:GetLayerWeight</page>.\n<note>This function only works on <page>BaseAnimatingOverlay</page> entites!</note>\n<bug> Enabling this will prevent looping gestures with autokill disabled to be removed with <page>Entity:RemoveGesture</page> or <page>Entity:RemoveAllGestures</page> because layer removal functions mark the layer to decrement <page>Entity:GetLayerWeight</page> and unallocate layer ID in next frames if the layer weight is `0`, but blending functions will still keep manipulating layer weight.\n\nTherefore; before calling layer cleanup functions, make sure both <page>Entity:SetLayerBlendIn</page> and <page>Entity:SetLayerBlendOut</page> are set to `0`. </bug>",
        "name": "SetLayerBlendOut",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The Layer ID",
            "name": "layerID",
            "type": "number"
          },
          {
            "description": "The new animation cycle/frame for given layer.",
            "name": "cycle",
            "type": "number"
          }
        ],
        "description": "Sets the animation cycle/frame of given layer.\n\n<note>This function only works on <page>BaseAnimatingOverlay</page> entities.</note>",
        "name": "SetLayerCycle",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The Layer ID",
            "name": "layerID",
            "type": "number"
          },
          {
            "description": "The new duration of the layer in seconds.",
            "name": "duration",
            "type": "number"
          }
        ],
        "description": "Sets the duration of given layer. This internally overrides the <page>Entity:SetLayerPlaybackRate</page>.\n\n<note>This function only works on <page>BaseAnimatingOverlay</page> entities.</note>\n<bug>This stops layer playback if layer sequence conists of 1 frame. Use `Entity:SetLayerPlaybackRate(layerID,1/duration)` instead.</bug>",
        "name": "SetLayerDuration",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The Layer ID",
            "name": "layerID",
            "type": "number"
          },
          {
            "description": "Whether the layer should loop or not.",
            "name": "loop",
            "type": "boolean"
          }
        ],
        "description": "Sets whether the layer should loop or not.\n\n<note>This function only works on <page>BaseAnimatingOverlay</page> entites!</note>",
        "name": "SetLayerLooping",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The Layer ID",
            "name": "layerID",
            "type": "number"
          },
          {
            "description": "The new playback rate.",
            "name": "rate",
            "type": "number"
          }
        ],
        "description": "Sets the layer playback rate. See also <page>Entity:SetLayerDuration</page>.\n\n<note>This function only works on <page>BaseAnimatingOverlay</page> entities.</note>",
        "name": "SetLayerPlaybackRate",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The Layer ID",
            "name": "layerID",
            "type": "number"
          },
          {
            "description": "The new priority of the layer.",
            "name": "priority",
            "type": "number"
          }
        ],
        "description": "Sets the priority of given layer.\n\n<note>This function only works on <page>BaseAnimatingOverlay</page> entites!</note>",
        "name": "SetLayerPriority",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The Layer ID.",
            "name": "layerID",
            "type": "number"
          },
          {
            "description": "The sequenceID to set. See <page>Entity:LookupSequence</page>.",
            "name": "seq",
            "type": "number"
          }
        ],
        "description": "Sets the sequence of given layer.\n\n<note>This function only works on <page>BaseAnimatingOverlay</page> entities.</note>",
        "name": "SetLayerSequence",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The Layer ID",
            "name": "layerID",
            "type": "number"
          },
          {
            "description": "The new layer weight.",
            "name": "weight",
            "type": "number"
          }
        ],
        "description": "Sets the layer weight. This influences how strongly the animation should be overriding the normal animations of the entity.\n\n<note>This function only works on <page>BaseAnimatingOverlay</page> entities.</note>\n<note>Setting either <page>Entity:SetLayerBlendIn</page> or <page>Entity:SetLayerBlendOut</page> above 0 will turn on automatic weight blending, so you shouldn't be using this if you use any of above. </note>",
        "name": "SetLayerWeight",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether the entity should use the old bone transformation behaviour or not.",
            "name": "enabled",
            "type": "boolean"
          }
        ],
        "description": "This forces an entity to use the bone transformation behaviour from versions prior to **8 July 2014**.\n\nThis behaviour affects <page>Entity:EnableMatrix</page> and <page>Entity:SetModelScale</page> and is incorrect, therefore this function be used exclusively as a quick fix for old scripts that rely on it.",
        "name": "SetLegacyTransform",
        "parent": "Entity",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The lighting entity.",
            "name": "lightOrigin",
            "type": "Entity"
          }
        ],
        "description": "Sets the entity to be used as the light origin position for this entity.",
        "name": "SetLightingOriginEntity",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The local angle",
            "name": "ang",
            "type": "Angle"
          }
        ],
        "description": "Sets angles relative to angles of <page>Entity:GetParent</page>",
        "name": "SetLocalAngles",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The angular velocity to set.",
            "name": "angVel",
            "type": "Angle"
          }
        ],
        "description": "Sets the entity's angular velocity (rotation speed).",
        "name": "SetLocalAngularVelocity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The local position",
            "name": "pos",
            "type": "Vector"
          }
        ],
        "description": "Sets local position relative to the parented position. This is for use with <page>Entity:SetParent</page> to offset position.\n\nThis is also used by NPCs for interpolated movement. If you use <page>Entity:SetPos</page> for step movement, your NPC will snap to position instead.",
        "name": "SetLocalPos",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new velocity to set.",
            "name": "velocity",
            "type": "Vector"
          }
        ],
        "description": "Sets the entity's local velocity which is their velocity due to movement in the world from forces such as gravity. Does not include velocity from entity-on-entity collision or other world movement.\n\n<warning>Same as <page>Entity:SetAbsVelocity</page>, but clamps the given velocity, and is not recommended to be used because of that.</warning>",
        "name": "SetLocalVelocity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "-1",
            "description": "The Level Of Detail model ID to use. -1 leaves the engine to automatically set the Level of Detail.\n\nThe Level Of Detail may range from 0 to 8, with 0 being the highest quality and 8 the lowest.",
            "name": "lod",
            "type": "number"
          }
        ],
        "description": "Sets the Level Of Detail model to use with this entity. This may not work for all models if the model doesn't include any LOD sub models.\n\nThis function works exactly like the clientside r_lod convar and takes priority over it.",
        "name": "SetLOD",
        "parent": "Entity",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "New material name. Use an empty string (\"\") to reset to the default materials.",
            "name": "materialName",
            "type": "string"
          }
        ],
        "description": "Sets the rendering material override of the entity.\n\nTo set a Lua material created with <page>Global.CreateMaterial</page>, just prepend a \"!\" to the material name.\n\nIf you wish to override a single material on the model, use <page>Entity:SetSubMaterial</page> instead.\n\n<note>To apply materials to models, that material **must** have **VertexLitGeneric** shader. For that reason you cannot apply map textures onto models, map textures use a different material shader - **LightmappedGeneric**, which can be used on brush entities.</note>\n\n<bug issue=\"3362\">The server's value takes priority on the client.</bug>",
        "name": "SetMaterial",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "What the max health should be",
            "name": "maxhealth",
            "type": "number"
          }
        ],
        "description": "Sets the maximum health for entity. Note, that you can still set entity's health above this amount with <page>Entity:SetHealth</page>.",
        "name": "SetMaxHealth",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "New model value.",
            "name": "modelName",
            "type": "string"
          }
        ],
        "description": "Sets the model of the entity.\n\nThis does not update the physics of the entity - see <page>Entity:PhysicsInit</page>.\n\n<warning>This silently fails when given an empty string.</warning>",
        "name": "SetModel",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new model name.",
            "name": "modelname",
            "type": "string"
          }
        ],
        "description": "Alter the model name returned by <page>Entity:GetModel</page>. Does not affect the entity's actual model.",
        "name": "SetModelName",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "A float to scale the model by. 0 will not draw anything. A number less than 0 will draw the model inverted.",
            "name": "scale",
            "type": "number"
          },
          {
            "default": "0",
            "description": "Transition time of the scale change, set to 0 to modify the scale right away. To avoid issues with client-side trace detection this must be set, and can be an extremely low number to mimic a value of 0 such as .000001.",
            "name": "deltaTime",
            "type": "number"
          }
        ],
        "description": "Scales the model of the entity, if the entity is a <page>Player</page> or an <page>NPC</page> the hitboxes will be scaled as well.\n\nFor some entities, calling <page>Entity:Activate</page> after this will scale the collision bounds and <page>PhysObj</page> as well; be wary as there's no optimization being done internally and highly complex collision models might crash the server.\n\nThis is the same system used in TF2 for the Mann Vs Machine robots.\n\nTo resize the entity along any axis, use <page>Entity:EnableMatrix</page> instead.\n\nClient-side trace detection seems to mess up if deltaTime is set to anything but zero. A very small decimal can be used instead of zero to solve this issue.\n\nIf your old scales are wrong, use <page>Entity:SetLegacyTransform</page> as a quick fix.\n\n<note>If you do not want the physics to be affected by <page>Entity:Activate</page>, you can use <page>Entity:ManipulateBoneScale</page>`( 0, Vector( scale, scale, scale ) )` instead.</note>\n\n<bug issue=\"3502\">This does not scale procedural bones and disables IK.</bug>",
        "name": "SetModelScale",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The move collide type, see <page>Enums/MOVECOLLIDE</page>",
            "name": "moveCollideType",
            "type": "number"
          }
        ],
        "description": "Sets the move collide type of the entity. The move collide is the way a physics object reacts to hitting an object - will it bounce, slide?",
        "name": "SetMoveCollide",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The entity to change this entity's Movement Parent to.",
            "name": "Parent",
            "type": "Entity"
          }
        ],
        "description": "Sets the Movement Parent of an entity to another entity.\n\nSimilar to <page>Entity:SetParent</page>, except the object's coordinates are not translated automatically before parenting.\n\nDoes nothing on client.",
        "name": "SetMoveParent",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new movetype, see <page>Enums/MOVETYPE</page>",
            "name": "movetype",
            "type": "number"
          }
        ],
        "description": "Sets the entity's move type. This should be called before initializing the physics object on the entity, unless it will override SetMoveType such as <page>Entity:PhysicsInitBox</page>.\n\nDespite existing on client, it doesn't actually do anything on client.",
        "name": "SetMoveType",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The name to set for the entity.",
            "name": "mappingName",
            "type": "string"
          }
        ],
        "description": "Sets the mapping name of the entity.",
        "name": "SetName",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Networked angle.",
            "name": "angle",
            "type": "Angle"
          }
        ],
        "description": "Alters the entity's perceived serverside angle on the client.",
        "name": "SetNetworkAngles",
        "parent": "Entity",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The key to associate the value with",
            "name": "key",
            "type": "string"
          },
          {
            "description": "The value to set",
            "name": "value",
            "type": "Angle"
          }
        ],
        "description": "Sets a networked angle value on the entity.\n\nThe value can then be accessed with <page>Entity:GetNetworked2Angle</page> both from client and server.\n<deprecated> You should be using <page>Entity:SetNW2Angle</page> instead.</deprecated>\n<warning>The value will only be updated clientside if the entity is or enters the clients PVS. use <page>Entity:SetNWAngle</page> instead</warning>\n\n<note>Running this function clientside will only set it for the client it is called on.\nThe value will only be networked if it isn't the same as the current value and unlike SetNW*\nthe value will only be networked once and not every 10 seconds.</note>",
        "name": "SetNetworked2Angle",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The key to associate the value with",
            "name": "key",
            "type": "string"
          },
          {
            "description": "The value to set",
            "name": "value",
            "type": "boolean"
          }
        ],
        "description": "Sets a networked boolean value on the entity.\n\nThe value can then be accessed with <page>Entity:GetNetworked2Bool</page> both from client and server.\n<deprecated>You should be using <page>Entity:SetNW2Bool</page> instead.</deprecated>\n<warning>The value will only be updated clientside if the entity is or enters the clients PVS. use <page>Entity:SetNWBool</page> instead</warning>\n\n<note>Running this function clientside will only set it for the client it is called on.\nThe value will only be networked if it isn't the same as the current value and unlike SetNW*\nthe value will only be networked once and not every 10 seconds.</note>",
        "name": "SetNetworked2Bool",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The key to associate the value with",
            "name": "key",
            "type": "string"
          },
          {
            "description": "The value to set",
            "name": "value",
            "type": "Entity"
          }
        ],
        "description": "Sets a networked entity value on the entity.\n\nThe value can then be accessed with <page>Entity:GetNetworked2Entity</page> both from client and server.\n<deprecated>You should be using <page>Entity:SetNW2Entity</page> instead.</deprecated>\n<warning>The value will only be updated clientside if the entity is or enters the clients PVS. use <page>Entity:SetNWEntity</page> instead</warning>\n\n<note>Running this function clientside will only set it for the client it is called on.\nThe value will only be networked if it isn't the same as the current value and unlike SetNW*\nthe value will only be networked once and not every 10 seconds.</note>",
        "name": "SetNetworked2Entity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The key to associate the value with",
            "name": "key",
            "type": "string"
          },
          {
            "description": "The value to set",
            "name": "value",
            "type": "number"
          }
        ],
        "description": "Sets a networked float (number) value on the entity.\n\nThe value can then be accessed with <page>Entity:GetNetworked2Float</page> both from client and server.\n\nUnlike <page>Entity:SetNetworked2Int</page>, floats don't have to be whole numbers.\n\n<warning>The value will only be updated clientside if the entity is or enters the clients PVS. use <page>Entity:SetNWFloat</page> instead</warning>\n\n<note>Running this function clientside will only set it for the client it is called on.\nThe value will only be networked if it isn't the same as the current value and unlike SetNW*\nthe value will only be networked once and not every 10 seconds.</note>",
        "name": "SetNetworked2Float",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The key to associate the value with",
            "name": "key",
            "type": "string"
          },
          {
            "description": "The value to set",
            "name": "value",
            "type": "number"
          }
        ],
        "description": "Sets a networked integer (whole number) value on the entity.\n\nThe value can then be accessed with <page>Entity:GetNetworked2Int</page> both from client and server.\n\nSee <page>Entity:SetNW2Float</page> for numbers that aren't integers.\n<deprecated>You should be using <page>Entity:SetNW2Int</page> instead.</deprecated>\n<warning>The value will only be updated clientside if the entity is or enters the clients PVS.\nThe integer has a 32 bit limit. Use <page>Entity:SetNWInt</page> instead</warning>\n\n<note>Running this function clientside will only set it for the client it is called on.\nThe value will only be networked if it isn't the same as the current value and unlike SetNW*\nthe value will only be networked once and not every 10 seconds.</note>",
        "name": "SetNetworked2Int",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The key to associate the value with",
            "name": "key",
            "type": "string"
          },
          {
            "description": "The value to set, up to 511 characters.",
            "name": "value",
            "type": "string"
          }
        ],
        "description": "Sets a networked string value on the entity.\n\nThe value can then be accessed with <page>Entity:GetNetworked2String</page> both from client and server.\n\n<deprecated>You should be using <page>Entity:SetNW2String</page> instead.</deprecated>\n<warning>The value will only be updated clientside if the entity is or enters the clients PVS. use <page>Entity:SetNWString</page> instead</warning>\n\n<note>Running this function clientside will only set it for the client it is called on.\nThe value will only be networked if it isn't the same as the current value and unlike SetNW*\nthe value will only be networked once and not every 10 seconds.</note>",
        "name": "SetNetworked2String",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The key to associate the value with",
            "name": "key",
            "type": "string"
          },
          {
            "description": "The value to set",
            "name": "value",
            "type": "any"
          }
        ],
        "description": "Sets a networked value on the entity.\n\nThe value can then be accessed with <page>Entity:GetNetworked2Var</page> both from client and server.\n\n| Allowed Types   |\n| --------------- |\n| Angle           |\n| Boolean         |\n| Entity          |\n| Float           |\n| Int             |\n| String          |\n| Vector          |\n<deprecated>You should be using <page>Entity:SetNW2Var</page> instead.</deprecated>\n<warning>Trying to network a type that is not listed above leads to the value not being networked!</warning>\n<note>Running this function clientside will only set it for the client it is called on.\nThe value will only be networked if it isn't the same as the current value and unlike SetNW*\nthe value will only ne networked once and not every 10 seconds.</note>",
        "name": "SetNetworked2Var",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the NW2Var to add callback for.",
            "name": "name",
            "type": "string"
          },
          {
            "description": "The function to be called when the NW2Var changes.\n\n<callback>\n<arg type=\"Entity\" name=\"ent\">The entity</arg>\n<arg type=\"string\" name=\"name\">Name of the NW2Var that has changed</arg>\n<arg type=\"any\" name=\"oldval\">The old value</arg>\n<arg type=\"any\" name=\"newval\">The new value</arg>\n</callback>",
            "name": "callback",
            "type": "function"
          }
        ],
        "description": "Sets a function to be called when the NW2Var changes. Internally uses <page>GM:EntityNetworkedVarChanged</page> to call the function.\n<note>Only one NW2VarProxy can be set per-var\nRunning this function clientside will only set it for the client it is called on.</note>",
        "name": "SetNetworked2VarProxy",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "source": {
          "file": "lua/includes/extensions/entity.lua",
          "lineEnd": 611,
          "lineStart": 600
        }
      },
      {
        "arguments": [
          {
            "description": "The key to associate the value with",
            "name": "key",
            "type": "string"
          },
          {
            "description": "The value to set",
            "name": "value",
            "type": "Vector"
          }
        ],
        "description": "Sets a networked vector value on the entity.\n\nThe value can then be accessed with <page>Entity:GetNetworked2Vector</page> both from client and server.\n\n<deprecated>You should be using <page>Entity:SetNW2Vector</page> instead.</deprecated>\n<warning>The value will only be updated clientside if the entity is or enters the clients PVS. use <page>Entity:SetNWVector</page> instead</warning>\n<note>Running this function clientside will only set it for the client it is called on.\nThe value will only be networked if it isn't the same as the current value and unlike SetNW*\nthe value will only be networked once and not every 10 seconds.</note>",
        "name": "SetNetworked2Vector",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The key to associate the value with",
            "name": "key",
            "type": "string"
          },
          {
            "default": "Angle( 0, 0, 0 )",
            "description": "The value to set",
            "name": "value",
            "type": "Angle"
          }
        ],
        "description": "<deprecated>You should use <page>Entity:SetNWAngle</page> instead.</deprecated>\n\nSets a networked angle value at specified index on the entity.\n\nThe value then can be accessed with <page>Entity:GetNetworkedAngle</page> both from client and server.\n\n<note>Running this function clientside will only set it clientside for the client it is called on.</note>",
        "name": "SetNetworkedAngle",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The key to associate the value with",
            "name": "key",
            "type": "string"
          },
          {
            "default": "false",
            "description": "The value to set",
            "name": "value",
            "type": "boolean"
          }
        ],
        "description": "<deprecated>You should use <page>Entity:SetNWBool</page> instead.</deprecated>\n\nSets a networked boolean value at specified index on the entity.\n\nThe value then can be accessed with <page>Entity:GetNetworkedBool</page> both from client and server.\n\n<note>Running this function clientside will only set it clientside for the client it is called on.</note>",
        "name": "SetNetworkedBool",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The key to associate the value with",
            "name": "key",
            "type": "string"
          },
          {
            "default": "NULL",
            "description": "The value to set",
            "name": "value",
            "type": "Entity"
          }
        ],
        "description": "<deprecated>You should use <page>Entity:SetNWEntity</page> instead.</deprecated>\n\nSets a networked entity value at specified index on the entity.\n\nThe value then can be accessed with <page>Entity:GetNetworkedEntity</page> both from client and server.\n\n<note>Running this function clientside will only set it clientside for the client it is called on.</note>",
        "name": "SetNetworkedEntity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The key to associate the value with",
            "name": "key",
            "type": "string"
          },
          {
            "default": "0",
            "description": "The value to set",
            "name": "value",
            "type": "number"
          }
        ],
        "description": "<deprecated>You should use <page>Entity:SetNWFloat</page> instead.</deprecated>\n\nSets a networked float value at specified index on the entity.\n\nThe value then can be accessed with <page>Entity:GetNetworkedFloat</page> both from client and server.\n\nSeems to be the same as <page>Entity:GetNetworkedInt</page>.\n\n<note>Running this function clientside will only set it clientside for the client it is called on.</note>",
        "name": "SetNetworkedFloat",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The key to associate the value with",
            "name": "key",
            "type": "string"
          },
          {
            "default": "0",
            "description": "The value to set",
            "name": "value",
            "type": "number"
          }
        ],
        "description": "<deprecated>You should use <page>Entity:SetNWInt</page> instead.</deprecated>\n\nSets a networked integer value at specified index on the entity.\n\nThe value then can be accessed with <page>Entity:GetNetworkedInt</page> both from client and server.\n\n<note>Running this function clientside will only set it clientside for the client it is called on.</note>",
        "name": "SetNetworkedInt",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The index that the value is stored in.",
            "name": "index",
            "type": "any"
          },
          {
            "description": "The value to network.",
            "name": "number",
            "type": "number"
          }
        ],
        "description": "<deprecated>You should be using <page>Entity:SetNWFloat</page> instead.</deprecated>\n\nSets a networked number at the specified index on the entity.",
        "name": "SetNetworkedNumber",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The key to associate the value with",
            "name": "key",
            "type": "string"
          },
          {
            "default": "",
            "description": "The value to set",
            "name": "value",
            "type": "string"
          }
        ],
        "description": "<deprecated>You should use <page>Entity:SetNWString</page> instead.</deprecated>\n\nSets a networked string value at specified index on the entity.\n\nThe value then can be accessed with <page>Entity:GetNetworkedString</page> both from client and server.\n\n<note>Running this function clientside will only set it clientside for the client it is called on.</note>",
        "name": "SetNetworkedString",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The key to associate the value with",
            "name": "key",
            "type": "string"
          },
          {
            "description": "The value to set",
            "name": "value",
            "type": "any"
          }
        ],
        "description": "Sets a networked value on the entity.\n\nThe value can then be accessed with <page>Entity:GetNetworkedVar</page> both from client and server.\n\n| Allowed Types   |\n| --------------- |\n| Angle           |\n| Boolean         |\n| Entity          |\n| Float           |\n| Int             |\n| String          |\n| Vector          |\n<deprecated></deprecated>\n<warning>Trying to network a type that is not listed above leads to the value not being networked!\nthe value will only be updated clientside if the entity is or enters the clients PVS.</warning>\n\n<note>Running this function clientside will only set it for the client it is called on.\nThe value will only be networked if it isn't the same as the current value and unlike SetNW*\nthe value will only be networked once and not every 10 seconds.</note>",
        "name": "SetNetworkedVar",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the NWVar to add callback for.",
            "name": "name",
            "type": "string"
          },
          {
            "description": "The function to be called when the NWVar changes.\n\n<callback>\n<arg type=\"Entity\" name=\"ent\">The entity</arg>\n<arg type=\"string\" name=\"name\">Name of the NWVar that has changed</arg>\n<arg type=\"any\" name=\"oldval\">The old value</arg>\n<arg type=\"any\" name=\"newval\">The new value</arg>\n</callback>",
            "name": "callback",
            "type": "function"
          }
        ],
        "description": "<deprecated>You should be using <page>Entity:SetNWVarProxy</page> instead.</deprecated>\nSets callback function to be called when given NWVar changes.",
        "name": "SetNetworkedVarProxy",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "source": {
          "file": "lua/includes/extensions/entity.lua",
          "lineEnd": 493,
          "lineStart": 485
        }
      },
      {
        "arguments": [
          {
            "description": "The key to associate the value with",
            "name": "key",
            "type": "string"
          },
          {
            "default": "Vector( 0, 0, 0 )",
            "description": "The value to set",
            "name": "value",
            "type": "Vector"
          }
        ],
        "description": "<deprecated>You should use <page>Entity:SetNWVector</page> instead.</deprecated>\n\nSets a networked vector value at specified index on the entity.\n\nThe value then can be accessed with <page>Entity:GetNetworkedVector</page> both from client and server.\n\n<note>Running this function clientside will only set it clientside for the client it is called on.</note>",
        "name": "SetNetworkedVector",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The key-value name, or simply the \"key\".",
            "name": "key",
            "type": "string"
          },
          {
            "description": "The key-value value.",
            "name": "value",
            "type": "string"
          }
        ],
        "description": "A helper function to allow setting <page text=\"Network Variables\">Networking_Entities</page> via <page>Entity:SetKeyValue</page>, primarily to allow mappers to set them from Hammer.\n\nMeant to be called from <page>ENTITY:KeyValue</page>, see example.\n\nSee also <page>Entity:SetNetworkVarsFromMapInput</page> for a function that does similar thing for map inputs instead.\n\n<note>This function will only work on entities which had <page>Entity:InstallDataTable</page> called on them, which is done automatically for players and all <page>Scripted Entities</page>.</note>",
        "name": "SetNetworkKeyValue",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether a network variable was set successfully",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The position to make clients think this entity is at.",
            "name": "origin",
            "type": "Vector"
          }
        ],
        "description": "Virtually changes entity position for clients. Does almost the same thing as <page>Entity:SetPos</page> when used serverside.\n<note>\nUnlike <page>Entity:SetPos</page> it directly changes the position without checking for any unreasonable position.\n</note>",
        "name": "SetNetworkOrigin",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the Map I/O input, including the `Set` prefix.",
            "name": "name",
            "type": "string"
          },
          {
            "description": "The input parameter.",
            "name": "param",
            "type": "string"
          }
        ],
        "description": "A helper function to allow setting <page text=\"Network Variables\">Networking_Entities</page> via <page>Entity:Fire</page>, primarily to allow mappers to set them from Hammer via Map I/O logic.\n\nMeant to be called from <page>ENTITY:AcceptInput</page>, see example.\n\nSee also <page>Entity:SetNetworkKeyValue</page> for a function that does similar thing, but for entity key-values in Hammer instead.\n\n<note>This function will only work on entities which had <page>Entity:InstallDataTable</page> called on them, which is done automatically for players and all <page>Scripted Entities</page>.</note>",
        "name": "SetNetworkVarsFromMapInput",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether a network variable was set successfully",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The next time, relative to <page>Global.CurTime</page>, to execute the <page>ENTITY:Think</page> clientside.",
            "name": "nextthink",
            "type": "number"
          }
        ],
        "description": "Sets the next time the clientside <page>ENTITY:Think</page> is called.",
        "name": "SetNextClientThink",
        "parent": "Entity",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "true disables drawing",
            "name": "shouldNotDraw",
            "type": "boolean"
          }
        ],
        "description": "Sets if the entity's model should render at all.\n\nIf set on the server, this entity will no longer network to clients, and for all intents and purposes cease to exist clientside.\n\nThe entity can still be manually rendered via <page>Entity:DrawModel</page> in appropriate hooks.",
        "name": "SetNoDraw",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "True will make the entity not solid, false will make it solid.",
            "name": "IsNotSolid",
            "type": "boolean"
          }
        ],
        "description": "Sets whether the entity is solid or not.",
        "name": "SetNotSolid",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The key to associate the value with",
            "name": "key",
            "type": "string"
          },
          {
            "description": "The value to set",
            "name": "value",
            "type": "Angle"
          }
        ],
        "description": "Sets a networked angle value on the entity.\n\nThe value can then be accessed with <page>Entity:GetNW2Angle</page> both from client and server.\n<warning>The value will only be updated clientside if the entity is or enters the clients PVS. use <page>Entity:SetNWAngle</page> instead</warning>\n\n<note>Running this function clientside will only set it for the client it is called on.\nThe value will only be networked if it isn't the same as the current value and unlike SetNW*\nthe value will only be networked once and not every 10 seconds.</note>",
        "name": "SetNW2Angle",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The key to associate the value with",
            "name": "key",
            "type": "string"
          },
          {
            "description": "The value to set",
            "name": "value",
            "type": "boolean"
          }
        ],
        "description": "Sets a networked boolean value on the entity.\n\nThe value can then be accessed with <page>Entity:GetNW2Bool</page> both from client and server.\n<bug issue=\"5455\">You should not use the NW2 System on entities that are based on a Lua Entity or else NW2Vars could get mixed up, updated multiple times or not be set.</bug>\n<warning>The value will only be updated clientside if the entity is or enters the clients PVS. use <page>Entity:SetNWBool</page> instead</warning>\n\n<note>Running this function clientside will only set it for the client it is called on.\nThe value will only be networked if it isn't the same as the current value and unlike SetNW*\nthe value will only be networked once and not every 10 seconds.</note>",
        "name": "SetNW2Bool",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The key to associate the value with",
            "name": "key",
            "type": "string"
          },
          {
            "description": "The value to set",
            "name": "value",
            "type": "Entity"
          }
        ],
        "description": "Sets a networked entity value on the entity.\n\nThe value can then be accessed with <page>Entity:GetNW2Entity</page> both from client and server.\n<bug issue=\"5455\">You should not use the NW2 System on entities that are based on a Lua Entity or else NW2Vars could get mixed up, updated multiple times or not be set.</bug>\n<warning>The value will only be updated clientside if the entity is or enters the clients PVS. use <page>Entity:SetNWEntity</page> instead</warning>\n\n<note>Running this function clientside will only set it for the client it is called on.\nThe value will only be networked if it isn't the same as the current value and unlike SetNW*\nthe value will only be networked once and not every 10 seconds.</note>",
        "name": "SetNW2Entity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The key to associate the value with",
            "name": "key",
            "type": "string"
          },
          {
            "description": "The value to set",
            "name": "value",
            "type": "number"
          }
        ],
        "description": "Sets a networked float (number) value on the entity.\n\nThe value can then be accessed with <page>Entity:GetNW2Float</page> both from client and server.\n\nUnlike <page>Entity:SetNW2Int</page>, floats don't have to be whole numbers.\n<bug issue=\"5455\">You should not use the NW2 System on entities that are based on a Lua Entity or else NW2Vars could get mixed up, updated multiple times or not be set.</bug>\n<warning>The value will only be updated clientside if the entity is or enters the clients PVS. use <page>Entity:SetNWFloat</page> instead</warning>\n\n<note>Running this function clientside will only set it for the client it is called on.\nThe value will only be networked if it isn't the same as the current value and unlike SetNW*\nthe value will only be networked once and not every 10 seconds.</note>",
        "name": "SetNW2Float",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The key to associate the value with",
            "name": "key",
            "type": "string"
          },
          {
            "description": "The value to set",
            "name": "value",
            "type": "number"
          }
        ],
        "description": "Sets a networked integer (whole number) value on the entity.\n\nThe value can then be accessed with <page>Entity:GetNW2Int</page> both from client and server.\n\nSee <page>Entity:SetNW2Float</page> for numbers that aren't integers.\n<bug issue=\"5455\">You should not use the NW2 System on entities that are based on a Lua Entity or else NW2Vars could get mixed up, updated multiple times or not be set.</bug>\n<warning>The value will only be updated clientside if the entity is or enters the clients PVS.\nThe integer has a 32 bit limit. Use <page>Entity:SetNWInt</page> instead</warning>\n\n<note>Running this function clientside will only set it for the client it is called on.\nThe value will only be networked if it isn't the same as the current value and unlike SetNW*\nthe value will only be networked once and not every 10 seconds.</note>",
        "name": "SetNW2Int",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The key to associate the value with, up to 1023 characters",
            "name": "key",
            "type": "string"
          },
          {
            "description": "The value to set, up to 511 characters.",
            "name": "value",
            "type": "string"
          }
        ],
        "description": "Sets a networked string value on the entity.\n\nThe value can then be accessed with <page>Entity:GetNW2String</page> both from client and server.\n<bug issue=\"5455\">You should not use the NW2 System on entities that are based on a Lua Entity or else NW2Vars could get mixed up, updated multiple times or not be set.</bug>\n<warning>The value will only be updated clientside if the entity is or enters the clients PVS. use <page>Entity:SetNWString</page> instead</warning>\n\n<note>Running this function clientside will only set it for the client it is called on.\nThe value will only be networked if it isn't the same as the current value and unlike SetNW*\nthe value will only be networked once and not every 10 seconds.</note>",
        "name": "SetNW2String",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The key to associate the value with",
            "name": "key",
            "type": "string"
          },
          {
            "description": "The value to set",
            "name": "value",
            "type": "any"
          }
        ],
        "description": "Sets a networked value on the entity.\n\nThe value can then be accessed with <page>Entity:GetNW2Var</page> both from client and server.\n\n| Allowed Types   |\n| --------------- |\n| Angle           |\n| Boolean         |\n| Entity          |\n| Float           |\n| Int             |\n| String          |\n| Vector          |\n<warning>Trying to network a type that is not listed above leads to the value not being networked!\nthe value will only be updated clientside if the entity is or enters the clients PVS.</warning>\n\n<bug issue=\"5455\">You should not use the NW2 System on entities that are based on a Lua Entity or else NW2Vars could get mixed up, updated multiple times or not be set.</bug>\n\n<note>Running this function clientside will only set it for the client it is called on.\nThe value will only be networked if it isn't the same as the current value and unlike SetNW*\nthe value will only be networked once and not every 10 seconds.</note>",
        "name": "SetNW2Var",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The key of the NW2Var to add callback for.",
            "name": "key",
            "type": "string"
          },
          {
            "description": "The function to be called when the NW2Var changes. It has 4 arguments:\n* <page>Entity</page> ent - The entity\n* <page>string</page> name - Name of the NW2Var that has changed\n* <page>any</page> oldval - The old value\n* <page>any</page> newval - The new value",
            "name": "callback",
            "type": "function"
          }
        ],
        "description": "Sets a function to be called when the NW2Var changes. Internally uses <page>GM:EntityNetworkedVarChanged</page> to call the function.\nAlias of <page>Entity:SetNetworked2VarProxy</page>\n<bug issue=\"5455\">You should not use the NW2 System on entities that are based on a Lua Entity, or else this will be called multiple times and the NW2Var could get mixed up with other ones.</bug>\n<note>Only one NW2VarProxy can be set per-var\nRunning this function will only set it for the realm it is called on.</note>",
        "name": "SetNW2VarProxy",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "source": {
          "file": "lua/includes/extensions/entity.lua",
          "lineStart": 626
        }
      },
      {
        "arguments": [
          {
            "description": "The key to associate the value with",
            "name": "key",
            "type": "string"
          },
          {
            "description": "The value to set",
            "name": "value",
            "type": "Vector"
          }
        ],
        "description": "Sets a networked vector value on the entity.\n\nThe value can then be accessed with <page>Entity:GetNW2Vector</page> both from client and server.\n<bug issue=\"5455\">You should not use the NW2 System on entities that are based on a Lua Entity or else NW2Vars could get mixed up, updated multiple times or not be set.</bug>\n<warning>The value will only be updated clientside if the entity is or enters the clients PVS. use <page>Entity:SetNWVector</page> instead</warning>\n\n<note>Running this function clientside will only set it for the client it is called on.\nThe value will only be networked if it isn't the same as the current value and unlike SetNW*\nthe value will only be networked once and not every 10 seconds.</note>",
        "name": "SetNW2Vector",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The key to associate the value with",
            "name": "key",
            "type": "string"
          },
          {
            "description": "The value to set",
            "name": "value",
            "type": "Angle"
          }
        ],
        "description": "Sets a networked angle value on the entity.\n\nThe value can then be accessed with <page>Entity:GetNWAngle</page> both from client and server.\n<warning>There's a 4095 slots Network limit. If you need more, consider using the <page>net</page> library or <page>Entity:SetNW2Angle</page>. You should also consider the fact that you have way too many variables. You can learn more about this limit here: <page>Networking_Usage#nwlimits</page></warning>\n<note>Running this function clientside will only set it for the client it is called on.</note>",
        "name": "SetNWAngle",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The key to associate the value with",
            "name": "key",
            "type": "string"
          },
          {
            "description": "The value to set",
            "name": "value",
            "type": "boolean"
          }
        ],
        "description": "Sets a networked boolean value on the entity.\n\nThe value can then be accessed with <page>Entity:GetNWBool</page> both from client and server.\n<warning>There's a 4096 slots Network limit. If you need more, consider using the <page>net</page> library or <page>Entity:SetNW2Bool</page>. You should also consider the fact that you have way too many variables. You can learn more about this limit here: <page>Networking_Usage#nwlimits</page></warning>\n<note>Running this function clientside will only set it for the client it is called on.</note>",
        "name": "SetNWBool",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The key to associate the value with",
            "name": "key",
            "type": "string"
          },
          {
            "description": "The value to set",
            "name": "value",
            "type": "Entity"
          }
        ],
        "description": "Sets a networked entity value on the entity.\n\nThe value can then be accessed with <page>Entity:GetNWEntity</page> both from client and server.\n<warning>There's a 4096 slots Network limit. If you need more, consider using the <page>net</page> library or <page>Entity:SetNW2Entity</page>. You should also consider the fact that you have way too many variables. You can learn more about this limit here: <page>Networking_Usage#nwlimits</page></warning>\n<note>Running this function clientside will only set it for the client it is called on.</note>",
        "name": "SetNWEntity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The key to associate the value with",
            "name": "key",
            "type": "string"
          },
          {
            "description": "The value to set",
            "name": "value",
            "type": "number"
          }
        ],
        "description": "Sets a networked float (number) value on the entity.\n\nThe value can then be accessed with <page>Entity:GetNWFloat</page> both from client and server.\n\nUnlike <page>Entity:SetNWInt</page>, floats don't have to be whole numbers.\n<warning>There's a 4095 slots Network limit. If you need more, consider using the <page>net</page> library or <page>Entity:SetNW2Float</page>. You should also consider the fact that you have way too many variables. You can learn more about this limit here: <page>Networking_Usage#nwlimits</page></warning>\n<note>Running this function clientside will only set it for the client it is called on.</note>",
        "name": "SetNWFloat",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The key to associate the value with",
            "name": "key",
            "type": "string"
          },
          {
            "description": "The value to set",
            "name": "value",
            "type": "number"
          }
        ],
        "description": "Sets a networked integer (whole number) value on the entity.\n\nThe value can then be accessed with <page>Entity:GetNWInt</page> both from client and server.\n\nSee <page>Entity:SetNWFloat</page> for numbers that aren't integers.\n<warning>There's a 4095 slots Network limit. If you need more, consider using the <page>net</page> library or <page>Entity:SetNW2Int</page>. You should also consider the fact that you have way too many variables. You can learn more about this limit here: <page>Networking_Usage#nwlimits</page></warning>\n<note>Running this function clientside will only set it for the client it is called on.</note>\n<bug issue=\"3374\">This function will not round decimal values as it actually networks a float internally.</bug>",
        "name": "SetNWInt",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The key to associate the value with",
            "name": "key",
            "type": "string"
          },
          {
            "description": "The value to set, up to 199 characters.",
            "name": "value",
            "type": "string"
          }
        ],
        "description": "Sets a networked string value on the entity.\n\nThe value can then be accessed with <page>Entity:GetNWString</page> both from client and server.\n<warning>There's a 4095 slots Network limit. If you need more, consider using the <page>net</page> library or <page>Entity:SetNW2String</page>. You should also consider the fact that you have way too many variables. You can learn more about this limit here: <page>Networking_Usage#nwlimits</page></warning>\n<note>Running this function clientside will only set it for the client it is called on.</note>",
        "name": "SetNWString",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The key of the NWVar to add callback for.",
            "name": "key",
            "type": "string"
          },
          {
            "description": "The function to be called when the NWVar changes.\n\n<callback>\n<arg type=\"Entity\" name=\"ent\">The entity</arg>\n<arg type=\"string\" name=\"name\">Name of the NWVar that has changed</arg>\n<arg type=\"any\" name=\"oldval\">The old value</arg>\n<arg type=\"any\" name=\"newval\">The new value</arg>\n</callback>",
            "name": "callback",
            "type": "function"
          }
        ],
        "description": "<note>Only one NWVarProxy can be set per-var\nRunning this function will only set it for the realm it is called on.</note>\n\nSets a function to be called when the NWVar changes.",
        "name": "SetNWVarProxy",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The key to associate the value with",
            "name": "key",
            "type": "string"
          },
          {
            "description": "The value to set",
            "name": "value",
            "type": "Vector"
          }
        ],
        "description": "Sets a networked vector value on the entity.\n\nThe value can then be accessed with <page>Entity:GetNWVector</page> both from client and server.\n<warning>There's a 4095 slots Network limit. If you need more, consider using the <page>net</page> library or <page>Entity:SetNW2Vector</page>. You should also consider the fact that you have way too many variables. You can learn more about this limit here: <page>Networking_Usage#nwlimits</page></warning>\n<note>Running this function clientside will only set it for the client it is called on.</note>",
        "name": "SetNWVector",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "NULL",
            "description": "The entity to be set as owner.",
            "name": "owner",
            "type": "Entity"
          }
        ],
        "description": "Sets the owner of this entity, disabling all physics interaction with it.\n\n<note>This function is generally used to disable physics interactions on projectiles being fired by their owner, but can also be used for normal ownership in case physics interactions are not involved at all. The Gravity gun will be able to pick up the entity even if the owner can't collide with it, the Physics gun however will not.</note>",
        "name": "SetOwner",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "NULL",
            "description": "The entity to parent to. Setting this to nil will clear the parent.",
            "name": "parent",
            "type": "Entity"
          },
          {
            "default": "-1",
            "description": "The attachment or bone id to use when parenting. Defaults to -1 or whatever the parent had set previously.\n\nUse <page>Entity:AddEffects</page>( EF_FOLLOWBONE ) to treat this argument as a Bone ID instead of an Attachment ID. Similar to <page>Entity:FollowBone</page>.\n\n\n<note>You must call <page>Entity:SetMoveType</page>( MOVETYPE_NONE ) on the child for this argument to have any effect!</note>",
            "name": "attachmentOrBoneId",
            "type": "number"
          }
        ],
        "description": "Sets the parent of this entity, making it move with its parent. This will make the child entity non solid, nothing can interact with them, including traces.\n\n<note>This does not work on <page text=\"the world\">game.GetWorld</page>.</note>\n<warning>This can cause undefined physics behavior when used on entities that don't support parenting. See the [Valve developer wiki](https://developer.valvesoftware.com/wiki/Entity_Hierarchy_(parenting)) for more information.</warning>",
        "name": "SetParent",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Physics bone number to attach to. Use 0 for objects with only one physics bone. (See <page>Entity:GetPhysicsObjectNum</page>)",
            "name": "bone",
            "type": "number"
          }
        ],
        "description": "Sets the parent of an entity to another entity with the given physics bone number. Similar to <page>Entity:SetParent</page>, except it is parented to a physbone. This function is useful mainly for ragdolls.\n\n<note>Despite this function being available server side, it doesn't actually do anything server side.</note>",
        "name": "SetParentPhysNum",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether or not the entity should be persistent.",
            "name": "persist",
            "type": "boolean"
          }
        ],
        "description": "Sets whether or not the given entity is persistent. A persistent entity will be saved on server shutdown and loaded back when the server starts up. Additionally, by default persistent entities cannot be grabbed with the physgun and tools cannot be used on them.\n\nIn sandbox, this can be set on an entity by opening the context menu, right clicking the entity, and choosing `\"Make Persistent\"`.\n\n<note>Persistence can only be enabled with the sbox_persist convar, which works as an identifier for the current set of persistent entities. An empty identifier (which is the default value) disables this feature.</note>",
        "name": "SetPersistent",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The first physics object to be constrained.",
            "name": "Phys1",
            "type": "PhysObj"
          },
          {
            "description": "The second physics object to be constrained.",
            "name": "Phys2",
            "type": "PhysObj"
          }
        ],
        "description": "When called on a constraint entity, sets the two physics objects to be constrained.\n\nUsage is not recommended as the Constraint library provides easier ways to deal with constraints.",
        "name": "SetPhysConstraintObjects",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Player who gets the kills. Setting this to a non-player entity will not work.",
            "name": "ent",
            "type": "Player"
          },
          {
            "default": "5",
            "description": "Time in seconds until the entity forgets its physics attacker and prevents it from getting the kill credit.",
            "name": "timeLimit",
            "type": "number"
          }
        ],
        "description": "Sets the player who gets credit if this entity kills something with physics damage within the time limit.\n\n<note>Only functional on props, \"anim\" type SENTs, vehicles and a few other select entities.</note>",
        "name": "SetPhysicsAttacker",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "How fast the animation will play.",
            "name": "fSpeed",
            "type": "number"
          }
        ],
        "description": "Allows you to set how fast an entity's animation will play, with 1.0 being the default speed.",
        "name": "SetPlaybackRate",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The position to move the entity to.",
            "name": "position",
            "type": "Vector"
          }
        ],
        "description": "Moves the entity to the specified position.\n\nSome entities, such as ragdolls, will continually reset their position. Consider using <page>PhysObj:SetPos</page> on every physics object to move ragdolls.\n\n<note>If the new position doesn't take effect right away, you can use <page>Entity:SetupBones</page> to force it to do so. This issue is especially common when trying to render the same entity twice or more in a single frame at different positions.\n</note>\n\n<warning>Entities with <page>Entity:GetSolid</page> of `SOLID_BBOX` will have their angles reset!</warning>\n\n<bug issue=\"2447\">This will fail inside of predicted functions called during player movement processing. This includes <page>WEAPON:PrimaryAttack</page> and <page>WEAPON:Think</page>.</bug>",
        "name": "SetPos",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Name of the pose parameter. <page>Entity:GetPoseParameterName</page> might come in handy here.\n\nCan also be a pose parameter ID.",
            "name": "poseName",
            "type": "string"
          },
          {
            "description": "The value to set the pose to.",
            "name": "poseValue",
            "type": "number"
          }
        ],
        "description": "Sets the specified pose parameter to the specified value.\n\nYou should call <page>Entity:InvalidateBoneCache</page> after calling this function.\n\n<note>Avoid calling this in draw hooks, especially when animating things, as it might cause visual artifacts.</note>",
        "name": "SetPoseParameter",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "whether to make this entity predictable or not.",
            "name": "setPredictable",
            "type": "boolean"
          }
        ],
        "description": "Sets whether an entity should be predictable or not.\nWhen an entity is set as predictable, its DT vars can be changed during predicted hooks. This is useful for entities which can be controlled by player input.\n\nAny datatable value that mismatches from the server will be overridden and a prediction error will be spewed.\n\nWeapons are predictable by default, and the drive system uses this function to make the controlled prop predictable as well.\n\nVisit  for a list of all predicted hooks, and the <page>Prediction</page> page.\nFor further technical information on the subject, visit [valve's wiki](https://developer.valvesoftware.com/wiki/Prediction).\n\n<note>This function resets the datatable variables everytime it's called, it should ideally be called when a player starts using the entity and when he stops</note>\n<note>Entities set as predictable with this function will be unmarked when the user lags and receives a full packet update, to handle such case visit <page>GM:NotifyShouldTransmit</page></note>",
        "name": "SetPredictable",
        "parent": "Entity",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The player to stop networking the entity to. Can also be a <page>CRecipientFilter</page> or a <page>table</page> as of March 2024 to affect multiple players at once.",
            "name": "player",
            "type": "Player|CRecipientFilter|table<Player>"
          },
          {
            "description": "true to stop the entity from networking, false to make it network again.",
            "name": "stopTransmitting",
            "type": "boolean"
          }
        ],
        "description": "Prevents the server from sending any further information about the entity to a player.\n\n<note>You must also call this function on all entity's children. See <page>Entity:GetChildren</page>.\n\n[issue tracker](https://github.com/Facepunch/garrysmod-issues/issues/1736)\n\n<page>Entity:SetFlexScale</page> and other flex/bone manipulation functions will create a child entity.\n</note>",
        "name": "SetPreventTransmit",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Bone ID",
            "name": "boneid",
            "type": "number"
          },
          {
            "description": "Angle to set",
            "name": "pos",
            "type": "Angle"
          }
        ],
        "description": "Sets the bone angles. This is used alongside Kinect in <page>Entity:SetRagdollBuildFunction</page>, for more info see ragdoll_motion entity.",
        "name": "SetRagdollAng",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The build function.\n\n<callback>\n<arg type=\"Entity\" name=\"ragdoll\">The ragdoll to build</arg>\n</callback>",
            "name": "builder",
            "type": "function"
          }
        ],
        "description": "Sets the function to build the ragdoll. This is used alongside Kinect, for more info see `ragdoll_motion` entity in the game files.",
        "name": "SetRagdollBuildFunction",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Bone ID",
            "name": "boneid",
            "type": "number"
          },
          {
            "description": "Position to set",
            "name": "pos",
            "type": "Vector"
          }
        ],
        "description": "Sets the bone position. This is used alongside Kinect in <page>Entity:SetRagdollBuildFunction</page>, for more info see ragdoll_motion entity.",
        "name": "SetRagdollPos",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "nil",
            "description": "The new render angles to be set to. To disable the override, set to <page>nil</page>.",
            "name": "newAngles",
            "type": "Angle"
          }
        ],
        "description": "Sets the render angle override for the Entity.",
        "name": "SetRenderAngles",
        "parent": "Entity",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/includes/extensions/client/entity.lua",
          "lineStart": 16
        }
      },
      {
        "arguments": [
          {
            "description": "The minimum corner of the bounds, relative to origin of the entity.",
            "name": "mins",
            "type": "Vector"
          },
          {
            "description": "The maximum corner of the bounds, relative to origin of the entity.",
            "name": "maxs",
            "type": "Vector"
          },
          {
            "default": "Vector( 0, 0, 0 )",
            "description": "If defined, adds this vector to maxs and subtracts this vector from mins.",
            "name": "add",
            "type": "Vector"
          }
        ],
        "description": "Sets the render bounds for the entity.\n\nFor world space coordinate alternative see <page>Entity:SetRenderBoundsWS</page>.",
        "name": "SetRenderBounds",
        "parent": "Entity",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The minimum corner of the bounds, relative to origin of the world/map.",
            "name": "mins",
            "type": "Vector"
          },
          {
            "description": "The maximum corner of the bounds, relative to origin of the world/map.",
            "name": "maxs",
            "type": "Vector"
          },
          {
            "default": "Vector( 0, 0, 0 )",
            "description": "If defined, adds this vector to maxs and subtracts this vector from mins.",
            "name": "add",
            "type": "Vector"
          }
        ],
        "description": "Sets the render bounds for the entity in world space coordinates. For relative coordinates see <page>Entity:SetRenderBounds</page>.",
        "name": "SetRenderBoundsWS",
        "parent": "Entity",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The normal of the plane. Anything behind the normal will be clipped.",
            "name": "planeNormal",
            "type": "Vector"
          },
          {
            "description": "The position of the plane.",
            "name": "planePosition",
            "type": "number"
          }
        ],
        "description": "Used to specify a plane, past which an object will be visually clipped.",
        "name": "SetRenderClipPlane",
        "parent": "Entity",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "Enable or disable clipping planes",
            "name": "enabled",
            "type": "boolean"
          }
        ],
        "description": "Enables the use of clipping planes to \"cut\" objects.",
        "name": "SetRenderClipPlaneEnabled",
        "parent": "Entity",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new render FX to set, see <page>Enums/kRenderFx</page>",
            "name": "renderFX",
            "type": "number"
          }
        ],
        "description": "Sets entity's render FX. Requires the entitys rendermode to support transparency.",
        "name": "SetRenderFX",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "New render mode to set, see <page>Enums/RENDERMODE</page>.",
            "name": "renderMode",
            "type": "number"
          }
        ],
        "description": "Sets the render mode of the entity.",
        "name": "SetRenderMode",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "nil",
            "description": "The new origin in world coordinates where the Entity's model will now be rendered at. To disable the override, set to <page>nil</page>.",
            "name": "newOrigin",
            "type": "Vector"
          }
        ],
        "description": "Set the render origin override, a position where the Entity will be rendered at.",
        "name": "SetRenderOrigin",
        "parent": "Entity",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/includes/extensions/client/entity.lua",
          "lineStart": 17
        }
      },
      {
        "arguments": [
          {
            "description": "Name of the save value to set",
            "name": "name",
            "type": "string"
          },
          {
            "description": "Value to set",
            "name": "value",
            "type": "any"
          }
        ],
        "description": "Sets a save value for an entity. You can see a full list of an entity's save values by creating it and printing <page>Entity:GetSaveTable</page>().\n\nSee <page>Entity:GetInternalVariable</page> for the opposite of this function.",
        "name": "SetSaveValue",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Key successfully set",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The sequence to play.\n\nIf set to a number, the input is treated as the sequence ID.\nIf set to a string, the function will automatically call <page>Entity:LookupSequence</page> to retrieve the sequence ID.",
            "name": "sequence",
            "type": "number"
          }
        ],
        "description": "Sets the entity's model sequence.\n\nIf the specified sequence is already active, the animation will not be restarted. See <page>Entity:ResetSequence</page> for a function that restarts the animation even if it is already playing.\n\nIn some cases you want to run <page>Entity:ResetSequenceInfo</page> to make this function run.\n\n<note>This will not work properly if called directly after calling <page>Entity:SetModel</page>. Consider waiting until the next Tick.\n\nWill not work on players due to the animations being reset every frame by the base gamemode animation system. See <page>GM:CalcMainActivity</page>.\n\nFor custom scripted entities you will want to apply example from <page>ENTITY:Think</page> to make animations work.</note>",
        "name": "SetSequence",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "false",
            "description": "True to play the pickup sound, false otherwise.",
            "name": "playsound",
            "type": "boolean"
          }
        ],
        "description": "Sets whether or not the entity should make a physics contact sound when it's been picked up by a player.",
        "name": "SetShouldPlayPickupSound",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "source": {
          "file": "lua/includes/extensions/entity.lua",
          "lineEnd": 13,
          "lineStart": 11
        }
      },
      {
        "arguments": [
          {
            "description": "Set `true` if ragdoll should be created on server, `false` if on client.",
            "name": "serverragdoll",
            "type": "boolean"
          }
        ],
        "description": "Sets if entity should create a server ragdoll on death or a client one.\n\n<note>\nThis is reset for players when they respawn (<page>Entity:Spawn</page>).\n\nPlayer ragdolls created with this enabled will have an owner set, see <page>Entity:SetOwner</page> for more information on what effects this has.\n</note>",
        "name": "SetShouldServerRagdoll",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "0-based index of the skin to use.",
            "name": "skinIndex",
            "type": "number"
          }
        ],
        "description": "Sets the skin of the entity.",
        "name": "SetSkin",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The solid type. See the <page>Enums/SOLID</page>.",
            "name": "solid_type",
            "type": "number"
          }
        ],
        "description": "Sets the solidity of an entity.",
        "name": "SetSolid",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The flag(s) to set, see <page>Enums/FSOLID</page>.",
            "name": "flags",
            "type": "number{FSOLID}"
          }
        ],
        "description": "Sets solid flag(s) for the entity.\n\nThis overrides any other flags the entity might have had. See <page>Entity:AddSolidFlags</page> for adding flags.",
        "name": "SetSolidFlags",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Sets if we should show a spawn effect.",
            "name": "spawnEffect",
            "type": "boolean"
          }
        ],
        "description": "Sets whether the entity should use a spawn effect when it is created on the client.\n\nSee <page>Entity:GetSpawnEffect</page> for more information on how the effect is applied.\n\n<note>This function will only have an effect when the entity spawns. After that it will do nothing even is set to true.</note>",
        "name": "SetSpawnEffect",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The SpawnFlag to remove from the Entity",
            "name": "flags",
            "type": "number"
          }
        ],
        "description": "Sets the SpawnFlags to set of an Entity\n\nSpawnFlags can easily be found on https://developer.valvesoftware.com/wiki/.\n\n<note>See also <page>Entity:RemoveSpawnFlags</page>, <page>Entity:AddSpawnFlags</page>\n\nUsing <page text=\"SF Enumerations\">Enums/SF</page> won't work, if this function is ran clientside due to the enumerations being defined only Serverside. Use the actual SpawnFlag number.\n</note>",
        "name": "SetSpawnFlags",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "source": {
          "file": "lua/includes/extensions/entity.lua",
          "lineEnd": 9,
          "lineStart": 7
        }
      },
      {
        "arguments": [
          {
            "default": "nil",
            "description": "Index of the material to override, acceptable values are from 0 to 31.\n\nIndexes are by <page>Entity:GetMaterials</page>, but you have to subtract 1 from them.\n\nIf called with no arguments, all sub materials will be reset.",
            "name": "index",
            "type": "number"
          },
          {
            "default": "nil",
            "description": "The material to override the default one with. Set to nil to revert to default material.",
            "name": "material",
            "type": "string"
          }
        ],
        "description": "Overrides a single material on the model of this entity.\n\nTo set a Lua material created with <page>Global.CreateMaterial</page>, just prepend a `!` to the material name.\n\n<bug issue=\"3362\">The server's value takes priority on the client.</bug>",
        "name": "SetSubMaterial",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Minimum extent of the AABB relative to entity's position.",
            "name": "min",
            "type": "Vector"
          },
          {
            "description": "Maximum extent of the AABB relative to entity's position.",
            "name": "max",
            "type": "Vector"
          }
        ],
        "description": "Sets the axis-aligned bounding box (AABB) for an entity's hitbox detection.\n\nSee also <page>Entity:SetSurroundingBoundsType</page> (mutually exclusive).",
        "name": "SetSurroundingBounds",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Bounds type of the entity, see <page>Enums/BOUNDS</page>",
            "name": "bounds",
            "type": "number{BOUNDS}"
          }
        ],
        "description": "Automatically sets the axis-aligned bounding box (AABB) for an entity's hitbox detection.\n\nSee also <page>Entity:SetSurroundingBounds</page> (mutually exclusive).",
        "name": "SetSurroundingBoundsType",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Table for the entity to use",
            "name": "tab",
            "type": "table"
          }
        ],
        "description": "<internal></internal>\n\nChanges the table that can be accessed by indexing an entity. Each entity starts with its own table by default.",
        "name": "SetTable",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Will set the TransmitWithParent flag on or off",
            "name": "onoff",
            "type": "boolean"
          }
        ],
        "description": "When this flag is set the entity will only transmit to the player when its parent is transmitted. This is useful for things like viewmodel attachments since without this flag they will transmit to everyone (and cause the viewmodels to transmit to everyone too).\n\n<note>In the case of scripted entities, this will override <page>ENTITY:UpdateTransmitState</page></note>",
        "name": "SetTransmitWithParent",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Make the entity trigger or not",
            "name": "maketrigger",
            "type": "boolean"
          }
        ],
        "description": "Marks the entity as a trigger, so it will generate <page>ENTITY:StartTouch</page>, <page>ENTITY:Touch</page> and <page>ENTITY:EndTouch</page> callbacks.\n\nInternally this is stored as <page text=\"FSOLID_TRIGGER\">Enums/FSOLID</page> flag.",
        "name": "SetTrigger",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "false",
            "description": "True to make the entity unfreezable, false otherwise.",
            "name": "freezable",
            "type": "boolean"
          }
        ],
        "description": "Sets whether an entity can be unfrozen, meaning that it cannot be unfrozen using the physgun.",
        "name": "SetUnFreezable",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "source": {
          "file": "lua/includes/extensions/entity.lua",
          "lineEnd": 596,
          "lineStart": 594
        }
      },
      {
        "description": "Forces the entity to reconfigure its bones. You might need to call this after changing your model's scales or when manually drawing the entity multiple times at different positions.\n\n<note>This calls the BuildBonePositions callback added via <page>Entity:AddCallback</page>, so avoid calling this function inside it to prevent an infinite loop.</note>",
        "name": "SetupBones",
        "parent": "Entity",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The file prefix of the phoneme mappings (relative to \"garrysmod/expressions/\").",
            "name": "fileRoot",
            "type": "string"
          }
        ],
        "description": "Initializes the class names of an entity's phoneme mappings (mouth movement data). This is called by default with argument \"phonemes\" when a flex-based entity (such as an <page>NPC</page>) is created.\n\n<note>TF2 phonemes can be accessed by using a path such as \"player/scout/phonemes/phonemes\" , check TF2's \"tf2_misc_dir.vpk\" with GCFScape for other paths, however it seems that TF2 sounds don't contain phoneme definitions anymore after being converted to mp3 and only rely on VCD animations, this needs to be further investigated</note>",
        "name": "SetupPhonemeMappings",
        "parent": "Entity",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The use type to apply to the entity. Uses <page>Enums/_USE</page>.",
            "name": "useType",
            "type": "number{_USE}"
          }
        ],
        "description": "Sets the use type of an entity, affecting how often <page>ENTITY:Use</page> will be called for Lua entities.",
        "name": "SetUseType",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Key of the value to set",
            "name": "key",
            "type": "any"
          },
          {
            "description": "Value to set the variable to",
            "name": "value",
            "type": "any"
          }
        ],
        "description": "Allows to quickly set variable to entity's <page>Entity:GetTable</page>.\n\n<note>This will not network the variable to client(s). You want <page>Entity:SetNWString</page> and similar functions for that</note>",
        "name": "SetVar",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "source": {
          "file": "lua/includes/extensions/entity.lua",
          "lineEnd": 106,
          "lineStart": 102
        }
      },
      {
        "arguments": [
          {
            "description": "The new velocity to set.",
            "name": "velocity",
            "type": "Vector"
          }
        ],
        "description": "Sets the entity's velocity. For entities with physics, consider using <page>PhysObj:SetVelocity</page> on the <page>PhysObj</page> of the entity.\n\n<note>Actually binds to CBaseEntity::SetBaseVelocity() which sets the entity's velocity due to forces applied by other entities.</note>\n\n<warning>If applied to a player, this will actually **ADD** velocity, not set it. (due to how movement code handles base velocity)</warning>",
        "name": "SetVelocity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The model string to give to this viewmodel.\nExample: \"models/weapons/c_smg1.mdl\"",
            "name": "viewModel",
            "type": "string"
          },
          {
            "default": "NULL",
            "description": "The weapon entity to associate this viewmodel to.",
            "name": "weapon",
            "type": "Weapon"
          }
        ],
        "description": "Sets the model and associated weapon to this viewmodel entity.\n\nThis is used internally when the player switches weapon.\n\n<note>View models are not drawn without a weapons associated to them.</note>\n<warning>This will silently fail if the entity is not a viewmodel.</warning>",
        "name": "SetWeaponModel",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Returns the amount of skins the entity has. To retrieve the total number of skins on a model, please look at this function <page>util.GetModelInfo</page>",
        "name": "SkinCount",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The amount of skins the entity's model has.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Entity to move the model instance from.",
            "name": "srcEntity",
            "type": "Entity"
          }
        ],
        "description": "Moves the model instance from the source entity to this entity. This can be used to transfer decals that have been applied on one entity to another.\n\nBoth entities must have the same model.",
        "name": "SnatchModelInstance",
        "parent": "Entity",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Whether the operation was successful or not",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Initializes the entity and starts its networking. If called on a player, it will respawn them.\n\nThis calls <page>ENTITY:Initialize</page> on Lua-defined entities.",
        "name": "Spawn",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Sound to play. Can be either a sound script or a filepath.",
            "name": "sound",
            "type": "string"
          }
        ],
        "description": "Starts a \"looping\" sound. As with any other sound playing methods, this function expects the sound file to be looping itself and will not automatically loop a non looping sound file as one might expect.\n\nThis function is almost identical to <page>Global.CreateSound</page>, with the exception of the sound being created in the STATIC channel and with normal attenuation.\n\nSee also <page>Entity:StopLoopingSound</page>",
        "name": "StartLoopingSound",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The ID number of started sound starting with 0, or -1 if we failed for some reason.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Starts a motion controller in the physics engine tied to this entity's <page>PhysObj</page>, which enables the use of <page>ENTITY:PhysicsSimulate</page>.\n\nThe motion controller can later be destroyed via <page>Entity:StopMotionController</page>.\n\nMotion controllers are used internally to control other Entities' <page>PhysObj</page>ects, such as the Gravity Gun, +use pickup and the Physics Gun.\n\nThis function should be called every time you recreate the Entity's <page>PhysObj</page>. Or alternatively you should call <page>Entity:AddToMotionController</page> on the new <page>PhysObj</page>.\n\nAlso see <page>Entity:AddToMotionController</page> and <page>Entity:RemoveFromMotionController</page>.\n\n<note>Only works on a scripted <page>Entity</page> of anim type.</note>",
        "name": "StartMotionController",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Stops all particle effects parented to the entity and immediately destroys them.",
        "name": "StopAndDestroyParticles",
        "parent": "Entity",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The sound ID returned by <page>Entity:StartLoopingSound</page>",
            "name": "id",
            "type": "number"
          }
        ],
        "description": "Stops a sound created by <page>Entity:StartLoopingSound</page>.",
        "name": "StopLoopingSound",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Stops the motion controller created with <page>Entity:StartMotionController</page>.",
        "name": "StopMotionController",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Stops all particle effects parented to the entity.\n\nThis is ran automatically on every client by <page>Entity:StopParticles</page> if called on the server.",
        "name": "StopParticleEmission",
        "parent": "Entity",
        "realms": [
          "client"
        ]
      },
      {
        "description": "Stops any attached to the entity .pcf particles using <page>Global.ParticleEffectAttach</page> or <page>Global.ParticleEffect</page>.\n\nOn client, this is the same as <page>Entity:StopParticleEmission</page>. ( and you should use StopParticleEmission instead )\n\n\nOn server, this is the same as running <page>Entity:StopParticleEmission</page> on every client.",
        "name": "StopParticles",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the particle to stop.",
            "name": "name",
            "type": "string"
          }
        ],
        "description": "Stops all particle effects parented to the entity with given name.",
        "name": "StopParticlesNamed",
        "parent": "Entity",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the particle to stop.",
            "name": "name",
            "type": "string"
          },
          {
            "description": "The attachment of the entity to stop particles on.",
            "name": "attachment",
            "type": "number"
          }
        ],
        "description": "Stops all particle effects parented to the entity with given name on given attachment.",
        "name": "StopParticlesWithNameAndAttachment",
        "parent": "Entity",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the sound script or the filepath to stop playback of.",
            "name": "sound",
            "type": "string"
          }
        ],
        "description": "Stops emitting the given sound from the entity, especially useful for looping sounds.",
        "name": "StopSound",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The amount of damage to be applied.",
            "name": "damageAmount",
            "type": "number"
          },
          {
            "default": "nil",
            "description": "The entity that initiated the attack that caused the damage.",
            "name": "attacker",
            "type": "Entity"
          },
          {
            "default": "nil",
            "description": "The entity that applied the damage, eg. a weapon.",
            "name": "inflictor",
            "type": "Entity"
          }
        ],
        "description": "Applies the specified amount of damage to the entity with <page text=\"DMG_GENERIC\">Enums/DMG</page> flag.\n\n<warning>Calling this function on the victim entity in <page>ENTITY:OnTakeDamage</page> can cause infinite loops.</warning>\n<warning>This function does not seem to do any damage if you apply it to a player who is driving a prop_vehicle_jeep or prop_vehicle_jeep_old vehicle. You need to call it on the vehicle instead.</warning>",
        "name": "TakeDamage",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The damage to apply.",
            "name": "damageInfo",
            "type": "CTakeDamageInfo"
          }
        ],
        "description": "Applies the damage specified by the damage info to the entity.\n\n<warning>Calling this function on the victim entity in <page>ENTITY:OnTakeDamage</page> can cause infinite loops.</warning>\n<warning>This function does not seem to do any damage if you apply it to a player who is driving a prop_vehicle_jeep or prop_vehicle_jeep_old vehicle. You need to call it on the vehicle instead.</warning>\n<note>This function does not apply damage to [func_breakable_surf](https://developer.valvesoftware.com/wiki/Func_breakable_surf) entities correctly. To do this, you will need to use <page>Entity:DispatchTraceAttack</page> instead.</note>",
        "name": "TakeDamageInfo",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The damageinfo to apply. Only <page>CTakeDamageInfo:GetDamageForce</page> and <page>CTakeDamageInfo:GetDamagePosition</page> are used.",
            "name": "dmginfo",
            "type": "CTakeDamageInfo"
          }
        ],
        "description": "Applies forces to our physics object in response to damage.",
        "name": "TakePhysicsDamage",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "<page>Entity</page> or <page>Vector</page> to test against. If an entity is given, this function will test using its bounding box.",
            "name": "testPoint",
            "type": "any"
          }
        ],
        "description": "Check if the given position or entity is within this entity's [PVS(Potential Visibility Set)](https://developer.valvesoftware.com/wiki/PVS \"PVS - Valve Developer Community\").\n\nSee also <page>Entity:IsDormant</page>.\n\n<note>The function won't take in to account <page>Global.AddOriginToPVS</page> and the like.</note>",
        "name": "TestPVS",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "True if the testPoint is within our PVS.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The ID of a bone to look up the \"physics root\" bone of.",
            "name": "boneID",
            "type": "number"
          }
        ],
        "description": "Returns the ID of a <page>PhysObj</page> attached to the given bone.\n\nSee <page>Entity:TranslatePhysBoneToBone</page> for reverse function.",
        "name": "TranslateBoneToPhysBone",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The <page>PhysObj</page> ID of the given bone to be used with <page>Entity:GetPhysicsObjectNum</page> or `-1` if we cannot translate for some reason, such as a model bone having no physics object associated with it.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page>PhysObj</page> number on the entity",
            "name": "physNum",
            "type": "number"
          }
        ],
        "description": "Returns the boneID of the bone the given <page>PhysObj</page> is attached to.\n\nSee <page>Entity:TranslateBoneToPhysBone</page> for reverse function.",
        "name": "TranslatePhysBoneToBone",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The boneID of the bone the <page>PhysObj</page> is attached to.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Updates positions of bone followers created by <page>Entity:CreateBoneFollowers</page>.\n\nThis should be called every tick.\n\n<note>This function only works on `anim`, `nextbot` and `ai` type entities.</note>",
        "name": "UpdateBoneFollowers",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Marks the render-to-texture (RTT) shadow of this entity as dirty, as well as any potential projected texture shadows related to this entity, so they will be updated as soon as possible.",
        "name": "UpdateShadow",
        "parent": "Entity",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The entity that caused this input. This will usually be the player who pressed their use key",
            "name": "activator",
            "type": "Entity"
          },
          {
            "default": "NULL",
            "description": "The entity responsible for the input. This will typically be the same as `activator` unless some other entity is acting as a proxy",
            "name": "caller",
            "type": "Entity"
          },
          {
            "default": "USE_ON",
            "description": "Use type, see <page>Enums/USE</page>.",
            "name": "useType",
            "type": "number{USE}"
          },
          {
            "default": "0",
            "description": "Any value.",
            "name": "value",
            "type": "number"
          }
        ],
        "description": "Simulates a `+use` action on an entity.",
        "name": "Use",
        "parent": "Entity",
        "realms": [
          "server"
        ]
      },
      {
        "description": "<note>Does nothing on server.</note>\n\nAnimations will be handled purely clientside instead of a fixed animtime, enabling interpolation. This does not affect layers and gestures.",
        "name": "UseClientSideAnimation",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Enable or disable the bounds.",
            "name": "enable",
            "type": "boolean"
          },
          {
            "default": "0",
            "description": "The distance/size of the trigger bounds.",
            "name": "boundSize",
            "type": "number"
          }
        ],
        "description": "Enables or disables trigger bounds.\n\nThis will give the entity a \"trigger box\" that extends around its bounding box by boundSize units in X/Y and (boundSize / 2) in +Z (-Z remains the same).\nThe trigger box is world aligned and will work regardless of the object's solidity and collision group.\n\nValve use trigger boxes for all pickup items. Their bloat size is 24, a surprisingly large figure.\n\n<note>The trigger boxes can be made visible as a light blue box by using the **ent_bbox** console command while looking at the entity. Alternatively a classname or entity index can be used as the first argument.\n\nThis requires **developer** to be set to **1**.</note>",
        "name": "UseTriggerBounds",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Returns the index of this view model, it can be used to identify which one of the player's view models this entity is.",
        "name": "ViewModelIndex",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "View model index, ranges from 0 to 2, nil if the entity is not a view model",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Entity to check for visibility to.",
            "name": "target",
            "type": "Entity"
          }
        ],
        "description": "Returns whether the target/given entity is visible from the this entity.\n\nThis is meant to be used only with NPCs.\n\nDifferences from a simple trace include:\n* If target has `FL_NOTARGET`, returns `false`\n* If `ai_ignoreplayers` is turned on and target is a player, returns `false`\n* Reacts to `ai_LOS_mode`:\n* * If `1`, does a simple trace with `COLLISION_GROUP_NONE` and `MASK_BLOCKLOS`\n* * If not, does a trace with `MASK_BLOCKLOS_AND_NPCS` (- `CONTENTS_BLOCKLOS` is target is player) and a custom LOS filter (`CTraceFilterLOS`)\n* Returns `true` if hits a vehicle the target is driving",
        "name": "Visible",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "If the entities can see each other.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The position to check for visibility",
            "name": "pos",
            "type": "Vector"
          }
        ],
        "description": "Returns true if supplied vector is visible from the entity's line of sight.\n\nThis is achieved similarly to a trace.",
        "name": "VisibleVec",
        "parent": "Entity",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Within line of sight",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns an integer that represents how deep in water the entity is.",
        "name": "WaterLevel",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The water level.\n* **0** - The entity isn't in water.\n* **1** - Slightly submerged (at least to the feet).\n* **2** - The majority of the entity is submerged (at least to the waist).\n* **3** - Completely submerged.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Activity number. See <page>Enums/ACT</page>.",
            "name": "act",
            "type": "number"
          },
          {
            "description": "How long the animation should take in seconds.",
            "name": "duration",
            "type": "number"
          }
        ],
        "description": "Sets the activity of the entity's active weapon.\n\n<note>This does nothing on the client.</note>\n<note>Only works for CBaseCombatCharacter entities, which includes players and NPCs.</note>",
        "name": "Weapon_SetActivity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The NPC activity to translate",
            "name": "act",
            "type": "number"
          }
        ],
        "description": "Calls and returns <page>WEAPON:TranslateActivity</page> on the weapon the entity ( player or NPC ) carries.\n\nDespite existing on client, it doesn't actually do anything on client.",
        "name": "Weapon_TranslateActivity",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The translated activity. Defaults to `act` input when a translation doesn't exist.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns two vectors representing the minimum and maximum extent of the entity's axis-aligned bounding box (which is calculated from entity's collision bounds.",
        "name": "WorldSpaceAABB",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The minimum vector for the entity's bounding box in world space.",
            "type": "Vector"
          },
          {
            "description": "The maximum vector for the entity's bounding box in world space.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the center of the entity according to its collision model.",
        "name": "WorldSpaceCenter",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The center of the entity",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The world vector",
            "name": "wpos",
            "type": "Vector"
          }
        ],
        "description": "Converts a worldspace vector into a vector local to an entity",
        "name": "WorldToLocal",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The local vector",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The world angles",
            "name": "ang",
            "type": "Angle"
          }
        ],
        "description": "Converts world angles to local angles ( local to the entity )",
        "name": "WorldToLocalAngles",
        "parent": "Entity",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The local angles",
            "type": "Angle"
          }
        ]
      }
    ],
    "name": "Entity"
  },
  {
    "functions": [
      {
        "description": "Gets the NPC classification. Internally gets the `m_iClass` variable which is polled by the engine. This will be equivalent to <page>NPC:Classify</page>.\n\n<note>This is a helper function only available if your SENT is based on `base_ai`</note>",
        "name": "GetNPCClass",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "See <page>Enums/CLASS</page>",
            "type": "number"
          }
        ],
        "source": {
          "file": "gamemodes/base/entities/entities/base_ai/init.lua",
          "lineStart": 14
        }
      },
      {
        "arguments": [
          {
            "description": "The new max yaw value to set",
            "name": "maxyaw",
            "type": "number"
          }
        ],
        "description": "Sets the NPC max yaw speed. Internally sets the `m_fMaxYawSpeed` variable which is polled by the engine.\n\n<note>This is a helper function only available if your SENT is based on `base_ai`</note>",
        "name": "SetMaxYawSpeed",
        "parent": "ENTITY",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page text=\"CLASS Enum\">Enums/CLASS</page>",
            "name": "classification",
            "type": "number"
          }
        ],
        "description": "Sets the NPC classification. Internally sets the `m_iClass` variable which is polled by the engine.\n\n<note>This is a helper function only available if your SENT is based on `base_ai`</note>",
        "name": "SetNPCClass",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "source": {
          "file": "gamemodes/base/entities/entities/base_ai/init.lua",
          "lineStart": 14
        }
      }
    ],
    "name": "ENTITY"
  },
  {
    "description": "This is the file object. It used used primarily to read or write binary data from files.\nThe default endianness is little-endian. To use big-endian you will need to provide your own functions to read and write shorts and longs.\n\nThe object is returned by <page>file.Open</page>.",
    "functions": [
      {
        "description": "Dumps the file changes to disk and closes the file handle which makes the handle useless.",
        "name": "Close",
        "parent": "File",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "description": "Returns whether the <page>File</page> object has reached the end of file or not.",
        "name": "EndOfFile",
        "parent": "File",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the file has reached end or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Dumps the file changes to disk and saves the file.",
        "name": "Flush",
        "parent": "File",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "nil",
            "description": "Reads the specified amount of chars. If not set, will read the entire file.",
            "name": "length",
            "type": "number"
          }
        ],
        "description": "Reads the specified amount of chars and returns them as a binary string.",
        "name": "Read",
        "parent": "File",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "name": "data",
            "type": "string"
          }
        ]
      },
      {
        "description": "Reads one byte of the file and returns whether that byte was not 0.",
        "name": "ReadBool",
        "parent": "File",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "val",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Reads one unsigned 8-bit integer from the file.",
        "name": "ReadByte",
        "parent": "File",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The unsigned 8-bit integer from the file.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Reads an 8-byte little-endian IEEE-754 floating point double from the file.",
        "name": "ReadDouble",
        "parent": "File",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The double-precision floating point value read from the file.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Reads an IEEE 754 little-endian 4-byte float from the file.",
        "name": "ReadFloat",
        "parent": "File",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The read value",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the contents of the file from the current position up until the end of the current line.\n\n<note>This function will look specifically for `Line Feed` characters `\\n` and will **completely ignore `Carriage Return` characters** `\\r`.\n\nIt will also stop at a `\\0` or `NULL` character, but will add a new line instead.\n\nThis function will not return more than 8192 characters. The return value will include the `\\n` character.</note>",
        "name": "ReadLine",
        "parent": "File",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The string of data from the read line.",
            "type": "string"
          }
        ]
      },
      {
        "description": "Reads a signed little-endian 32-bit integer from the file.",
        "name": "ReadLong",
        "parent": "File",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "A signed 32-bit integer",
            "type": "number"
          }
        ]
      },
      {
        "description": "Reads a signed little-endian 16-bit integer from the file.",
        "name": "ReadShort",
        "parent": "File",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "int16",
            "type": "number"
          }
        ]
      },
      {
        "description": "Reads an unsigned 64-bit integer from the file.",
        "name": "ReadUInt64",
        "parent": "File",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "An unsigned 64-bit integer.\n<note>Since Lua cannot store full 64-bit integers, this function returns a string. It is mainly aimed at usage with <page>Player:SteamID64</page>.</note>",
            "type": "string"
          }
        ]
      },
      {
        "description": "Reads an unsigned little-endian 32-bit integer from the file.",
        "name": "ReadULong",
        "parent": "File",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "An unsigned 32-bit integer",
            "type": "number"
          }
        ]
      },
      {
        "description": "Reads an unsigned little-endian 16-bit integer from the file.",
        "name": "ReadUShort",
        "parent": "File",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The 16-bit integer",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Pointer position, in bytes.",
            "name": "pos",
            "type": "number"
          }
        ],
        "description": "Sets the file pointer to the specified position.",
        "name": "Seek",
        "parent": "File",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "description": "Returns the size of the file in bytes.",
        "name": "Size",
        "parent": "File",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "name": "size",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The amount of chars to skip, can be negative to skip backwards.",
            "name": "amount",
            "type": "number"
          }
        ],
        "description": "Moves the file pointer by the specified amount of chars.",
        "name": "Skip",
        "parent": "File",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "amount",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the current position of the file pointer.",
        "name": "Tell",
        "parent": "File",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "pos",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Binary data to write to the file.",
            "name": "data",
            "type": "string"
          }
        ],
        "description": "Writes the given string into the file.",
        "name": "Write",
        "parent": "File",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The bool to be written to the file.",
            "name": "bool",
            "type": "boolean"
          }
        ],
        "description": "Writes a boolean value to the file as one **byte**.",
        "name": "WriteBool",
        "parent": "File",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The 8-bit unsigned integer to be written to the file.",
            "name": "uint8",
            "type": "number"
          }
        ],
        "description": "Write an 8-bit unsigned integer to the file.",
        "name": "WriteByte",
        "parent": "File",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The double to be written to the file.",
            "name": "double",
            "type": "number"
          }
        ],
        "description": "Writes an 8-byte little-endian IEEE-754 floating point double to the file.",
        "name": "WriteDouble",
        "parent": "File",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The float to be written to the file.",
            "name": "float",
            "type": "number"
          }
        ],
        "description": "Writes an IEEE 754 little-endian 4-byte float to the file.",
        "name": "WriteFloat",
        "parent": "File",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The 32-bit signed integer to be written to the file.",
            "name": "int32",
            "type": "number"
          }
        ],
        "description": "Writes a signed little-endian 32-bit integer to the file.",
        "name": "WriteLong",
        "parent": "File",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The 16-bit signed integer to be written to the file.",
            "name": "int16",
            "type": "number"
          }
        ],
        "description": "Writes a signed little-endian 16-bit integer to the file.",
        "name": "WriteShort",
        "parent": "File",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The unsigned 64-bit integer to be written to the file.\n\n<note>Since Lua cannot store full 64-bit integers, this function takes a string. It is mainly aimed at usage with <page>Player:SteamID64</page>.</note>",
            "name": "uint64",
            "type": "string"
          }
        ],
        "description": "Writes an unsigned 64-bit integer to the file.",
        "name": "WriteUInt64",
        "parent": "File",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The unsigned 32-bit integer to be written to the file.",
            "name": "uint32",
            "type": "number"
          }
        ],
        "description": "Writes an unsigned little-endian 32-bit integer to the file.",
        "name": "WriteULong",
        "parent": "File",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The unsigned 16-bit integer to the file.",
            "name": "uint16",
            "type": "number"
          }
        ],
        "description": "Writes an unsigned little-endian 16-bit integer to the file.",
        "name": "WriteUShort",
        "parent": "File",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      }
    ],
    "name": "File"
  },
  {
    "description": "A sound channel returned by a callback of <page>sound.PlayURL</page> and <page>sound.PlayFile</page>.",
    "functions": [
      {
        "arguments": [
          {
            "description": "Enable or disable looping of this audio channel.",
            "name": "enable",
            "type": "boolean"
          }
        ],
        "description": "Enables or disables looping of audio channel, requires noblock flag.",
        "name": "EnableLooping",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The table to output the DFT magnitudes (numbers between 0 and 1) into. Indices start from 1.",
            "name": "tbl",
            "type": "table<number>"
          },
          {
            "description": "The number of samples to use. See <page>Enums/FFT</page>",
            "name": "size",
            "type": "number{FFT}"
          }
        ],
        "description": "Computes the [DFT (discrete Fourier transform)](https://en.wikipedia.org/wiki/Discrete_Fourier_transform) of the sound channel.\n\nThe size parameter specifies the number of consecutive audio samples to use as the input to the DFT and is restricted to a power of two. A [Hann window](https://en.wikipedia.org/wiki/Hann_function) is applied to the input data.\n\nThe computed DFT has the same number of frequency bins as the number of samples. Only half of this DFT is returned, since [the DFT magnitudes are symmetric for real input data](https://en.wikipedia.org/wiki/Discrete_Fourier_transform#The_real-input_DFT). The magnitudes of the DFT (values from 0 to 1) are used to fill the output table, starting at index 1.\n\n**Visualization protip:** For a size N DFT, bin k (1-indexed) corresponds to a frequency of (k - 1) / N * sampleRate.\n\n**Visualization protip:** Sound energy is proportional to the square of the magnitudes. Adding magnitudes together makes no sense physically, but adding energies does.\n\n**Visualization protip:** The human ear works on a logarithmic amplitude scale. You can convert to [decibels](https://en.wikipedia.org/wiki/Decibel) by taking 20 * <page>math.log10</page> of frequency magnitudes, or 10 * <page>math.log10</page> of energy. The decibel values will range from -infinity to 0.",
        "name": "FFT",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The number of frequency bins that have been filled in the output table.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns 3D cone of the sound channel. See <page>IGModAudioChannel:Set3DCone</page>.",
        "name": "Get3DCone",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The angle of the inside projection cone in degrees.",
            "type": "number"
          },
          {
            "description": "The angle of the outside projection cone in degrees.",
            "type": "number"
          },
          {
            "description": "The delta-volume outside the outer projection cone.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns if the sound channel is currently in 3D mode or not. This value will be affected by <page>IGModAudioChannel:Set3DEnabled</page>.",
        "name": "Get3DEnabled",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Is currently 3D or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns 3D fade distances of a sound channel.",
        "name": "Get3DFadeDistance",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The minimum distance. The channel's volume is at maximum when the listener is within this distance",
            "type": "number"
          },
          {
            "description": "The maximum distance. The channel's volume stops decreasing when the listener is beyond this distance",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the average bit rate of the sound channel.",
        "name": "GetAverageBitRate",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The average bit rate of the sound channel.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Retrieves the number of bits per sample of the sound channel.\n\nDoesn't work for mp3 and ogg files.",
        "name": "GetBitsPerSample",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Number of bits per sample, or 0 if unknown.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the buffered time of the sound channel in seconds, for online streaming sound channels. (<page>sound.PlayURL</page>)\n\nFor offline channels this will be equivalent to <page>IGModAudioChannel:GetLength</page>.",
        "name": "GetBufferedTime",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The current buffered time of the stream, in seconds.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the filename for the sound channel.",
        "name": "GetFileName",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The file name. This will not be always what you have put into the <page>sound.PlayURL</page> as first argument.",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns the length of sound played by the sound channel in seconds.",
        "name": "GetLength",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The length of the sound. This value seems to be less then 0 for continuous radio streams.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the right and left levels of sound played by the sound channel.",
        "name": "GetLevel",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The left sound level. The value is between 0 and 1.",
            "type": "number"
          },
          {
            "description": "The right sound level. The value is between 0 and 1.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Gets the relative volume of the left and right channels.",
        "name": "GetPan",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Relative volume between the left and right channels. `-1` means only in left channel, `0` is center and `1` is only in the right channel. `0` by default.",
            "name": "pan",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the playback rate of the sound channel.",
        "name": "GetPlaybackRate",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The current playback rate of the sound channel",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns position of the sound channel",
        "name": "GetPos",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The position of the sound channel, previously set by <page>IGModAudioChannel:SetPos</page>",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the sample rate for currently playing sound.",
        "name": "GetSamplingRate",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The sample rate in Hz. This should always be 44100.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the state of a sound channel",
        "name": "GetState",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The state of the sound channel, see <page>Enums/GMOD_CHANNEL</page>",
            "type": "number"
          }
        ]
      },
      {
        "description": "Retrieves HTTP headers from a bass stream channel created by <page>sound.PlayURL</page>, if available.\n\nOf special interest here are headers such as `icy-name`, `icy-br`, `ice-audio-info`, `icy-genre`.",
        "name": "GetTagsHTTP",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "A list of HTTP headers or `nil` if no information is available.\n\nExample output:\n```\n... other headers\n[7]\t=\tice-audio-info: channels=2;samplerate=44100;bitrate=128\n[8]\t=\ticy-genre: lounge\n[9]\t=\ticy-name: RTFM Lounge\n... other headers\n```",
            "name": "info",
            "type": "table<string>"
          }
        ]
      },
      {
        "description": "Retrieves the ID3 version 1 info from a bass channel created by <page>sound.PlayFile</page> or <page>sound.PlayURL</page>, if available.\n\nID3v2 is not supported.",
        "name": "GetTagsID3",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "A table containing the information, or `nil` if no information is available.\n\nThe table will always have the following keys, filled out based on what is available:\n`album`, `artist`, `comment`, `genre`, `id`, `title`, `year`",
            "name": "info",
            "type": "table"
          }
        ]
      },
      {
        "description": "Retrieves ICY metadata from a bass stream channel created by <page>sound.PlayURL</page>, if available.",
        "name": "GetTagsMeta",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The meta information, or `nil` if no information is available.\n\nExample output: `StreamTitle='MUSIC NAME HERE';`",
            "name": "info",
            "type": "string"
          }
        ]
      },
      {
        "description": "Retrieves OGG media info tag, from a bass channel created by <page>sound.PlayURL</page> or <page>sound.PlayFile</page>, if available.",
        "name": "GetTagsOGG",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "A list of available information in no particular order, or `nil` if no information is available.\n\nExample output:\n```\n[0]\t=\tAuthor=MY AUTHIOR\n[1]\t=\tTitle=MY TITLE\n... other data if available\n```",
            "name": "info",
            "type": "table<string>"
          }
        ]
      },
      {
        "description": "Retrieves OGG Vendor tag, usually containing the application that created the file, from a bass channel created by <page>sound.PlayURL</page> or <page>sound.PlayFile</page>, if available.",
        "name": "GetTagsVendor",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The OGG vendor tag, or `nil` if no information is available.",
            "name": "info",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns the current time of the sound channel in seconds",
        "name": "GetTime",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The current time of the stream",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns volume of a sound channel",
        "name": "GetVolume",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The volume of the sound channel",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns if the sound channel is in 3D mode or not.",
        "name": "Is3D",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Is 3D or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the audio stream is block streamed or not.",
        "name": "IsBlockStreamed",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Is the audio stream block streamed or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns if the sound channel is looping or not.",
        "name": "IsLooping",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Is looping or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns if the sound channel is streamed from the Internet or not.",
        "name": "IsOnline",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Is online or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns if the sound channel is valid or not.",
        "name": "IsValid",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Is the sound channel valid or not",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Pauses the stream. It can be started again using <page>IGModAudioChannel:Play</page>",
        "name": "Pause",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ]
      },
      {
        "description": "Starts playing the stream.",
        "name": "Play",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The angle of the inside projection cone in degrees.\n\n\n\n\nRange is from 0 (no cone) to 360 (sphere), -1 = leave current.",
            "name": "innerAngle",
            "type": "number"
          },
          {
            "description": "The angle of the outside projection cone in degrees.\n\n\n\n\nRange is from 0 (no cone) to 360 (sphere), -1 = leave current.",
            "name": "outerAngle",
            "type": "number"
          },
          {
            "description": "The delta-volume outside the outer projection cone.\n\n\n\n\nRange is from 0 (silent) to 1 (same as inside the cone), less than 0 = leave current.",
            "name": "outerVolume",
            "type": "number"
          }
        ],
        "description": "Sets 3D cone of the sound channel.",
        "name": "Set3DCone",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "true to enable, false to disable 3D.",
            "name": "enable",
            "type": "boolean"
          }
        ],
        "description": "Sets the 3D mode of the channel. This will affect <page>IGModAudioChannel:Get3DEnabled</page> but not <page>IGModAudioChannel:Is3D</page>.\n\nThis feature **requires** the channel to be initially created in 3D mode, i.e. <page>IGModAudioChannel:Is3D</page> should return true or this function will do nothing.",
        "name": "Set3DEnabled",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The minimum distance. The channel's volume is at maximum when the listener is within this distance.\n\n\n\n\n0 or less = leave current.",
            "name": "min",
            "type": "number"
          },
          {
            "description": "The maximum distance. The channel's volume stops decreasing when the listener is beyond this distance.\n\n\n\n\n0 or less = leave current.",
            "name": "max",
            "type": "number"
          }
        ],
        "description": "Sets 3D fade distances of a sound channel.",
        "name": "Set3DFadeDistance",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "Relative volume between the left and right channels. `-1` means only in left channel, `0` is center (default) and `1` is only in the right channel. Fractional values are supported.",
            "name": "pan",
            "type": "number"
          }
        ],
        "description": "Sets the relative volume of the left and right channels.",
        "name": "SetPan",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "Playback rate to set to. 1 is normal speed, 0.5 is half the normal speed, etc.",
            "name": "rate",
            "type": "number"
          }
        ],
        "description": "Sets the playback rate of the sound channel. May not work with high values for radio streams.",
        "name": "SetPlaybackRate",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The position to put the sound into",
            "name": "pos",
            "type": "Vector"
          },
          {
            "default": "Vector( 0, 0, 0 )",
            "description": "The direction of the sound",
            "name": "dir",
            "type": "Vector"
          }
        ],
        "description": "Sets position of sound channel in case the sound channel has a 3d option set.",
        "name": "SetPos",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The time to set the stream to, in seconds.",
            "name": "secs",
            "type": "number"
          },
          {
            "default": "false",
            "description": "Set to true to skip decoding to set time, and instead just seek to it which is faster. Certain streams do not support seeking and have to decode to the given position.",
            "name": "dont_decode",
            "type": "boolean"
          }
        ],
        "description": "Sets the sound channel to specified time ( Rewind to that position of the song ). Does not work on online radio streams.\n\nStreamed sounds must have \"noblock\" parameter for this to work and <page>IGModAudioChannel:IsBlockStreamed</page> must return false.\n\n<note> Streamed sounds can only have their time set to up to the current <page>IGModAudioChannel:GetBufferedTime</page>.</note>",
        "name": "SetTime",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "Volume to set. 1 meaning 100% volume, 0.5 is 50% and 3 is 300%, etc.",
            "name": "volume",
            "type": "number"
          }
        ],
        "description": "Sets the volume of a sound channel",
        "name": "SetVolume",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ]
      },
      {
        "description": "Stop the stream. It can be started again using <page>IGModAudioChannel:Play</page>.\n\n<bug issue=\"1497\">Calling this invalidates the IGModAudioChannel object rendering it unusable for further functions.</bug>",
        "name": "Stop",
        "parent": "IGModAudioChannel",
        "realms": [
          "client"
        ]
      }
    ],
    "name": "IGModAudioChannel"
  },
  {
    "description": "A Material object. It represents a game material, similarly to how a `.vmt` file does, which are in fact loaded into an **IMaterial** object.\n\nIn most cases the game works with materials as far as file paths go. Materials then point to different <page>ITexture</page>s (`.vtf` files) they might be using.\nThey are not the same and cannot be interchanged.\n\nA material object can be created with <page>Global.Material</page> or <page>Global.CreateMaterial</page>.",
    "functions": [
      {
        "arguments": [
          {
            "description": "The X coordinate.",
            "name": "x",
            "type": "number"
          },
          {
            "description": "The Y coordinate.",
            "name": "y",
            "type": "number"
          }
        ],
        "description": "Returns the color of the specified pixel of the `$basetexture`, only works for materials created from PNG files.\n\nBasically identical to <page>ITexture:GetColor</page> used on <page>IMaterial:GetTexture</page>`( \"$basetexture\" )`.",
        "name": "GetColor",
        "parent": "IMaterial",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The color of the pixel as a <page>Color</page>.",
            "type": "Color"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the material value.",
            "name": "materialFloat",
            "type": "string"
          }
        ],
        "description": "Returns the specified material value as a float, or nil if the value is not set.",
        "name": "GetFloat",
        "parent": "IMaterial",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "float",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the material integer.",
            "name": "materialInt",
            "type": "string"
          }
        ],
        "description": "Returns the specified material value as a int, rounds the value if its a float, or nil if the value is not set.\n\n<note>Please note that certain material flags such as `$model` are stored in the `$flags` variable and cannot be directly retrieved with this function. See the full list here: <page>Material Flags</page></note>",
        "name": "GetInt",
        "parent": "IMaterial",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The retrieved value as an integer",
            "type": "number"
          }
        ]
      },
      {
        "description": "Gets all the key values defined for the material.",
        "name": "GetKeyValues",
        "parent": "IMaterial",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The material's key values.",
            "type": "table<string, any>"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the material matrix.",
            "name": "materialMatrix",
            "type": "string"
          }
        ],
        "description": "Returns the specified material matrix as a int, or nil if the value is not set or is not a matrix.",
        "name": "GetMatrix",
        "parent": "IMaterial",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "matrix",
            "type": "VMatrix"
          }
        ]
      },
      {
        "description": "Returns the name of the material, in most cases the path.",
        "name": "GetName",
        "parent": "IMaterial",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Material name/path",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns the name of the materials shader.\n\n<bug issue=\"3256\">This function does not work serverside on Linux SRCDS.</bug>",
        "name": "GetShader",
        "parent": "IMaterial",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "shaderName",
            "type": "string"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the material string.",
            "name": "materialString",
            "type": "string"
          }
        ],
        "description": "Returns the specified material string, or nil if the value is not set or if the value can not be converted to a string.",
        "name": "GetString",
        "parent": "IMaterial",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value as a string",
            "type": "string"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The [shader parameter](https://developer.valvesoftware.com/wiki/Category:List_of_Shader_Parameters) to retrieve. This should normally be `$basetexture`.",
            "name": "param",
            "type": "string"
          }
        ],
        "description": "Returns an <page>ITexture</page> based on the passed shader parameter.",
        "name": "GetTexture",
        "parent": "IMaterial",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value of the shader parameter. Returns nothing if the param doesn't exist.",
            "type": "ITexture"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the material vector.",
            "name": "materialVector",
            "type": "string"
          }
        ],
        "description": "Returns the specified material vector, or nil if the value is not set.\n\nSee also <page>IMaterial:GetVectorLinear</page>",
        "name": "GetVector",
        "parent": "IMaterial",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The color vector",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the material vector to retrieve.",
            "name": "name",
            "type": "string"
          }
        ],
        "description": "Returns the specified material vector as a 4 component vector.",
        "name": "GetVector4D",
        "parent": "IMaterial",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The x component of the vector.",
            "name": "x",
            "type": "number"
          },
          {
            "description": "The y component of the vector.",
            "name": "y",
            "type": "number"
          },
          {
            "description": "The z component of the vector.",
            "name": "z",
            "type": "number"
          },
          {
            "description": "The w component of the vector.",
            "name": "w",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the material vector.",
            "name": "materialVector",
            "type": "string"
          }
        ],
        "description": "Returns the specified material linear color vector, or nil if the value is not set.\n\nSee https://en.wikipedia.org/wiki/Gamma_correction\n\nSee also <page>IMaterial:GetVector</page>",
        "name": "GetVectorLinear",
        "parent": "IMaterial",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The linear color vector",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the height of the member texture set for `$basetexture`.",
        "name": "Height",
        "parent": "IMaterial",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Height of the base texture.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns whenever the material is valid, i.e. whether it was not loaded successfully from disk or not.",
        "name": "IsError",
        "parent": "IMaterial",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Is this material the error material? (___error)",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Recomputes the material's snapshot. This needs to be called if you have changed variables on your material and it isn't changing.\n\nBe careful though - this function is slow - so try to call it only when needed!",
        "name": "Recompute",
        "parent": "IMaterial",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The path to a Image.",
            "name": "path",
            "type": "string"
          }
        ],
        "description": "Changes the Material into the give Image.\n<internal>This is used by the Background to change the Image.</internal>",
        "name": "SetDynamicImage",
        "parent": "IMaterial",
        "realms": [
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the material float.",
            "name": "materialFloat",
            "type": "string"
          },
          {
            "description": "The new float value.",
            "name": "float",
            "type": "number"
          }
        ],
        "description": "Sets the specified material float to the specified float, does nothing on a type mismatch.",
        "name": "SetFloat",
        "parent": "IMaterial",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the material int.",
            "name": "materialInt",
            "type": "string"
          },
          {
            "description": "The new int value.",
            "name": "int",
            "type": "number"
          }
        ],
        "description": "Sets the specified material value to the specified int, does nothing on a type mismatch.\n\n<note>Please note that certain material flags such as `$model` are stored in the `$flags` variable and cannot be directly set with this function. See the full list here: <page>Material Flags</page></note>",
        "name": "SetInt",
        "parent": "IMaterial",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the material int.",
            "name": "materialMatrix",
            "type": "string"
          },
          {
            "description": "The new matrix.",
            "name": "matrix",
            "type": "VMatrix"
          }
        ],
        "description": "Sets the specified material value to the specified matrix, does nothing on a type mismatch.",
        "name": "SetMatrix",
        "parent": "IMaterial",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Name of the shader",
            "name": "shaderName",
            "type": "string"
          }
        ],
        "description": "<deprecated>This function does nothing</deprecated>The functionality of this function was removed due to the amount of crashes it caused.",
        "name": "SetShader",
        "parent": "IMaterial",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the material string.",
            "name": "materialString",
            "type": "string"
          },
          {
            "description": "The new string.",
            "name": "string",
            "type": "string"
          }
        ],
        "description": "Sets the specified material value to the specified string, does nothing on a type mismatch.",
        "name": "SetString",
        "parent": "IMaterial",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the keyvalue on the material to store the texture on.",
            "name": "materialTexture",
            "type": "string"
          },
          {
            "description": "The new texture. This can also be a string, the name of the new texture.",
            "name": "texture",
            "type": "ITexture"
          }
        ],
        "description": "Sets the specified material texture to the specified texture, does nothing on a type mismatch.",
        "name": "SetTexture",
        "parent": "IMaterial",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the material value to be unset.",
            "name": "materialValueName",
            "type": "string"
          }
        ],
        "description": "Unsets the value for the specified material value.",
        "name": "SetUndefined",
        "parent": "IMaterial",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the material vector.",
            "name": "MaterialVector",
            "type": "string"
          },
          {
            "description": "The new vector.",
            "name": "vec",
            "type": "Vector"
          }
        ],
        "description": "Sets the specified material vector to the specified vector, does nothing on a type mismatch.",
        "name": "SetVector",
        "parent": "IMaterial",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the material vector.",
            "name": "name",
            "type": "string"
          },
          {
            "description": "The x component of the new vector.",
            "name": "x",
            "type": "number"
          },
          {
            "description": "The y component of the new vector.",
            "name": "y",
            "type": "number"
          },
          {
            "description": "The z component of the new vector.",
            "name": "z",
            "type": "number"
          },
          {
            "description": "The w component of the new vector.",
            "name": "w",
            "type": "number"
          }
        ],
        "description": "Sets the specified material vector to the specified 4 component vector, does nothing on a type mismatch.",
        "name": "SetVector4D",
        "parent": "IMaterial",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "description": "Returns the width of the member texture set for `$basetexture`.",
        "name": "Width",
        "parent": "IMaterial",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Width of the base texture.",
            "type": "number"
          }
        ]
      }
    ],
    "name": "IMaterial"
  },
  {
    "description": "Renderable mesh object, can be used to create models on the fly.\nThe only way to create your own IMesh object is to call <page>Global.Mesh</page>.\n\n<note>\nIMeshes only respond to one projected texture.\nSee the <page>render.RenderFlashlights</page> function and example that solves this problem.\n</note>",
    "functions": [
      {
        "arguments": [
          {
            "description": "A table consisting of <page>Structures/MeshVertex</page>s.",
            "name": "vertexes",
            "type": "table"
          }
        ],
        "description": "Builds the mesh from a table mesh vertexes.\n\nWhen modifying a previously built mesh, your new mesh must match the vertex count!\n\nSee <page>Global.Mesh</page> and <page>util.GetModelMeshes</page> for examples.\n\n<warning><page>IMesh</page> appears to have a limit of 65535 vertices. You should split your mesh into multiple meshes when above this limit.\n\nExceeding the limit may lead to undefined rendering behavior.</warning>",
        "name": "BuildFromTriangles",
        "parent": "IMesh",
        "realms": [
          "client"
        ]
      },
      {
        "description": "Deletes the mesh and frees the memory used by it.",
        "name": "Destroy",
        "parent": "IMesh",
        "realms": [
          "client"
        ]
      },
      {
        "description": "Renders the mesh with the active matrix.",
        "name": "Draw",
        "parent": "IMesh",
        "realms": [
          "client"
        ]
      },
      {
        "description": "Returns whether this <page>IMesh</page> is valid or not.",
        "name": "IsValid",
        "parent": "IMesh",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Whether this <page>IMesh</page> is valid or not.",
            "type": "boolean"
          }
        ]
      }
    ],
    "name": "IMesh"
  },
  {
    "description": "The object used in the <page>saverestore</page>, mainly in <page>saverestore.AddRestoreHook</page>.\n\nIt allows you to read blocks directly from the save game files used by Half-Life 2 save system when such save is loaded.",
    "functions": [
      {
        "description": "Ends current data block started with <page>IRestore:StartBlock</page> and returns to the parent block.\n\nTo avoid all sorts of errors, you **must** end all blocks you start.",
        "name": "EndBlock",
        "parent": "IRestore",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Reads next bytes from the restore object as an <page>Angle</page>.",
        "name": "ReadAngle",
        "parent": "IRestore",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The angle that has been read",
            "type": "Angle"
          }
        ]
      },
      {
        "description": "Reads next bytes from the restore object as a <page>boolean</page>.",
        "name": "ReadBool",
        "parent": "IRestore",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The boolean that has been read",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Reads next bytes from the restore object as an <page>Entity</page>.",
        "name": "ReadEntity",
        "parent": "IRestore",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The entity that has been read.",
            "type": "Entity"
          }
        ]
      },
      {
        "description": "Reads next bytes from the restore object as a floating point <page>number</page>.",
        "name": "ReadFloat",
        "parent": "IRestore",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The read floating point number.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Reads next bytes from the restore object as an integer <page>number</page>.",
        "name": "ReadInt",
        "parent": "IRestore",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The read integer number.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Reads next bytes from the restore object as a <page>string</page>.",
        "name": "ReadString",
        "parent": "IRestore",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The read string.",
            "type": "string"
          }
        ]
      },
      {
        "description": "Reads next bytes from the restore object as a <page>Vector</page>.",
        "name": "ReadVector",
        "parent": "IRestore",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The read vector.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Loads next block of data to be read inside current block. Blocks **must** be ended with <page>IRestore:EndBlock</page>.",
        "name": "StartBlock",
        "parent": "IRestore",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The name of the next data block to be read.",
            "type": "string"
          }
        ]
      }
    ],
    "name": "IRestore"
  },
  {
    "description": "The object used in the <page>saverestore</page>, mainly in <page>saverestore.AddSaveHook</page>.\n\nIt allows you to write blocks directly into the save game files used by Half-Life 2 save system when such save is being saved.",
    "functions": [
      {
        "description": "Ends current data block started with <page>ISave:StartBlock</page> and returns to the parent block.\n\nTo avoid all sorts of errors, you **must** end all blocks you start.",
        "name": "EndBlock",
        "parent": "ISave",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Name of the new block. Used for determining which block is which, returned by <page>IRestore:StartBlock</page> during game load.",
            "name": "name",
            "type": "string"
          }
        ],
        "description": "Starts a new block of data that you can write to inside current block. Blocks **must** be ended with <page>ISave:EndBlock</page>.",
        "name": "StartBlock",
        "parent": "ISave",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The angle to write.",
            "name": "ang",
            "type": "Angle"
          }
        ],
        "description": "Writes an <page>Angle</page> to the save object.",
        "name": "WriteAngle",
        "parent": "ISave",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The boolean to write.",
            "name": "bool",
            "type": "boolean"
          }
        ],
        "description": "Writes a <page>boolean</page> to the save object.",
        "name": "WriteBool",
        "parent": "ISave",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The entity to write.",
            "name": "ent",
            "type": "Entity"
          }
        ],
        "description": "Writes an <page>Entity</page> to the save object.",
        "name": "WriteEntity",
        "parent": "ISave",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The floating point number to write.",
            "name": "float",
            "type": "number"
          }
        ],
        "description": "Writes a floating point <page>number</page> to the save object.",
        "name": "WriteFloat",
        "parent": "ISave",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The integer number to write.",
            "name": "int",
            "type": "number"
          }
        ],
        "description": "Writes an integer <page>number</page> to the save object.",
        "name": "WriteInt",
        "parent": "ISave",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The string to write.",
            "name": "str",
            "type": "string"
          }
        ],
        "description": "Writes a **null terminated** <page>string</page> to the save object.",
        "name": "WriteString",
        "parent": "ISave",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The vector to write.",
            "name": "vec",
            "type": "Vector"
          }
        ],
        "description": "Writes a <page>Vector</page> to the save object.",
        "name": "WriteVector",
        "parent": "ISave",
        "realms": [
          "client",
          "server"
        ]
      }
    ],
    "name": "ISave"
  },
  {
    "description": "An object representing game texture, such as those loaded from a `.vtf` file.\n\nDo not confuse with <page>IMaterial</page>. Materials use textures. Game uses materials.\n\nReturned by <page>IMaterial:GetTexture</page>",
    "functions": [
      {
        "description": "Invokes the generator of the texture. Reloads file based textures from disk and clears render target textures.",
        "name": "Download",
        "parent": "ITexture",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The X coordinate.",
            "name": "x",
            "type": "number"
          },
          {
            "description": "The Y coordinate.",
            "name": "y",
            "type": "number"
          }
        ],
        "description": "Returns the color of the specified pixel, only works for textures created from PNG files.\n\n<bug issue=\"2407\">The returned color will not have the color metatable.</bug>",
        "name": "GetColor",
        "parent": "ITexture",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The color of the pixel as a <page>Color</page>.",
            "type": "Color"
          }
        ]
      },
      {
        "description": "Returns the true unmodified height of the texture.",
        "name": "GetMappingHeight",
        "parent": "ITexture",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "height",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the true unmodified width of the texture.",
        "name": "GetMappingWidth",
        "parent": "ITexture",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "width",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the name of the texture, in most cases the path.",
        "name": "GetName",
        "parent": "ITexture",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "name",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns the number of animation frames in this texture.",
        "name": "GetNumAnimationFrames",
        "parent": "ITexture",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The number of animation frames in this texture.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the modified height of the texture, this value may be affected by mipmapping and other factors.",
        "name": "Height",
        "parent": "ITexture",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "height",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns whenever the texture is valid. (i.e. was loaded successfully or not)\n\n<note>The \"error\" texture is a valid texture, and therefore this function will return false when used on it. Use <page>ITexture:IsErrorTexture</page>, instead.</note>",
        "name": "IsError",
        "parent": "ITexture",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the texture was loaded successfully or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whenever the texture is the error texture (pink and black checkerboard pattern).",
        "name": "IsErrorTexture",
        "parent": "ITexture",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the texture is the error texture or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the modified width of the texture, this value may be affected by mipmapping and other factors.",
        "name": "Width",
        "parent": "ITexture",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "width",
            "type": "number"
          }
        ]
      }
    ],
    "name": "ITexture"
  },
  {
    "description": "This is returned from <page>video.Record</page>.",
    "functions": [
      {
        "arguments": [
          {
            "description": "Usually set to what <page>Global.FrameTime</page> is, or simply 1/fps.",
            "name": "frameTime",
            "type": "number"
          },
          {
            "description": "If true it will downsample the whole screenspace to the videos width and height, otherwise it will just record from the top left corner to the given width and height and therefore not the whole screen.",
            "name": "downsample",
            "type": "boolean"
          }
        ],
        "description": "Adds the current framebuffer to the video stream.",
        "name": "AddFrame",
        "parent": "IVideoWriter",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Ends the video recording and dumps it to disk.",
        "name": "Finish",
        "parent": "IVideoWriter",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Returns the height of the video stream.",
        "name": "Height",
        "parent": "IVideoWriter",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "height",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Record.",
            "name": "record",
            "type": "boolean"
          }
        ],
        "description": "Sets whether to record sound or not.",
        "name": "SetRecordSound",
        "parent": "IVideoWriter",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Returns the width of the video stream.",
        "name": "Width",
        "parent": "IVideoWriter",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "width",
            "type": "number"
          }
        ]
      }
    ],
    "name": "IVideoWriter"
  },
  {
    "description": "Object containing parsed markup for later rendering. Created by <page>markup.Parse</page>.",
    "functions": [
      {
        "arguments": [
          {
            "description": "The X coordinate on the screen.",
            "name": "xOffset",
            "type": "number"
          },
          {
            "description": "The Y coordinate on the screen.",
            "name": "yOffset",
            "type": "number"
          },
          {
            "default": "TEXT_ALIGN_LEFT",
            "description": "The alignment of the x coordinate within the text using <page>Enums/TEXT_ALIGN</page>",
            "name": "xAlign",
            "type": "number"
          },
          {
            "default": "TEXT_ALIGN_TOP",
            "description": "The alignment of the y coordinate within the text using <page>Enums/TEXT_ALIGN</page>",
            "name": "yAlign",
            "type": "number"
          },
          {
            "default": "255",
            "description": "Sets the alpha of all drawn objects to this value.",
            "name": "alphaoverride",
            "type": "number"
          },
          {
            "default": "TEXT_ALIGN_LEFT",
            "description": "The alignment of the text horizontally using <page>Enums/TEXT_ALIGN</page>",
            "name": "textAlign",
            "type": "number"
          }
        ],
        "description": "Draws the computed markupobject to the screen. See <page>markup.Parse</page>.",
        "name": "Draw",
        "parent": "MarkupObject",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Gets computed the height of the markupobject.",
        "name": "GetHeight",
        "parent": "MarkupObject",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The computed height.",
            "name": "Height",
            "type": "number"
          }
        ]
      },
      {
        "description": "Gets maximum width for this markup object as defined in <page>markup.Parse</page>.",
        "name": "GetMaxWidth",
        "parent": "MarkupObject",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The max width.",
            "name": "maxWidth",
            "type": "number"
          }
        ]
      },
      {
        "description": "Gets computed the width of the markupobject.",
        "name": "GetWidth",
        "parent": "MarkupObject",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The computed width.",
            "name": "Width",
            "type": "number"
          }
        ]
      },
      {
        "description": "Gets computed the width and height of the markupobject.",
        "name": "Size",
        "parent": "MarkupObject",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The computed width.",
            "type": "number"
          },
          {
            "description": "The computed height.",
            "type": "number"
          }
        ]
      }
    ],
    "name": "MarkupObject"
  },
  {
    "description": "NextBots are a new system to create NPCs in the Source Engine, utilizing the more powerful <page>navmesh</page> system for navigation over the old node based system.\n\nThis page lists all possible functions usable with NextBots.\n\nSee <page>NextBot NPC Creation</page> for more information on how to create NextBot NPCs.",
    "functions": [
      {
        "arguments": [
          {
            "description": "Damage info passed from an onkilled event",
            "name": "info",
            "type": "CTakeDamageInfo"
          }
        ],
        "description": "Become a ragdoll and remove the entity.",
        "name": "BecomeRagdoll",
        "parent": "NextBot",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The created ragdoll, if any.",
            "type": "Entity"
          }
        ]
      },
      {
        "description": "Should only be called in <page>NEXTBOT:BodyUpdate</page>. This sets the `move_x` and `move_y` pose parameters of the bot to fit how they're currently moving, sets the animation speed (<page>Entity:GetPlaybackRate</page>) to suit the ground speed, and calls <page>Entity:FrameAdvance</page>.\n\n<bug issue=\"3420\">This function might cause crashes with some activities.</bug>",
        "name": "BodyMoveXY",
        "parent": "NextBot",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Clears this bot's last known area. See <page>NextBot:GetLastKnownArea</page>.",
        "name": "ClearLastKnownArea",
        "parent": "NextBot",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Either `\"random\"`, `\"near\"`, `\"far\"`.",
            "name": "type",
            "type": "string"
          },
          {
            "description": "This table should contain the search info.\n* <page>string</page> type - The type (Only `hiding` for now)\n* <page>Vector</page> pos - the position to search.\n* <page>number</page> radius - the radius to search.\n* <page>number</page> stepup - the highest step to step up.\n* <page>number</page> stepdown - the highest we can step down without being hurt.",
            "name": "options",
            "type": "table"
          }
        ],
        "description": "Like <page>NextBot:FindSpots</page> but only returns a vector.",
        "name": "FindSpot",
        "parent": "NextBot",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "If it finds a spot it will return a vector. If not it will return nil.",
            "type": "Vector"
          }
        ],
        "source": {
          "file": "gamemodes/base/entities/entities/base_nextbot/sv_nextbot.lua",
          "lineStart": 201
        }
      },
      {
        "arguments": [
          {
            "description": "This table should contain the search info.\n* <page>string</page> type - The type (optional, only `hiding` supported)\n* <page>Vector</page> pos - the position to search.\n* <page>number</page> radius - the radius to search.\n* <page>number</page> stepup - the highest step to step up.\n* <page>number</page> stepdown - the highest we can step down without being hurt.",
            "name": "specs",
            "type": "table"
          }
        ],
        "description": "Returns a table of hiding spots.",
        "name": "FindSpots",
        "parent": "NextBot",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "An unsorted table of tables containing:\n* <page>Vector</page> vector - The position of the hiding spot\n* <page>number</page> distance - the distance to that position",
            "type": "table"
          }
        ],
        "source": {
          "file": "gamemodes/base/entities/entities/base_nextbot/sv_nextbot.lua",
          "lineStart": 189
        }
      },
      {
        "description": "Returns the currently running activity",
        "name": "GetActivity",
        "parent": "NextBot",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The current activity",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the Field of View of the Nextbot NPC, used for its vision functionality, such as <page>NextBot:IsAbleToSee</page>.",
        "name": "GetFOV",
        "parent": "NextBot",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The current FOV of the nextbot",
            "name": "fov",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns this bots last known area. See also <page>NextBot:ClearLastKnownArea</page>.",
        "name": "GetLastKnownArea",
        "parent": "NextBot",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The last area the bot is known to have been in.",
            "type": "CNavArea"
          }
        ]
      },
      {
        "description": "Returns the maximum range the nextbot can see other nextbots/players at. See <page>NextBot:IsAbleToSee</page>.",
        "name": "GetMaxVisionRange",
        "parent": "NextBot",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The current vision range",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The position to measure distance to. Can be an entity.",
            "name": "to",
            "type": "Vector"
          }
        ],
        "description": "Returns squared distance to an entity or a position.\n\nSee also <page>NextBot:GetRangeTo</page>.",
        "name": "GetRangeSquaredTo",
        "parent": "NextBot",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The squared distance",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The position to measure distance to. Can be an entity.",
            "name": "to",
            "type": "Vector"
          }
        ],
        "description": "Returns the distance to an entity or position.\n\nSee also <page>NextBot:GetRangeSquaredTo</page>.",
        "name": "GetRangeTo",
        "parent": "NextBot",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The distance",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the solid mask for given NextBot.",
        "name": "GetSolidMask",
        "parent": "NextBot",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The solid mask, see <page>Enums/CONTENTS</page> and <page>Enums/MASK</page>",
            "type": "number"
          }
        ]
      },
      {
        "description": "Called from Lua when the NPC is stuck. This should only be called from the behaviour coroutine - so if you want to override this function and do something special that yields - then go for it.\n\nYou should always call self.loco:ClearStuck() in this function to reset the stuck status - so it knows it's unstuck. See <page>CLuaLocomotion:ClearStuck</page>.",
        "name": "HandleStuck",
        "parent": "NextBot",
        "realms": [
          "server"
        ],
        "source": {
          "file": "gamemodes/base/entities/entities/base_nextbot/sv_nextbot.lua",
          "lineStart": 265
        }
      },
      {
        "arguments": [
          {
            "description": "The entity to test if we can see",
            "name": "ent",
            "type": "Entity"
          },
          {
            "default": "true",
            "description": "Whether to use the Field of View of the Nextbot",
            "name": "useFOV",
            "type": "number"
          }
        ],
        "description": "Returns if the Nextbot NPC can see the give entity or not.\n\n<warning>Using this function creates the nextbot vision interface which will cause a significant performance hit!</warning>",
        "name": "IsAbleToSee",
        "parent": "NextBot",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "If the nextbot can see or not",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The position we want to get to",
            "name": "pos",
            "type": "Vector"
          },
          {
            "description": "A table containing a bunch of tweakable options.\n* <page>number</page> lookahead - Minimum look ahead distance.\n* <page>number</page> tolerance - How close we must be to the goal before it can be considered complete.\n* <page>boolean</page> draw - Draw the path. Only visible on listen servers and single player.\n* <page>number</page> maxage - Maximum age of the path before it times out.\n* <page>number</page> repath - Rebuilds the path after this number of seconds.",
            "name": "options",
            "type": "table"
          }
        ],
        "description": "To be called in the behaviour coroutine only! Will yield until the bot has reached the goal or is stuck",
        "name": "MoveToPos",
        "parent": "NextBot",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Either `\"failed\"`, `\"stuck\"`, `\"timeout\"` or `\"ok\"` - depending on how the NPC got on",
            "type": "string"
          }
        ],
        "source": {
          "file": "gamemodes/base/entities/entities/base_nextbot/sv_nextbot.lua",
          "lineStart": 299
        }
      },
      {
        "arguments": [
          {
            "description": "The sequence name",
            "name": "name",
            "type": "string"
          },
          {
            "default": "1",
            "description": "Playback Rate of that sequence",
            "name": "speed",
            "type": "number"
          }
        ],
        "description": "To be called in the behaviour coroutine only! Plays an animation sequence and waits for it to end before returning.",
        "name": "PlaySequenceAndWait",
        "parent": "NextBot",
        "realms": [
          "server"
        ],
        "source": {
          "file": "gamemodes/base/entities/entities/base_nextbot/sv_nextbot.lua",
          "lineEnd": 317,
          "lineStart": 298
        }
      },
      {
        "arguments": [
          {
            "description": "The new FOV",
            "name": "fov",
            "type": "number"
          }
        ],
        "description": "Sets the Field of View for the Nextbot NPC, used for its vision functionality, such as <page>NextBot:IsAbleToSee</page>.",
        "name": "SetFOV",
        "parent": "NextBot",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new vision range to set.",
            "name": "range",
            "type": "number"
          }
        ],
        "description": "Sets the maximum range the nextbot can see other nextbots/players at. See <page>NextBot:IsAbleToSee</page>.",
        "name": "SetMaxVisionRange",
        "parent": "NextBot",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new mask, see <page>Enums/CONTENTS</page> and <page>Enums/MASK</page>",
            "name": "mask",
            "type": "number"
          }
        ],
        "description": "Sets the solid mask for given NextBot.\n\nThe default solid mask of a NextBot is <page text=\"MASK_NPCSOLID\">Enums/MASK</page>.",
        "name": "SetSolidMask",
        "parent": "NextBot",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "One of the <page>Enums/ACT</page>",
            "name": "activity",
            "type": "number"
          }
        ],
        "description": "Start doing an activity (animation).\n\nThis function may not produce the desired result if <page>Entity:SetModel</page> has not yet been called on the nextbot entity",
        "name": "StartActivity",
        "parent": "NextBot",
        "realms": [
          "server"
        ]
      }
    ],
    "name": "NextBot"
  },
  {
    "description": "This is a list of all methods only available for NPCs. It is also possible to call <page>Entity</page> functions on NPCs.",
    "functions": [
      {
        "arguments": [
          {
            "description": "The entity for the relationship to be applied to.",
            "name": "target",
            "type": "Entity"
          },
          {
            "description": "A <page>Enums/D</page> representing the relationship type.",
            "name": "disposition",
            "type": "number"
          },
          {
            "default": "0",
            "description": "How strong the relationship is. Higher values mean higher priority over relationships with lower priority.",
            "name": "priority",
            "type": "number"
          }
        ],
        "description": "Makes the NPC like, hate, feel neutral towards, or fear the entity in question. If you want to setup relationship towards a certain entity `class`, use <page>NPC:AddRelationship</page>.\n\n<note>NPCs do not see <page>NextBot</page>s by default. This can be fixed by adding the <page text=\"FL_OBJECT\">Enums/FL</page> flag to the NextBot.</note>",
        "name": "AddEntityRelationship",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "A string representing how the relationship should be set up.\nShould be formatted as `\"npc_class `<page>Enums/D</page>` numberPriority\"`.",
            "name": "relationstring",
            "type": "string"
          }
        ],
        "description": "Changes how an NPC feels towards another NPC.  If you want to setup relationship towards a certain `entity`, use <page>NPC:AddEntityRelationship</page>.\n\n<warning>Avoid using this in <page>GM:OnEntityCreated</page> to prevent crashing due to infinite loops. This function may create an entity with given class and delete it immediately after.</warning>",
        "name": "AddRelationship",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Advances the NPC on its path to the next waypoint.\n<warning>Calling this on an NPC without any route will result in an instant crash.</warning>",
        "name": "AdvancePath",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Force an NPC to play their Alert sound.",
        "name": "AlertSound",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "This is a good place to use <page>Entity:GetAnimTimeInterval</page>.",
            "name": "interval",
            "type": "number"
          },
          {
            "default": "NULL",
            "description": "",
            "name": "target",
            "type": "Entity"
          }
        ],
        "description": "Executes any movement the current sequence may have.",
        "name": "AutoMovement",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "`true` if any movement was performed.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Damage info passed from an onkilled event",
            "name": "info",
            "type": "CTakeDamageInfo"
          }
        ],
        "description": "Become a ragdoll and remove the entity. Internally handles serverside/clientside ragdoll creation, momentum calculation, triggering ragdoll creation hooks / events and cloning entity's bone transforms to the created ragdoll.",
        "name": "BecomeRagdoll",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The created serverside ragdoll, nil if failed or a clientside ragdoll created.",
            "type": "Entity"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Capabilities to add, see <page>Enums/CAP</page>.",
            "name": "capabilities",
            "type": "number{CAP}"
          }
        ],
        "description": "Adds a capability to the NPC.",
        "name": "CapabilitiesAdd",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Removes all of Capabilities the NPC has.",
        "name": "CapabilitiesClear",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Returns the NPC's capabilities along the ones defined on its weapon.",
        "name": "CapabilitiesGet",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The capabilities as a bitflag.\nSee <page>Enums/CAP</page>",
            "type": "number{CAP}"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Capabilities to check, see <page>Enums/CAP</page>.",
            "name": "capabilities",
            "type": "number{CAP}"
          }
        ],
        "description": "Checks whether the NPC has the specified capabilities.",
        "name": "CapabilitiesHas",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Capabilities to remove, see <page>Enums/CAP</page>",
            "name": "capabilities",
            "type": "number"
          }
        ],
        "description": "Remove a certain capability.",
        "name": "CapabilitiesRemove",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Returns the NPC class. Do not confuse with <page>Entity:GetClass</page>!",
        "name": "Classify",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "See <page>Enums/CLASS</page>",
            "type": "number{CLASS}"
          }
        ]
      },
      {
        "description": "Resets the <page>NPC:GetBlockingEntity</page>.",
        "name": "ClearBlockingEntity",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page>Enums/COND</page> to clear out.",
            "name": "condition",
            "type": "number"
          }
        ],
        "description": "Clears out the specified <page>Enums/COND</page> on this NPC.",
        "name": "ClearCondition",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "GetEnemy()",
            "description": "The enemy to mark",
            "name": "enemy",
            "type": "Entity"
          }
        ],
        "description": "Clears the Enemy from the NPC's memory, effectively forgetting it until met again with either the NPC vision or with <page>NPC:UpdateEnemyMemory</page>.",
        "name": "ClearEnemyMemory",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Clears the NPC's current expression which can be set with <page>NPC:SetExpression</page>.",
        "name": "ClearExpression",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Clears the current NPC goal or target.",
        "name": "ClearGoal",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Stops the current schedule that the NPC is doing.",
        "name": "ClearSchedule",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The condition name.",
            "name": "conditionName",
            "type": "string"
          }
        ],
        "description": "Returns the ID of a given condition by name. Opposite of <page>NPC:ConditionName</page>.\n\nThis is useful for custom conditions defined by engine NPCs, such as `COND_ZOMBIE_RELEASECRAB` for zombies, and `COND_COMBINE_ON_FIRE` for Combine Soldiers.",
        "name": "ConditionID",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The condition ID, see <page>Enums/COND</page>. Custom conditions will have a \"randomly\" assigned IDs, which will change with each game session.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The NPCs condition ID, see <page>Enums/COND</page>",
            "name": "cond",
            "type": "number"
          }
        ],
        "description": "Translates condition ID to a string. For the opposite process, see <page>NPC:ConditionID</page>.",
        "name": "ConditionName",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "A human understandable string equivalent of that condition.",
            "type": "string"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The entity to test our disposition towards.",
            "name": "ent",
            "type": "Entity"
          }
        ],
        "description": "Returns the way the NPC \"feels\" about a given entity. See <page>NPC:AddEntityRelationship</page>.\n\n<note>For `ai` type entities, this will return <page>ENTITY:GetRelationship</page>. If it returns `nil` or for engine NPCs, this will return whatever was last set by <page>NPC:AddEntityRelationship</page>. As a last resort, engine will decide on the disposition based on this NPC's <page>NPC:Classify</page>. </note>",
        "name": "Disposition",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The NPCs disposition, see <page>Enums/D</page>.",
            "type": "number{D}"
          },
          {
            "description": "The NPCs disposition priority.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "default": "nil",
            "description": "Weapon to be dropped. If unset, will default to the currently equipped weapon.",
            "name": "weapon",
            "type": "Weapon"
          },
          {
            "default": "nil",
            "description": "If set, launches the weapon at given position. There is a limit to how far it is willing to throw the weapon. Overrides velocity argument.",
            "name": "target",
            "type": "Vector"
          },
          {
            "default": "nil",
            "description": "If set and previous argument is unset, launches the weapon with given velocity. If the velocity is higher than 400, it will be clamped to 400.",
            "name": "velocity",
            "type": "Vector"
          }
        ],
        "description": "Forces the NPC to drop the specified weapon.",
        "name": "DropWeapon",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Makes an NPC exit a scripted sequence, if one is playing.",
        "name": "ExitScriptedSequence",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Force an NPC to play its Fear sound.",
        "name": "FearSound",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Force an NPC to play its FoundEnemy sound.",
        "name": "FoundEnemySound",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Returns the weapon the NPC is currently carrying, or <page text=\"NULL\">Global_Variables</page>.",
        "name": "GetActiveWeapon",
        "parent": "NPC",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The NPCs current weapon",
            "type": "Entity"
          }
        ]
      },
      {
        "description": "Returns the NPC's current activity.",
        "name": "GetActivity",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Current activity, see <page>Enums/ACT</page>.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the aim vector of the NPC. NPC alternative of <page>Player:GetAimVector</page>.\n\n<note> If the NPC has both <page>NPC:GetEnemy</page> and <page>NPC:GetActiveWeapon</page>, engine will automatically call <page>ENTITY:GetAttackSpread</page> to add random spread degrees to the return value. </note>",
        "name": "GetAimVector",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The aim direction of the NPC, usually a noisy direction to it's <page>NPC:GetEnemy</page>. This will default to <page>Entity:GetForward</page> when there's no enemy. Thus, <page>NPC:GetCurrentWeaponProficiency</page> will be used.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the activity to be played when the NPC arrives at its goal",
        "name": "GetArrivalActivity",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The arrival activity. See <page>Enums/ACT</page>.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the direction from the NPC origin to its current navigational destination.",
        "name": "GetArrivalDirection",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The arrival direction.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns NPC arrival distance, set by <page>NPC:SetArrivalDistance</page>.",
        "name": "GetArrivalDistance",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The current arrival distance.",
            "name": "dist",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the sequence to be played when the NPC arrives at its goal.",
        "name": "GetArrivalSequence",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Sequence ID to be played, or -1 if there's no sequence.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns NPC arrival speed, set by <page>NPC:SetArrivalSpeed</page>.",
        "name": "GetArrivalSpeed",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The current arrival peed.",
            "name": "speed",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The types of sounds to choose from. See <page text=\"SOUND_ enums\">Enums/SOUND</page>",
            "name": "types",
            "type": "number"
          }
        ],
        "description": "Returns the most dangerous/closest sound hint based on the NPCs location and the types of sounds it can sense.",
        "name": "GetBestSoundHint",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "A table with <page text=\"SoundHintData\">Structures/SoundHintData</page> structure or `nil` if no sound hints are nearby.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns the entity blocking the NPC along its path.",
        "name": "GetBlockingEntity",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Blocking entity",
            "type": "Entity"
          }
        ]
      },
      {
        "description": "Returns the goal type for current navigation path.",
        "name": "GetCurGoalType",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The goal type. See <page>Enums/GOALTYPE</page>.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the NPC's current schedule.",
        "name": "GetCurrentSchedule",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The NPCs schedule, see <page>Enums/SCHED</page> or -1 if we failed for some reason",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns how proficient (skilled) an NPC is with its current weapon.",
        "name": "GetCurrentWeaponProficiency",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "NPC's proficiency for current weapon. See <page>Enums/WEAPON_PROFICIENCY</page>.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Gets the NPC's current waypoint position (where NPC is currently moving towards), if any is available.",
        "name": "GetCurWaypointPos",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The position of the current NPC waypoint.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the entity that this NPC is trying to fight.\n\n<bug issue=\"3132\">This returns nil if the NPC has no enemy. You should use <page>Global.IsValid</page> (which accounts for nil and NULL) on the return to verify validity of the enemy.</bug>",
        "name": "GetEnemy",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Enemy NPC.",
            "type": "NPC"
          }
        ]
      },
      {
        "arguments": [
          {
            "default": "GetEnemy()",
            "description": "The enemy to check.",
            "name": "enemy",
            "type": "Entity"
          }
        ],
        "description": "Returns the first time an NPC's enemy was seen by the NPC.",
        "name": "GetEnemyFirstTimeSeen",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "First time the given enemy was seen.",
            "name": "time",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "default": "GetEnemy()",
            "description": "The enemy to check.",
            "name": "enemy",
            "type": "Entity"
          }
        ],
        "description": "Returns the last known position of an NPC's enemy.\n\nSimilar to <page>NPC:GetEnemyLastSeenPos</page>, but the known position will be a few seconds ahead of the last seen position.",
        "name": "GetEnemyLastKnownPos",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The last known position.",
            "name": "pos",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "default": "GetEnemy()",
            "description": "The enemy to check.",
            "name": "enemy",
            "type": "Entity"
          }
        ],
        "description": "Returns the last seen position of an NPC's enemy.\n\nSimilar to <page>NPC:GetEnemyLastKnownPos</page>, but the known position will be a few seconds ahead of the last seen position.",
        "name": "GetEnemyLastSeenPos",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The last seen position.",
            "name": "pos",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "default": "GetEnemy()",
            "description": "The enemy to check.",
            "name": "enemy",
            "type": "Entity"
          }
        ],
        "description": "Returns the last time an NPC's enemy was seen by the NPC.",
        "name": "GetEnemyLastTimeSeen",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Last time the given enemy was seen.",
            "name": "time",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the expression file the NPC is currently playing.",
        "name": "GetExpression",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The file path of the expression.",
            "name": "m_iszExpressionScene",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns the eye direction of the NPC.",
        "name": "GetEyeDirection",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The eye direction.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the Field Of View of the NPC. See <page>NPC:SetFOV</page>.",
        "name": "GetFOV",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The FOV for the NPC in degrees.",
            "name": "fov",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the position we are trying to reach, if any.",
        "name": "GetGoalPos",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The position we are trying to reach.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the entity we are trying to reach, if any.",
        "name": "GetGoalTarget",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The entity we are trying to reach, or `NULL`.",
            "type": "Entity"
          }
        ]
      },
      {
        "description": "Returns the 2D head direction of the NPC.",
        "name": "GetHeadDirection",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The head direction.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns NPCs hull type set by <page>NPC:SetHullType</page>.",
        "name": "GetHullType",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Hull type, see <page>Enums/HULL</page>",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the ideal activity the NPC currently wants to achieve.\n<note>By default, base NPCs will automatically attempt to play a sequence bound to the ideal activity. To prevent ideal activity from overriding NPC's active sequence, set this to `ACT_DO_NOT_DISTURB`.</note>",
        "name": "GetIdealActivity",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The ideal activity. <page>Enums/ACT</page>.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the ideal move acceleration of the NPC.",
        "name": "GetIdealMoveAcceleration",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The ideal move acceleration.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the ideal move speed of the NPC.",
        "name": "GetIdealMoveSpeed",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The ideal move speed.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the ideal sequence the NPC currently wants to achieve.",
        "name": "GetIdealSequence",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The ideal sequence, specific to the NPCs model.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the ideal yaw (left right rotation) for this NPC at this moment.",
        "name": "GetIdealYaw",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The ideal yaw.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns all known enemies this NPC has.\n\nSee also <page>NPC:GetKnownEnemyCount</page>",
        "name": "GetKnownEnemies",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Table of entities that this NPC knows as enemies.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns known enemy count of this NPC.\n\nSee also <page>NPC:GetKnownEnemies</page>",
        "name": "GetKnownEnemyCount",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Amount of entities that this NPC knows as enemies.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the last registered or memorized position of the NPC. When using scheduling, the NPC will focus on navigating to the last position via nodes.\n\nSee <page>NPC:SetLastPosition</page>.",
        "name": "GetLastPosition",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Where the NPC's last position was set to.",
            "name": "position",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "default": "nil",
            "description": "The enemy to test. Defaults to currently active enemy (<page>NPC:GetEnemy</page>)",
            "name": "enemy",
            "type": "Entity"
          }
        ],
        "description": "Returns <page>Global.CurTime</page> based time since this NPC last received damage from given enemy. The last damage time is set when <page>NPC:MarkTookDamageFromEnemy</page> is called.",
        "name": "GetLastTimeTookDamageFromEnemy",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Time since this NPC last received damage from given enemy.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns NPCs max view distance. An NPC will not be able to see enemies outside of this distance.",
        "name": "GetMaxLookDistance",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The maximum distance the NPC can see at.",
            "name": "dist",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns how far should the NPC look ahead in its route.",
        "name": "GetMinMoveCheckDist",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "How far the NPC checks ahead of its route.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "default": "10",
            "description": "The minimum value that will be returned by this function.",
            "name": "minResult ",
            "type": "number"
          }
        ],
        "description": "Returns how far before the NPC can come to a complete stop.",
        "name": "GetMinMoveStopDist",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The minimum stop distance.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the movement delay for given NPC.\n\nSee <page>NPC:SetMoveDelay</page>.",
        "name": "GetMoveDelay",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The movement delay.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the current timestep the internal NPC motor is working on.",
        "name": "GetMoveInterval",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The current timestep.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the NPC's current movement activity.",
        "name": "GetMovementActivity",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Current NPC movement activity, see <page>Enums/ACT</page>.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the index of the sequence the NPC uses to move.",
        "name": "GetMovementSequence",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The movement sequence index",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the current move velocity of the NPC.",
        "name": "GetMoveVelocity",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The current move velocity of the NPC.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the NPC's navigation type.",
        "name": "GetNavType",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The nav type. See <page>Enums/NAV</page>.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the nearest member of the squad the NPC is in.",
        "name": "GetNearestSquadMember",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The nearest member of the squad the NPC is in.",
            "name": "nearest_member",
            "type": "NPC"
          }
        ]
      },
      {
        "description": "Gets the NPC's next waypoint position, where NPC will be moving after reaching current waypoint, if any is available.",
        "name": "GetNextWaypointPos",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The position of the next NPC waypoint.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the NPC's state.",
        "name": "GetNPCState",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The NPC's current state, see <page>Enums/NPC_STATE</page>.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the distance the NPC is from Target Goal.",
        "name": "GetPathDistanceToGoal",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The number of hammer units the NPC is away from the Goal.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the amount of time it will take for the NPC to get to its Target Goal.",
        "name": "GetPathTimeToGoal",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The amount of time to get to the target goal.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the shooting position of the NPC, i.e. where their bullets would come from, etc.\n\nIf the NPC does not overwrite this, it will return <page>Entity:GetPos</page>.",
        "name": "GetShootPos",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The NPC's shooting position.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the current squad name of the NPC, as set via <page>NPC:SetSquad</page>.",
        "name": "GetSquad",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The new squad name to set.",
            "name": "name",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns NPC step height.",
        "name": "GetStepHeight",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The current step height.",
            "name": "height",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the NPC's current target set by <page>NPC:SetTarget</page>.\n\n<bug issue=\"3132\">This returns nil if the NPC has no target. You should use <page>Global.IsValid</page> (which accounts for nil and NULL) on the return to verify validity of the target.</bug>",
        "name": "GetTarget",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Target entity",
            "type": "Entity"
          }
        ]
      },
      {
        "description": "Returns the status of the current task.",
        "name": "GetTaskStatus",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The status. See <page>Enums/TASKSTATUS</page>.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "default": "nil",
            "description": "The enemy to test. Defaults to currently active enemy (<page>NPC:GetEnemy</page>)",
            "name": "enemy",
            "type": "Entity"
          }
        ],
        "description": "Returns <page>Global.CurTime</page> based time since the enemy was reacquired, meaning it is currently in Line of Sight of the NPC.",
        "name": "GetTimeEnemyLastReacquired",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Time enemy was last reacquired.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the view offset of the NPC. Set by <page>NPC:SetViewOffset</page>.",
        "name": "GetViewOffset",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The view offset of the NPC.",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "A classname of the weapon to try to get.",
            "name": "class",
            "type": "string"
          }
        ],
        "description": "Returns a specific weapon the NPC owns.",
        "name": "GetWeapon",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The weapon for the specified class, or NULL of the NPC doesn't have given weapon.",
            "name": "wep",
            "type": "Weapon"
          }
        ]
      },
      {
        "description": "Returns a table of the NPC's weapons.",
        "name": "GetWeapons",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "A list of the weapons the NPC currently has.",
            "type": "table<Weapon>"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Class name of the weapon to equip to the NPC.",
            "name": "weapon",
            "type": "string"
          }
        ],
        "description": "Used to give a weapon to an already spawned NPC.",
        "name": "Give",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The weapon entity given to the NPC.",
            "type": "Weapon"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The condition index, see <page>Enums/COND</page>.",
            "name": "condition",
            "type": "number"
          }
        ],
        "description": "Returns whether or not the NPC has the given condition.",
        "name": "HasCondition",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "True if the NPC has the given condition, false otherwise.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "default": "GetEnemy()",
            "description": "The enemy to test.",
            "name": "enemy",
            "type": "Entity"
          }
        ],
        "description": "Polls the enemy memory to check if the given entity has eluded us or not.",
        "name": "HasEnemyEluded",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "If the enemy has eluded us.",
            "name": "eluded",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "default": "GetEnemy()",
            "description": "The entity to test.",
            "name": "enemy",
            "type": "Entity"
          }
        ],
        "description": "Polls the enemy memory to check if the NPC has any memory of given enemy.",
        "name": "HasEnemyMemory",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "If we have any memory on given enemy.",
            "name": "eluded",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns true if the current navigation has an obstacle, this is different from <page>NPC:GetBlockingEntity</page>, this is for virtual navigation obstacles put by AI's local navigation system to prevent movement to the marked area, forcing NPC to steer around, [for example](https://github.com/ValveSoftware/source-sdk-2013/blob/master/src/game/server/hl2/npc_playercompanion.cpp#L2897).",
        "name": "HasObstacles",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "`true` if the current navigation has an obstacle.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Force an NPC to play their Idle sound.",
        "name": "IdleSound",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The enemy to ignore.",
            "name": "enemy",
            "type": "Entity"
          },
          {
            "description": "How long to ignore the enemy for. This will be compared to <page>Global.CurTime</page>, so your value should be based on it.",
            "name": "until",
            "type": "number"
          }
        ],
        "description": "Makes the NPC ignore given entity/enemy until given time.",
        "name": "IgnoreEnemyUntil",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Returns whether the NPC is currently crouching or not. Citizens and Combine Soldiers are capable of this behavior by default.",
        "name": "IsCrouching",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the NPC is currently crouching.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The schedule number, see <page>Enums/SCHED</page>.",
            "name": "schedule",
            "type": "number"
          }
        ],
        "description": "Returns whether or not the NPC is performing the given schedule.",
        "name": "IsCurrentSchedule",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "True if the NPC is performing the given schedule, false otherwise.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the current navigational waypoint is the final one.",
        "name": "IsCurWaypointGoal",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the current navigational waypoint is the final one.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the NPC is facing their ideal yaw. See <page>NPC:SetIdealYaw</page>, <page>NPC:GetIdealYaw</page> and <page>NPC:SetIdealYawAndUpdate</page>.",
        "name": "IsFacingIdealYaw",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the NPC is facing their ideal yaw.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the NPC has an active goal.",
        "name": "IsGoalActive",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the NPC has an active goal or not.",
            "name": "act",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The position to test.",
            "name": "position",
            "type": "Vector"
          }
        ],
        "description": "Tests whether a position or an NPC is in the view cone of the NPC.",
        "name": "IsInViewCone",
        "overloads": [
          {
            "arguments": [
              {
                "description": "The entity to test. Will use the entity's position.",
                "name": "ent",
                "type": "Entity"
              }
            ],
            "returnValues": [
              {
                "description": "If the given position is in the view cone.",
                "type": "boolean"
              }
            ]
          }
        ],
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "If the given position is in the view cone.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns if the current movement is locked on the Yaw axis.",
        "name": "IsMoveYawLocked",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the movement is yaw locked or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the NPC is moving or not.",
        "name": "IsMoving",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the NPC is moving or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Checks if the NPC is running an **ai_goal**. ( e.g. An npc_citizen NPC following the Player. )",
        "name": "IsRunningBehavior",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Returns true if running an ai_goal, otherwise returns false.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the current NPC is the leader of the squad it is in.",
        "name": "IsSquadLeader",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the NPC is the leader of the squad or not.",
            "name": "is_leader",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Enemy entity to check.",
            "name": "enemy",
            "type": "Entity"
          }
        ],
        "description": "Returns the \"forgettable\" status for a given enemy, as set by <page>NPC:SetUnforgettable</page>, or by internal logic of engine NPCs.",
        "name": "IsUnforgettable",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the given enemy is unforgettable (`true`) or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The entity to test.",
            "name": "testEntity",
            "type": "Entity"
          }
        ],
        "description": "Returns true if the entity was remembered as unreachable. The memory is updated automatically from following engine tasks if they failed:\n* TASK_GET_CHASE_PATH_TO_ENEMY\n* TASK_GET_PATH_TO_ENEMY_LKP\n* TASK_GET_PATH_TO_INTERACTION_PARTNER\n* TASK_ANTLIONGUARD_GET_CHASE_PATH_ENEMY_TOLERANCE\n* SCHED_FAIL_ESTABLISH_LINE_OF_FIRE - Combine NPCs, also when failing to change their enemy",
        "name": "IsUnreachable",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "If the entity is reachable or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Force an NPC to play their LostEnemy sound.",
        "name": "LostEnemySound",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Tries to achieve our ideal animation state, playing any transition sequences that we need to play to get there.",
        "name": "MaintainActivity",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "GetEnemy()",
            "description": "The enemy to mark",
            "name": "enemy",
            "type": "Entity"
          }
        ],
        "description": "Causes the NPC to temporarily forget the current enemy and switch on to a better one.",
        "name": "MarkEnemyAsEluded",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "nil",
            "description": "The enemy to mark. Defaults to currently active enemy (<page>NPC:GetEnemy</page>)",
            "name": "enemy",
            "type": "Entity"
          }
        ],
        "description": "Marks the NPC as took damage from given entity.\n\nSee also <page>NPC:GetLastTimeTookDamageFromEnemy</page>.",
        "name": "MarkTookDamageFromEnemy",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The destination of the climb.",
            "name": "destination",
            "type": "Vector"
          },
          {
            "description": "The direction of the climb.",
            "name": "dir",
            "type": "Vector"
          },
          {
            "description": "The distance.",
            "name": "distance",
            "type": "number"
          },
          {
            "description": "The yaw angle.",
            "name": "yaw",
            "type": "number"
          },
          {
            "description": "Amount of climb nodes left?",
            "name": "left",
            "type": "number"
          }
        ],
        "description": "Executes a climb move.\n\nRelated functions are <page>NPC:MoveClimbStart</page> and <page>NPC:MoveClimbStop</page>.",
        "name": "MoveClimbExec",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The result. See <page>Enums/AIMR</page>.",
            "type": "number{AIMR}"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The destination of the climb.",
            "name": "destination",
            "type": "Vector"
          },
          {
            "description": "The direction of the climb.",
            "name": "dir",
            "type": "Vector"
          },
          {
            "description": "The distance.",
            "name": "distance",
            "type": "number"
          },
          {
            "description": "The yaw angle.",
            "name": "yaw",
            "type": "number"
          }
        ],
        "description": "Starts a climb move.\n\nRelated functions are <page>NPC:MoveClimbExec</page> and <page>NPC:MoveClimbStop</page>.",
        "name": "MoveClimbStart",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Stops a climb move.\n\nRelated functions are <page>NPC:MoveClimbExec</page> and <page>NPC:MoveClimbStart</page>.",
        "name": "MoveClimbStop",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The position we want to reach.",
            "name": "pos",
            "type": "Vector"
          },
          {
            "default": "nil",
            "description": "Used to test whether we hit the move target when deciding success.",
            "name": "targetEntity",
            "type": "Entity"
          },
          {
            "default": "-1",
            "description": "Target Yaw angle at the end of the move. -1 to keep original yaw.",
            "name": "yaw",
            "type": "number"
          },
          {
            "default": "true",
            "description": "Whether to move as far as possible.",
            "name": "asFarAsCan",
            "type": "boolean"
          },
          {
            "default": "true",
            "description": "Also test the Z axis of the target position and NPC position to decide success.",
            "name": "testZ",
            "type": "boolean"
          }
        ],
        "description": "Similar to other `NPC:Move*` functions, invokes internal code to move the NPC to a given location.\n\nMeant to be used within <page>ENTITY:OverrideMove</page>.",
        "name": "MoveGroundStep",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the movement succeeded or not.\n\n`AIMotorMoveResult_t` enum:\n* AIM_FAILED = 0\n* AIM_SUCCESS = 1\n* AIM_PARTIAL_HIT_NPC = 2\n* AIM_PARTIAL_HIT_WORLD = 3\n* AIM_PARTIAL_HIT_TARGET = 4",
            "type": "number"
          }
        ]
      },
      {
        "description": "Executes a jump move.\n\nRelated functions are <page>NPC:MoveJumpStart</page> and <page>NPC:MoveJumpStop</page>.",
        "name": "MoveJumpExec",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The result. See <page>Enums/AIMR</page>.",
            "type": "number{AIMR}"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The jump velocity.",
            "name": "vel",
            "type": "Vector"
          }
        ],
        "description": "Starts a jump move.\n\nRelated functions are <page>NPC:MoveJumpExec</page> and <page>NPC:MoveJumpStop</page>.",
        "name": "MoveJumpStart",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Stops a jump move.\n\nRelated functions are <page>NPC:MoveJumpExec</page> and <page>NPC:MoveJumpStart</page>.",
        "name": "MoveJumpStop",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The result. See <page>Enums/AIMR</page>.",
            "type": "number{AIMR}"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The target position for the NPC to walk to.",
            "name": "position",
            "type": "Vector"
          }
        ],
        "description": "Makes the NPC walk toward the given position. The NPC will return to the player after amount of time set by **player_squad_autosummon_time** <page>ConVar</page>.\n\nOnly works on Citizens (npc_citizen) and is a part of the Half-Life 2 squad system.\n\nThe NPC **must** be in the player's squad for this to work.",
        "name": "MoveOrder",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Pauses the NPC movement?\n\nRelated functions are <page>NPC:MoveStart</page>, <page>NPC:MoveStop</page> and <page>NPC:ResetMoveCalc</page>.",
        "name": "MovePause",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Starts NPC movement?\n\nRelated functions are <page>NPC:MoveStop</page>, <page>NPC:MovePause</page> and <page>NPC:ResetMoveCalc</page>.",
        "name": "MoveStart",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Stops the NPC movement?\n\nRelated functions are <page>NPC:MoveStart</page>, <page>NPC:MovePause</page> and <page>NPC:ResetMoveCalc</page>.",
        "name": "MoveStop",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The origin to calculate a path from.",
            "name": "pos",
            "type": "Vector"
          },
          {
            "description": "The target length of the path to calculate.",
            "name": "length",
            "type": "number"
          },
          {
            "description": "The direction in which to look for a new path end goal.",
            "name": "dir",
            "type": "Vector"
          }
        ],
        "description": "Works similarly to <page>NPC:NavSetRandomGoal</page>.",
        "name": "NavSetGoal",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether path generation was successful or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The position to calculate a path to.",
            "name": "pos",
            "type": "Vector"
          }
        ],
        "description": "Creates a path to closest node at given position. This won't actually force the NPC to move.\n\n<note>This will call either <page>NPC:TaskComplete</page> or <page>NPC:TaskFail</page> for the current schedule and task, forcing the current task to progress to next task or fail. </note>\n\nSee also <page>NPC:NavSetRandomGoal</page>.",
        "name": "NavSetGoalPos",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether path generation was successful or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The targeted entity to set the goal to.",
            "name": "target",
            "type": "Entity"
          },
          {
            "default": "Vector( 0, 0, 0 )",
            "description": "The offset to apply to the targeted entity's position.",
            "name": "offset",
            "type": "Vector"
          }
        ],
        "description": "Set the goal target for an NPC.\n\nThis will call either <page>NPC:TaskComplete</page> or <page>NPC:TaskFail</page> for the current schedule and task, forcing the current task to progress to next task or fail.",
        "name": "NavSetGoalTarget",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether path generation was successful or not",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Minimum length of path in units",
            "name": "minPathLength",
            "type": "number"
          },
          {
            "description": "Unit vector pointing in the direction of the target random node",
            "name": "dir",
            "type": "Vector"
          }
        ],
        "description": "Creates a random path of specified minimum length between a closest start node and random node in the specified direction. This won't actually force the NPC to move.",
        "name": "NavSetRandomGoal",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether path generation was successful or not",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "X offset",
            "name": "xOffset",
            "type": "number"
          },
          {
            "description": "Y offset",
            "name": "yOffset",
            "type": "number"
          }
        ],
        "description": "Sets a goal in x, y offsets for the NPC to wander to",
        "name": "NavSetWanderGoal",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether path generation was successful or not",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The weapon to try to pick up.",
            "name": "wep",
            "type": "Weapon"
          }
        ],
        "description": "Forces the NPC to pickup an existing weapon entity. The NPC will not pick up the weapon if they already own a weapon of given type, or if the NPC could not normally have this weapon in their inventory.",
        "name": "PickupWeapon",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the NPC succeeded in picking up the weapon or not.",
            "name": "result",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The sentence string to speak.",
            "name": "sentence",
            "type": "string"
          },
          {
            "description": "Delay in seconds until the sentence starts playing.",
            "name": "delay",
            "type": "number"
          },
          {
            "description": "The volume of the sentence, from 0 to 1.",
            "name": "volume",
            "type": "number"
          }
        ],
        "description": "Forces the NPC to play a sentence from scripts/sentences.txt",
        "name": "PlaySentence",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Returns the sentence index, -1 if the sentence couldn't be played.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The entity to mark as unreachable.",
            "name": "ent",
            "type": "Entity"
          },
          {
            "default": "3",
            "description": "For how long to remember the entity as unreachable. Negative values will act as `3` seconds.",
            "name": "time",
            "type": "number"
          }
        ],
        "description": "Makes the NPC remember an entity or an enemy as unreachable, for a specified amount of time. Use <page>NPC:IsUnreachable</page> to check if an entity is still unreachable.",
        "name": "RememberUnreachable",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "nil",
            "description": "Ignore conditions to remove, see <page>Enums/COND</page>. If omitted, removes all ignore conditions.",
            "name": "conditions",
            "type": "table"
          }
        ],
        "description": "Removes conditions to ignore for the this NPC.",
        "name": "RemoveIgnoreConditions",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new activity. See <page>Enums/ACT</page>.",
            "name": "act",
            "type": "number"
          }
        ],
        "description": "Resets the ideal activity of the NPC. See also <page>NPC:SetIdealActivity</page>.",
        "name": "ResetIdealActivity",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Resets all the movement calculations.\n\nRelated functions are <page>NPC:MoveStart</page>, <page>NPC:MovePause</page> and <page>NPC:MoveStop</page>.",
        "name": "ResetMoveCalc",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The task ID, see [ai_task.h](https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/server/ai_task.h#L89-L502)",
            "name": "taskID",
            "type": "number"
          },
          {
            "description": "The task data.",
            "name": "taskData",
            "type": "number"
          }
        ],
        "description": "Starts an engine task.\n\nUsed internally by the <page>ai_task</page>.",
        "name": "RunEngineTask",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "A classname of the weapon or a <page>Weapon</page> entity to switch to.",
            "name": "weapon",
            "type": "string|Weapon"
          }
        ],
        "description": "Forces the NPC to switch to a specific weapon the NPC owns. See <page>NPC:GetWeapons</page>.",
        "name": "SelectWeapon",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Stops any sounds (speech) the NPC is currently palying.\n\nEquivalent to `Entity:EmitSound( \"AI_BaseNPC.SentenceStop\" )`",
        "name": "SentenceStop",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new activity to set, see <page>Enums/ACT</page>.",
            "name": "act",
            "type": "number"
          }
        ],
        "description": "Sets the NPC's current activity.",
        "name": "SetActivity",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "See <page>Enums/ACT</page>.",
            "name": "act",
            "type": "number"
          }
        ],
        "name": "SetArrivalActivity",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new arrival direction.",
            "name": "dir",
            "type": "Vector"
          }
        ],
        "description": "Sets the direction from the NPC origin to its current navigational destination.",
        "name": "SetArrivalDirection",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The distance to goal that is close enough for the NPC",
            "name": "dist",
            "type": "number"
          }
        ],
        "description": "Sets the distance to goal at which the NPC should stop moving and continue to other business such as doing the rest of their tasks in a schedule.",
        "name": "SetArrivalDistance",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "See <page>Entity:LookupSequence</page>.",
            "name": "seq",
            "type": "number"
          }
        ],
        "description": "Sets the sequence to be played when the NPC arrives at its goal.",
        "name": "SetArrivalSequence",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new arrival speed",
            "name": "speed",
            "type": "number"
          }
        ],
        "description": "Sets the arrival speed? of the NPC",
        "name": "SetArrivalSpeed",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The condition index, see <page>Enums/COND</page>.",
            "name": "condition",
            "type": "number{COND}"
          }
        ],
        "description": "Sets an NPC condition.",
        "name": "SetCondition",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The proficiency for the NPC's current weapon. See <page>Enums/WEAPON_PROFICIENCY</page>.",
            "name": "proficiency",
            "type": "number"
          }
        ],
        "description": "Sets the weapon proficiency of an NPC (how skilled an NPC is with its current weapon).",
        "name": "SetCurrentWeaponProficiency",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The enemy that the NPC should target",
            "name": "enemy",
            "type": "Entity"
          },
          {
            "default": "true",
            "description": "Calls <page>NPC:SetCondition</page>(COND.NEW_ENEMY) if the new enemy is valid and not equal to the last enemy.",
            "name": "newenemy",
            "type": "boolean"
          }
        ],
        "description": "Sets the target for an NPC.",
        "name": "SetEnemy",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The expression filepath.",
            "name": "m_iszExpressionScene",
            "type": "string"
          }
        ],
        "description": "Sets the NPC's .vcd expression. Similar to <page>Entity:PlayScene</page> except the scene is looped until it's interrupted by default NPC behavior or <page>NPC:ClearExpression</page>.",
        "name": "SetExpression",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Default duration of assigned expression, in seconds.",
            "name": "flDuration",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether to force the NPC to crouch or not. `false` clears the \"force crouch\" flag, but does not guarantee to force the NPC to stand back up.",
            "name": "force",
            "type": "boolean"
          }
        ],
        "description": "Forces given NPC to crouch, if it is able to do so. Only Citizens and Combine Soldiers can by default.",
        "name": "SetForceCrouch",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new FOV for the NPC in degrees.",
            "name": "fov",
            "type": "number"
          }
        ],
        "description": "Sets the Field Of View of the NPC, for use with such functions as <page>NPC:IsInViewCone</page>. it is also used internally by the NPC for enemy detection, etc.",
        "name": "SetFOV",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Updates the NPC's hull and physics hull in order to match its model scale. <page>Entity:SetModelScale</page> seems to take care of this regardless.",
        "name": "SetHullSizeNormal",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Hull type. See <page>Enums/HULL</page>",
            "name": "hullType",
            "type": "number"
          }
        ],
        "description": "Sets the hull type for the NPC.",
        "name": "SetHullType",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The ideal activity to set. <page>Enums/ACT</page>.",
            "name": "",
            "type": "number"
          }
        ],
        "description": "Sets the ideal activity the NPC currently wants to achieve. This is most useful for custom SNPCs.",
        "name": "SetIdealActivity",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The ideal sequence to set. <page>Entity:LookupSequence</page>.",
            "name": "sequenceId",
            "type": "number"
          }
        ],
        "description": "Sets the ideal sequence the NPC currently wants to achieve. This is most useful for custom SNPCs.",
        "name": "SetIdealSequence",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The aim direction to set, the `yaw` component.",
            "name": "angle",
            "type": "number"
          }
        ],
        "description": "Sets the ideal yaw angle (left-right rotation) for the NPC. Does not actually force the NPC to start turning in that direction. See <page>NPC:UpdateYaw</page>, <page>NPC:GetIdealYaw</page> and <page>NPC:SetIdealYawAndUpdate</page>.",
        "name": "SetIdealYaw",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The aim direction to set, the `yaw` component.",
            "name": "angle",
            "type": "number"
          },
          {
            "default": "-1",
            "description": "The turn speed. Special values are:\n* `-1` - Calculate automatically\n* `-2` - Keep the previous yaw speed",
            "name": "speed",
            "type": "number"
          }
        ],
        "description": "Sets the ideal yaw angle (left-right rotation) for the NPC and forces them to turn to that angle.",
        "name": "SetIdealYawAndUpdate",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Conditions to ignore, see <page>Enums/COND</page>. The table must be sequential, numerical and values must correspond to condition enums.",
            "name": "conditions",
            "type": "table"
          },
          {
            "description": "Number of conditions to include in the ignored conditions table. Set this to the size of ignored conditions table to ignore all specified conditions.",
            "name": "size",
            "type": "number"
          }
        ],
        "description": "Sets conditions to ignore, which would normally interrupt an Engine-based schedule. Specified conditions will still be set, will call <page>ENTITY:OnCondition</page> and can be returned by <page>NPC:HasCondition</page>, but they will no longer interrupt the Engine schedule.",
        "name": "SetIgnoreConditions",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Where the NPC's last position will be set.",
            "name": "position",
            "type": "Vector"
          }
        ],
        "description": "Sets the last registered or memorized position for this NPC. When using scheduling, the NPC will focus on navigating to the last position via nodes.\n\n<note>The navigation requires ground nodes to function properly, otherwise the NPC could only navigate in a small area. (https://developer.valvesoftware.com/wiki/Info_node)</note>",
        "name": "SetLastPosition",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "New maximum distance the NPC can see at. Default is 2048 and 6000 for long range NPCs such as the sniper.",
            "name": "dist",
            "type": "number"
          }
        ],
        "description": "Sets NPC's max view distance. An NPC will not be able to see enemies outside of this distance.",
        "name": "SetMaxLookDistance",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "How long to try rebuilding path before failing task",
            "name": "time",
            "type": "number"
          }
        ],
        "description": "Sets how long to try rebuilding path before failing task.",
        "name": "SetMaxRouteRebuildTime",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The amount of time in seconds to delay movement by.",
            "name": "delay",
            "type": "number"
          }
        ],
        "description": "Sets the movement delay for given NPC.\n\nSee <page>NPC:GetMoveDelay</page>.",
        "name": "SetMoveDelay",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new timestep.",
            "name": "time",
            "type": "number"
          }
        ],
        "description": "Sets the timestep the internal NPC motor is working on.",
        "name": "SetMoveInterval",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The movement activity, see <page>Enums/ACT</page>.",
            "name": "activity",
            "type": "number"
          }
        ],
        "description": "Sets the activity the NPC uses when it moves.",
        "name": "SetMovementActivity",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The movement sequence index",
            "name": "sequenceId",
            "type": "number"
          }
        ],
        "description": "Sets the sequence the NPC navigation path uses for speed calculation. Doesn't seem to have any visible effect on NPC movement or actively playing sequence.\n\nTo be able to use this, first set <page>NPC:SetIdealActivity</page> to `ACT_DO_NOT_DISTURB`, set this to any sequence with root motion data and call <page>Entity:SetSequence</page> on your desired sequence. As long as your NPC's <page>NPC:GetMovementSequence</page> has root motion data, your NPC will move to navigation point even though your NPC's <page>Entity:GetSequence</page> doesn't have any motion.",
        "name": "SetMovementSequence",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new movement velocity.",
            "name": "vel",
            "type": "Vector"
          }
        ],
        "description": "Sets the move velocity of the NPC",
        "name": "SetMoveVelocity",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether the movement should yaw locked or not.",
            "name": "lock",
            "type": "boolean"
          }
        ],
        "description": "Sets whether the current movement should locked on the Yaw axis or not.",
        "name": "SetMoveYawLocked",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new nav type. See <page>Enums/NAV</page>.",
            "name": "navtype",
            "type": "number"
          }
        ],
        "description": "Sets the navigation type of the NPC.",
        "name": "SetNavType",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "New NPC state, see <page>Enums/NPC_STATE</page>",
            "name": "state",
            "type": "number"
          }
        ],
        "description": "Sets the state the NPC is in to help it decide on a ideal schedule.",
        "name": "SetNPCState",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The NPC schedule, see <page>Enums/SCHED</page>.",
            "name": "schedule",
            "type": "number"
          }
        ],
        "description": "Sets the NPC's current schedule.",
        "name": "SetSchedule",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "nil",
            "description": "The new squad name to set. Do not provide this argument to reset the squad.",
            "name": "name",
            "type": "string"
          }
        ],
        "description": "Assigns the NPC to a new squad. A squad can have up to 16 NPCs. NPCs in a single squad should be friendly to each other.\n\nSee also <page>ai.GetSquadMembers</page> and <page>NPC:GetSquad</page>.\n\nNPCs within the same squad are meant to function more effectively, tactics wise.",
        "name": "SetSquad",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new step height. Default is 18 Hammer Units.",
            "name": "height",
            "type": "number"
          }
        ],
        "description": "Sets the SNPC step height.\n\n<note>This only works for <page text=\"scripted NPCs\">Scripted_Entities</page>.</note>",
        "name": "SetStepHeight",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The target of the NPC.",
            "name": "entity",
            "type": "Entity"
          }
        ],
        "description": "Sets the NPC's target. This is used in some engine schedules.",
        "name": "SetTarget",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The status. See <page>Enums/TASKSTATUS</page>.",
            "name": "status",
            "type": "number"
          }
        ],
        "description": "Sets the status of the current task.",
        "name": "SetTaskStatus",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The enemy entity to set.",
            "name": "enemy",
            "type": "Entity"
          },
          {
            "default": "true",
            "description": "The entity to set.",
            "name": "set",
            "type": "boolean"
          }
        ],
        "description": "Sets given entity as an unforgettable enemy. The state can be retrieved via <page>NPC:IsUnforgettable</page>.",
        "name": "SetUnforgettable",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The view offset to set.",
            "name": "",
            "type": "Vector"
          }
        ],
        "description": "Sets the view offset of the NPC. Player alternative of <page>Player:SetViewOffset</page>.\n\nThis affects NPC's <page>NPC:GetShootPos</page>.",
        "name": "SetViewOffset",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The id of the task to start, see [ai_task.h](https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/server/ai_task.h#L89-L502)",
            "name": "task",
            "type": "number"
          },
          {
            "description": "The task data as a float, not all tasks make use of it.",
            "name": "taskData",
            "type": "number"
          }
        ],
        "description": "Forces the NPC to start an engine task, this has different results for every NPC.",
        "name": "StartEngineTask",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "true",
            "description": "Whether to stop moving even when currently active goal doesn't want us to.",
            "name": "immediate",
            "type": "boolean"
          }
        ],
        "description": "Resets the NPC's movement animation and velocity. Does not actually stop the NPC from moving.",
        "name": "StopMoving",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Must be a player, does nothing otherwise.",
            "name": "target",
            "type": "Entity"
          }
        ],
        "description": "Cancels <page>NPC:MoveOrder</page> basically.\n\nOnly works on Citizens (npc_citizen) and is a part of the Half-Life 2 squad system.\n\nThe NPC **must** be in the player's squad for this to work.",
        "name": "TargetOrder",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Marks the current NPC task as completed.\n\nThis is meant to be used alongside <page>NPC:TaskFail</page> to complete or fail custom Lua defined tasks. (<page>Schedule:AddTask</page>)",
        "name": "TaskComplete",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "A string most likely defined as a Source Task, for more information on Tasks go to https://developer.valvesoftware.com/wiki/Task",
            "name": "task",
            "type": "string"
          }
        ],
        "description": "Marks the current NPC task as failed.\n\nThis is meant to be used alongside <page>NPC:TaskComplete</page> to complete or fail custom Lua defined tasks. (<page>Schedule:AddTask</page>)",
        "name": "TaskFail",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The enemy to update.",
            "name": "enemy",
            "type": "Entity"
          },
          {
            "description": "The last known position of the enemy.",
            "name": "pos",
            "type": "Vector"
          }
        ],
        "description": "Force the NPC to update information on the supplied enemy, as if it had line of sight to it.",
        "name": "UpdateEnemyMemory",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Updates the turn activity. Basically applies the turn animations depending on the current turn yaw.",
        "name": "UpdateTurnActivity",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "-1",
            "description": "The turn speed. Special values are:\n* `-1` - Calculate automatically\n* `-2` - Keep the previous yaw speed",
            "name": "speed",
            "type": "number"
          }
        ],
        "description": "Forces the NPC to turn to their ideal yaw angle. See <page>NPC:SetIdealYaw</page> and <page>NPC:SetIdealYawAndUpdate</page>.",
        "name": "UpdateYaw",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      },
      {
        "description": "<note>This function only works on `ai` type [SENTs](Scripted_Entities).</note>",
        "name": "UseActBusyBehavior",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "If we succeeded setting the behavior.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Enables the AI's [Assault Behavior](https://developer.valvesoftware.com/wiki/Assault \"Assault Behavior\") when an `ai_goal_assault` is set for this SENT.\n<note>This function only works on `ai` type [SENTs](Scripted_Entities).</note>",
        "name": "UseAssaultBehavior",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the action succeeded.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "<note>This function only works on `ai` type [SENTs](Scripted_Entities).</note>",
        "name": "UseFollowBehavior",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "If we succeeded setting the behavior.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Orders the SNPC to control any nearby `func_tank`s looking for an NPC to operate itself, if available.\n<note>This function only works on `ai` type [SENTs](Scripted_Entities).</note>",
        "name": "UseFuncTankBehavior",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the action succeeded.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Enables the AI's [Lead Behavior](https://developer.valvesoftware.com/wiki/ai_goal_lead \"Lead Behavior\") when an `ai_goal_lead` is set for this SENT.\n<note>This function only works on `ai` type [SENTs](Scripted_Entities).</note>",
        "name": "UseLeadBehavior",
        "parent": "NPC",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the action succeeded.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Undoes the other `Use*Behavior` functions.\n\n<note>This function only works on `ai` type [SENTs](Scripted_Entities).</note>",
        "name": "UseNoBehavior",
        "parent": "NPC",
        "realms": [
          "server"
        ]
      }
    ],
    "name": "NPC"
  },
  {
    "description": "This is the base panel for every other [VGUI](vgui) panel.\n\nIt contains all of the basic methods, some of which may only work on certain VGUI elements. See also <page>Panel Hooks</page>.\n\nAs their functionality is provided at the game's C/C++ level rather than by its Lua script extension, they are unfortunately unavailable for most practical purposes, however, they can still be obtained in a way similar to that provided by the <page>baseclass</page> library:\n\n```\n-- Create a new panel type NewPanel that inherits all of its functionality from DLabel,\n-- but has a different SetText method than DLabel does - all without the hassle of that\n-- old DLabel's default text getting in the way. Fun stuff.\n\nlocal PANEL = {}\n\nfunction PANEL:Init()\n\nself:SetText_Base( \"\" )\nself:SetText( \"Time for something different!\" )\n\nend\n\nfunction PANEL:Paint( aWide, aTall )\n\nlocal TextX, TextY = 0, 0\nlocal TextColor = Color( 255, 0, 0, 255 )\n\nsurface.SetFont( self:GetFont() or \"default\" )\nsurface.SetTextColor( TextColor )\nsurface.SetTextPos( TextX, TextY )\nsurface.DrawText( self:GetText() )\n\nend\n\n-- And here we go:\nPANEL.SetText_Base = FindMetaTable( \"Panel\" ).SetText\n\nfunction PANEL:SetText( aText )\n\nself.Text = tostring( aText )\n\nend\n\nfunction PANEL:GetText()\n\nreturn self.Text or \"\"\n\nend\n\nvgui.Register( \"NewPanel\", PANEL, \"DLabel\" )\n```",
    "fields": [
      {
        "description": "Set to true by the <page>dragndrop</page> system when the panel is being drawn for the drag'n'drop.",
        "name": "PaintingDragging",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "type": "boolean"
      }
    ],
    "functions": [
      {
        "arguments": [
          {
            "description": "The panel to be added (parented).",
            "name": "object",
            "type": "Panel"
          }
        ],
        "description": "When provided with a string or table, this function will create a new vgui element with that name and set the parent to the panel that this method is called on. When provided with a panel it will use <page>Panel:SetParent</page> on the provided panel to set it to our source panel",
        "name": "Add",
        "overloads": [
          {
            "arguments": [
              {
                "description": "The class to be added.",
                "name": "class",
                "type": "string"
              }
            ],
            "returnValues": [
              {
                "description": "New panel",
                "type": "Panel"
              }
            ]
          },
          {
            "arguments": [
              {
                "description": "The table to create the panel from.",
                "name": "table",
                "type": "table"
              }
            ],
            "returnValues": [
              {
                "description": "New panel",
                "type": "Panel"
              }
            ]
          }
        ],
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "New panel",
            "type": "Panel"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 521,
          "lineStart": 506
        }
      },
      {
        "description": "<deprecated>Does nothing</deprecated>\nThis function does nothing.",
        "name": "AddText",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "default": "0",
            "description": "The align offset.",
            "name": "offset",
            "type": "number"
          }
        ],
        "description": "Aligns the panel on the bottom of its parent with the specified offset.",
        "name": "AlignBottom",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 129,
          "lineStart": 129
        }
      },
      {
        "arguments": [
          {
            "default": "0",
            "description": "The align offset.",
            "name": "offset",
            "type": "number"
          }
        ],
        "description": "Aligns the panel on the left of its parent with the specified offset.",
        "name": "AlignLeft",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 132,
          "lineStart": 132
        }
      },
      {
        "arguments": [
          {
            "default": "0",
            "description": "The align offset.",
            "name": "offset",
            "type": "number"
          }
        ],
        "description": "Aligns the panel on the right of its parent with the specified offset.",
        "name": "AlignRight",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 130,
          "lineStart": 130
        }
      },
      {
        "arguments": [
          {
            "default": "0",
            "description": "The align offset.",
            "name": "offset",
            "type": "number"
          }
        ],
        "description": "Aligns the panel on the top of its parent with the specified offset.",
        "name": "AlignTop",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 131,
          "lineStart": 131
        }
      },
      {
        "arguments": [
          {
            "description": "The alpha value (0-255) to approach.",
            "name": "alpha",
            "type": "number"
          },
          {
            "description": "The time in seconds it should take to reach the alpha.",
            "name": "duration",
            "type": "number"
          },
          {
            "default": "0",
            "description": "The delay before the animation starts.",
            "name": "delay",
            "type": "number"
          },
          {
            "default": "nil",
            "description": "The function to be called once the animation finishes.\n\n<callback>\n<arg type=\"table\" name=\"animData\">The <page>Structures/AnimationData</page> that was used.</arg>\n<arg type=\"Panel\" name=\"targetPanel\">The panel object that was animated.</arg>\n</callback>",
            "name": "callback",
            "type": "function"
          }
        ],
        "description": "Uses animation to transition the current alpha value of a panel to a new alpha, over a set period of time and after a specified delay.",
        "name": "AlphaTo",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/animation.lua",
          "lineEnd": 269,
          "lineStart": 263
        }
      },
      {
        "description": "<internal></internal> Performs the per-frame operations required for panel animations.\n\nThis is called every frame by <page>PANEL:AnimationThink</page>.",
        "name": "AnimationThinkInternal",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/animation.lua",
          "lineEnd": 59,
          "lineStart": 20
        }
      },
      {
        "description": "Returns the <page>Global.SysTime</page> value when all animations for this panel object will end.",
        "name": "AnimTail",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The system time value when all animations will end for this panel.",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/animation.lua",
          "lineEnd": 100,
          "lineStart": 90
        }
      },
      {
        "arguments": [
          {
            "description": "The text to append (add on).",
            "name": "txt",
            "type": "string"
          }
        ],
        "description": "Appends text to a <page>RichText</page> element. This does not automatically add a new line.",
        "name": "AppendText",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The text to append (add on).",
            "name": "txt",
            "type": "string"
          }
        ],
        "description": "Appends text to a <page>RichText</page> element (exactly like <page>Panel:AppendText</page>), while also parsing and adding valid URLs (<page>Panel:InsertClickableTextStart</page>). This does not automatically add a new line.",
        "name": "AppendTextWithURLs",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The GWEN controls table to apply to the panel.",
            "name": "GWENTable",
            "type": "table"
          }
        ],
        "description": "Used by <page>Panel:LoadGWENFile</page> and <page>Panel:LoadGWENString</page> to apply a GWEN controls table to a panel object.\n\nYou can do this manually using <page>file.Read</page> and <page>util.JSONToTable</page> to import and create a GWEN table structure from a `.gwen` file. This method can then be called, passing the GWEN table's `Controls` member.",
        "name": "ApplyGWEN",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/derma/derma_gwen.lua",
          "lineEnd": 196,
          "lineStart": 166
        }
      },
      {
        "description": "Centers the panel on its parent.\n<note>This will center the panel using the current size of the panel so should be called AFTER setting or adjusting the size of the \tpanel</note>",
        "name": "Center",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 170,
          "lineStart": 165
        }
      },
      {
        "arguments": [
          {
            "default": "0.5",
            "description": "The center fraction.",
            "name": "fraction",
            "type": "number"
          }
        ],
        "description": "Centers the panel horizontally with specified fraction.",
        "name": "CenterHorizontal",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 160,
          "lineStart": 158
        }
      },
      {
        "arguments": [
          {
            "default": "0.5",
            "description": "The center fraction.",
            "name": "fraction",
            "type": "number"
          }
        ],
        "description": "Centers the panel vertically with specified fraction.",
        "name": "CenterVertical",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 153,
          "lineStart": 151
        }
      },
      {
        "description": "Returns the amount of children of the of panel.",
        "name": "ChildCount",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The amount of children the panel has.",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/vgui/dmenu.lua",
          "lineEnd": 147,
          "lineStart": 145
        }
      },
      {
        "description": "Returns the width and height of the space between the position of the panel (upper-left corner) and the max bound of the children panels (farthest reaching lower-right corner).",
        "name": "ChildrenSize",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The children size width.",
            "type": "number"
          },
          {
            "description": "The children size height.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Removes all of the panel's children. Many panels also override this method to gracefully clear their contents without breaking themselves.",
        "name": "Clear",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 596,
          "lineStart": 590
        }
      },
      {
        "arguments": [
          {
            "description": "The color to fade to",
            "name": "color",
            "type": "Color"
          },
          {
            "description": "Length of the animation",
            "name": "length",
            "type": "number"
          },
          {
            "default": "0",
            "description": "Delay before start fading",
            "name": "delay",
            "type": "number"
          },
          {
            "default": "nil",
            "description": "Function to execute when finished\n<callback>\n<arg type=\"table{AnimationData}\" name=\"animData\">The <page>Structures/AnimationData</page> that was used.</arg>\n<arg type=\"Panel\" name=\"targetPanel\">The panel object that was animated.</arg>\n</callback>",
            "name": "callback",
            "type": "function"
          }
        ],
        "description": "Fades panels color to specified one.\n<note>The panel must have `GetColor` and `SetColor` functions for `ColorTo` to work.</note>",
        "name": "ColorTo",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/animation.lua",
          "lineEnd": 250,
          "lineStart": 240
        }
      },
      {
        "arguments": [
          {
            "description": "The new value to set the associated console variable to.",
            "name": "newValue",
            "type": "string"
          }
        ],
        "description": "Updates a panel object's associated console variable. This must first be set up with <page>Global.Derma_Install_Convar_Functions</page>, and have a ConVar set using <page>Panel:SetConVar</page>.",
        "name": "ConVarChanged",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/derma/init.lua",
          "lineEnd": 91,
          "lineStart": 86
        }
      },
      {
        "description": "A think hook for <page>Panel</page>s using ConVars as a value. Call it in the Think hook. Sets the panel's value should the convar change.\n\nThis function is best for: checkboxes, sliders, number wangs\n\nFor a string alternative, see <page>Panel:ConVarStringThink</page>.\n\n<note>Make sure your Panel has a SetValue function, else you may get errors.</note>",
        "name": "ConVarNumberThink",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/derma/init.lua",
          "lineEnd": 119,
          "lineStart": 106
        }
      },
      {
        "description": "A think hook for <page text=\"panels\">Panel</page> using ConVars as a value. Call it in the Think hook. Sets the panel's value should the convar change.\n\nThis function is best for: text inputs, read-only inputs, dropdown selects\n\nFor a number alternative, see <page>Panel:ConVarNumberThink</page>.\n\n<note>Make sure your Panel has a SetValue function, else you may get errors.</note>",
        "name": "ConVarStringThink",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/derma/init.lua",
          "lineEnd": 104,
          "lineStart": 94
        }
      },
      {
        "arguments": [
          {
            "description": "The panel to copy the boundary and dock settings from.",
            "name": "srcPanel",
            "type": "Panel"
          }
        ],
        "description": "Gets the size, position and dock state of the passed panel object, and applies it to this one.",
        "name": "CopyBase",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 504,
          "lineStart": 497
        }
      },
      {
        "arguments": [
          {
            "description": "The panel to copy size and position from.",
            "name": "base",
            "type": "Panel"
          }
        ],
        "description": "Copies position and size of the panel.",
        "name": "CopyBounds",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 182,
          "lineStart": 175
        }
      },
      {
        "arguments": [
          {
            "description": "Panel to copy the height from.",
            "name": "base",
            "type": "Panel"
          }
        ],
        "description": "Copies the height of the panel.",
        "name": "CopyHeight",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 110,
          "lineStart": 108
        }
      },
      {
        "arguments": [
          {
            "description": "Panel to position the width from.",
            "name": "base",
            "type": "Panel"
          }
        ],
        "description": "Copies the position of the panel.",
        "name": "CopyPos",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 124,
          "lineStart": 122
        }
      },
      {
        "description": "Performs the <key>CONTROL</key> + <key>C</key> key combination effect ( Copy selection to clipboard ) on selected text in a <page>TextEntry</page> or <page>RichText</page> based element.",
        "name": "CopySelected",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Panel to copy the width from.",
            "name": "base",
            "type": "Panel"
          }
        ],
        "description": "Copies the width of the panel.",
        "name": "CopyWidth",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 117,
          "lineStart": 115
        }
      },
      {
        "description": "Returns the cursor position relative to the top left of the panel.\n\nThis is equivalent to calling <page>gui.MousePos</page> and then <page>Panel:ScreenToLocal</page>.\n\n<warning>This function uses a cached value for the screen position of the panel, computed at the end of the last VGUI Think/Layout pass.\n\nie. inaccurate results may be returned if the panel or any of its ancestors have been repositioned outside of <page>PANEL:Think</page> or <page>PANEL:PerformLayout</page> within the last frame.</warning>",
        "name": "CursorPos",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "X coordinate of the cursor, relative to the top left of the panel.",
            "type": "number"
          },
          {
            "description": "Y coordinate of the cursor, relative to the top left of the panel.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Performs the <key>CONTROL</key> + <key>X</key> (delete text and copy it to clipboard buffer) action on selected text in a <page>TextEntry</page> or <page>RichText</page> based element.",
        "name": "CutSelected",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The unique cookie name to delete.",
            "name": "cookieName",
            "type": "string"
          }
        ],
        "description": "Deletes a cookie value using the panel's cookie name ( <page>Panel:GetCookieName</page> ) and the passed extension.",
        "name": "DeleteCookie",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 245,
          "lineStart": 238
        }
      },
      {
        "description": "Resets the panel object's <page>Panel:SetPos</page> method and removes its animation table (`Panel.LerpAnim`). This effectively undoes the changes made by <page>Panel:LerpPositions</page>.\n\nIn order to use Lerp animation again, you must call <page>Panel:Stop</page> before setting its `SetPosReal` property to `nil`. See the example below.",
        "name": "DisableLerp",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/animation.lua",
          "lineEnd": 365,
          "lineStart": 359
        }
      },
      {
        "arguments": [
          {
            "description": "The target object with which to compare position.",
            "name": "tgtPanel",
            "type": "Panel"
          }
        ],
        "description": "Returns the linear distance from the center of this panel object and another. **Both panels must have the same parent for this function to work properly.**",
        "name": "Distance",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The linear (straight-line) distance between the center of the two objects.",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 428,
          "lineStart": 422
        }
      },
      {
        "arguments": [
          {
            "description": "The horizontal (x) position in pixels of the point to compare with. Local to the parent panel, or container, not the panel the function is called on.",
            "name": "posX",
            "type": "number"
          },
          {
            "description": "The vertical (y) position in pixels of the point to compare with. Local to the parent panel, or container, not the panel the function is called on.",
            "name": "posY",
            "type": "number"
          }
        ],
        "description": "Returns the distance between the center of this panel object and a specified point **local to the parent panel**.",
        "name": "DistanceFrom",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The linear (straight-line) distance between the specified point local to parent panel and the center of this panel object.",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 437,
          "lineStart": 430
        }
      },
      {
        "arguments": [
          {
            "description": "Dock type using <page>Enums/DOCK</page>.",
            "name": "dockType",
            "type": "number{DOCK}"
          }
        ],
        "description": "Sets the dock type for the panel, making the panel \"dock\" in a certain direction, modifying it's position and size.\n\nYou can set the inner spacing of a panel's docking using <page>Panel:DockPadding</page>, which will affect docked child panels, and you can set the outer spacing of a panel's docking using <page>Panel:DockMargin</page>, which affects how docked siblings are positioned/sized.\n\nYou may need to use <page>Panel:SetZPos</page> to ensure child panels (<page>DTextEntry</page>) stay in a specific order.\n\n<note>After using this function, if you want to get the correct panel's bounds (position, size), use <page>Panel:InvalidateParent</page> (use `true` as argument if you need to update immediately)</note>",
        "name": "Dock",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The left margin to the parent.",
            "name": "marginLeft",
            "type": "number"
          },
          {
            "description": "The top margin to the parent.",
            "name": "marginTop",
            "type": "number"
          },
          {
            "description": "The right margin to the parent.",
            "name": "marginRight",
            "type": "number"
          },
          {
            "description": "The bottom margin to the parent.",
            "name": "marginBottom",
            "type": "number"
          }
        ],
        "description": "Sets the dock margin of the panel.\n\nThe dock margin is the extra space that will be left around the edge when this element is docked inside its parent element.",
        "name": "DockMargin",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The left padding to the parent.",
            "name": "paddingLeft",
            "type": "number"
          },
          {
            "description": "The top padding to the parent.",
            "name": "paddingTop",
            "type": "number"
          },
          {
            "description": "The right padding to the parent.",
            "name": "paddingRight",
            "type": "number"
          },
          {
            "description": "The bottom padding to the parent.",
            "name": "paddingBottom",
            "type": "number"
          }
        ],
        "description": "Sets the dock padding of the panel.\n\nThe dock padding is the extra space that will be left around the edge when child elements are docked inside this element.",
        "name": "DockPadding",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Makes the panel \"lock\" the screen until it is removed. All input will be directed to the given panel.\n\nIt will silently fail if used while cursor is not visible.\nCall <page>Panel:MakePopup</page> before calling this function.\nThis must be called on a panel derived from <page>EditablePanel</page>.",
        "name": "DoModal",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "<internal></internal> Called by <page>Panel:DragMouseRelease</page> when a user clicks one mouse button whilst dragging with another.",
        "name": "DragClick",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Always returns `true`.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/dragdrop.lua",
          "lineEnd": 438,
          "lineStart": 431
        }
      },
      {
        "arguments": [
          {
            "description": "If this time is greater than 0.1, <page>PANEL:DragHoverClick</page> is called, passing it as an argument.",
            "name": "HoverTime",
            "type": "number"
          }
        ],
        "description": "<internal></internal> Called by <page>dragndrop.HoverThink</page> to perform actions on an object that is dragged and hovered over another.",
        "name": "DragHover",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/dragdrop.lua",
          "lineEnd": 512,
          "lineStart": 499
        }
      },
      {
        "description": "<internal></internal> Called to end a drag and hover action. This resets the panel's <page>PANEL:PaintOver</page> method, and is primarily used by <page>dragndrop.StopDragging</page>.",
        "name": "DragHoverEnd",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/dragdrop.lua",
          "lineEnd": 538,
          "lineStart": 531
        }
      },
      {
        "arguments": [
          {
            "description": "The code for the mouse button pressed, passed by, for example, <page>PANEL:OnMousePressed</page>. See the <page>Enums/MOUSE</page>.",
            "name": "mouseCode",
            "type": "number"
          }
        ],
        "description": "Called to inform the <page>dragndrop</page> that a mouse button is being held down on a panel object.",
        "name": "DragMousePress",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/dragdrop.lua",
          "lineEnd": 429,
          "lineStart": 412
        }
      },
      {
        "arguments": [
          {
            "description": "The code for the mouse button pressed, passed by, for example, <page>PANEL:OnMouseReleased</page>. See the <page>Enums/MOUSE</page>.",
            "name": "mouseCode",
            "type": "number"
          }
        ],
        "description": "Called to inform the <page>dragndrop</page> that a mouse button has been depressed on a panel object.",
        "name": "DragMouseRelease",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "`true` if an object was being dragged, otherwise `false`.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/dragdrop.lua",
          "lineEnd": 466,
          "lineStart": 440
        }
      },
      {
        "arguments": [
          {
            "description": "The x coordinate of the top-left corner of the drop area.",
            "name": "x",
            "type": "number"
          },
          {
            "description": "The y coordinate of the top-left corner of the drop area.",
            "name": "y",
            "type": "number"
          },
          {
            "description": "The width of the drop area.",
            "name": "width",
            "type": "number"
          },
          {
            "description": "The height of the drop area.",
            "name": "height",
            "type": "number"
          }
        ],
        "description": "<internal></internal> Called to draw the drop target when an object is being dragged across another. See <page>Panel:SetDropTarget</page>.",
        "name": "DrawDragHover",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/dragdrop.lua",
          "lineEnd": 529,
          "lineStart": 514
        }
      },
      {
        "description": "Draws a coloured rectangle to fill the panel object this method is called on. The colour is set using <page>surface.SetDrawColor</page>. This should only be called within the object's <page>PANEL:Paint</page> or <page>PANEL:PaintOver</page> hooks, as a shortcut for <page>surface.DrawRect</page>.\n\n\n<rendercontext hook=\"false\" type=\"2D\"></rendercontext>",
        "name": "DrawFilledRect",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Draws a hollow rectangle the size of the panel object this method is called on, with a border width of 1 px. The border colour is set using <page>surface.SetDrawColor</page>. This should only be called within the object's <page>PANEL:Paint</page> or <page>PANEL:PaintOver</page> hooks, as a shortcut for <page>surface.DrawOutlinedRect</page>.\n\n\n<rendercontext hook=\"false\" type=\"2D\"></rendercontext>",
        "name": "DrawOutlinedRect",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Used to draw the magenta highlight colour of a panel object when it is selected. This should be called in the object's <page>PANEL:PaintOver</page> hook. Once this is implemented, the highlight colour will be displayed only when the object is selectable and selected. This is achieved using <page>Panel:SetSelectable</page> and <page>Panel:SetSelected</page> respectively.",
        "name": "DrawSelections",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/selections.lua",
          "lineEnd": 101,
          "lineStart": 91
        }
      },
      {
        "arguments": [
          {
            "description": "The colour of the main text.",
            "name": "textCol",
            "type": "table"
          },
          {
            "description": "The colour of the selection highlight (when selecting text).",
            "name": "highlightCol",
            "type": "table"
          },
          {
            "description": "The colour of the text cursor (or caret).",
            "name": "cursorCol",
            "type": "table"
          }
        ],
        "description": "Used to draw the text in a <page>DTextEntry</page> within a derma skin. This is usually called within the <page>SKIN:PaintTextEntry</page> skin hook.\n<note>Will silently fail if any of arguments are not given.</note>\n\n<rendercontext hook=\"false\" type=\"2D\"></rendercontext>",
        "name": "DrawTextEntryText",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Draws a textured rectangle to fill the panel object this method is called on. The texture is set using <page>surface.SetTexture</page> or <page>surface.SetMaterial</page>. This should only be called within the object's <page>PANEL:Paint</page> or <page>PANEL:PaintOver</page> hooks, as a shortcut for <page>surface.DrawTexturedRect</page>.\n\n\n<rendercontext hook=\"false\" type=\"2D\"></rendercontext>",
        "name": "DrawTexturedRect",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Name of your droppable panel",
            "name": "name",
            "type": "string"
          }
        ],
        "description": "Makes this panel droppable. This is used with <page>Panel:Receiver</page> to create drag and drop events.\n\nCan be called multiple times with different names allowing to be dropped onto different receivers.",
        "name": "Droppable",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Blank table stored on the panel itself under pnl.m_DragSlot[ name ]. Is reset every time this function is called and does not appear to be used or exposed anywhere else.",
            "type": "table"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/dragdrop.lua",
          "lineEnd": 310,
          "lineStart": 302
        }
      },
      {
        "description": "Completes a box selection. If the end point of the selection box is within the selection canvas, mouse capture is disabled for the panel object, and the selected state of each child object within the selection box is toggled.",
        "name": "EndBoxSelection",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether the end point of the selection box was within the selection canvas.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/selections.lua",
          "lineEnd": 249,
          "lineStart": 223
        }
      },
      {
        "arguments": [
          {
            "description": "The command to be run.",
            "name": "cmd",
            "type": "string"
          }
        ],
        "description": "<internal></internal> Used to run commands within a <page>DHTML</page> window.",
        "name": "Exec",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the panel that should be found.",
            "name": "panelName",
            "type": "string"
          }
        ],
        "description": "Finds a panel in its children(and sub children) with the given name.",
        "name": "Find",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "foundPanel",
            "type": "Panel"
          }
        ]
      },
      {
        "description": "Focuses the next panel in the focus queue.",
        "name": "FocusNext",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Focuses the previous panel in the focus queue.",
        "name": "FocusPrevious",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Returns the alpha multiplier for this panel.",
        "name": "GetAlpha",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "alphaMul",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the background color of a panel such as a <page>RichText</page>, <page>Label</page> or <page>DColorCube</page>.\n\n<note>This doesn't apply to all VGUI elements and its function varies between them</note>",
        "name": "GetBGColor",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The <page>Color</page> structure",
            "name": "color",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the position and size of the panel.\n\nThis is equivalent to calling <page>Panel:GetPos</page> and <page>Panel:GetSize</page> together.",
        "name": "GetBounds",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The x coordinate of the panel, relative to its parent's top left.",
            "type": "number"
          },
          {
            "description": "The y coordinate of the panel, relative to its parent's top left.",
            "type": "number"
          },
          {
            "description": "The width of the panel.",
            "type": "number"
          },
          {
            "description": "The height of the panel.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the position/offset of the caret (or text cursor) in a text-based panel object.",
        "name": "GetCaretPos",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The caret position/offset from the start of the text. A value of `0` means the caret sits before the first character.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The index of the child to get.\n\n<note>This index starts at 0, except when you use this on a <page>DMenu</page>.</note>",
            "name": "childIndex",
            "type": "number"
          }
        ],
        "description": "Gets a child by its index. For use with <page>Panel:ChildCount</page>.",
        "name": "GetChild",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The panel to get the position of.",
            "name": "pnl",
            "type": "Panel"
          }
        ],
        "description": "Gets a child object's position relative to this panel object. The number of levels is not relevant; the child may have many parents between itself and the object on which the method is called.",
        "name": "GetChildPosition",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The horizontal (x) position of the child relative to this panel object.",
            "type": "number"
          },
          {
            "description": "The vertical (y) position of the child relative to this panel object.",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 458,
          "lineStart": 442
        }
      },
      {
        "description": "Returns a table with all the child panels of the panel.",
        "name": "GetChildren",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "All direct children of this panel.",
            "type": "table"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The horizontal (x) position of the top-left corner of the rectangle, relative to the panel object.",
            "name": "x",
            "type": "number"
          },
          {
            "description": "The vertical (y) position of the top-left corner of the rectangle, relative to the panel object.",
            "name": "y",
            "type": "number"
          },
          {
            "description": "The width of the rectangle.",
            "name": "w",
            "type": "number"
          },
          {
            "description": "The height of the rectangle.",
            "name": "h",
            "type": "number"
          }
        ],
        "description": "Returns a table of all visible, selectable children of the panel object that lie at least partially within the specified rectangle.",
        "name": "GetChildrenInRect",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "A table of panel objects that lie at least partially within the specified rectangle.",
            "type": "table"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/selections.lua",
          "lineEnd": 187,
          "lineStart": 162
        }
      },
      {
        "description": "Returns the class name of the panel. This would be the class name of the base engine-level panel, not Lua classname. The latter is stored usually in <page>Panel:GetName</page>.",
        "name": "GetClassName",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The panel's class name.",
            "type": "string"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The horizontal (x) position of the point.",
            "name": "x",
            "type": "number"
          },
          {
            "description": "The vertical (y) position of the point.",
            "name": "y",
            "type": "number"
          }
        ],
        "description": "Returns the child of this panel object that is closest to the specified point. The point is relative to the object on which the method is called. The distance the child is from this point is also returned.",
        "name": "GetClosestChild",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The child object that was closest to the specified point.",
            "type": "Panel"
          },
          {
            "description": "The distance that this child was from the point.",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 538,
          "lineStart": 523
        }
      },
      {
        "description": "Returns the alignment of the text of a <page>Label</page>.\n\n<note>This function only works on <page>Label</page> panels and its derivatives.</note>",
        "name": "GetContentAlignment",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The direction of the content, based on the number pad.\n\n<key>1</key>: **bottom-left** <br>\n<key>2</key>: **bottom-center** <br>\n<key>3</key>: **bottom-right** <br>\n<key>4</key>: **middle-left** <br>\n<key>5</key>: **center** <br>\n<key>6</key>: **middle-right** <br>\n<key>7</key>: **top-left** <br>\n<key>8</key>: **top-center** <br>\n<key>9</key>: **top-right** <br>\n<img src=\"DLabel_SetContentAlignment.gif\">",
            "name": "alignment",
            "type": "number"
          }
        ]
      },
      {
        "description": "Gets the size of the content/children within a panel object.\n\nOnly works with <page>Label</page> derived panels by default such as <page>DLabel</page>.\n\n\nWill also work on any panel that manually implements this method.",
        "name": "GetContentSize",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The content width of the object.",
            "type": "number"
          },
          {
            "description": "The content height of the object.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the cookie from which to retrieve the value.",
            "name": "cookieName",
            "type": "string"
          },
          {
            "description": "The default value to return if the cookie does not exist.",
            "name": "default",
            "type": "string"
          }
        ],
        "description": "Gets the value of a cookie stored by the panel object. This can also be done with <page>cookie.GetString</page>, using the panel's cookie name, a fullstop, and then the actual name of the cookie.\n\nMake sure the panel's cookie name has not changed since writing, or the cookie will not be accessible. This can be done with <page>Panel:GetCookieName</page> and <page>Panel:SetCookieName</page>.",
        "name": "GetCookie",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The value of the stored cookie, or the default value should the cookie not exist.",
            "type": "string"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 221,
          "lineStart": 214
        }
      },
      {
        "description": "Gets the name the panel uses to store cookies. This is set with <page>Panel:SetCookieName</page>.",
        "name": "GetCookieName",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The name the panel uses when reading or writing cookies. The format used is as follows:\n```\npanelCookieName.individualCookieName\n```",
            "type": "string"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the cookie from which to retrieve the value.",
            "name": "cookieName",
            "type": "string"
          },
          {
            "description": "The default value to return if the cookie does not exist.",
            "name": "default",
            "type": "number"
          }
        ],
        "description": "Gets the value of a cookie stored by the panel object, as a number. This can also be done with <page>cookie.GetNumber</page>, using the panel's cookie name, a fullstop, and then the actual name of the cookie.\n\nMake sure the panel's cookie name has not changed since writing, or the cookie will not be accessible. This can be done with <page>Panel:GetCookieName</page> and <page>Panel:SetCookieName</page>.",
        "name": "GetCookieNumber",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The number value of the stored cookie, or the default value should the cookie not exist.",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 209,
          "lineStart": 202
        }
      },
      {
        "description": "Returns a dock enum for the panel's current docking type.",
        "name": "GetDock",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The dock enum for the panel. See <page>Enums/DOCK</page>.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the docked margins of the panel. (set by <page>Panel:DockMargin</page>)",
        "name": "GetDockMargin",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Left margin.",
            "type": "number"
          },
          {
            "description": "Top margin.",
            "type": "number"
          },
          {
            "description": "Right margin.",
            "type": "number"
          },
          {
            "description": "Bottom margin.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the docked padding of the panel. (set by <page>Panel:DockPadding</page>)",
        "name": "GetDockPadding",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Left padding.",
            "type": "number"
          },
          {
            "description": "Top padding.",
            "type": "number"
          },
          {
            "description": "Right padding.",
            "type": "number"
          },
          {
            "description": "Bottom padding.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the foreground color of the panel.\n\nFor a <page>Label</page> or <page>RichText</page>, this is the color of its text.\n\n<note>This doesn't apply to all VGUI elements (such as <page>DLabel</page>) and its function varies between them</note>",
        "name": "GetFGColor",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "A color structure. See <page>Color</page>",
            "name": "color",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns the name of the font that the panel renders its text with.\n\nThis is the same font name set with <page>Panel:SetFontInternal</page>.\n\n<note>Only works on <page>Label</page> and <page>TextEntry</page> and their derived panels by default (such as <page>DLabel</page> and <page>DTextEntry</page>), and on any panel that manually implemented the <page>Panel:GetFont</page> method.</note>",
        "name": "GetFont",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The font name.",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns the panel's HTML material. Only works with <page>Awesomium</page>, <page>HTML</page> and <page>DHTML</page> panels that have been fully loaded.",
        "name": "GetHTMLMaterial",
        "parent": "Panel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The HTML material used by the panel. Typically starts with `__vgui_texture_` followed by an incremental number.",
            "type": "IMaterial"
          }
        ]
      },
      {
        "description": "Returns the height of a single line of a <page>RichText</page> panel.",
        "name": "GetLineHeight",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The line height.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the current maximum character count.\n\nThis function will only work on <page>RichText</page> and <page>TextEntry</page> panels and their derivatives.",
        "name": "GetMaximumCharCount",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The maximum amount of characters this panel is allowed to contain.",
            "name": "maxChar",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the internal name of the panel. Can be set via <page>Panel:SetName</page>.",
        "name": "GetName",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The previously set internal name of the panel.",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns the number of lines in a <page>RichText</page> or a <page>TextEntry</page>.\n\nYou must wait a couple frames before calling this after using <page>Panel:AppendText</page> or <page>Panel:SetText</page>, otherwise it will return the number of text lines before the text change.",
        "name": "GetNumLines",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The number of lines.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the parent of the panel, returns nil if there is no parent.",
        "name": "GetParent",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The parent of given panel",
            "type": "Panel"
          }
        ]
      },
      {
        "description": "Returns the position of the panel relative to its <page>Panel:GetParent</page>.\n\nIf you require the panel's position **and** size, consider using <page>Panel:GetBounds</page> instead.\n\nIf you need the position in screen space, see <page>Panel:LocalToScreen</page>.\n\nSee also <page>Panel:GetX</page> and <page>Panel:GetY</page>.",
        "name": "GetPos",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "X coordinate, relative to this panels parents top left corner.",
            "type": "number"
          },
          {
            "description": "Y coordinate, relative to this panels parents top left corner.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the vertical and horizontal start indexes of a <page>TextEntry</page>'s visible text. This is useful when the panel is scrolled.",
        "name": "GetScrollStartIndexes",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The horizontal start index. (characters)",
            "name": "horizontalIndex",
            "type": "number"
          },
          {
            "description": "The vertical start index. (lines)",
            "name": "verticalIndex",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns a table of all children of the panel object that are selected. This is recursive, and the returned table will include tables for any child objects that also have children. This means that not all first-level members in the returned table will be of type <page>Panel</page>.",
        "name": "GetSelectedChildren",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "A table of any child objects that are selected, including tables for children of the child objects (These tables may also contain table members, as the method is recursive).",
            "type": "table"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/selections.lua",
          "lineEnd": 205,
          "lineStart": 189
        }
      },
      {
        "description": "Returns the currently selected range of text.\n\nThis function will only work on <page>RichText</page> and <page>TextEntry</page> panels and their derivatives.",
        "name": "GetSelectedTextRange",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The start of the range. If no text is selected it may be 0 and/or equal to the end range.",
            "name": "start",
            "type": "number"
          },
          {
            "description": "The end of the range. If no text is selected it may be 0 and/or equal to the start range.",
            "name": "endrange",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the selection canvas for this panel. This will be the first parent that has <page>Panel:SetSelectionCanvas</page> set to true (or `self` if this panel is the selection canvas)\n\nA selection canvas would be the panel that contains a bunch of selectable panels (<page>Panel:SetSelectable</page>), usually for the drag'n'drop system. Calling this function on any of the selectable items, or any of their children, will return the first parent that can contain selectable panels.",
        "name": "GetSelectionCanvas",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The selection canvas, otherwise `nil`.",
            "type": "Panel"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/selections.lua",
          "lineEnd": 131,
          "lineStart": 116
        }
      },
      {
        "description": "Returns the size of the panel.\n\nIf you require both the panel's position and size, consider using <page>Panel:GetBounds</page> instead.",
        "name": "GetSize",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "width",
            "type": "number"
          },
          {
            "description": "height",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the table for the derma skin currently being used by this panel object.",
        "name": "GetSkin",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The derma skin table currently being used by this object.",
            "type": "table"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 413,
          "lineStart": 378
        }
      },
      {
        "description": "Returns the internal Lua table of the panel.",
        "name": "GetTable",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "A table containing all the members of given panel object.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns the height of the panel.\n\nSee <page>Panel:GetWide</page> for the width of the panel. See also <page>Panel:GetSize</page> for a function that returns both.",
        "name": "GetTall",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "height",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the panel's text (where applicable).\n\nThis method returns a maximum of 1023 bytes, except for <page>DTextEntry</page>.",
        "name": "GetText",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The panel's text.",
            "type": "string"
          }
        ]
      },
      {
        "description": "Gets the left and top text margins of a text-based panel object, such as a <page>DButton</page> or <page>DLabel</page>. This is set with <page>Panel:SetTextInset</page>.",
        "name": "GetTextInset",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The left margin of the text, in pixels.",
            "type": "number"
          },
          {
            "description": "The top margin of the text, in pixels.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Gets the size of the text within a <page>Label</page> derived panel.",
        "name": "GetTextSize",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The width of the text in the DLabel.",
            "type": "number"
          },
          {
            "description": "The height of the text in the DLabel.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the tooltip text that was set with <page>PANEL:SetTooltip</page>.",
        "name": "GetTooltip",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The tooltip text, if it was set.",
            "name": "tooltip",
            "type": "string"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 282,
          "lineStart": 277
        }
      },
      {
        "description": "Returns the tooltip delay (time between hovering over the panel, and the tooltip showing up) that was set with <page>Panel:SetTooltipDelay</page>, or nothing if it was not set.\n\nIf the delay is not explicitly set by this function, it will fallback to the value of the `tooltip_delay` <page>ConVar</page>, which is `0.5` by default.",
        "name": "GetTooltipDelay",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The tooltip delay in seconds, if it was set.",
            "name": "tooltip",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 296,
          "lineStart": 294
        }
      },
      {
        "description": "Returns the tooltip panel that was set with <page>PANEL:SetTooltipPanel</page>.",
        "name": "GetTooltipPanel",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The tooltip panel, if it was set.",
            "name": "tooltip",
            "type": "Panel"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 289,
          "lineStart": 287
        }
      },
      {
        "description": "Gets valid receiver slot of currently dragged panel.",
        "name": "GetValidReceiverSlot",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The panel this was called on if a valid receiver slot exists, otherwise false.",
            "type": "Panel"
          },
          {
            "description": "The slot table.",
            "type": "table"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/dragdrop.lua",
          "lineEnd": 359,
          "lineStart": 335
        }
      },
      {
        "description": "Returns the value the panel holds.\n\nIn engine is only implemented for <page>CheckButton</page>, <page>Label</page> and <page>TextEntry</page> as a string.\n\n<note>This function is limited to 8092 Bytes. If using <page>DTextEntry</page>, use <page>Panel:GetText</page> for unlimited bytes.</note>",
        "name": "GetValue",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The value the panel holds.",
            "type": "any"
          }
        ]
      },
      {
        "description": "Returns the width of the panel.\n\nSee <page>Panel:GetTall</page> for the height of the panel. See also <page>Panel:GetSize</page> for a function that returns both.",
        "name": "GetWide",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "width",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the X position of the panel relative to its <page>Panel:GetParent</page>.\n\nUses <page>Panel:GetPos</page> internally.",
        "name": "GetX",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "X coordinate.",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 65,
          "lineStart": 62
        }
      },
      {
        "description": "Returns the Y position of the panel relative to its <page>Panel:GetParent</page>.\n\nUses <page>Panel:GetPos</page> internally.",
        "name": "GetY",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Y coordinate.",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 69,
          "lineStart": 66
        }
      },
      {
        "description": "Returns the Z position of the panel.",
        "name": "GetZPos",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The Z order position of the panel.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Goes back one page in the HTML panel's history if available.",
        "name": "GoBack",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Goes forward one page in the HTML panel's history if available.",
        "name": "GoForward",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The offset in the panel's back/forward history, relative to the current page, that you would like to skip to. Because this is relative, 0 = current page while negative goes back and positive goes forward. For example, -2 will go back 2 pages in the history.",
            "name": "offset",
            "type": "number"
          }
        ],
        "description": "Goes to the page in the HTML panel's history at the specified relative offset.",
        "name": "GoToHistoryOffset",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Causes a <page>RichText</page> element to scroll to the bottom of its text.",
        "name": "GotoTextEnd",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Causes a <page>RichText</page> element to scroll to the top of its text.",
        "name": "GotoTextStart",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The text to be applied to the DCheckBoxLabel.",
            "name": "txt",
            "type": "string"
          }
        ],
        "description": "<internal></internal> Used by <page>Panel:ApplyGWEN</page> to apply the `CheckboxText` property to a <page>DCheckBoxLabel</page>. This does exactly the same as <page>Panel:GWEN_SetText</page>, but exists to cater for the seperate GWEN properties.",
        "name": "GWEN_SetCheckboxText",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/derma/derma_gwen.lua",
          "lineStart": 222
        }
      },
      {
        "arguments": [
          {
            "description": "The new name to apply to the panel.",
            "name": "name",
            "type": "string"
          }
        ],
        "description": "<internal></internal> Used by <page>Panel:ApplyGWEN</page> to apply the `ControlName` property to a panel. This calls <page>Panel:SetName</page>.",
        "name": "GWEN_SetControlName",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/derma/derma_gwen.lua",
          "lineStart": 204
        }
      },
      {
        "arguments": [
          {
            "description": "The dock mode to pass to the panel's `Dock` method. This reads a string and applies the approriate <page>Enums/DOCK</page>.\n* `Right`: Dock right.\n* `Left`: Dock left.\n* `Bottom`: Dock at the bottom.\n* `Top`: Dock at the top.\n* `Fill`: Fill the parent panel.",
            "name": "dockState",
            "type": "string"
          }
        ],
        "description": "<internal></internal> Used by <page>Panel:ApplyGWEN</page> to apply the `Dock` property to a  panel object. This calls <page>Panel:Dock</page>.",
        "name": "GWEN_SetDock",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/derma/derma_gwen.lua",
          "lineEnd": 220,
          "lineStart": 214
        }
      },
      {
        "arguments": [
          {
            "description": "The alignment, as a string, to pass to <page>Panel:SetContentAlignment</page>. Accepts:\n* `Right`: Align mid-right.\n* `Left`: Align mid-left.\n* `Center`: Align mid-center.",
            "name": "hAlign",
            "type": "string"
          }
        ],
        "description": "<internal></internal> Used by <page>Panel:ApplyGWEN</page> to apply the `HorizontalAlign` property to a  panel object. This calls <page>Panel:SetContentAlignment</page>.",
        "name": "GWEN_SetHorizontalAlign",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/derma/derma_gwen.lua",
          "lineEnd": 212,
          "lineStart": 208
        }
      },
      {
        "arguments": [
          {
            "description": "A four-membered table containing the margins as numbers:\n* <page>number</page> left - The left margin.\n* <page>number</page> top - The top margin.\n* <page>number</page> right - The right margin.\n* <page>number</page> bottom - The bottom margin.",
            "name": "margins",
            "type": "table"
          }
        ],
        "description": "<internal></internal> Used by <page>Panel:ApplyGWEN</page> to apply the `Margin` property to a  panel object. This calls <page>Panel:DockMargin</page>.",
        "name": "GWEN_SetMargin",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/derma/derma_gwen.lua",
          "lineStart": 205
        }
      },
      {
        "arguments": [
          {
            "description": "The maximum value the element is to permit.",
            "name": "maxValue",
            "type": "number"
          }
        ],
        "description": "<internal></internal> Used by <page>Panel:ApplyGWEN</page> to apply the `Max` property to a  <page>DNumberWang</page>, <page>Slider</page>, <page>DNumSlider</page> or <page>DNumberScratch</page>. This calls `SetMax` on one of the previously listed methods.",
        "name": "GWEN_SetMax",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/derma/derma_gwen.lua",
          "lineStart": 207
        }
      },
      {
        "arguments": [
          {
            "description": "The minimum value the element is to permit.",
            "name": "minValue",
            "type": "number"
          }
        ],
        "description": "<internal></internal> Used by <page>Panel:ApplyGWEN</page> to apply the `Min` property to a  <page>DNumberWang</page>, <page>Slider</page>, <page>DNumSlider</page> or <page>DNumberScratch</page>. This calls `SetMin` on one of the previously listed methods.",
        "name": "GWEN_SetMin",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/derma/derma_gwen.lua",
          "lineStart": 206
        }
      },
      {
        "arguments": [
          {
            "description": "A two-membered table containing the x and y coordinates as numbers:\n* <page>number</page> x - The x coordinate.\n* <page>number</page> y - The y coordinate.",
            "name": "pos",
            "type": "table"
          }
        ],
        "description": "<internal></internal> Used by <page>Panel:ApplyGWEN</page> to apply the `Position` property to a  panel object. This calls <page>Panel:SetPos</page>.",
        "name": "GWEN_SetPosition",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/derma/derma_gwen.lua",
          "lineStart": 201
        }
      },
      {
        "arguments": [
          {
            "description": "A two-membered table containing the width and heights as numbers:\n* <page>number</page> w - The width.\n* <page>number</page> h - The height.",
            "name": "size",
            "type": "table"
          }
        ],
        "description": "<internal></internal> Used by <page>Panel:ApplyGWEN</page> to apply the `Size` property to a  panel object. This calls <page>Panel:SetSize</page>.",
        "name": "GWEN_SetSize",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/derma/derma_gwen.lua",
          "lineStart": 202
        }
      },
      {
        "arguments": [
          {
            "description": "The text to be applied to the panel.",
            "name": "txt",
            "type": "string"
          }
        ],
        "description": "<internal></internal> Used by <page>Panel:ApplyGWEN</page> to apply the `Text` property to a panel.",
        "name": "GWEN_SetText",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/derma/derma_gwen.lua",
          "lineStart": 203
        }
      },
      {
        "description": "Returns whenever the panel has child panels.",
        "name": "HasChildren",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "hasChilds",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns if the panel is focused.",
        "name": "HasFocus",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "hasFocus",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns if the panel or any of its children(sub children and so on) has the focus.",
        "name": "HasHierarchicalFocus",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "hasHierarchicalFocus",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "parentPanel",
            "type": "Panel"
          }
        ],
        "description": "Returns whether the panel is a descendent of the given panel.",
        "name": "HasParent",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "True if the panel is contained within parentPanel.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Makes a panel invisible.",
        "name": "Hide",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 608,
          "lineStart": 606
        }
      },
      {
        "description": "Marks the end of a clickable text segment in a <page>RichText</page> element, started with <page>Panel:InsertClickableTextStart</page>.",
        "name": "InsertClickableTextEnd",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The text passed as the action signal's value.",
            "name": "signalValue",
            "type": "string"
          }
        ],
        "description": "Starts the insertion of clickable text for a <page>RichText</page> element. Any text appended with <page>Panel:AppendText</page> between this call and <page>Panel:InsertClickableTextEnd</page> will become clickable text.\n\nThe hook <page>PANEL:OnTextClicked</page> is called when the text is clicked.\n\n<note>The clickable text is a separate Derma panel which will not inherit the current font from the `RichText`.</note>",
        "name": "InsertClickableTextStart",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The red value `(0 - 255)`.",
            "name": "r",
            "type": "number"
          },
          {
            "description": "The green value `(0 - 255)`.",
            "name": "g",
            "type": "number"
          },
          {
            "description": "The blue value `(0 - 255)`.",
            "name": "b",
            "type": "number"
          },
          {
            "description": "The alpha value `(0 - 255)`.",
            "name": "a",
            "type": "number"
          }
        ],
        "description": "Inserts a color change in a <page>RichText</page> element, which affects the color of all text added with <page>Panel:AppendText</page> until another color change is applied.",
        "name": "InsertColorChange",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The number of seconds the text remains visible.",
            "name": "sustain",
            "type": "number"
          },
          {
            "description": "The number of seconds it takes the text to fade out.\n\nIf set **lower** than `sustain`, the text will not begin fading out until (`sustain` - `length`) seconds have passed.\n\nIf set **higher** than `sustain`, the text will begin fading out immediately at a fraction of the base alpha.\n\nIf set to **-1**, the text doesn't fade out.",
            "name": "length",
            "type": "number"
          }
        ],
        "description": "Begins a text fade for a <page>RichText</page> element where the last appended text segment is fully faded out after a specific amount of time, at a specific speed.\n\nThe alpha of the text at any given time is determined by the text's base alpha * ((`sustain` - <page>Global.CurTime</page>) / `length`) where <page>Global.CurTime</page> is added to `sustain` when this method is called.",
        "name": "InsertFade",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "default": "false",
            "description": "If `true`, the method will recursively invalidate the layout of all children. Otherwise, only immediate children are affected.",
            "name": "recursive",
            "type": "boolean"
          }
        ],
        "description": "Invalidates the layout of this panel object and all its children. This will cause these objects to re-layout immediately, calling <page>PANEL:PerformLayout</page>. If you want to perform the layout in the next frame, you will have loop manually through all children, and call <page>Panel:InvalidateLayout</page> on each.",
        "name": "InvalidateChildren",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 487,
          "lineStart": 473
        }
      },
      {
        "arguments": [
          {
            "default": "false",
            "description": "If true the panel will re-layout instantly and not wait for the next frame.",
            "name": "layoutNow",
            "type": "boolean"
          }
        ],
        "description": "Causes the panel to re-layout in the next frame. During the layout process  <page>PANEL:PerformLayout</page> will be called on the target panel.\n\nYou should avoid calling this function every frame.\n\n<bug issue=\"2574\">Using this on a panel after clicking on a docked element will cause docked elements to reorient themselves incorrectly. This can be fixed by assigning a unique <page>Panel:SetZPos</page> to each docked element.</bug>",
        "name": "InvalidateLayout",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "default": "false",
            "description": "If `true`, the re-layout will occur immediately, otherwise it will be performed in the next frame.",
            "name": "layoutNow",
            "type": "boolean"
          }
        ],
        "description": "Calls <page>Panel:InvalidateLayout</page> on the panel's <page text=\"parent\">Panel:GetParent</page>. This function will silently fail if the panel has no parent.\n\nThis will cause the parent panel to re-layout, calling <page>PANEL:PerformLayout</page>.\n\nInternally sets `LayingOutParent` to `true` on this panel, and will silently fail if it is already set.",
        "name": "InvalidateParent",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 260,
          "lineStart": 250
        }
      },
      {
        "arguments": [
          {
            "default": "false",
            "description": "Set to true to check only the immediate children of given panel ( first level )",
            "name": "immediate",
            "type": "boolean"
          }
        ],
        "description": "Determines whether the mouse cursor is hovered over one of this panel object's children. This is a reverse process using <page>vgui.GetHoveredPanel</page>, and looks upward to find the parent.",
        "name": "IsChildHovered",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether or not one of this panel object's children is being hovered over.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 621,
          "lineStart": 610
        }
      },
      {
        "description": "Returns whether this panel is draggable ( if user is able to drag it ) or not.",
        "name": "IsDraggable",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether this panel is draggable ( if user is able to drag it ) or not.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/dragdrop.lua",
          "lineEnd": 365,
          "lineStart": 361
        }
      },
      {
        "description": "Returns whether this panel is currently being dragged or not.",
        "name": "IsDragging",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether this panel is currently being dragged or not.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/dragdrop.lua",
          "lineEnd": 373,
          "lineStart": 367
        }
      },
      {
        "description": "Returns whether the the panel is enabled or disabled.\n\nSee <page>Panel:SetEnabled</page> for a function that makes the panel enabled or disabled.",
        "name": "IsEnabled",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether the panel is enabled or disabled.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the mouse cursor is hovering over this panel or not\n\nUses <page>vgui.GetHoveredPanel</page> internally.\n\nRequires <page>Panel:SetMouseInputEnabled</page> to be set to true.",
        "name": "IsHovered",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "true if the panel is hovered",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 600,
          "lineStart": 598
        }
      },
      {
        "description": "Returns true if the panel can receive keyboard input.",
        "name": "IsKeyboardInputEnabled",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "keyboardInputEnabled",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Determines whether or not a <page>HTML</page> or <page>DHTML</page> element is currently loading a page.\n\n<note>Before calling <page>Panel:SetHTML</page> or <page>DHTML:OpenURL</page>, the result seems to be `false` with the Awesomium web renderer and `true` for the Chromium web renderer. This difference can be used to determine the available HTML5 capabilities.</note>\n<note>On Awesomium, the result remains `true` until the root document is loaded and when in-page content is loading (when adding pictures, frames, etc.). During this state, the HTML texture is not refreshed and the panel is not painted (it becomes invisible).\n\nOn Chromium, the value is only `true` when the root document is not ready. The rendering is not suspended when in-page elements are loading.</note>",
        "name": "IsLoading",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether or not the (D)HTML object is loading.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns if the panel is going to be deleted in the next frame.",
        "name": "IsMarkedForDeletion",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "markedForDeletion",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the panel was made modal or not. See <page>Panel:DoModal</page>.",
        "name": "IsModal",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "True if the panel is modal.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns true if the panel can receive mouse input.",
        "name": "IsMouseInputEnabled",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "mouseInputEnabled",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Determines whether or not a <page>TextEntry</page> panel is in multi-line mode. This is set with <page>Panel:SetMultiline</page>.",
        "name": "IsMultiline",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether the object is in multi-line mode or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "childPanel",
            "type": "Panel"
          }
        ],
        "description": "Returns whether the panel contains the given panel, recursively.",
        "name": "IsOurChild",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "True if the panel contains childPanel.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 495,
          "lineStart": 489
        }
      },
      {
        "description": "Returns if the panel was made popup or not. See <page>Panel:MakePopup</page>",
        "name": "IsPopup",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "`true` if the panel was made popup.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Determines if the panel object is selectable (like icons in the Spawn Menu, holding <key>Shift</key>). This is set with <page>Panel:SetSelectable</page>.",
        "name": "IsSelectable",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether the panel is selectable or not.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/selections.lua",
          "lineEnd": 70,
          "lineStart": 66
        }
      },
      {
        "description": "Returns if the panel object is selected (like icons in the Spawn Menu, holding <key>Shift</key>). This can be set in Lua using <page>Panel:SetSelected</page>.",
        "name": "IsSelected",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether the panel object is selected or not. Always returns false if the object is not selectable. This can be modified using <page>Panel:SetSelectable</page>.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/selections.lua",
          "lineEnd": 64,
          "lineStart": 59
        }
      },
      {
        "description": "Determines if the panel object is a selection canvas or not. This is set with <page>Panel:SetSelectionCanvas</page>.",
        "name": "IsSelectionCanvas",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The value (if any) set by <page>Panel:SetSelectionCanvas</page>.",
            "type": "any"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/selections.lua",
          "lineEnd": 21,
          "lineStart": 17
        }
      },
      {
        "description": "Returns if the panel is valid and not marked for deletion.",
        "name": "IsValid",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "True if the object is valid.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns if the panel is visible. This will **NOT** take into account visibility of the parent.",
        "name": "IsVisible",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "`true` if the panel ls visible, `false` otherwise.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns if a panel allows world clicking set by <page>Panel:SetWorldClicker</page>.",
        "name": "IsWorldClicker",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "If the panel allows world clicking.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Remove the focus from the panel.",
        "name": "KillFocus",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The speed at which to move the panel. This is affected by the value of `easeOut`. Recommended values are:\n* **0.1 - 10** when `easeOut` is `false`.\n* **0.1 - 1** when `easeOut` is `true`.",
            "name": "speed",
            "type": "number"
          },
          {
            "description": "This causes the panel object to 'jump' at the target, slowing as it approaches. This affects the `speed` value significantly, see above.",
            "name": "easeOut",
            "type": "boolean"
          }
        ],
        "description": "Redefines the panel object's <page>Panel:SetPos</page> method to operate using frame-by-frame linear interpolation (<page>Global.Lerp</page>). When the panel's position is changed, it will move to the target position at the speed defined. You can undo this with <page>Panel:DisableLerp</page>.\n\nUnlike the other panel animation functions, such as <page>Panel:MoveTo</page>, this animation method will not operate whilst the game is paused. This is because it relies on <page>Global.FrameTime</page>.",
        "name": "LerpPositions",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/animation.lua",
          "lineEnd": 354,
          "lineStart": 338
        }
      },
      {
        "arguments": [
          {
            "description": "The path to load the controls from.",
            "name": "path",
            "type": "string"
          }
        ],
        "description": "<deprecated></deprecated>\n<internal></internal>\nSimilar to <page>Panel:LoadControlsFromString</page> but loads controls from a file.",
        "name": "LoadControlsFromFile",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The data to load controls from. Format unknown.",
            "name": "data",
            "type": "string"
          }
        ],
        "description": "<deprecated></deprecated>\n<internal></internal>\nLoads controls(positions, etc) from given data. This is what the default options menu uses.",
        "name": "LoadControlsFromString",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The file to open. The path is relative to garrysmod/garrysmod/.",
            "name": "filename",
            "type": "string"
          },
          {
            "default": "GAME",
            "description": "The path used to look up the file.\n\n* \"GAME\" Structured like base folder (garrysmod/), searches all the mounted content (main folder, addons, mounted games etc)\n* \"LUA\" or \"lsv\" - All Lua folders (lua/) including gamesmodes and addons\n* \"DATA\" Data folder (garrysmod/data)\n* \"MOD\" Strictly the game folder (garrysmod/), ignores mounting.",
            "name": "path",
            "type": "string"
          }
        ],
        "description": "Loads a .gwen file (created by GWEN Designer) and calls <page>Panel:LoadGWENString</page> with the contents of the loaded file.\n\nUsed to load panel controls from a file.",
        "name": "LoadGWENFile",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/derma/derma_gwen.lua",
          "lineEnd": 133,
          "lineStart": 126
        }
      },
      {
        "arguments": [
          {
            "description": "JSON string containing information about controls to create.",
            "name": "str",
            "type": "string"
          }
        ],
        "description": "Loads controls for the panel from a JSON string.",
        "name": "LoadGWENString",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/derma/derma_gwen.lua",
          "lineEnd": 146,
          "lineStart": 138
        }
      },
      {
        "arguments": [
          {
            "description": "The file path.",
            "name": "imageName",
            "type": "string"
          },
          {
            "description": "The PATH to search in. See <page>File Search Paths</page>.\n\nThis isn't used internally.",
            "name": "strPath",
            "type": "string"
          }
        ],
        "description": "Sets a new image to be loaded by a <page>TGAImage</page>.",
        "name": "LoadTGAImage",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Returns the cursor position local to the position of the panel (usually the upper-left corner).",
        "name": "LocalCursorPos",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The x coordinate",
            "type": "number"
          },
          {
            "description": "The y coordinate",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 542,
          "lineStart": 540
        }
      },
      {
        "arguments": [
          {
            "description": "The X coordinate of the position on the panel to translate.",
            "name": "posX",
            "type": "number"
          },
          {
            "description": "The Y coordinate of the position on the panel to translate.",
            "name": "posY",
            "type": "number"
          }
        ],
        "description": "Takes X and Y coordinates relative to the panel and returns their corresponding positions relative to the screen.\n\nSee also <page>Panel:ScreenToLocal</page>.\n\n<warning>This function uses a cached value for the screen position of the panel, computed at the end of the last VGUI Think/Layout pass, so inaccurate results may be returned if the panel or any of its ancestors have been re-positioned outside of <page>PANEL:Think</page> or <page>PANEL:PerformLayout</page> within the last frame.</warning>\n\n<note>If the panel uses <page>Panel:Dock</page>, this function will return 0, 0 when the panel was created. The position will be updated in the next frame.</note>",
        "name": "LocalToScreen",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The X coordinate relative to the screen.",
            "type": "number"
          },
          {
            "description": "The Y coordinate relative to the screen.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Focuses the panel and enables it to receive input.\n\nThis automatically calls <page>Panel:SetMouseInputEnabled</page> and <page text=\"Panel:SetKeyboardInputEnabled\">Panel:SetKeyboardInputEnabled(lowercase)</page> and sets them to `true`.\n\n<note>Panels derived from <page>Panel</page> will not work properly with this function. Due to this, any children will not be intractable with keyboard. Derive from <page>EditablePanel</page> instead.\n\nFor non gui related mouse focus, you can use <page>gui.EnableScreenClicker</page>.</note>",
        "name": "MakePopup",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Set to true to enable, set to false to disable.",
            "name": "doCapture",
            "type": "boolean"
          }
        ],
        "description": "Allows the panel to receive mouse input even if the mouse cursor is outside the bounds of the panel.",
        "name": "MouseCapture",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Panel to position relatively to.",
            "name": "panel",
            "type": "Panel"
          },
          {
            "default": "0",
            "description": "The align offset.",
            "name": "offset",
            "type": "number"
          }
        ],
        "description": "Places the panel above the passed panel with the specified offset.",
        "name": "MoveAbove",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 137,
          "lineStart": 137
        }
      },
      {
        "arguments": [
          {
            "description": "Panel to position relatively to.",
            "name": "panel",
            "type": "Panel"
          },
          {
            "default": "0",
            "description": "The align offset.",
            "name": "offset",
            "type": "number"
          }
        ],
        "description": "Places the panel below the passed panel with the specified offset.",
        "name": "MoveBelow",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 138,
          "lineStart": 138
        }
      },
      {
        "arguments": [
          {
            "description": "The number of pixels to move by in the horizontal (x) direction.",
            "name": "moveX",
            "type": "number"
          },
          {
            "description": "The number of pixels to move by in the vertical (y) direction.",
            "name": "moveY",
            "type": "number"
          },
          {
            "description": "The time (in seconds) in which to perform the animation.",
            "name": "time",
            "type": "number"
          },
          {
            "default": "0",
            "description": "The delay (in seconds) before the animation begins.",
            "name": "delay",
            "type": "number"
          },
          {
            "default": "-1",
            "description": "The easing of the start and/or end speed of the animation. See <page>Panel:NewAnimation</page> for how this works.",
            "name": "ease",
            "type": "number"
          },
          {
            "default": "nil",
            "description": "The function to be called once the animation is complete.\n<callback>\n<arg type=\"table\" name=\"animData\">The <page>Structures/AnimationData</page> that was used.</arg>\n<arg type=\"Panel\" name=\"targetPanel\">The panel object that was animated.</arg>\n</callback>",
            "name": "callback",
            "type": "function"
          }
        ],
        "description": "Moves the panel by the specified coordinates using animation.",
        "name": "MoveBy",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/animation.lua",
          "lineEnd": 292,
          "lineStart": 286
        }
      },
      {
        "arguments": [
          {
            "description": "Panel to position relatively to.",
            "name": "panel",
            "type": "Panel"
          },
          {
            "default": "0",
            "description": "The align offset.",
            "name": "offset",
            "type": "number"
          }
        ],
        "description": "Places the panel left to the passed panel with the specified offset.",
        "name": "MoveLeftOf",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 140,
          "lineStart": 140
        }
      },
      {
        "arguments": [
          {
            "description": "Panel to position relatively to.",
            "name": "panel",
            "type": "Panel"
          },
          {
            "default": "0",
            "description": "The align offset.",
            "name": "offset",
            "type": "number"
          }
        ],
        "description": "Places the panel right to the passed panel with the specified offset.",
        "name": "MoveRightOf",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 139,
          "lineStart": 139
        }
      },
      {
        "arguments": [
          {
            "description": "The target x coordinate of the panel.",
            "name": "posX",
            "type": "number"
          },
          {
            "description": "The target y coordinate of the panel.",
            "name": "posY",
            "type": "number"
          },
          {
            "description": "The time to perform the animation within.",
            "name": "time",
            "type": "number"
          },
          {
            "default": "0",
            "description": "The delay before the animation starts.",
            "name": "delay",
            "type": "number"
          },
          {
            "default": "-1",
            "description": "The easing of the start and/or end speed of the animation. See <page>Panel:NewAnimation</page> for how this works.",
            "name": "ease",
            "type": "number"
          },
          {
            "default": "nil",
            "description": "The function to be called once the animation finishes.\n<callback>\n<arg type=\"table\" name=\"animData\">The <page>Structures/AnimationData</page> that was used.</arg>\n<arg type=\"Panel\" name=\"targetPanel\">The panel object that was animated.</arg>\n</callback>",
            "name": "callback",
            "type": "function"
          }
        ],
        "description": "Moves the panel to the specified position using animation.\n<note>Setting the ease argument to 0 will result in the animation happening instantly, this applies to all MoveTo/SizeTo functions</note>",
        "name": "MoveTo",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/animation.lua",
          "lineEnd": 157,
          "lineStart": 146
        }
      },
      {
        "arguments": [
          {
            "description": "The panel to move this one in front of. Must be a child of the same parent panel.",
            "name": "siblingPanel",
            "type": "Panel"
          }
        ],
        "description": "Moves this panel object in front of the specified sibling (child of the same parent) in the render order, and shuffles up the Z-positions of siblings now behind.",
        "name": "MoveToAfter",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "`false` if the passed panel is not a sibling, otherwise `nil`.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 565,
          "lineStart": 544
        }
      },
      {
        "description": "Moves the panel object behind all other panels on screen. If the panel has been made a pop-up with <page>Panel:MakePopup</page>, it will still draw in front of any panels that haven't.",
        "name": "MoveToBack",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The panel to move this one behind. Must be a child of the same parent panel.",
            "name": "siblingPanel",
            "type": "Panel"
          }
        ],
        "description": "Moves this panel object behind the specified sibling (child of the same parent) in the render order, and shuffles up the <page>Panel:SetZPos</page> of siblings now in front.",
        "name": "MoveToBefore",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "`false` if the passed panel is not a sibling, otherwise `nil`.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 588,
          "lineStart": 567
        }
      },
      {
        "description": "Moves the panel in front of all other panels on screen. Unless the panel has been made a pop-up using <page>Panel:MakePopup</page>, it will still draw behind any that have.",
        "name": "MoveToFront",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The length of the animation in seconds.",
            "name": "length",
            "type": "number"
          },
          {
            "default": "0",
            "description": "The delay before the animation starts.",
            "name": "delay",
            "type": "number"
          },
          {
            "default": "-1",
            "description": "The power/index to use for easing.\n* Positive values greater than 1 will ease in; the higher the number, the sharper the curve's gradient (less linear).\n* A value of 1 removes all easing.\n* Positive values between 0 and 1 ease out; values closer to 0 increase the curve's gradient (less linear).\n* A value of 0 will break the animation and should be avoided.\n* Any value less than zero will ease in/out; the value has no effect on the gradient.",
            "name": "ease",
            "type": "number"
          },
          {
            "default": "nil",
            "description": "The function to be called when the animation ends.\n\n<callback>\n<arg type=\"table\" name=\"animData\">The <page>Structures/AnimationData</page> that was used.</arg>\n<arg type=\"Panel\" name=\"targetPanel\">The panel object that was animated.</arg>\n</callback>",
            "name": "callback",
            "type": "function"
          }
        ],
        "description": "Creates a new animation for the panel object.\n\nMethods that use this function:\n* <page>Panel:MoveTo</page>\n* <page>Panel:SizeTo</page>\n* <page>Panel:SlideUp</page>\n* <page>Panel:SlideDown</page>\n* <page>Panel:ColorTo</page>\n* <page>Panel:AlphaTo</page>\n* <page>Panel:MoveBy</page>\n* <page>Panel:LerpPositions</page>",
        "name": "NewAnimation",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Partially filled <page>Structures/AnimationData</page> with the following members:\n* <page>number</page> **EndTime** - Equal to `length` and `delay` arguments added together, plus either the <page>Global.SysTime</page> if there is no other animation queued or the end time of the last animation in the queue.\n* <page>number</page> **StartTime** - Equal to the `delay` argument, plus either the <page>Global.SysTime</page> if there is no other animation queued or the end time of the last animation in the queue.\n* <page>number</page> **Ease** - Equal to the `ease` argument.\n* <page>function</page> **OnEnd** - Equal to the `callback` argument.",
            "type": "table"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/animation.lua",
          "lineEnd": 136,
          "lineStart": 102
        }
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "objectName",
            "type": "string"
          }
        ],
        "description": "<internal></internal>",
        "name": "NewObject",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "objectName",
            "type": "string"
          },
          {
            "description": "",
            "name": "callbackName",
            "type": "string"
          }
        ],
        "description": "<internal></internal>",
        "name": "NewObjectCallback",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether to disable clipping or not. `true` to disable clipping, `false` to enable clipping.",
            "name": "disableClipping",
            "type": "boolean"
          }
        ],
        "description": "Sets whether this panel's drawings should be clipped within the parent panel's bounds.\n\nSee <page>render.SetScissorRect</page> if you wish to set the clipping rect instead.\n\n<note>\nThis only disabled clipping for the Paint Related functions (as far as i can tell at the current moment, more testing should be done) so things like the text of a <page>DLabel</page> will still be clipped to the parent.\n\nTo fully disable the clipping of any children see <page>Global.DisableClipping</page>.\n</note>",
        "name": "NoClipping",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Returns the number of children of the panel object that are selected. This is equivalent to calling <page>Panel:IsSelected</page> on all child objects and counting the number of returns that are `true`.",
        "name": "NumSelectedChildren",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The number of child objects that are currently selected. This does not include the parent object you are calling the method from.",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/selections.lua",
          "lineEnd": 221,
          "lineStart": 207
        }
      },
      {
        "arguments": [
          {
            "description": "URL to open. It has to start or be one of the following:\n* `http://`\n* `https://`\n* `asset://`\n* `about:blank`\n* `chrome://credits/`",
            "name": "URL",
            "type": "string"
          }
        ],
        "description": "Instructs a HTML control to download and parse a HTML script using the passed URL.\n\nThis function can only be used on [HTML](HTML) panel and its derivatives.",
        "name": "OpenURL",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The x coordinate to draw the panel from.",
            "name": "posX",
            "type": "number"
          },
          {
            "description": "The y coordinate to draw the panel from.",
            "name": "posY",
            "type": "number"
          }
        ],
        "description": "Paints a ghost copy of the panel at the given position.\n<warning>\nThis function sets Z pos of panel's children (<page>PANEL:SetZPos</page>). It also briefly unparents and reparents the panel.\n</warning>",
        "name": "PaintAt",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "default": "false",
            "description": "If set, overrides panels' clipping so that it can render fully when its size is larger than the game's resolution.",
            "name": "unclamp",
            "type": "boolean"
          }
        ],
        "description": "Paints the panel at its current position. To use this you must call <page>Panel:SetPaintedManually</page>(true).",
        "name": "PaintManual",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Parents the panel to the HUD.\nMakes it invisible on the escape-menu and disables controls.",
        "name": "ParentToHUD",
        "parent": "Panel",
        "realms": [
          "client"
        ]
      },
      {
        "description": "<deprecated>Due to privacy concerns, this function has been disabled</deprecated>\n\nOnly works for TextEntries.\n\nPastes the contents of the clipboard into the TextEntry.\n\n<note>Tab characters will be dropped from the pasted text</note>",
        "name": "Paste",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The width to set the label to.",
            "name": "lblWidth",
            "type": "number"
          },
          {
            "description": "The horizontal (x) position at which to place the label.",
            "name": "x",
            "type": "number"
          },
          {
            "description": "The vertical (y) position at which to place the label.",
            "name": "y",
            "type": "number"
          },
          {
            "description": "The label to resize and position.",
            "name": "lbl",
            "type": "Panel"
          },
          {
            "description": "The panel object to place to the right of the label.",
            "name": "panelObj",
            "type": "Panel"
          }
        ],
        "description": "Sets the width and position of a <page>DLabel</page> and places the passed panel object directly to the right of it. Returns the `y` value of the bottom of the tallest object. The panel on which this method is run is not relevant; only the passed objects are affected.",
        "name": "PositionLabel",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The distance from the top of the parent panel to the bottom of the tallest object (the `y` position plus the height of the label or passed panel, depending on which is tallest).",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 275,
          "lineStart": 262
        }
      },
      {
        "description": "<internal></internal>\nInstalls Lua defined functions into the panel.",
        "name": "Prepare",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Enables the queue for panel animations. If enabled, the next new animation will begin after all current animations have ended. This must be called before <page>Panel:NewAnimation</page> to work, and only applies to the next new animation. If you want to queue many, you must call this before each.",
        "name": "Queue",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/animation.lua",
          "lineEnd": 88,
          "lineStart": 84
        }
      },
      {
        "description": "Causes a <page>SpawnIcon</page> to rebuild its model image.",
        "name": "RebuildSpawnIcon",
        "parent": "Panel",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "A four-membered table containing the information needed to re-render:\n* <page>Vector</page> cam_pos - The relative camera position the model is viewed from.\n* <page>Angle</page> cam_ang - The camera angle the model is viewed from.\n* <page>number</page> cam_fov - The camera's field of view (FOV).\n* <page>Entity</page> ent - The entity object of the model.\nSee the example below for how to retrieve these values.",
            "name": "data",
            "type": "table"
          }
        ],
        "description": "Re-renders a spawn icon with customized cam data.\n\n<page>Global.PositionSpawnIcon</page> can be used to easily calculate the necessary camera parameters.\n\n<note>This function does **not** accept the standard <page>Structures/CamData</page>.</note>",
        "name": "RebuildSpawnIconEx",
        "parent": "Panel",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "Name of DnD panels to receive. This is set on the drag'n'drop-able panels via  <page>Panel:Droppable</page>",
            "name": "name",
            "type": "string"
          },
          {
            "description": "This function is called whenever a panel with valid name is hovering above and dropped on this panel.\n\n<callback>\n<arg type=\"Panel\" name=\"pnl\">The receiver panel</arg>\n<arg type=\"table\" name=\"tbl\">A table of panels dropped onto receiver panel</arg>\n<arg type=\"boolean\" name=\"dropped\">False if hovering over, true if dropped onto</arg>\n<arg type=\"number\" name=\"menuIndex\">Index of clicked menu item from third argument of <page>Panel:Receiver</page></arg>\n<arg type=\"number\" name=\"x\">Cursor pos, relative to the receiver</arg>\n<arg type=\"number\" name=\"y\">Cursor pos, relative to the receiver</arg>\n</callback>",
            "name": "func",
            "type": "function"
          },
          {
            "default": "nil",
            "description": "A table of strings that will act as a menu if drag'n'drop was performed with a right click",
            "name": "menu",
            "type": "table"
          }
        ],
        "description": "Allows the panel to receive drag and drop events. Can be called multiple times with different names to receive multiple different draggable panel events.",
        "name": "Receiver",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/dragdrop.lua",
          "lineEnd": 324,
          "lineStart": 315
        }
      },
      {
        "arguments": [
          {
            "default": "false",
            "description": "If true, the refresh will ignore cached content similar to \"ctrl+f5\" in most browsers.",
            "name": "ignoreCache",
            "type": "boolean"
          }
        ],
        "description": "Refreshes the HTML panel's current page.",
        "name": "Refresh",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Marks a panel for deletion so it will be deleted on the next frame.\n\nThis will not mark child panels for deletion this frame, but they will be marked and deleted in the next frame.\n\nSee also <page>Panel:IsMarkedForDeletion</page>\n\nWill automatically call <page>Panel:InvalidateParent</page>.",
        "name": "Remove",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Attempts to obtain focus for this panel.",
        "name": "RequestFocus",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "True to reset fades, false otherwise.",
            "name": "hold",
            "type": "boolean"
          },
          {
            "description": "Any value equating to `true` will reset fades only on text segments that are completely faded out.",
            "name": "expiredOnly",
            "type": "boolean"
          },
          {
            "description": "The new sustain value of each faded text segment. Set to -1 to keep the old sustain value.",
            "name": "newSustain",
            "type": "number"
          }
        ],
        "description": "Resets all text fades in a <page>RichText</page> element made with <page>Panel:InsertFade</page>.",
        "name": "ResetAllFades",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Specify JavaScript code to be executed.",
            "name": "js",
            "type": "string"
          }
        ],
        "description": "Executes a string as JavaScript code on a web document panel.\n\n<note>This function does **NOT** allow you to pass variables from JavaScript (JS) to Lua context.\nIf you wish to pass/return values from JS to Lua, you may want to use <page>DHTML:AddFunction</page> function to accomplish that job.</note>\n\n<note>The Awesomium web renderer automatically delays the code execution if the document is not ready, but the Chromium web renderer does not!\n\nThis means that with Chromium, you cannot JavaScript run code immediatly after calling <page>Panel:SetHTML</page> or <page>Panel:OpenURL</page>. You should wait for the events <page>PANEL:OnDocumentReady</page> or <page>PANEL:OnFinishLoadingDocument</page> to be triggered before proceeding, otherwise you may manipulate an empty / incomplete document.</note>",
        "name": "RunJavascript",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Saves the current state (caret position and the text inside) of a <page>TextEntry</page> as an undo state.\n\nSee also <page>Panel:Undo</page>.",
        "name": "SaveUndoState",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The x coordinate of the screen position to be translated.",
            "name": "screenX",
            "type": "number"
          },
          {
            "description": "The y coordinate of the screed position be to translated.",
            "name": "screenY",
            "type": "number"
          }
        ],
        "description": "Translates global screen coordinate to coordinates relative to the panel.\n\nSee also <page>Panel:LocalToScreen</page>.\n\n<warning>This function uses a cached value for the screen position of the panel, computed at the end of the last VGUI Think/Layout pass, so inaccurate results may be returned if the panel or any of its ancestors have been re-positioned outside of <page>PANEL:Think</page> or <page>PANEL:PerformLayout</page> within the last frame.</warning>",
        "name": "ScreenToLocal",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Relativeposition X",
            "type": "number"
          },
          {
            "description": "Relativeposition Y",
            "type": "number"
          }
        ]
      },
      {
        "description": "Selects all items within a panel or object. For text-based objects, selects all text.\n\n<note>Only works on <page>RichText</page> and <page>TextEntry</page> and their derived panels by default (such as <page>DTextEntry</page>), and on any panel that manually reimplemented this method.</note>",
        "name": "SelectAll",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "If called on a <page>TextEntry</page>, clicking the text entry for the first time will automatically select all of the text ready to be copied by the user.",
        "name": "SelectAllOnFocus",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Reset cursor pos?",
            "name": "resetCursorPos",
            "type": "boolean"
          }
        ],
        "description": "<deprecated>Duplicate of <page>Panel:SelectAll</page>.</deprecated>\n\nSelects all the text in a panel object. Will not select non-text items; for this, use <page>Panel:SelectAll</page>.",
        "name": "SelectAllText",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Deselects all items in a panel object. For text-based objects, this will deselect all text.\n\n<note>Only works on <page>RichText</page> and <page>TextEntry</page> and their derived panels by default (such as <page>DTextEntry</page>), and on any panel that manually reimplemented this method.</note>",
        "name": "SelectNone",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Achievement number ID",
            "name": "id",
            "type": "number"
          }
        ],
        "description": "Sets the achievement to be displayed by <page>AchievementIcon</page>.",
        "name": "SetAchievement",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Set to true in order not to restrict input characters.",
            "name": "allowed",
            "type": "boolean"
          }
        ],
        "description": "Configures a <page>TextEntry</page> to allow user to type characters that are not included in the US-ASCII (7-bit ASCII) character set.\n\nCharacters not included in US-ASCII are multi-byte characters in UTF-8. They can be accented characters, non-Latin characters and special characters.",
        "name": "SetAllowNonAsciiCharacters",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The alpha value in the range of 0-255.",
            "name": "alpha",
            "type": "number"
          }
        ],
        "description": "Sets the alpha multiplier for the panel",
        "name": "SetAlpha",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether to enable or disable animations.",
            "name": "enable",
            "type": "boolean"
          }
        ],
        "description": "Enables or disables animations for the panel object by overriding the <page>PANEL:AnimationThink</page> hook to nil and back.",
        "name": "SetAnimationEnabled",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/animation.lua",
          "lineEnd": 76,
          "lineStart": 65
        }
      },
      {
        "arguments": [
          {
            "description": "Whenever to delete if the parent was removed or not.",
            "name": "autoDelete",
            "type": "boolean"
          }
        ],
        "description": "Sets whenever the panel should be removed if the parent was removed.",
        "name": "SetAutoDelete",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The red channel of the color, or a <page>Color</page>. If you pass the latter, the following three arguments are ignored.",
            "name": "r or color",
            "type": "number"
          },
          {
            "description": "The green channel of the color.",
            "name": "g",
            "type": "number"
          },
          {
            "description": "The blue channel of the color.",
            "name": "b",
            "type": "number"
          },
          {
            "description": "The alpha channel of the color.",
            "name": "a",
            "type": "number"
          }
        ],
        "description": "Sets the background color of a panel such as a <page>RichText</page>, <page>Label</page>, <page>DColorCube</page> or the base <page>Panel</page>.\n\nFor many panels, such as <page>DLabel</page> and <page>Panel</page>, you must use <page>Panel:SetPaintBackgroundEnabled</page>( true ) for the background to appear.\n\nPlease note that for most panels the engine will overwrite the foreground and background colors a frame after panel creation via the <page>PANEL:ApplySchemeSettings</page> hook, so you may want to set the color in that hook instead.\n\nSee <page>Panel:SetFGColor</page> for the foreground color.\n\n<note>This doesn't apply to all VGUI elements and its function varies between them</note>",
        "name": "SetBGColor",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 40,
          "lineStart": 32
        }
      },
      {
        "arguments": [
          {
            "description": "The red channel of the color.",
            "name": "r",
            "type": "number"
          },
          {
            "description": "The green channel of the color.",
            "name": "g",
            "type": "number"
          },
          {
            "description": "The blue channel of the color.",
            "name": "b",
            "type": "number"
          },
          {
            "description": "The alpha channel of the color.",
            "name": "a",
            "type": "number"
          }
        ],
        "description": "<internal></internal>Sets the background color of the panel.",
        "name": "SetBGColorEx",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Caret position/offset from the start of text. A value of `0` places the caret before the first character.",
            "name": "offset",
            "type": "number"
          }
        ],
        "description": "Sets the position of the caret (or text cursor) in a text-based panel object.",
        "name": "SetCaretPos",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The direction of the content, based on the number pad.\n\n<key>1</key>: **bottom-left** <br>\n<key>2</key>: **bottom-center** <br>\n<key>3</key>: **bottom-right** <br>\n<key>4</key>: **middle-left** <br>\n<key>5</key>: **center** <br>\n<key>6</key>: **middle-right** <br>\n<key>7</key>: **top-left** <br>\n<key>8</key>: **top-center** <br>\n<key>9</key>: **top-right** <br>\n<img src=\"DLabel_SetContentAlignment.gif\">",
            "name": "alignment",
            "type": "number"
          }
        ],
        "description": "Sets the alignment of the contents.\n\n<note>This function only works on <page>Label</page> panels and its derivatives.</note>\n<note>This function doesnt work, if <page>Panel:SetWrap</page> is true.</note>",
        "name": "SetContentAlignment",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The console variable to check.",
            "name": "convar",
            "type": "string"
          }
        ],
        "description": "<warning>This function does not exist on all panels</warning>\n<warning>This function cannot interact with serverside convars unless you are host</warning>\n<note>Blocked convars will not work with this, see <page>Blocked ConCommands</page></note>\n\nSets this panel's convar. When the convar changes this panel will update automatically.\n\nFor developer implementation, see <page>Global.Derma_Install_Convar_Functions</page>.",
        "name": "SetConVar",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The unique name used to retrieve the cookie later.",
            "name": "cookieName",
            "type": "string"
          },
          {
            "description": "The value to store in the cookie. This can be retrieved later as a <page>string</page> or <page>number</page>.",
            "name": "value",
            "type": "string"
          }
        ],
        "description": "Stores a string in the named cookie using <page>Panel:GetCookieName</page> as prefix.\n\nYou can also retrieve and modify this cookie by using the <page>cookie</page>. Cookies are stored in this format:\n\n```\npanelCookieName.cookieName\n```\n\n\n<warning>The panel's cookie name MUST be set for this function to work. See <page>Panel:SetCookieName</page>.</warning>",
        "name": "SetCookie",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 233,
          "lineStart": 226
        }
      },
      {
        "arguments": [
          {
            "description": "The panel's cookie name. Used as prefix for <page>Panel:SetCookie</page>, therefore should be a unique value.",
            "name": "name",
            "type": "string"
          }
        ],
        "description": "Sets the panel's cookie name. Calls <page>PANEL:LoadCookies</page> if defined.",
        "name": "SetCookieName",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 197,
          "lineStart": 187
        }
      },
      {
        "arguments": [
          {
            "description": "The cursor to be set. Can be one of the following:\n\n* [arrow](https://wiki.facepunch.com/gmod/Cursors#:~:text=arrow)\n* [beam](https://wiki.facepunch.com/gmod/Cursors#:~:text=beam)\n* [hourglass](https://wiki.facepunch.com/gmod/Cursors#:~:text=hourglass)\n* [waitarrow](https://wiki.facepunch.com/gmod/Cursors#:~:text=waitarrow)\n* [crosshair](https://wiki.facepunch.com/gmod/Cursors#:~:text=crosshair)\n* [up](https://wiki.facepunch.com/gmod/Cursors#:~:text=up)\n* [sizenwse](https://wiki.facepunch.com/gmod/Cursors#:~:text=sizenwse)\n* [sizenesw](https://wiki.facepunch.com/gmod/Cursors#:~:text=sizenesw)\n* [sizewe](https://wiki.facepunch.com/gmod/Cursors#:~:text=sizewe)\n* [sizens](https://wiki.facepunch.com/gmod/Cursors#:~:text=sizens)\n* [sizeall](https://wiki.facepunch.com/gmod/Cursors#:~:text=sizeall)\n* [no](https://wiki.facepunch.com/gmod/Cursors#:~:text=no)\n* [hand](https://wiki.facepunch.com/gmod/Cursors#:~:text=hand)\n* [blank](https://wiki.facepunch.com/gmod/Cursors#:~:text=blank)\n\nSet to anything else to set it to \"none\", the default fallback. Do note that a value of \"none\" does not, as one might assume, result in no cursor being drawn - hiding the cursor requires a value of \"blank\" instead.",
            "name": "cursor",
            "type": "string"
          }
        ],
        "description": "Sets the appearance of the cursor. You can find a list of all available cursors with image previews [here](https://wiki.facepunch.com/gmod/Cursors).",
        "name": "SetCursor",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The panel to set as drag parent.",
            "name": "parent",
            "type": "Panel"
          }
        ],
        "description": "Sets the drag parent.\n\nDrag parent means that when we start to drag this panel, we'll really start dragging the defined parent.",
        "name": "SetDragParent",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/dragdrop.lua",
          "lineEnd": 333,
          "lineStart": 331
        }
      },
      {
        "arguments": [
          {
            "description": "true to make it visible, false to hide it.",
            "name": "visible",
            "type": "boolean"
          }
        ],
        "description": "Sets the visibility of the language selection box when typing in non-English mode.\n\nSee <page>Panel:SetDrawLanguageIDAtLeft</page> for a function that changes the position of the language selection box.",
        "name": "SetDrawLanguageID",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "true = left, false = right",
            "name": "left",
            "type": "boolean"
          }
        ],
        "description": "Sets where to draw the language selection box.\n\nSee <page>Panel:SetDrawLanguageID</page> for a function that hides or shows the language selection box.",
        "name": "SetDrawLanguageIDAtLeft",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "default": "false",
            "description": "Whether or not to draw the panel in front of all others.",
            "name": "drawOnTop",
            "type": "boolean"
          }
        ],
        "description": "Makes the panel render in front of all others, including the spawn menu and main menu.\n\nPriority is given based on the last call, so of two panels that call this method, the second will draw in front of the first.\n\n<note>This only makes the panel **draw** above other panels. If there's another panel that would have otherwise covered it, users will not be able to interact with it.\n\nCompletely disregards <page>PANEL:ParentToHUD</page>.</note>\n\n<warning>This does not work when using <page>PANEL:SetPaintedManually</page> or <page>PANEL:PaintAt</page>.</warning>",
        "name": "SetDrawOnTop",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The x coordinate of the top-left corner of the drop area.",
            "name": "x",
            "type": "number"
          },
          {
            "description": "The y coordinate of the top-left corner of the drop area.",
            "name": "y",
            "type": "number"
          },
          {
            "description": "The width of the drop area.",
            "name": "width",
            "type": "number"
          },
          {
            "description": "The height of the drop area.",
            "name": "height",
            "type": "number"
          }
        ],
        "description": "Sets the target area for dropping when an object is being dragged around this panel using the <page>dragndrop</page>.\n\nThis draws a target box of the specified size and position, until <page>Panel:DragHoverEnd</page> is called. It uses <page>Panel:DrawDragHover</page> to draw this area.",
        "name": "SetDropTarget",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/dragdrop.lua",
          "lineEnd": 485,
          "lineStart": 468
        }
      },
      {
        "arguments": [
          {
            "description": "Whether to enable or disable the panel object.",
            "name": "enable",
            "type": "boolean"
          }
        ],
        "description": "Sets the enabled state of a disable-able panel object, such as a <page>DButton</page> or <page>DTextEntry</page>.\n\nSee <page>Panel:IsEnabled</page> for a function that retrieves the \"enabled\" state of a panel.",
        "name": "SetEnabled",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The distance of the shadow from the panel.",
            "name": "distance",
            "type": "number"
          },
          {
            "description": "The color of the shadow. Uses the <page>Color</page>.",
            "name": "Color",
            "type": "table"
          }
        ],
        "description": "Adds a shadow falling to the bottom right corner of the panel's text.\n\n<note>This works only on  panels that derive from <page>Label</page>.</note>",
        "name": "SetExpensiveShadow",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The red channel of the color, or a <page>Color</page>. If you pass the latter, the following three arguments are ignored.",
            "name": "r or color",
            "type": "number"
          },
          {
            "description": "The green channel of the color.",
            "name": "g",
            "type": "number"
          },
          {
            "description": "The blue channel of the color.",
            "name": "b",
            "type": "number"
          },
          {
            "description": "The alpha channel of the color.",
            "name": "a",
            "type": "number"
          }
        ],
        "description": "Sets the foreground color of a panel.\n\nFor a <page>Label</page> or <page>RichText</page>, this is the color of its text.\n\nThis function calls <page>Panel:SetFGColorEx</page> internally.\n\nPlease note that for most panels the engine will overwrite the foreground and background colors a frame after panel creation via the <page>PANEL:ApplySchemeSettings</page> hook, so you may want to set the color in that hook instead.\n\nSee <page>Panel:SetBGColor</page> for the background color.\n\n<note>This doesn't apply to all VGUI elements (such as <page>DLabel</page>) and its function varies between them</note>",
        "name": "SetFGColor",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 26,
          "lineStart": 18
        }
      },
      {
        "arguments": [
          {
            "description": "The red channel of the color.",
            "name": "r",
            "type": "number"
          },
          {
            "description": "The green channel of the color.",
            "name": "g",
            "type": "number"
          },
          {
            "description": "The blue channel of the color.",
            "name": "b",
            "type": "number"
          },
          {
            "description": "The alpha channel of the color.",
            "name": "a",
            "type": "number"
          }
        ],
        "description": "<internal></internal>Sets the foreground color of the panel.\n\nFor labels, this is the color of their text.",
        "name": "SetFGColorEx",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "state",
            "type": "boolean"
          }
        ],
        "description": "Sets the panel that owns this FocusNavGroup to be the root in the focus traversal hierarchy. This function will only work on EditablePanel class panels and its derivatives.\n\n<note>Child panels that should be part of the tab navigation need <page>Panel:SetTabPosition</page> called on them.</note>",
        "name": "SetFocusTopLevel",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the font.\n\nSee <page text=\"here\">Default_Fonts</page> for a list of existing fonts.\nAlternatively, use <page>surface.CreateFont</page> to create your own custom font.",
            "name": "fontName",
            "type": "string"
          }
        ],
        "description": "Sets the font used to render this panel's text. This works for <page>Label</page>, <page>TextEntry</page> and <page>RichText</page>, but it's a better idea to use their local `SetFont` (<page>DTextEntry:SetFont</page>, <page>DLabel:SetFont</page>) methods when available.\n\nTo retrieve the font used by a panel, call <page>Panel:GetFont</page>.",
        "name": "SetFontInternal",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The height to be set.",
            "name": "height",
            "type": "number"
          }
        ],
        "description": "Sets the height of the panel.\n\nCalls <page>PANEL:OnSizeChanged</page> and marks this panel for layout (<page>Panel:InvalidateLayout</page>).\n\n\nSee also <page>Panel:SetSize</page>.",
        "name": "SetHeight",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 47,
          "lineStart": 45
        }
      },
      {
        "arguments": [
          {
            "description": "The HTML code to set.",
            "name": "HTML",
            "type": "string"
          }
        ],
        "description": "Allows you to set HTML code within a panel.",
        "name": "SetHTML",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether keyboard input should be enabled for this panel.",
            "name": "enable",
            "type": "boolean"
          }
        ],
        "description": "Allows or disallows the panel to receive keyboard focus and input. This is recursively applied to all children.",
        "name": "SetKeyboardInputEnabled",
        "parent": "Panel",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether to enable or disable keyboard input.",
            "name": "keyboardInput",
            "type": "boolean"
          }
        ],
        "description": "<deprecated>Alias of <page text=\"Panel:SetKeyboardInputEnabled\">Panel:SetKeyboardInputEnabled(lowercase)</page></deprecated>Enables or disables the keyboard input for the panel.",
        "name": "SetKeyBoardInputEnabled",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Sets the height of a single line of a <page>RichText</page> panel.",
        "name": "SetLineHeight",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The new line height. Values below zero mean no override.",
            "name": "height",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The new maximum amount of characters this panel is allowed to contain.",
            "name": "maxChar",
            "type": "number"
          }
        ],
        "description": "Sets the maximum character count this panel should have.\n\nThis function will only work on <page>RichText</page> and <page>TextEntry</page> panels and their derivatives.",
        "name": "SetMaximumCharCount",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "default": "nil",
            "description": "The minimum width of the object.",
            "name": "minW",
            "type": "number"
          },
          {
            "default": "nil",
            "description": "The minimum height of the object.",
            "name": "minH",
            "type": "number"
          }
        ],
        "description": "Sets the minimum dimensions of the panel or object.\n\nYou can restrict either or both values.\n\nCalling the function without arguments will remove the minimum size.",
        "name": "SetMinimumSize",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The path of the model to set",
            "name": "ModelPath",
            "type": "string"
          },
          {
            "default": "0",
            "description": "The skin to set",
            "name": "skin",
            "type": "number"
          },
          {
            "default": "nil",
            "description": "The body groups to set. Each single-digit number in the string represents a separate bodygroup, **This argument must be 9 characters in total**.",
            "name": "bodygroups",
            "type": "string"
          }
        ],
        "description": "Sets the model to be displayed by <page>SpawnIcon</page>.\n\n<note>This must be called after setting size if you wish to use a different size spawnicon</note>",
        "name": "SetModel",
        "parent": "Panel",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whenever to enable or disable mouse input.",
            "name": "mouseInput",
            "type": "boolean"
          }
        ],
        "description": "Enables or disables the mouse input for the panel.\n<note>Panels parented to the context menu will not be clickable unless <page text=\"Panel:SetKeyboardInputEnabled\">Panel:SetKeyboardInputEnabled(lowercase)</page> is enabled or <page>Panel:MakePopup</page> has been called. If you want the panel to have mouse input but you do not want to prevent players from moving, set <page text=\"Panel:SetKeyboardInputEnabled\">Panel:SetKeyboardInputEnabled(lowercase)</page> to false immediately after calling <page>Panel:MakePopup</page>.</note>",
        "name": "SetMouseInputEnabled",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether to enable multiline or not.",
            "name": "multiline",
            "type": "boolean"
          }
        ],
        "description": "Enables or disables the multi-line functionality of <page>TextEntry</page> panel and its derivatives.",
        "name": "SetMultiline",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new name of the panel.",
            "name": "name",
            "type": "string"
          }
        ],
        "description": "Sets the internal name of the panel. Can be retrieved with <page>Panel:GetName</page>.",
        "name": "SetName",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "openExternally",
            "type": "boolean"
          }
        ],
        "description": "Set to true to open links in an external browser. This only functions on the `x86-64` beta.",
        "name": "SetOpenLinksExternally",
        "parent": "Panel",
        "realms": [
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether to draw the background or not.",
            "name": "paintBackground",
            "type": "boolean"
          }
        ],
        "description": "Sets whether the default background of the panel should be drawn or not. It's color is usually set by <page>Panel:SetBGColor</page>.",
        "name": "SetPaintBackgroundEnabled",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether to draw the border or not.",
            "name": "paintBorder",
            "type": "boolean"
          }
        ],
        "description": "Sets whether the default border of the panel should be drawn or not.",
        "name": "SetPaintBorderEnabled",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "True if the panel should be painted manually.",
            "name": "paintedManually",
            "type": "boolean"
          }
        ],
        "description": "Enables or disables painting of the panel manually with <page>Panel:PaintManual</page>.",
        "name": "SetPaintedManually",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new parent of the panel.",
            "name": "parent",
            "type": "Panel"
          }
        ],
        "description": "Sets the parent of the panel.\n<note>Panels parented to the context menu will not be clickable unless <page>Panel:SetMouseInputEnabled</page> and <page text=\"Panel:SetKeyboardInputEnabled\">Panel:SetKeyboardInputEnabled(lowercase)</page> are both true or <page>Panel:MakePopup</page> has been called. If you want the panel to have mouse input but you do not want to prevent players from moving, set <page text=\"Panel:SetKeyboardInputEnabled\">Panel:SetKeyboardInputEnabled(lowercase)</page> to false immediately after calling <page>Panel:MakePopup</page>.</note>",
        "name": "SetParent",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The player to use avatar of.",
            "name": "player",
            "type": "Player"
          },
          {
            "default": "32",
            "description": "The size of the avatar to use. Acceptable sizes are `32`, `64`, `184`. Non matching sizes will be clamped down to the highest valid number.",
            "name": "size",
            "type": "number"
          }
        ],
        "description": "Used by <page>AvatarImage</page> to load an avatar for given player.",
        "name": "SetPlayer",
        "parent": "Panel",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "If `true`, the popup panel will not draw in front of others when it gets focus, for example when it is clicked.",
            "name": "stayAtBack",
            "type": "boolean"
          }
        ],
        "description": "If this panel object has been made a popup with <page>Panel:MakePopup</page>, this method will prevent it from drawing in front of other panels when it receives input focus.",
        "name": "SetPopupStayAtBack",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The x coordinate of the position.",
            "name": "posX",
            "type": "number"
          },
          {
            "description": "The y coordinate of the position.",
            "name": "posY",
            "type": "number"
          }
        ],
        "description": "Sets the position of the panel's top left corner.\n\nThis will trigger <page>PANEL:PerformLayout</page>. You should avoid calling this function in <page>PANEL:PerformLayout</page> to avoid infinite loops.\n\nSee also <page>Panel:SetX</page> and <page>Panel:SetY</page>.\n\n<note>If you wish to position and re-size panels without much guesswork and have them look good on different screen resolutions, you may find <page>Panel:Dock</page> useful</note>",
        "name": "SetPos",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether to render in the screenshot or not.",
            "name": "renderInScreenshot",
            "type": "boolean"
          }
        ],
        "description": "Sets whenever the panel should be rendered in the next screenshot.",
        "name": "SetRenderInScreenshots",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether the panel object should be selectable or not.",
            "name": "selectable",
            "type": "boolean"
          }
        ],
        "description": "Sets whether the panel object can be selected or not (like icons in the Spawn Menu, holding <key>Shift</key>). If enabled, this will affect the function of a <page>DButton</page> whilst <key>Shift</key> is pressed. <page>Panel:SetSelected</page> can be used to select/deselect the object.",
        "name": "SetSelectable",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/selections.lua",
          "lineEnd": 27,
          "lineStart": 23
        }
      },
      {
        "arguments": [
          {
            "default": "false",
            "description": "Whether the object should be selected or deselected. <page>Panel:IsSelected</page> can be used to determine the selected state of the object.",
            "name": "selected",
            "type": "boolean"
          }
        ],
        "description": "Sets the selected state of a selectable panel object. This functionality is set with <page>Panel:SetSelectable</page> and checked with <page>Panel:IsSelectable</page>.",
        "name": "SetSelected",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/selections.lua",
          "lineEnd": 57,
          "lineStart": 47
        }
      },
      {
        "arguments": [
          {
            "description": "Whether to enable selection.",
            "name": "set",
            "type": "boolean"
          }
        ],
        "description": "Enables the panel object for selection (much like the spawn menu).",
        "name": "SetSelectionCanvas",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/selections.lua",
          "lineEnd": 15,
          "lineStart": 10
        }
      },
      {
        "arguments": [
          {
            "description": "The width of the panel.",
            "name": "width",
            "type": "number"
          },
          {
            "description": "The height of the panel.",
            "name": "height",
            "type": "number"
          }
        ],
        "description": "Sets the size of the panel.\n\nCalls <page>PANEL:OnSizeChanged</page> and marks this panel for layout (<page>Panel:InvalidateLayout</page>).\n\n\nSee also <page>Panel:SetWidth</page> and <page>Panel:SetHeight</page>.\n\n<note>If you wish to position and re-size panels without much guesswork and have them look good on different screen resolutions, you may find <page>Panel:Dock</page> useful</note>",
        "name": "SetSize",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the skin to use. The default derma skin is `Default`.",
            "name": "skinName",
            "type": "string"
          }
        ],
        "description": "Sets the derma skin that the panel object will use, and refreshes all panels with <page>derma.RefreshSkins</page>.",
        "name": "SetSkin",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 373,
          "lineStart": 364
        }
      },
      {
        "arguments": [
          {
            "description": "A path to the .png material, for example one of the <page>Silkicons</page> shipped with the game.",
            "name": "icon",
            "type": "string"
          }
        ],
        "description": "Sets the `.png` image to be displayed on a  <page>SpawnIcon</page> or the panel it is based on - <page>ModelImage</page>.\n\nOnly `.png` images can be used with this function.",
        "name": "SetSpawnIcon",
        "parent": "Panel",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The 64bit SteamID of the player to load avatar of",
            "name": "steamid",
            "type": "string"
          },
          {
            "description": "The size of the avatar to use. Acceptable sizes are 32, 64, 184.",
            "name": "size",
            "type": "number"
          }
        ],
        "description": "Used by <page>AvatarImage</page> panels to load an avatar by its 64-bit Steam ID (community ID).",
        "name": "SetSteamID",
        "parent": "Panel",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "position",
            "type": "number"
          }
        ],
        "description": "When TAB is pressed, the next selectable panel in the number sequence is selected.\n\n<note>This function requires <page>Panel:SetFocusTopLevel</page> to be called on the parent panel for tab navigation to work.</note>",
        "name": "SetTabPosition",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Desired height to set",
            "name": "height",
            "type": "number"
          }
        ],
        "description": "Sets height of a panel. An alias of <page>Panel:SetHeight</page>.",
        "name": "SetTall",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Delay in seconds after which the panel should be removed.",
            "name": "delay",
            "type": "number"
          }
        ],
        "description": "Removes the panel after given time in seconds.\n<note>This function will not work if <page>PANEL:AnimationThink</page> is overridden, unless <page>Panel:AnimationThinkInternal</page> is called every frame.</note>",
        "name": "SetTerm",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/animation.lua",
          "lineEnd": 15,
          "lineStart": 10
        }
      },
      {
        "arguments": [
          {
            "description": "The text value to set.",
            "name": "text",
            "type": "string"
          }
        ],
        "description": "Sets the text value of a panel object containing text, such as a <page>Label</page>, <page>TextEntry</page> or  <page>RichText</page> and their derivatives, such as <page>DLabel</page>, <page>DTextEntry</page> or <page>DButton</page>.\n\n<warning>When used on a <page>Label</page> or its derivatives ( <page>DLabel</page> and <page>DButton</page> ), it will automatically call <page>Panel:InvalidateLayout</page>, meaning that you should avoid running this function every frame on these panels to avoid unnecessary performance loss.</warning>\n\n<warning><page>Label</page> &amp; its derivatives has hard length limit, maximum 1023 ascii characters.</warning>",
        "name": "SetText",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The left margin for the text, in pixels. This will only affect centered text if the margin is greater than its x-coordinate.",
            "name": "insetX",
            "type": "number"
          },
          {
            "description": "The top margin for the text, in pixels.",
            "name": "insetY",
            "type": "number"
          }
        ],
        "description": "Sets the left and top text margins of a text-based panel object, such as a <page>DButton</page> or <page>DLabel</page>.",
        "name": "SetTextInset",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page>Global.Color</page> to set for selected text.",
            "name": "textColor",
            "type": "table"
          },
          {
            "description": "The <page>Global.Color</page> to set for selected text background.",
            "name": "backgroundColor",
            "type": "table"
          }
        ],
        "description": "Sets text selection colors of a <page>RichText</page> element.",
        "name": "SetTextSelectionColors",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Sets the height of a <page>RichText</page> element to accommodate the text inside.\n\n<note>This function internally relies on <page>Panel:GetNumLines</page>, so it should be called at least a couple frames after modifying the text using <page>Panel:AppendText</page></note>",
        "name": "SetToFullHeight",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "default": "nil",
            "description": "The text to be displayed in the tooltip. Set `nil` to disable it.",
            "name": "str",
            "type": "string"
          }
        ],
        "description": "Sets the tooltip to be displayed when a player hovers over the panel object with their cursor.\n\nBy default, <page>DTooltip</page> will be used. <page>Panel:SetTooltipPanelOverride</page> can be used to override the tooltip panel.",
        "name": "SetTooltip",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 303,
          "lineStart": 301
        }
      },
      {
        "arguments": [
          {
            "description": "The tooltip delay to set.",
            "name": "tooltip",
            "type": "number"
          }
        ],
        "description": "Sets the tooltip delay. (time between hovering over the panel, and the tooltip showing up)\n\nCan be retrieved with <page>Panel:GetTooltipDelay</page>.",
        "name": "SetTooltipDelay",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 325,
          "lineStart": 323
        }
      },
      {
        "arguments": [
          {
            "default": "nil",
            "description": "The panel to use as the tooltip.",
            "name": "tooltipPanel",
            "type": "Panel"
          }
        ],
        "description": "Sets the panel to be displayed as contents of a <page>DTooltip</page> when a player hovers over the panel object with their cursor. See <page>Panel:SetTooltipPanelOverride</page> if you are looking to override <page>DTooltip</page> itself.\n\n<note><page>Panel:SetTooltip</page> will override this functionality.</note>\n\n<warning>\nCalling this from <page>PANEL:OnCursorEntered</page> is too late! The tooltip will not be displayed or be updated.\n\nGiven panel or the previously set one will **NOT** be automatically removed.\n</warning>",
        "name": "SetTooltipPanel",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 312,
          "lineStart": 309
        }
      },
      {
        "arguments": [
          {
            "description": "The panel class to override the default <page>DTooltip</page>. The new panel class must have the following methods:\n* <page text=\"SetText\">Panel:SetText</page> - If you are using <page>Panel:SetTooltip</page>.\n* <page text=\"SetContents\">DTooltip:SetContents</page> - If you are using <page>Panel:SetTooltipPanel</page>.\n* <page text=\"OpenForPanel\">DTooltip:OpenForPanel</page> - A \"hook\" type function that gets called shortly after creation (and after the above 2) to open and position the tooltip. You can see this logic in `lua/includes/util/tooltips.lua`.",
            "name": "override",
            "type": "string"
          }
        ],
        "description": "Sets the panel class to be created instead of <page>DTooltip</page> when the player hovers over this panel and a tooltip needs creating.",
        "name": "SetTooltipPanelOverride",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 318,
          "lineStart": 316
        }
      },
      {
        "arguments": [
          {
            "description": "The name of the font.\n\nSee <page text=\"here\">Default_Fonts</page> for a list of existing fonts.\nAlternatively, use <page>surface.CreateFont</page> to create your own custom font.",
            "name": "fontName",
            "type": "string"
          }
        ],
        "description": "Sets the underlined font for use by clickable text in a <page>RichText</page>. See also <page>Panel:InsertClickableTextStart</page>\n\nThis function will only work on <page>RichText</page> panels.",
        "name": "SetUnderlineFont",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The URL to set. It **must** begin with either `http://` or `https://`.",
            "name": "url",
            "type": "string"
          }
        ],
        "description": "Sets the URL of a link-based panel such as <page>DLabelURL</page>.",
        "name": "SetURL",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "default": "false",
            "description": "True to display the vertical text scroll bar, false to hide it.",
            "name": "display",
            "type": "boolean"
          }
        ],
        "description": "Sets the visibility of the vertical scrollbar.\n\nWorks for <page>RichText</page> and <page>TextEntry</page>.",
        "name": "SetVerticalScrollbarEnabled",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The visibility of the panel.",
            "name": "visible",
            "type": "boolean"
          }
        ],
        "description": "Sets the \"visibility\" of the panel.",
        "name": "SetVisible",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Desired width to set",
            "name": "width",
            "type": "number"
          }
        ],
        "description": "Sets width of a panel. An alias of <page>Panel:SetWidth</page>.",
        "name": "SetWide",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new width of the panel.",
            "name": "width",
            "type": "number"
          }
        ],
        "description": "Sets the width of the panel.\n\nCalls <page>PANEL:OnSizeChanged</page> and marks this panel for layout (<page>Panel:InvalidateLayout</page>).\n\n\nSee also <page>Panel:SetSize</page>.",
        "name": "SetWidth",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 55,
          "lineStart": 53
        }
      },
      {
        "arguments": [
          {
            "description": "Whether to enable or disable the feature for this panel.",
            "name": "enable",
            "type": "boolean"
          }
        ],
        "description": "This makes it so that when you're hovering over this panel you can \"click\" on the world. Your weapon aim (and its viewmodel) will follow the cursor. This is primarily used for the Sandbox context menu.",
        "name": "SetWorldClicker",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "`True` to enable text wrapping, `false` otherwise.",
            "name": "wrap",
            "type": "boolean"
          }
        ],
        "description": "Sets whether text wrapping should be enabled or disabled on <page>Label</page> and <page>DLabel</page> panels.\n\nUse <page>DLabel:SetAutoStretchVertical</page> to automatically correct vertical size; <page>Panel:SizeToContents</page> will not set the correct height.",
        "name": "SetWrap",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The X coordinate of the position.",
            "name": "x",
            "type": "number"
          }
        ],
        "description": "Sets the X position of the panel.\n\nUses <page>Panel:SetPos</page> internally.",
        "name": "SetX",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 72,
          "lineStart": 70
        }
      },
      {
        "arguments": [
          {
            "description": "The Y coordinate of the position.",
            "name": "y",
            "type": "number"
          }
        ],
        "description": "Sets the Y position of the panel.\n\nUses <page>Panel:SetPos</page> internally.",
        "name": "SetY",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 75,
          "lineStart": 73
        }
      },
      {
        "arguments": [
          {
            "description": "The z position of the panel. <br>\nCan't be lower than -32768 or higher than 32767.",
            "name": "zIndex",
            "type": "number"
          }
        ],
        "description": "Sets the panels z position which determines the rendering order.\n\nPanels with lower z positions appear behind panels with higher z positions.\n\nThis also controls in which order panels docked with <page>Panel:Dock</page> appears.",
        "name": "SetZPos",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Makes a panel visible.",
        "name": "Show",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 604,
          "lineStart": 602
        }
      },
      {
        "arguments": [
          {
            "default": "0",
            "description": "The target width of the panel. Use -1 to retain the current width.",
            "name": "sizeW",
            "type": "number"
          },
          {
            "default": "0",
            "description": "The target height of the panel. Use -1 to retain the current height.",
            "name": "sizeH",
            "type": "number"
          },
          {
            "description": "The time to perform the animation within.",
            "name": "time",
            "type": "number"
          },
          {
            "default": "0",
            "description": "The delay before the animation starts.",
            "name": "delay",
            "type": "number"
          },
          {
            "default": "-1",
            "description": "Easing of the start and/or end speed of the animation. See <page>Panel:NewAnimation</page> for how this works.",
            "name": "ease",
            "type": "number"
          },
          {
            "default": "nil",
            "description": "The function to be called once the animation finishes.\n<callback>\n<arg type=\"table\" name=\"animData\">The <page>Structures/AnimationData</page> that was used.</arg>\n<arg type=\"Panel\" name=\"targetPanel\">The panel object that was animated.</arg>\n</callback>",
            "name": "callback",
            "type": "function"
          }
        ],
        "description": "Uses animation to resize the panel to the specified size.",
        "name": "SizeTo",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/animation.lua",
          "lineEnd": 197,
          "lineStart": 182
        }
      },
      {
        "arguments": [
          {
            "default": "false",
            "description": "Resize with width of the panel.",
            "name": "sizeW",
            "type": "boolean"
          },
          {
            "default": "false",
            "description": "Resize the height of the panel.",
            "name": "sizeH",
            "type": "boolean"
          }
        ],
        "description": "Resizes the panel to fit the bounds of its children.\n\n<note>Your panel must have its layout updated (<page>Panel:InvalidateLayout</page>) for this function to work properly.</note>\n<note>The sizeW and sizeH parameters are false by default. Therefore, calling this function with no arguments will result in a no-op.</note>",
        "name": "SizeToChildren",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Resizes the panel so that its width and height fit all of the content inside.\n\n<note>Only works on <page>Label</page> derived panels such as <page>DLabel</page> by default, and on any panel that manually implemented the <page>Panel:SizeToContents</page> method, such as <page>DNumberWang</page> and <page>DImage</page>.</note>\n\n<warning>You must call this function **AFTER** setting text/font, adjusting child panels or otherwise altering the panel.</warning>",
        "name": "SizeToContents",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "default": "0",
            "description": "The number of extra pixels to add to the width. Can be a negative number, to reduce the width.",
            "name": "addVal",
            "type": "number"
          }
        ],
        "description": "Resizes the panel object's width to accommodate all child objects/contents.\n\nOnly works on <page>Label</page> derived panels such as <page>DLabel</page> by default, and on any panel that manually implemented <page>Panel:GetContentSize</page> method.\n\n<note>You must call this function **AFTER** setting text/font or adjusting child panels.</note>",
        "name": "SizeToContentsX",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 349,
          "lineStart": 342
        }
      },
      {
        "arguments": [
          {
            "default": "0",
            "description": "The number of extra pixels to add to the height.",
            "name": "addVal",
            "type": "number"
          }
        ],
        "description": "Resizes the panel object's height to accommodate all child objects/contents.\n\nOnly works on <page>Label</page> derived panels such as <page>DLabel</page> by default, and on any panel that manually implemented <page>Panel:GetContentSize</page> method.\n\n<note>You must call this function **AFTER** setting text/font or adjusting child panels.</note>",
        "name": "SizeToContentsY",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 337,
          "lineStart": 330
        }
      },
      {
        "arguments": [
          {
            "description": "Time to complete the animation.",
            "name": "Length",
            "type": "number"
          }
        ],
        "description": "Slides the panel in from above.",
        "name": "SlideDown",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/animation.lua",
          "lineEnd": 224,
          "lineStart": 216
        }
      },
      {
        "arguments": [
          {
            "description": "Time to complete the animation.",
            "name": "Length",
            "type": "number"
          }
        ],
        "description": "Slides the panel out to the top.",
        "name": "SlideUp",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/animation.lua",
          "lineEnd": 211,
          "lineStart": 202
        }
      },
      {
        "description": "Begins a box selection, enables mouse capture for the panel object, and sets the start point of the selection box to the mouse cursor's position, relative to this object. For this to work, either the object or its parent must be enabled as a selection canvas. This is set using <page>Panel:SetSelectionCanvas</page>.",
        "name": "StartBoxSelection",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/selections.lua",
          "lineEnd": 160,
          "lineStart": 134
        }
      },
      {
        "description": "Stops all panel animations by clearing its animation list. This also clears all delayed animations.",
        "name": "Stop",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/animation.lua",
          "lineEnd": 82,
          "lineStart": 78
        }
      },
      {
        "description": "Stops the loading of the <page>HTML</page> panel's current page.",
        "name": "StopLoading",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The panel to align the bottom of this one with.",
            "name": "tgtPanel",
            "type": "Panel"
          },
          {
            "default": "0",
            "description": "The gap to leave between this and the passed panel. Negative values will cause the panel's height to increase, forming an overlap.",
            "name": "offset",
            "type": "number"
          }
        ],
        "description": "Resizes the panel object's height so that its bottom is aligned with the top of the passed panel. An offset greater than zero will reduce the panel's height to leave a gap between it and the passed panel.",
        "name": "StretchBottomTo",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 146,
          "lineStart": 146
        }
      },
      {
        "arguments": [
          {
            "description": "The panel to align the right edge of this one with.",
            "name": "tgtPanel",
            "type": "Panel"
          },
          {
            "default": "0",
            "description": "The gap to leave between this and the passed panel. Negative values will cause the panel's width to increase, forming an overlap.",
            "name": "offset",
            "type": "number"
          }
        ],
        "description": "Resizes the panel object's width so that its right edge is aligned with the left of the passed panel. An offset greater than zero will reduce the panel's width to leave a gap between it and the passed panel.",
        "name": "StretchRightTo",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 145,
          "lineStart": 145
        }
      },
      {
        "arguments": [
          {
            "default": "nil",
            "description": "The left offset to the parent.",
            "name": "offsetLeft",
            "type": "number"
          },
          {
            "default": "nil",
            "description": "The top offset to the parent.",
            "name": "offsetTop",
            "type": "number"
          },
          {
            "default": "nil",
            "description": "The right offset to the parent.",
            "name": "offsetRight",
            "type": "number"
          },
          {
            "default": "nil",
            "description": "The bottom offset to the parent.",
            "name": "offsetBottom",
            "type": "number"
          }
        ],
        "description": "Sets the dimensions of the panel to fill its parent. It will only stretch in directions that aren't nil.",
        "name": "StretchToParent",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 103,
          "lineStart": 80
        }
      },
      {
        "description": "Toggles the selected state of a selectable panel object. This functionality is set with <page>Panel:SetSelectable</page> and checked with <page>Panel:IsSelectable</page>. To check whether the object is selected or not, <page>Panel:IsSelected</page> is used.",
        "name": "ToggleSelection",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/selections.lua",
          "lineEnd": 33,
          "lineStart": 29
        }
      },
      {
        "description": "Toggles the visibility of a panel and all its children.",
        "name": "ToggleVisible",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel.lua",
          "lineEnd": 420,
          "lineStart": 418
        }
      },
      {
        "description": "Restores the last saved state (caret position and the text inside) of a <page>TextEntry</page>. Should act identically to pressing CTRL+Z in a <page>TextEntry</page>.\n\nSee also <page>Panel:SaveUndoState</page>.",
        "name": "Undo",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Recursively deselects this panel object and all of its children. This will cascade to all child objects at every level below the parent.",
        "name": "UnselectAll",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/includes/extensions/client/panel/selections.lua",
          "lineEnd": 43,
          "lineStart": 35
        }
      },
      {
        "description": "Forcibly updates the panels' HTML Material, similar to when Paint is called on it.<br>This is only useful if the panel is not normally visible, i.e the panel exists purely for its HTML Material.\n<note>Only works on with panels that have a HTML Material. See <page>Panel:GetHTMLMaterial</page> for more details.</note>\n<note>A good place to call this is in the <page>GM:PreRender</page> hook</note>",
        "name": "UpdateHTMLTexture",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "<deprecated>Use <page>Panel:IsValid</page> instead.</deprecated>Returns if a given panel is valid or not.",
        "name": "Valid",
        "parent": "Panel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether the panel is valid or not, true being it is, false being it isn't.",
            "type": "boolean"
          }
        ]
      }
    ],
    "name": "Panel"
  },
  {
    "description": "Path object for a NextBot NPC and bots created by <page>player.CreateNextbot</page>. Returned by <page>Global.Path</page>.",
    "functions": [
      {
        "arguments": [
          {
            "description": "The bot to update along the path. This can also be a nextbot player (<page>player.CreateNextbot</page>)",
            "name": "bot",
            "type": "NextBot"
          },
          {
            "description": "The entity we want to chase",
            "name": "ent",
            "type": "Entity"
          },
          {
            "default": "nil",
            "description": "A function that allows you to alter the path generation. See example on <page>PathFollower:Compute</page> for the default function.\n\n<callback>\n<arg name=\"area\" type=\"CNavArea\">The area to move to.</arg>\n<arg name=\"fromArea\" type=\"CNavArea\">The area to move from.</arg>\n<arg name=\"ladder\" type=\"CNavLadder\">The ladder to move to or from (Validation required), if any.</arg>\n<arg name=\"elevator\" type=\"Entity\">Will probably be always NULL</arg>\n<arg name=\"length\" type=\"number\">Precomputed length between `area` and `fromArea`.</arg>\n<ret name=\"cost\" type=\"number\">The cost of movement between `area` and `fromArea`.</ret>\n</callback>",
            "name": "generator",
            "type": "function"
          }
        ],
        "description": "Computes the shortest path to the provided entity arg. PathFollower Object must have `Chase` type.\n\nFor PathFollower objects of the `Follow` type use <page>PathFollower:Compute</page>",
        "name": "Chase",
        "parent": "PathFollower",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The nextbot we're generating for.  This can also be a nextbot player (<page>player.CreateNextbot</page>).",
            "name": "bot",
            "type": "NextBot"
          },
          {
            "description": "The target location, the goal.",
            "name": "goal",
            "type": "Vector"
          },
          {
            "default": "nil",
            "description": "A function that allows you to alter the path generation by adjusting the \"cost\". See example below for the default function.\n\n<callback>\n<arg name=\"area\" type=\"CNavArea\">The area to move to.</arg>\n<arg name=\"fromArea\" type=\"CNavArea\">The area to move from.</arg>\n<arg name=\"ladder\" type=\"CNavLadder\">The ladder to move to or from (Validation required), if any.</arg>\n<arg name=\"elevator\" type=\"Entity\">Will probably be always NULL</arg>\n<arg name=\"length\" type=\"number\">Precomputed length between `area` and `fromArea`.</arg>\n<ret name=\"cost\" type=\"number\">The cost of movement between `area` and `fromArea`.</ret>\n</callback>",
            "name": "generator",
            "type": "function"
          }
        ],
        "description": "Compute shortest path from bot to 'goal' via A* algorithm. This only works if the PathFollower is the `Follow` Type.\n\nFor PathFollowers of the `Chase` Type see <page>PathFollower:Chase</page>",
        "name": "Compute",
        "parent": "PathFollower",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "* If returns true, path was found to the goal position.\n* If returns false, path may either be invalid (use IsValid() to check), or valid but doesn't reach all the way to the goal.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Draws the path. This is meant for debugging - and uses <page>debugoverlay</page>.",
        "name": "Draw",
        "parent": "PathFollower",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Returns the first segment of the path.",
        "name": "FirstSegment",
        "parent": "PathFollower",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "A table with <page>Structures/PathSegment</page>.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns the age since the path was built",
        "name": "GetAge",
        "parent": "PathFollower",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Path age",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns all of the segments of the given path.",
        "name": "GetAllSegments",
        "parent": "PathFollower",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "A table of tables with <page>Structures/PathSegment</page>.",
            "type": "table{PathSegment}"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The point we're querying for",
            "name": "position",
            "type": "Vector"
          }
        ],
        "description": "The closest position along the path to a position",
        "name": "GetClosestPosition",
        "parent": "PathFollower",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The closest position on the path",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the current goal data. Can return nil if the current goal is invalid, for example immediately after <page>PathFollower:Update</page>.",
        "name": "GetCurrentGoal",
        "parent": "PathFollower",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "A table with <page>Structures/PathSegment</page>.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns the cursor data",
        "name": "GetCursorData",
        "parent": "PathFollower",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "A table with 3 keys:\n<page>number</page> curvature\n\n\n<page>Vector</page> forward\n\n\n<page>Vector</page> pos",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns the current progress along the path",
        "name": "GetCursorPosition",
        "parent": "PathFollower",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The current progress",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the path end position",
        "name": "GetEnd",
        "parent": "PathFollower",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The end position",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns how close we can get to the goal to call it done.",
        "name": "GetGoalTolerance",
        "parent": "PathFollower",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The distance we're setting it to",
            "type": "number"
          }
        ]
      },
      {
        "name": "GetHindrance",
        "parent": "PathFollower",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "type": "Entity"
          }
        ]
      },
      {
        "description": "Returns the total length of the path",
        "name": "GetLength",
        "parent": "PathFollower",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The length of the path",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the minimum range movement goal must be along path.",
        "name": "GetMinLookAheadDistance",
        "parent": "PathFollower",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The minimum look ahead distance",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The distance along the path to query",
            "name": "distance",
            "type": "number"
          }
        ],
        "description": "Returns the vector position of distance along path",
        "name": "GetPositionOnPath",
        "parent": "PathFollower",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The position",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the path start position",
        "name": "GetStart",
        "parent": "PathFollower",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The start position",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Invalidates the current path",
        "name": "Invalidate",
        "parent": "PathFollower",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Returns true if the path is valid",
        "name": "IsValid",
        "parent": "PathFollower",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Wether the path is valid or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the last segment of the path.",
        "name": "LastSegment",
        "parent": "PathFollower",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "A table with <page>Structures/PathSegment</page>.",
            "type": "table"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The distance to move the cursor (in relative world units)",
            "name": "distance",
            "type": "number"
          }
        ],
        "description": "Moves the cursor by give distance.\n\nFor a function that sets the distance, see <page>PathFollower:MoveCursorTo</page>.",
        "name": "MoveCursor",
        "parent": "PathFollower",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The distance to move the cursor (in world units)",
            "name": "distance",
            "type": "number"
          }
        ],
        "description": "Sets the cursor position to given distance.\n\nFor relative distance, see <page>PathFollower:MoveCursor</page>.",
        "name": "MoveCursorTo",
        "parent": "PathFollower",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "pos",
            "type": "Vector"
          },
          {
            "default": "0",
            "description": "Seek type\n\n\n0 = SEEK_ENTIRE_PATH - Search the entire path length\n\n\n1 = SEEK_AHEAD - Search from current cursor position forward toward end of path\n\n\n2 = SEEK_BEHIND - Search from current cursor position backward toward path start",
            "name": "type",
            "type": "number"
          },
          {
            "default": "0",
            "description": "",
            "name": "alongLimit",
            "type": "number"
          }
        ],
        "description": "Moves the cursor of the path to the closest position compared to given vector.",
        "name": "MoveCursorToClosestPosition",
        "parent": "PathFollower",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Moves the cursor to the end of the path",
        "name": "MoveCursorToEnd",
        "parent": "PathFollower",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Moves the cursor to the end of the path",
        "name": "MoveCursorToStart",
        "parent": "PathFollower",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Returns the next segment of the path.",
        "name": "NextSegment",
        "parent": "PathFollower",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "A table with <page>Structures/PathSegment</page>.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns the previous segment of the path.",
        "name": "PriorSegment",
        "parent": "PathFollower",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "A table with <page>Structures/PathSegment</page>.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Resets the age which is retrieved by <page>PathFollower:GetAge</page> to 0.",
        "name": "ResetAge",
        "parent": "PathFollower",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The distance we're setting it to",
            "name": "distance",
            "type": "number"
          }
        ],
        "description": "How close we can get to the goal to call it done",
        "name": "SetGoalTolerance",
        "parent": "PathFollower",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The minimum look ahead distance",
            "name": "mindist",
            "type": "number"
          }
        ],
        "description": "Sets minimum range movement goal must be along path",
        "name": "SetMinLookAheadDistance",
        "parent": "PathFollower",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The bot to update along the path. This can also be a nextbot player (<page>player.CreateNextbot</page>)",
            "name": "bot",
            "type": "NextBot"
          }
        ],
        "description": "Move the bot along the path.\n<note>player nextbots require <page>CUserCmd:SetForwardMove</page> to move forward along the path</note>",
        "name": "Update",
        "parent": "PathFollower",
        "realms": [
          "server"
        ]
      }
    ],
    "name": "PathFollower"
  },
  {
    "description": "A PhysCollide holds collision data from VPhysics. These objects can be used to run (currently quite limited) collision tests, but do not represent actual physics objects.\n\nCreated by <page>Global.CreatePhysCollideBox</page> or <page>Global.CreatePhysCollidesFromModel</page>.",
    "functions": [
      {
        "description": "Destroys the <page>PhysCollide</page> object.",
        "name": "Destroy",
        "parent": "PhysCollide",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Checks whether this <page>PhysCollide</page> object is valid or not.\n\nYou should just use <page>Global.IsValid</page> instead.",
        "name": "IsValid",
        "parent": "PhysCollide",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Is valid or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The origin for the PhysCollide during the trace",
            "name": "origin",
            "type": "Vector"
          },
          {
            "description": "The angles for the PhysCollide during the trace",
            "name": "angles",
            "type": "Angle"
          },
          {
            "description": "The start position of the trace",
            "name": "rayStart",
            "type": "Vector"
          },
          {
            "description": "The end position of the trace",
            "name": "rayEnd",
            "type": "Vector"
          },
          {
            "description": "The mins of the trace's bounds",
            "name": "rayMins",
            "type": "Vector"
          },
          {
            "description": "The maxs of the trace's bounds",
            "name": "rayMaxs",
            "type": "Vector"
          }
        ],
        "description": "Performs a trace against this PhysCollide with the given parameters. This can be used for both line traces and box traces.",
        "name": "TraceBox",
        "parent": "PhysCollide",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Hit position of the trace. This is false if the trace did not hit.",
            "type": "Vector"
          },
          {
            "description": "Hit normal of the trace",
            "type": "Vector"
          },
          {
            "description": "Fraction of the trace. This is calculated from the distance between startPos, hitPos, and endPos.",
            "type": "number"
          }
        ]
      }
    ],
    "name": "PhysCollide"
  },
  {
    "description": "This is the object returned by <page>Entity:GetPhysicsObject</page>, <page>Entity:GetPhysicsObjectNum</page> and <page>Vehicle:GetWheel</page>.\n\nIt represents a physics object. An entity can have multiple physics objects (ragdolls), one physics objects (props), or none. (NPCs, non physics entities, etc.)\n\nPhysics objects are usually simulated by the physics engine and usually dictate the position of the entity, and not the other way around.",
    "functions": [
      {
        "arguments": [
          {
            "description": "The additional velocity in `degrees/s`. (Local to the physics object.)\n<note>Does nothing on frozen objects.</note>",
            "name": "angularVelocity",
            "type": "Vector"
          }
        ],
        "description": "Adds the specified [angular velocity](https://en.wikipedia.org/wiki/Angular_velocity) velocity to the current <page>PhysObj</page>.",
        "name": "AddAngleVelocity",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Bitflag, see <page>Enums/FVPHYSICS</page>.",
            "name": "flags",
            "type": "number"
          }
        ],
        "description": "Adds one or more bit flags.",
        "name": "AddGameFlag",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Additional velocity in `source_unit/s`. (World frame)\n<note>Does nothing on frozen objects.</note>",
            "name": "velocity",
            "type": "Vector"
          }
        ],
        "description": "Adds the specified velocity to the current.",
        "name": "AddVelocity",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "from",
            "type": "Angle"
          },
          {
            "description": "",
            "name": "to",
            "type": "Angle"
          }
        ],
        "description": "Rotates the object so that it's angles are aligned to the ones inputted.",
        "name": "AlignAngles",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "type": "Angle"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The [impulse](https://en.wikipedia.org/wiki/Impulse_(physics)) to be applied in `kg*source_unit/s`. (The vector is in world frame)",
            "name": "impulse",
            "type": "Vector"
          }
        ],
        "description": "Applies the specified impulse in the mass center of the physics object.\n\n<note>This will not work on players, use <page>Entity:SetVelocity</page> instead.</note>",
        "name": "ApplyForceCenter",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The impulse to be applied in `kg*source_unit/s`. (World frame)",
            "name": "impulse",
            "type": "Vector"
          },
          {
            "description": "The position in world coordinates (`source units`) where the force is applied to the physics object.",
            "name": "position",
            "type": "Vector"
          }
        ],
        "description": "Applies the specified impulse on the physics object at the specified position.",
        "name": "ApplyForceOffset",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The angular impulse to be applied in `kg * m^2 * degrees / s`. (The vector is in world frame)\n<note>\nThe unit conversion between meters and source units in this case is `1 meter ≈ 39.37 source units (100/2.54 exactly)`\n</note>",
            "name": "angularImpulse",
            "type": "Vector"
          }
        ],
        "description": "Applies the specified angular impulse to the physics object. See <page>PhysObj:CalculateForceOffset</page>",
        "name": "ApplyTorqueCenter",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The impulse acting on the object in `kg*source_unit/s`. (World frame)",
            "name": "impulse",
            "type": "Vector"
          },
          {
            "description": "The location of the impulse in world coordinates (`source units`)",
            "name": "position",
            "type": "Vector"
          }
        ],
        "description": "Calculates the linear and angular impulse on the object's center of mass for an offset impulse.<br>The outputs can be used with <page>PhysObj:ApplyForceCenter</page> and <page>PhysObj:ApplyTorqueCenter</page>, respectively.\n\n**Be careful to convert the angular impulse to world frame (<page>PhysObj:LocalToWorldVector</page>) if you are going to use it with ApplyTorqueCenter.**",
        "name": "CalculateForceOffset",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The calculated linear impulse on the physics object's center of mass in `kg*source_unit/s`. (World frame)",
            "name": "linearImpulse",
            "type": "Vector"
          },
          {
            "description": "The calculated angular impulse on the physics object's center of mass in `kg*m^2*degrees/s`. (Local frame)",
            "name": "angularImpulse",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The impulse acting on the object in `kg*source_unit/s`. (World frame)",
            "name": "impulse",
            "type": "Vector"
          },
          {
            "description": "The location of the impulse in world coordinates (`source units`)",
            "name": "position",
            "type": "Vector"
          }
        ],
        "description": "Calculates the linear and angular velocities on the center of mass for an offset impulse. The outputs can be directly passed to <page>PhysObj:AddVelocity</page> and <page>PhysObj:AddAngleVelocity</page>, respectively.\n\n<warning>This will return zero length vectors if the physics object's motion is disabled. See <page>PhysObj:IsMotionEnabled</page>.</warning>",
        "name": "CalculateVelocityOffset",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The calculated linear velocity from the impulse on the physics object's center of mass in `source_unit/s`. (World frame)",
            "type": "Vector"
          },
          {
            "description": "The calculated angular velocity from the impulse on the physics object's center of mass in `degrees/s`. (Local frame)",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Bitflag, see <page>Enums/FVPHYSICS</page>.",
            "name": "flags",
            "type": "number"
          }
        ],
        "description": "Removes one of more specified flags.",
        "name": "ClearGameFlag",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The parameters for the shadow. See <page>Structures/ShadowControlParams</page>.",
            "name": "shadowparams",
            "type": "table"
          }
        ],
        "description": "Allows you to move a PhysObj to a point and angle in 3D space. Works with any PhysObj, not just physics shadows.",
        "name": "ComputeShadowControl",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "True to enable, false to disable.",
            "name": "enable",
            "type": "boolean"
          }
        ],
        "description": "Sets whether the physics object should collide with anything or not, including world.\n\n<warning>This function currently has major problems with player collisions, and as such should be avoided at all costs.\n\n\n\nA better alternative to this function would be using <page>Entity:SetCollisionGroup</page>( COLLISION_GROUP_WORLD ).</warning>",
        "name": "EnableCollisions",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "True to enable, false to disable.",
            "name": "enable",
            "type": "boolean"
          }
        ],
        "description": "Sets whenever the physics object should be affected by drag.",
        "name": "EnableDrag",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "True to enable, false to disable.",
            "name": "enable",
            "type": "boolean"
          }
        ],
        "description": "Sets whether the PhysObject should be affected by gravity",
        "name": "EnableGravity",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "True to enable, false to disable.",
            "name": "enable",
            "type": "boolean"
          }
        ],
        "description": "Sets whether the physobject should be able to move or not.\n\nThis is the exact method the Physics Gun uses to freeze props. If a motion-disabled physics object is grabbed with the physics gun, the object will be able to move again. To disallow this, use <page>GM:PhysgunPickup</page>.",
        "name": "EnableMotion",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Returns the mins and max of the physics object Axis-Aligned Bounding Box.",
        "name": "GetAABB",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The minimum extents of the bounding box.",
            "type": "Vector"
          },
          {
            "description": "The maximum extents of the bounding box.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the angles of the physics object in degrees.",
        "name": "GetAngles",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The angles of the physics object.",
            "type": "Angle"
          }
        ]
      },
      {
        "description": "Gets the angular velocity of the object in degrees per second as a local vector. You can use dot product to read the magnitude from a specific axis.",
        "name": "GetAngleVelocity",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The angular velocity",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the contents flag of the <page>PhysObj</page>.",
        "name": "GetContents",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The <page>Enums/CONTENTS</page>.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the linear and angular damping of the physics object.",
        "name": "GetDamping",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The linear damping",
            "type": "number"
          },
          {
            "description": "The angular damping",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the sum of the linear and rotational kinetic energies of the physics object.",
        "name": "GetEnergy",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The kinetic energy",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the parent entity of the physics object.",
        "name": "GetEntity",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The entity this physics object belongs to",
            "type": "Entity"
          }
        ]
      },
      {
        "description": "Returns the friction snapshot of this physics object. This is useful for determining if an object touching ground for example.",
        "name": "GetFrictionSnapshot",
        "parent": "PhysObj",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "A table of tables containing the following data:\n* <page>PhysObj</page> Other - The other physics object we came in contact with\n* <page>number</page> EnergyAbsorbed -\n* <page>number</page> FrictionCoefficient -\n* <page>number</page> NormalForce -\n* <page>Vector</page> Normal - Direction of the friction event\n* <page>Vector</page> ContactPoint - Contact point of the friction event\n* <page>number</page> Material - Surface Property ID of our physics obj\n* <page>number</page> MaterialOther - Surface Property ID of the physics obj we came in contact with",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns the index this physics object is on its <page>PhysObj:GetEntity</page>.\n\nUseful for <page>Entity:TranslateBoneToPhysBone</page>.",
        "name": "GetIndex",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The physics object index on its parent entity.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the principal moments of inertia `(Ixx, Iyy, Izz)` of the physics object, in the local frame, with respect to the center of mass.",
        "name": "GetInertia",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The moment of inertia in `kg * m^2`\n<note>The unit conversion between meters and source units in this case is `1 meter ≈ 39.37 source units (100/2.54 exactly)`</note>\n<note>This value changes proportionally to the physics object's mass (e.g. making the object twice as heavy will result in it having twice the angular inertia)</note>",
            "name": "angularInertia",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns 1 divided by the angular inertia. See <page>PhysObj:GetInertia</page>",
        "name": "GetInvInertia",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The inverted angular inertia\n<warning>Returns `[0, 0, 0]` on frozen physics objects.</warning>",
            "name": "invAngularInertia",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns 1 divided by the physics object's mass (in kilograms).",
        "name": "GetInvMass",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The inverted mass.\n<warning>Returns 0 on frozen physics objects.</warning>",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the mass of the physics object.",
        "name": "GetMass",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The mass in kilograms.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the center of mass of the physics object as a local vector.",
        "name": "GetMassCenter",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The center of mass of the physics object.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the [physical material](https://developer.valvesoftware.com/wiki/Material_surface_properties) of the physics object.\n\nSee <page>util.GetSurfaceData</page> for a function that adds these types as well as further explanation of what they are.",
        "name": "GetMaterial",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The physical material name.",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns the physics mesh of the object which is used for physobj-on-physobj collision.",
        "name": "GetMesh",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Table of <page>Structures/MeshVertex</page>s where each three vertices represent a triangle. Returns nil if the physics object is a sphere.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns all convex physics meshes of the object. See <page>Entity:PhysicsInitMultiConvex</page> for more information.",
        "name": "GetMeshConvexes",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Table of <page>Structures/MeshVertex</page>s where each <page>Structures/MeshVertex</page> is an independent convex mesh and each three vertices represent a triangle. Returns nil if the physics object is a sphere.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns the name of the physics object.",
        "name": "GetName",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The name of the physics object.",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns the position of the physics object.",
        "name": "GetPos",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The position in world coordinates. (`source units`)",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the position and angle of the physics object as a 3x4 matrix (<page>VMatrix</page> is 4x4 so the fourth row goes unused). The first three columns store the angle as a [rotation matrix](https://en.wikipedia.org/wiki/Rotation_matrix), and the fourth column stores the position vector.",
        "name": "GetPositionMatrix",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The position and angle matrix.",
            "type": "VMatrix"
          }
        ]
      },
      {
        "description": "Returns the rotation damping of the physics object.",
        "name": "GetRotDamping",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The rotation damping",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the angles of the <page>PhysObj</page> shadow. See <page>PhysObj:UpdateShadow</page>.",
        "name": "GetShadowAngles",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The angles of the <page>PhysObj</page> shadow.",
            "type": "Angle"
          }
        ]
      },
      {
        "description": "Returns the position of the <page>PhysObj</page> shadow. See <page>PhysObj:UpdateShadow</page>.",
        "name": "GetShadowPos",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The position of the <page>PhysObj</page> shadow.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the speed damping of the physics object.",
        "name": "GetSpeedDamping",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "speedDamping",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the internal and external stress of the entity.",
        "name": "GetStress",
        "parent": "PhysObj",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The external stress (`𝜎𝑒`). It's the value of a giving force to other entities (in kg).",
            "type": "number"
          },
          {
            "description": "The internal stress (`𝜎𝑖`). It's the value of a receiving force from other entities (in kg).",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the surface area of the physics object in source-units². Or nil if the PhysObj is a generated sphere or box.",
        "name": "GetSurfaceArea",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The surface area or `nil` if the PhysObj is a generated sphere or box.",
            "type": "number|nil"
          }
        ]
      },
      {
        "description": "Returns the absolute directional velocity of the physobject.",
        "name": "GetVelocity",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "velocity",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "A point to test in world space coordinates",
            "name": "point",
            "type": "Vector"
          }
        ],
        "description": "Returns the world velocity of a point in world coordinates about the object. This is useful for objects rotating around their own axis/origin.",
        "name": "GetVelocityAtPoint",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Velocity at the given point",
            "name": "velocity",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the volume in source units³. Or nil if the PhysObj is a generated sphere or box.",
        "name": "GetVolume",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The volume or `nil` if the PhysObj is a generated sphere or box.",
            "type": "number|nil"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Bitflag, see <page>Enums/FVPHYSICS</page>.",
            "name": "flags",
            "type": "number"
          }
        ],
        "description": "Returns whenever the specified flag(s) is/are set.",
        "name": "HasGameFlag",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "If flag was set or not",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the physics object is \"sleeping\".\n\nSee <page>PhysObj:Sleep</page> for more information.",
        "name": "IsAsleep",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the physics object is sleeping.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whenever the entity is able to collide or not.",
        "name": "IsCollisionEnabled",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "isCollisionEnabled",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whenever the entity is affected by drag.",
        "name": "IsDragEnabled",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "dragEnabled",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whenever the entity is affected by gravity.",
        "name": "IsGravityEnabled",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "`true` if the gravity is enabled, `false` otherwise",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns if the physics object can move itself (by velocity, acceleration)",
        "name": "IsMotionEnabled",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "`true` if the motion is enabled, `false` otherwise.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whenever the entity is able to move.",
        "name": "IsMoveable",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "movable",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whenever the physics object is penetrating another physics object.\n\nThis is internally implemented as `PhysObj:HasGameFlag( FVPHYSICS_PENETRATING )` and thus is only updated for non-static physics objects.",
        "name": "IsPenetrating",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the physics object is penetrating another object.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns if the physics object is valid/not NULL.",
        "name": "IsValid",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the physics object is valid or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "A vector in the physics object's local frame",
            "name": "LocalVec",
            "type": "Vector"
          }
        ],
        "description": "Mapping a vector in local frame of the physics object to world frame.\n\n<note>this function does translation and rotation, with translation done first.</note>",
        "name": "LocalToWorld",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The corresponding vector in world frame",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "A vector in the physics object's local frame",
            "name": "LocalVec",
            "type": "Vector"
          }
        ],
        "description": "Rotate a vector from the local frame of the physics object to world frame.\n\n<note>This function only rotates the vector, without any translation operation.</note>",
        "name": "LocalToWorldVector",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The corresponding vector in world frame",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Prints debug info about the state of the physics object to the console.",
        "name": "OutputDebugInfo",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Call this when the collision filter conditions change due to this object's state (e.g. changing solid type or collision group)",
        "name": "RecheckCollisionFilter",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Direction, around which we will rotate",
            "name": "dir",
            "type": "Vector"
          },
          {
            "description": "Amount of rotation, in degrees",
            "name": "ang",
            "type": "number"
          }
        ],
        "description": "A convinience function for <page>Angle:RotateAroundAxis</page>.",
        "name": "RotateAroundAxis",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The resulting angle",
            "type": "Angle"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "[Drag coefficient](https://en.wikipedia.org/wiki/Drag_coefficient). The bigger this value is, the slower the angles will change.",
            "name": "coefficient",
            "type": "number"
          }
        ],
        "description": "Sets the amount of [drag](https://en.wikipedia.org/wiki/Drag_(physics)) to apply to a physics object when attempting to rotate.",
        "name": "SetAngleDragCoefficient",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new angles of the physobject.\n<warning>The new angle will not be applied on the parent entity while the physics object is asleep (<page>PhysObj:Sleep</page>)</warning>",
            "name": "angles",
            "type": "Angle"
          }
        ],
        "description": "Sets the angles of the physobject in degrees.",
        "name": "SetAngles",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new velocity in `degrees/s`. (Local frame)",
            "name": "angularVelocity",
            "type": "Vector"
          }
        ],
        "description": "Sets the specified [angular velocity](https://en.wikipedia.org/wiki/Angular_velocity) on the <page>PhysObj</page>",
        "name": "SetAngleVelocity",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new velocity to set velocity.",
            "name": "angularVelocity",
            "type": "Vector"
          }
        ],
        "description": "Sets the specified instantaneous [angular velocity](https://en.wikipedia.org/wiki/Angular_velocity) on the <page>PhysObj</page>",
        "name": "SetAngleVelocityInstantaneous",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Buoyancy ratio, where 0 is not buoyant at all (like a rock), and 1 is very buoyant (like wood). You can set values larger than 1 for greater effect.",
            "name": "buoyancy",
            "type": "number"
          }
        ],
        "description": "Sets the buoyancy ratio of the physics object. (How well it floats in water)",
        "name": "SetBuoyancyRatio",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page>Enums/CONTENTS</page>.",
            "name": "contents",
            "type": "number{CONTENTS}"
          }
        ],
        "description": "Sets the contents flag of the <page>PhysObj</page>.",
        "name": "SetContents",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Linear damping.",
            "name": "linearDamping",
            "type": "number"
          },
          {
            "description": "Angular damping.",
            "name": "angularDamping",
            "type": "number"
          }
        ],
        "description": "Sets the linear and angular damping of the physics object.",
        "name": "SetDamping",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The drag coefficient\nIt can be positive or negative.",
            "name": "drag",
            "type": "number"
          }
        ],
        "description": "Modifies how much drag (air resistance) affects the object.",
        "name": "SetDragCoefficient",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The angular inertia of the object.<br>",
            "name": "angularInertia",
            "type": "Vector"
          }
        ],
        "description": "Sets the angular inertia. See <page>PhysObj:GetInertia</page>.\n\n<note>This does not affect linear inertia.</note>",
        "name": "SetInertia",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The mass in kilograms, in range `[0, 50000]`",
            "name": "mass",
            "type": "number"
          }
        ],
        "description": "Sets the mass of the physics object.\n\n<warning>This resets <page>PhysObj:SetBuoyancyRatio</page> (Recalculated based materials' and the physics objects' densities, latter of which is dependent on mass). This is a physics engine limitation.</warning>",
        "name": "SetMass",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the phys material to use. From this list: [Valve Developer](https://developer.valvesoftware.com/wiki/Material_surface_properties)",
            "name": "materialName",
            "type": "string"
          }
        ],
        "description": "Sets the material of the physobject.\n\n<note>Impact sounds will only change if this is called on client</note>",
        "name": "SetMaterial",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new position of the physobject in world coordinates. (`source units`).\n<warning>The new position will not be applied on the parent entity while the physics object is asleep (<page>PhysObj:Sleep</page>)</warning>",
            "name": "position",
            "type": "Vector"
          },
          {
            "default": "false",
            "description": "If `true`, temporarily disables collisions of the physics objects just before moving it, then enables collisions back again.",
            "name": "teleport",
            "type": "boolean"
          }
        ],
        "description": "Sets the position of the physobject.",
        "name": "SetPos",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new velocity of the physics object in `source_unit/s`. (World frame)",
            "name": "velocity",
            "type": "Vector"
          }
        ],
        "description": "Sets the velocity of the physics object for the next iteration.",
        "name": "SetVelocity",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new velocity of the physics object.",
            "name": "velocity",
            "type": "Vector"
          }
        ],
        "description": "Sets the velocity of the physics object.",
        "name": "SetVelocityInstantaneous",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Makes the physics object \"sleep\". The physics object will no longer be moving unless it is \"woken up\" by either a collision with another moving object, or by <page>PhysObj:Wake</page>.\n\nThis is an optimization feature of the physics engine. Normally physics objects will automatically \"sleep\" when not moving for a short while, to save resources, but it can be used for other purposes, for example to temporarily suspend an object mid air.",
        "name": "Sleep",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The position we should move to.",
            "name": "targetPosition",
            "type": "Vector"
          },
          {
            "description": "The angle we should rotate towards.",
            "name": "targetAngles",
            "type": "Angle"
          },
          {
            "description": "The frame time to use for this movement, can be generally filled with <page>Global.FrameTime</page> or <page>ENTITY:PhysicsSimulate</page> with the deltaTime.\n\nCan be set to 0 when you need to update the physics object just once.",
            "name": "frameTime",
            "type": "number"
          }
        ],
        "description": "Unlike <page>PhysObj:SetPos</page> and <page>PhysObj:SetAngles</page>, this allows the movement of a physobj while leaving physics interactions intact.<br>\nThis is used internally by the motion controller of the Gravity Gun , the +use pickup and the Physics Gun, and entities such as the crane.\n\n<note>This is the ideal function to move a physics shadow created with <page>Entity:PhysicsInitShadow</page> or <page>Entity:MakePhysicsObjectAShadow</page>.</note>",
        "name": "UpdateShadow",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Wakes the physics object, so that it will continue to simulate physics/gravity.\n\nSee <page>PhysObj:Sleep</page> for more information.",
        "name": "Wake",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The vector in world space coordinates.",
            "name": "vec",
            "type": "Vector"
          }
        ],
        "description": "Converts a vector to a relative to the physics object coordinate system.",
        "name": "WorldToLocal",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The vector local to <page>PhysObj:GetPos</page>.",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "A vector in the world frame",
            "name": "WorldVec",
            "type": "Vector"
          }
        ],
        "description": "Rotate a vector from the world frame to the local frame of the physics object.\n\n<note>This function only rotates the vector, without any translation operation.</note>",
        "name": "WorldToLocalVector",
        "parent": "PhysObj",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The corresponding vector relative to the PhysObj",
            "type": "Vector"
          }
        ]
      }
    ],
    "name": "PhysObj"
  },
  {
    "description": "Created by <page>util.GetPixelVisibleHandle</page> and used by <page>util.PixelVisible</page>.",
    "name": "pixelvis_handle_t"
  },
  {
    "description": "This is a list of all methods only available for players. It is also possible to call <page>Entity</page> functions on the Player.",
    "functions": [
      {
        "description": "Returns the player's AccountID part of their full SteamID.\n\nSince this does not include other vital parts of the SteamID such as \"Account Type\" and \"Account Instance\", it should be avoided, as AccountIDs are finite, and can theoretically be the same for multiple valid accounts.\n\nSee <page>Player:SteamID</page> for the text representation of the full SteamID.\nSee <page>Player:SteamID64</page> for a 64bit representation of the full SteamID.\n\n<note>In a `-multirun` environment, this will return `-1` for all \"copies\" of a player because they are not authenticated with Steam.\n\nFor bots this will return values starting with `0` for the first bot, `1` for the second bot and so on.</note>",
        "name": "AccountID",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The AccountID of Player's SteamID.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The Cleanup type for this Entity.",
            "name": "type",
            "type": "string"
          },
          {
            "description": "The Entity to add.",
            "name": "ent",
            "type": "Entity"
          }
        ],
        "description": "<note>This function is only available in Sandbox and its derivatives.</note>Adds an entity to the player's clean up list. This uses <page>cleanup.Add</page> internally.",
        "name": "AddCleanup",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/player_extension.lua",
          "lineEnd": 111,
          "lineStart": 107
        }
      },
      {
        "arguments": [
          {
            "description": "The type of this Entity.",
            "name": "str",
            "type": "string"
          },
          {
            "description": "The Entity you want to add to the list.",
            "name": "ent",
            "type": "Entity"
          }
        ],
        "description": "<note>This function is only available in Sandbox and its derivatives.</note>Adds an entity to the player's list of entities of the same type. See <page>Player:GetCount</page> to get the current count of entities of an entity type added with this function.",
        "name": "AddCount",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/player_extension.lua",
          "lineEnd": 91,
          "lineStart": 72
        }
      },
      {
        "arguments": [
          {
            "description": "The amount to add to the death count.",
            "name": "count",
            "type": "number"
          }
        ],
        "description": "Adds the provided amount to the player's death count.",
        "name": "AddDeaths",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The amount to add.",
            "name": "count",
            "type": "number"
          }
        ],
        "description": "Adds the provided amount to the player's frag/kill count.",
        "name": "AddFrags",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The Entity to add.",
            "name": "ent",
            "type": "Entity"
          },
          {
            "description": "The physics object of the Entity.",
            "name": "physobj",
            "type": "PhysObj"
          }
        ],
        "description": "Adds an entity to the player's list of frozen objects.",
        "name": "AddFrozenPhysicsObject",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "source": {
          "file": "gamemodes/base/gamemode/obj_player_extend.lua",
          "lineEnd": 30,
          "lineStart": 9
        }
      },
      {
        "arguments": [
          {
            "description": "Name of the vote",
            "name": "name",
            "type": "string"
          },
          {
            "description": "Time until the vote expires",
            "name": "timeout",
            "type": "number"
          },
          {
            "description": "The function to be run when the player presses 0-9 while a vote is active.\n\n<callback>\n<arg name=\"voteNum\" type=\"number\">Which option the player pressed, 1-9 and 0 being the very last option.</arg>\n<ret name=\"\" type=\"boolean\">Return true to remove this option from the vote.</ret>\n</callback>",
            "name": "vote_callback",
            "type": "function"
          },
          {
            "description": "Used to draw the vote panel.",
            "name": "draw_callback",
            "type": "function"
          }
        ],
        "description": "Sets up the voting system for the player.\nThis is a really barebone system. By calling this a vote gets started, when the player presses 0-9 the callback function gets called along with the key the player pressed. Use the draw callback to draw the vote panel.",
        "name": "AddPlayerOption",
        "parent": "Player",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/includes/extensions/client/player.lua",
          "lineEnd": 39,
          "lineStart": 21
        }
      },
      {
        "arguments": [
          {
            "description": "Gesture slot using <page>Enums/GESTURE_SLOT</page>",
            "name": "slot",
            "type": "number"
          },
          {
            "description": "The sequence ID to play, can be retrieved with <page>Entity:LookupSequence</page>.",
            "name": "sequenceId",
            "type": "number"
          },
          {
            "description": "The cycle to start the animation at, ranges from 0 to 1.",
            "name": "cycle",
            "type": "number"
          },
          {
            "default": "false",
            "description": "If the animation should not loop. true = stops the animation, false = the animation keeps playing.",
            "name": "autokill",
            "type": "boolean"
          }
        ],
        "description": "Plays a sequence directly from a sequence number, similar to <page>Player:AnimRestartGesture</page>. This function has the advantage to play sequences that haven't been bound to an existing <page>Enums/ACT</page>\n<warning>This is not automatically networked. This function has to be called on the client to be seen by said client.</warning>",
        "name": "AddVCDSequenceToGestureSlot",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Checks if the player is alive.\n\nPlayer specific implementation of <page>Entity:Alive</page>, the value is synchronized to the client.",
        "name": "Alive",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the player is alive",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "True allows flashlight toggling",
            "name": "canFlashlight",
            "type": "boolean"
          }
        ],
        "description": "Sets if the player can toggle their flashlight. Function exists on both the server and client but has no effect when ran on the client.",
        "name": "AllowFlashlight",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "source": {
          "file": "lua/includes/extensions/player.lua",
          "lineStart": 182
        }
      },
      {
        "arguments": [
          {
            "description": "Allow or disallow",
            "name": "allow",
            "type": "boolean"
          }
        ],
        "description": "Lets the player spray their decal without delay",
        "name": "AllowImmediateDecalPainting",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Slot to reset. See the <page>Enums/GESTURE_SLOT</page>.",
            "name": "slot",
            "type": "number"
          }
        ],
        "description": "Resets player gesture in selected slot.",
        "name": "AnimResetGestureSlot",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Gesture slot using <page>Enums/GESTURE_SLOT</page>",
            "name": "slot",
            "type": "number"
          },
          {
            "description": "The activity ( see <page>Enums/ACT</page> ) or sequence that should be played",
            "name": "activity",
            "type": "number"
          },
          {
            "default": "false",
            "description": "Whether the animation should be automatically stopped. true = stops the animation, false = the animation keeps playing/looping",
            "name": "autokill",
            "type": "boolean"
          }
        ],
        "description": "Restart a gesture on a player, within a gesture slot.\n\n<warning>This is not automatically networked. This function has to be called on the client to be seen by said client.</warning>",
        "name": "AnimRestartGesture",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Restarts the main animation on the player, has the same effect as calling <page>Entity:SetCycle</page>( 0 ).",
        "name": "AnimRestartMainSequence",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The gesture slot. See <page>Enums/GESTURE_SLOT</page>",
            "name": "slot",
            "type": "number"
          },
          {
            "description": "Sequence ID to set.",
            "name": "sequenceID",
            "type": "number"
          }
        ],
        "description": "Sets the sequence of the animation playing in the given gesture slot.",
        "name": "AnimSetGestureSequence",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The gesture slot. See <page>Enums/GESTURE_SLOT</page>",
            "name": "slot",
            "type": "number"
          },
          {
            "description": "The weight this slot should be set to. Value must be ranging from 0 to 1.",
            "name": "weight",
            "type": "number"
          }
        ],
        "description": "Sets the weight of the animation playing in the given gesture slot.",
        "name": "AnimSetGestureWeight",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Returns the player's armor.",
        "name": "Armor",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The player's armor.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Duration of the ban in minutes (0 is permanent)",
            "name": "minutes",
            "type": "number"
          },
          {
            "default": "false",
            "description": "Whether to kick the player after banning them or not",
            "name": "kick",
            "type": "boolean"
          }
        ],
        "description": "Bans the player from the server for a certain amount of minutes.",
        "name": "Ban",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Returns true if the player's flashlight hasn't been disabled by <page>Player:AllowFlashlight</page>.\n\n<note>This is not synchronized between clients and server automatically!</note>",
        "name": "CanUseFlashlight",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the player can use flashlight.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/player.lua",
          "lineStart": 183
        }
      },
      {
        "arguments": [
          {
            "description": "String to be printed",
            "name": "message",
            "type": "string"
          }
        ],
        "description": "Prints a string to the chatbox of the client.\n\n<warning>Just like the <page>usermessage</page>, this function is affected by the 255 byte limit!</warning>",
        "name": "ChatPrint",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The entity type to check the limit for. Default types:\n* \"props\"\n* \"ragdolls\"\n* \"vehicles\"\n* \"effects\"\n* \"balloons\"\n* \"cameras\"\n* \"npcs\"\n* \"sents\"\n* \"dynamite\"\n* \"lamps\"\n* \"lights\"\n* \"wheels\"\n* \"thrusters\"\n* \"hoverballs\"\n* \"buttons\"\n* \"emitters\"",
            "name": "str",
            "type": "string"
          }
        ],
        "description": "Checks if the limit of an entity type added by <page>Player:AddCount</page> is hit or not. If it's hit, it will call the <page>GM:PlayerCheckLimit</page> hook, and call <page>Player:LimitHit</page> if the hook doesn't return `false`.\n\nThis will always return `true` in singleplayer, as singleplayer does not have limits.\n\n<note>This function is only available in Sandbox and its derivatives.</note>",
        "name": "CheckLimit",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Returns `true` if the limit of this type is not hit, `false` otherwise.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/player_extension.lua",
          "lineEnd": 32,
          "lineStart": 9
        }
      },
      {
        "arguments": [
          {
            "description": "command to run",
            "name": "command",
            "type": "string"
          }
        ],
        "description": "Runs the concommand on the player. This does not work on bots. If used clientside, always runs the command on the local player.\n\nIf you wish to directly modify the movement input of bots, use <page>GM:StartCommand</page> instead.\n\n<note>Some commands/convars are blocked from being run/changed using this function, usually to prevent harm/annoyance to clients. For a list of blocked commands, see <page>Blocked ConCommands</page>.</note>",
        "name": "ConCommand",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Creates the player's death ragdoll entity and deletes the old one.\n\nThis is normally used when a player dies, to create their death ragdoll.\n\nThe ragdoll will be created with the player's properties such as <page text=\"Position\">Entity:GetPos</page>, <page text=\"Angles\">Entity:GetAngles</page>, <page text=\"PlayerColor\">Player:GetPlayerColor</page>, <page text=\"Velocity\">Entity:GetVelocity</page> and <page text=\"Model\">Entity:GetModel</page>.\n\nYou can retrieve the entity this creates with <page>Player:GetRagdollEntity</page>.",
        "name": "CreateRagdoll",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Disables the default player's crosshair. Can be reenabled with <page>Player:CrosshairEnable</page>. This will affect <page>WEAPON:DoDrawCrosshair</page>.",
        "name": "CrosshairDisable",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Enables the player's crosshair, if it was previously disabled via <page>Player:CrosshairDisable</page>.",
        "name": "CrosshairEnable",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Returns whether the player is crouching or not (<page text=\"FL_DUCKING\">Enums/FL</page> flag).",
        "name": "Crouching",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the player is crouching.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the player's death count",
        "name": "Deaths",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The number of deaths the player has had.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Prints the players' name and position to the console.",
        "name": "DebugInfo",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "source": {
          "file": "lua/includes/extensions/player.lua",
          "lineEnd": 53,
          "lineStart": 48
        }
      },
      {
        "description": "Detonates all tripmines belonging to the player.",
        "name": "DetonateTripmines",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether the world clicking should be disabled.",
            "name": "disable",
            "type": "boolean"
          }
        ],
        "description": "Disables world clicking for given player. See <page>Panel:SetWorldClicker</page> and <page>Player:IsWorldClickingDisabled</page>.",
        "name": "DisableWorldClicking",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The data to send.",
            "name": "data",
            "type": "number"
          }
        ],
        "description": "Sends a third person animation event to the player.\n\nCalls <page>GM:DoAnimationEvent</page> with <page text=\"PLAYERANIMEVENT_CUSTOM_GESTURE\">Enums/PLAYERANIMEVENT</page> as the event, data as the given data.",
        "name": "DoAnimationEvent",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Starts the player's attack animation. The attack animation is determined by the weapon's HoldType.\n\nSimilar to other animation event functions, calls <page>GM:DoAnimationEvent</page> with <page text=\"PLAYERANIMEVENT_ATTACK_PRIMARY\">Enums/PLAYERANIMEVENT</page> as the event and no extra data.",
        "name": "DoAttackEvent",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The event to send. See <page>Enums/PLAYERANIMEVENT</page>.",
            "name": "event",
            "type": "number"
          },
          {
            "description": "The data to send alongside the event.",
            "name": "data",
            "type": "number"
          }
        ],
        "description": "Sends a specified third person animation event to the player.\n\nCalls <page>GM:DoAnimationEvent</page> with specified arguments.",
        "name": "DoCustomAnimEvent",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Sends a third person reload animation event to the player.\n\nSimilar to other animation event functions, calls <page>GM:DoAnimationEvent</page> with <page text=\"PLAYERANIMEVENT_RELOAD\">Enums/PLAYERANIMEVENT</page> as the event and no extra data.",
        "name": "DoReloadEvent",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Sends a third person secondary fire animation event to the player.\n\nSimilar to other animation event functions, calls <page>GM:DoAnimationEvent</page> with <page text=\"PLAYERANIMEVENT_ATTACK_SECONDARY\">Enums/PLAYERANIMEVENT</page> as the event and no extra data.",
        "name": "DoSecondaryAttack",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Should draw",
            "name": "draw",
            "type": "boolean"
          },
          {
            "default": "0",
            "description": "Which view model to show/hide, 0-2.",
            "name": "vm",
            "type": "number"
          }
        ],
        "description": "Show/Hide the player's weapon's viewmodel.",
        "name": "DrawViewModel",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Should draw",
            "name": "draw",
            "type": "boolean"
          }
        ],
        "description": "Show/Hide the player's weapon's worldmodel.",
        "name": "DrawWorldModel",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The class to drop.",
            "name": "class",
            "type": "string"
          },
          {
            "default": "nil",
            "description": "If set, launches the weapon at given position. There is a limit to how far it is willing to throw the weapon. Overrides velocity argument.",
            "name": "target",
            "type": "Vector"
          },
          {
            "default": "nil",
            "description": "If set and previous argument is unset, launches the weapon with given velocity. If the velocity is higher than 400, it will be clamped to 400.",
            "name": "velocity",
            "type": "Vector"
          }
        ],
        "description": "Drops the players' weapon of a specific class.",
        "name": "DropNamedWeapon",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Drops any object the player is currently holding with either Gravity Gun, Physics Gun or `+use` (E key)\n\nSee also <page>Entity:ForcePlayerDrop</page>.",
        "name": "DropObject",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "nil",
            "description": "Weapon to be dropped. If unset, will default to the currently equipped weapon.",
            "name": "weapon",
            "type": "Weapon"
          },
          {
            "default": "nil",
            "description": "If set, launches the weapon at given position. There is a limit to how far it is willing to throw the weapon. Overrides velocity argument.",
            "name": "target",
            "type": "Vector"
          },
          {
            "default": "nil",
            "description": "If set and previous argument is unset, launches the weapon with given velocity. If the velocity is higher than 400, it will be clamped to 400.",
            "name": "velocity",
            "type": "Vector"
          }
        ],
        "description": "Forces the player to drop the specified weapon",
        "name": "DropWeapon",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Vehicle the player will enter",
            "name": "vehicle",
            "type": "Vehicle"
          }
        ],
        "description": "Force puts the player into a specified vehicle.\nThis **does not** bypass <page>GM:CanPlayerEnterVehicle</page>.",
        "name": "EnterVehicle",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Equips the player with the HEV suit.\n\nAllows the player to zoom, walk slowly, sprint, pickup armor batteries, use the health and armor stations and also shows the HUD.<br>\nThe player also emits a flatline sound on death, which can be overridden with <page>GM:PlayerDeathSound</page>.\n\nThe player is automatically equipped with the suit on spawn, if you wish to stop that, use <page>Player:RemoveSuit</page>.",
        "name": "EquipSuit",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Forces the player off the current ladder if they are on one.",
        "name": "ExitLadder",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Forces the player to exit the vehicle if they're in one.\n\nThis function will bypass <page>GM:CanExitVehicle</page>. See also <page>GM:PlayerLeaveVehicle</page>",
        "name": "ExitVehicle",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Turns the flashlight on/off",
            "name": "isOn",
            "type": "boolean"
          }
        ],
        "description": "Enables/Disables the player's flashlight.\n\n<page>Player:CanUseFlashlight</page> must be true in order for the player's flashlight to be changed.",
        "name": "Flashlight",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Returns true if the player's flashlight is on.",
        "name": "FlashlightIsOn",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the player's flashlight is on.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the amount of frags a player has.\n\n<note>The value will change depending on the player's kill or suicide: +1 for a kill, -1 for a suicide. </note>",
        "name": "Frags",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "frags",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "default": "false",
            "description": "Whether the player should be frozen.",
            "name": "frozen",
            "type": "boolean"
          }
        ],
        "description": "Freeze the player. Frozen players cannot move, look around, or attack. Key bindings are still called. Similar to <page>Player:Lock</page> but the player can still take damage.\n\nAdds or removes the <page text=\"FL_FROZEN\">Enums/FL</page> flag from the player.",
        "name": "Freeze",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "source": {
          "file": "lua/includes/extensions/player.lua",
          "lineEnd": 220,
          "lineStart": 212
        }
      },
      {
        "description": "Returns the player's active weapon.\n\nIf used on a <page>Global.LocalPlayer</page>() and the player is spectating another player with `OBS_MODE_IN_EYE`, the weapon returned will be of the spectated player.",
        "name": "GetActiveWeapon",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The weapon the player currently has equipped or NULL if the player doesn't have an active weapon eg. when they're dead.",
            "type": "Weapon"
          }
        ]
      },
      {
        "description": "Returns the player's current activity.",
        "name": "GetActivity",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The player's current activity. See <page>Enums/ACT</page>.",
            "name": "act",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the direction that the player is aiming.",
        "name": "GetAimVector",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The direction vector of players aim",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns true if the players' model is allowed to rotate around the pitch and roll axis.",
        "name": "GetAllowFullRotation",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Allowed",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the player is allowed to use their weapons in a vehicle or not.",
        "name": "GetAllowWeaponsInVehicle",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the player is allowed to use their weapons in a vehicle or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns a table of all ammo the player has.",
        "name": "GetAmmo",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "A table with the following format\n* <page>number</page> Key - AmmoID to be used with functions like <page>game.GetAmmoName</page>.\n* <page>number</page> Value - Amount of ammo the player has of this kind.",
            "type": "table"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The ammunition type. Can be either <page>number</page> ammo ID or <page>string</page> ammo name.",
            "name": "ammotype",
            "type": "any"
          }
        ],
        "description": "Gets the amount of ammo the player has.",
        "name": "GetAmmoCount",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The amount of ammo player has in reserve.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Gets if the player will be pushed out of nocollided players.",
        "name": "GetAvoidPlayers",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "pushed",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns true if the player is able to walk using the (default) alt key.",
        "name": "GetCanWalk",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "AbleToWalk",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Determines whenever the player is allowed to use the zoom functionality.",
        "name": "GetCanZoom",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "canZoom",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the player's class id.",
        "name": "GetClassID",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The player's class id.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Type to get entity count of.",
            "name": "type",
            "type": "string"
          },
          {
            "default": "0",
            "description": "If specified, it will reduce the counter by this value. Works only serverside.",
            "name": "minus",
            "type": "number"
          }
        ],
        "description": "<note>This function is only available in Sandbox and its derivatives.</note>Gets the total amount of entities of an entity type added by <page>Player:AddCount</page>.\n\nDefault types:\n```\nballoons\nbuttons\ncameras\ndynamite\neffects\nemitters\nhoverballs\nlamps\nlights\nnpcs\nprops\nragdolls\nsents\nthrusters\nvehicles\nwheels\n```",
        "name": "GetCount",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The returned count.",
            "name": "count",
            "type": "number"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/player_extension.lua",
          "lineEnd": 70,
          "lineStart": 34
        }
      },
      {
        "description": "Returns the crouched walk speed multiplier.\n\nSee also <page>Player:GetWalkSpeed</page> and <page>Player:SetCrouchedWalkSpeed</page>.",
        "name": "GetCrouchedWalkSpeed",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The crouched walk speed multiplier.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the last command which was sent by the specified player. This can only be called on the player which <page>Global.GetPredictionPlayer</page>() returns.\n\n<note>When called clientside in singleplayer during <page>WEAPON:Think</page>, it will return nothing as the hook is not technically predicted in that instance. See the note on the page.</note>\n\n<bug issue=\"3302\">This will fail in <page>GM:StartCommand</page>.</bug>",
        "name": "GetCurrentCommand",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Last user commands",
            "type": "CUserCmd"
          }
        ]
      },
      {
        "description": "Gets the **actual** view offset which equals the difference between the players actual position and their view when standing.\n\nDo not confuse with <page>Player:GetViewOffset</page> and <page>Player:GetViewOffsetDucked</page>",
        "name": "GetCurrentViewOffset",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The actual view offset.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Gets the entity the player is currently driving via the <page>drive</page> library.",
        "name": "GetDrivingEntity",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The currently driven entity, or NULL entity",
            "type": "Entity"
          }
        ]
      },
      {
        "description": "Returns driving mode of the player. See <page>Entity Driving</page>.",
        "name": "GetDrivingMode",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The drive mode ID or 0 if player doesn't use the drive system.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns a player's duck speed (in seconds)",
        "name": "GetDuckSpeed",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "duckspeed",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the entity the player is currently using, like func_tank mounted turrets or +use prop pickups.",
        "name": "GetEntityInUse",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Entity in use, or NULL entity otherwise. For +use prop pickups, this will be NULL clientside.",
            "type": "Entity"
          }
        ]
      },
      {
        "description": "Returns a table with information of what the player is looking at.\n\nThe results of this function are **cached** clientside every frame.\n\nUses <page>util.GetPlayerTrace</page> internally and is therefore bound by its limits.\n\nSee also <page>Player:GetEyeTraceNoCursor</page>.",
        "name": "GetEyeTrace",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Trace information, see <page>Structures/TraceResult</page>.",
            "type": "table{TraceResult}"
          }
        ],
        "source": {
          "file": "gamemodes/base/gamemode/obj_player_extend.lua",
          "lineEnd": 192,
          "lineStart": 172
        }
      },
      {
        "description": "Returns the trace according to the players view direction, ignoring their mouse (holding <key>C</key> and moving the mouse in Sandbox).\n\nThe results of this function are **cached** clientside every frame.\n\nUses <page>util.GetPlayerTrace</page> internally and is therefore bound by its limits.\n\nSee also <page>Player:GetEyeTrace</page>.",
        "name": "GetEyeTraceNoCursor",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Trace result. See <page>Structures/TraceResult</page>.",
            "type": "table{TraceResult}"
          }
        ],
        "source": {
          "file": "gamemodes/base/gamemode/obj_player_extend.lua",
          "lineEnd": 213,
          "lineStart": 194
        }
      },
      {
        "description": "Returns the FOV of the player.",
        "name": "GetFOV",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Field of view as a float",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the steam \"relationship\" towards the player.",
        "name": "GetFriendStatus",
        "parent": "Player",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Should return one of four different things depending on their status on your friends list: \"friend\", \"blocked\", \"none\" or \"requested\".",
            "type": "string"
          }
        ]
      },
      {
        "description": "Gets the hands entity of a player",
        "name": "GetHands",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The hands entity if players has one",
            "type": "Entity"
          }
        ]
      },
      {
        "description": "Returns the widget the player is hovering with their mouse.",
        "name": "GetHoveredWidget",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The hovered widget.",
            "type": "Entity"
          }
        ]
      },
      {
        "description": "Retrieves the minimum and maximum <page text=\"Vectors\">Vector</page> of the [Axis-Aligned Bounding Box (AABB)](https://en.wikipedia.org/wiki/Minimum_bounding_box) used for the <page text=\"Player's\">Player</page> physics and movement <page text=\"Hull Traces\">util.TraceHull</page>.\n\nSee also: <page>Player:SetHull</page>, <page>Player:SetHullDuck</page>, <page>Player:GetHullDuck</page>",
        "name": "GetHull",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The hull mins, the lowest corner of the Player's bounding box.",
            "name": "mins",
            "type": "Vector"
          },
          {
            "description": "The hull maxs, the highest corner of the Player's bounding box, opposite of the mins.",
            "name": "maxs",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Retrieves the minimum and maximum <page text=\"Vectors\">Vector</page> of the [Axis-Aligned Bounding Box (AABB)](https://en.wikipedia.org/wiki/Minimum_bounding_box) used for the <page text=\"Player's\">Player</page> physics and movement <page text=\"Hull Traces\">util.TraceHull</page> while they are crouching (or \"Ducking\").\n\nSee also: <page>Player:SetHullDuck</page>, <page>Player:GetHull</page>, <page>Player:SetHull</page>",
        "name": "GetHullDuck",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The hull mins, the lowest corner of the Player's bounding box while crouching.",
            "name": "mins",
            "type": "Vector"
          },
          {
            "description": "The hull maxs, the highest corner of the Player's crouching bounding box, opposite of the mins.",
            "name": "maxs",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the client-side <page>ConVar</page>.",
            "name": "cVarName",
            "type": "string"
          }
        ],
        "description": "Retrieves the value of a client-side <page>ConVar</page>. The <page>ConVar</page> must have a <page text=\"FCVAR_USERINFO\">Enums/FCVAR</page> flag for this to work.\n\nOn client this function will return value of the local player, regardless of which player the function was called on!\n\nSee <page>Player:GetInfoNum</page> for the same function that automatically converts the string to a number.",
        "name": "GetInfo",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value of the <page>ConVar</page>. Or an empty string if the convar doesn't exist.\n\n<warning>The returned value is truncated to 31 bytes.</warning>",
            "type": "string"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the <page>ConVar</page> to query the value of",
            "name": "cVarName",
            "type": "string"
          },
          {
            "description": "Default value if we failed to retrieve the number.",
            "name": "default",
            "type": "number"
          }
        ],
        "description": "Retrieves the numeric value of a client-side convar, returns nil if value is not convertible to a number. The <page>ConVar</page> must have a <page text=\"FCVAR_USERINFO\">Enums/FCVAR</page> flag for this to work.",
        "name": "GetInfoNum",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value of the <page>ConVar</page> or the default value",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the jump power of the player",
        "name": "GetJumpPower",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Jump power",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the player's ladder climbing speed.\n\nSee <page>Player:GetWalkSpeed</page> for normal walking speed, <page>Player:GetRunSpeed</page> for sprinting speed and <page>Player:GetSlowWalkSpeed</page> for slow walking speed.",
        "name": "GetLadderClimbSpeed",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The ladder climbing speed.",
            "name": "speed",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the timescale multiplier of the player movement.",
        "name": "GetLaggedMovementValue",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The timescale multiplier, defaults to `1`.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the maximum amount of armor the player should have. Default value is 100.",
        "name": "GetMaxArmor",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The new max armor value",
            "name": "maxarmor",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the player's maximum movement speed.\n\nSee also <page>Player:SetMaxSpeed</page>, <page>Player:GetWalkSpeed</page> and <page>Player:GetRunSpeed</page>.",
        "name": "GetMaxSpeed",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The maximum movement speed the player can go at.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the player's name, this is an alias of <page>Player:Nick</page>.\n\n<note>This function overrides <page>Entity:GetName</page> (in the Lua metatable, not in c++), keep it in mind when dealing with <page>ents.FindByName</page> or any engine function which requires the mapping name.</note>",
        "name": "GetName",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The player's name.",
            "type": "string"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/player.lua",
          "lineEnd": 56,
          "lineStart": 56
        }
      },
      {
        "description": "Returns whenever the player is set not to collide with their teammates.",
        "name": "GetNoCollideWithTeammates",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "noCollideWithTeammates",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the the observer mode of the player",
        "name": "GetObserverMode",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Observe mode of that player, see <page>Enums/OBS_MODE</page>.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the entity the player is currently observing.\n\nSet using <page>Player:SpectateEntity</page>.",
        "name": "GetObserverTarget",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The entity the player is currently spectating, or <page text=\"NULL\">Global_Variables</page> if the player has no target.",
            "type": "Entity"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Name of the PData key",
            "name": "key",
            "type": "string"
          },
          {
            "default": "nil",
            "description": "Default value if PData key doesn't exist.",
            "name": "default",
            "type": "any"
          }
        ],
        "description": "Returns a **P**ersistent **Data** key-value pair from the SQL database. (`sv.db` when called on server, `cl.db` when called on client)\n\nInternally uses the <page>sql</page> library. See <page>util.GetPData</page> for cases when the player is not currently on the server.\n\n<note>This function internally uses <page>Player:SteamID64</page>, it previously utilized <page>Player:UniqueID</page> which can cause collisions (two or more players sharing the same PData entry). <page>Player:SetPData</page> now replaces all instances of <page>Player:UniqueID</page> with <page>Player:SteamID64</page> when running <page>Player:SetPData</page></note>\n\n<note>PData is not networked from servers to clients!</note>",
        "name": "GetPData",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The data in the SQL database or the default value given.",
            "type": "string"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/player.lua",
          "lineEnd": 131,
          "lineStart": 111
        }
      },
      {
        "description": "Returns a player model's color. The part of the model that is colored is determined by the model itself, and is different for each model.\n<note>Overide this function clientside on a Entity(not a player) with playermodel and return color will apply color on it</note>",
        "name": "GetPlayerColor",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The format is `Vector(r,g,b)`, and each color component should be between 0 and 1.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns a table containing player information.",
        "name": "GetPlayerInfo",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "A table containing player information.",
            "type": "table"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Entity to retrieve the carry angles of.",
            "name": "carryEnt",
            "type": "Entity"
          }
        ],
        "description": "Returns the preferred carry angles of an object, if any are set.\n\nCalls <page>GM:GetPreferredCarryAngles</page> with the target entity and returns the carry angles.",
        "name": "GetPreferredCarryAngles",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Carry angles or nil if the entity has no preferred carry angles.",
            "type": "Angle"
          }
        ]
      },
      {
        "description": "Returns the widget entity the player is using.\n\nHaving a pressed widget stops the player from firing their weapon to allow input to be passed onto the widget.",
        "name": "GetPressedWidget",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The pressed widget.",
            "type": "Entity"
          }
        ]
      },
      {
        "description": "Returns the weapon the player previously had equipped.",
        "name": "GetPreviousWeapon",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The previous weapon of the player.\n\n<warning>This is not guaranteed to be a weapon entity so it should be checked with <page>Entity:IsWeapon</page> for safety.</warning>",
            "type": "Entity"
          }
        ]
      },
      {
        "description": "<deprecated>You should use <page>Player:GetViewPunchAngles</page> instead.</deprecated>\nReturns players screen punch effect angle. See <page>Player:ViewPunch</page> and <page>Player:SetViewPunchAngles</page>",
        "name": "GetPunchAngle",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The punch angle",
            "type": "Angle"
          }
        ]
      },
      {
        "description": "Returns players death ragdoll. The ragdoll is created by <page>Player:CreateRagdoll</page>.\n<note>Calling <page>Entity:GetPos</page> server-side with this function then will return the position where <page>Player:CreateRagdoll</page> was used, as it is a hl2mp_ragdoll which is a serverside point entity that creates a clientside ragdoll for everyone (opposed to prop_ragdoll that is serverside and networks).</note>",
        "name": "GetRagdollEntity",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The ragdoll.\n\nUnlike normal clientside ragdolls (`C_ClientRagdoll`), this will be a `C_HL2MPRagdoll` on the client, and `hl2mp_ragdoll` on the server.",
            "type": "Entity"
          }
        ]
      },
      {
        "description": "Returns the render angles for the player.",
        "name": "GetRenderAngles",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The render angles of the player. Only **yaw** part of the angle seems to be present.",
            "type": "Angle"
          }
        ]
      },
      {
        "description": "Returns the player's sprint speed.\n\nSee also <page>Player:SetRunSpeed</page>, <page>Player:GetWalkSpeed</page> and <page>Player:GetMaxSpeed</page>.",
        "name": "GetRunSpeed",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The sprint speed",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the position of a Player's view\n\n<note>This is the same as calling <page>Entity:EyePos</page> on the player.</note>",
        "name": "GetShootPos",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The position of the player's view.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the player's slow walking speed, which is activated via <key>+WALK</key> keybind.\n\nSee <page>Player:GetWalkSpeed</page> for normal walking speed, <page>Player:GetRunSpeed</page> for sprinting speed and <page>Player:GetLadderClimbSpeed</page> for ladder climb speed.",
        "name": "GetSlowWalkSpeed",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The new slow walking speed.",
            "name": "speed",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the maximum height player can step onto.",
        "name": "GetStepSize",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The maximum height player can get up onto without jumping, in hammer units.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the player's HEV suit power.\n\n<bug issue=\"3449\">This will only work for the local player when used clientside.</bug>",
        "name": "GetSuitPower",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The current suit power.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the number of seconds that the player has been timing out for. You can check if a player is timing out with <page>Player:IsTimingOut</page>.\n\n<note>This function is relatively useless because it is tied to the value of the `sv_timeout` ConVar, which is irrelevant to the description above. [This is not considered as a bug](https://discord.com/channels/565105920414318602/567617926991970306/748970396224585738).</note>",
        "name": "GetTimeoutSeconds",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Timeout seconds.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "default": "nil",
            "description": "Classname of the tool to retrieve. ( Filename of the tool in gmod_tool/stools/ )",
            "name": "mode",
            "type": "string"
          }
        ],
        "description": "Returns <page text=\"TOOL\">Structures/TOOL</page> table of players current tool, or of the one specified.",
        "name": "GetTool",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "TOOL table, or nil if the table wasn't found or the player doesn't have a tool gun.",
            "type": "table"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/player_extension.lua",
          "lineEnd": 115,
          "lineStart": 105
        }
      },
      {
        "description": "Returns a player's unduck speed (in seconds)",
        "name": "GetUnDuckSpeed",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "unduck speed",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the entity the player would use if they would press their `+use` keybind.\n<note issue=\"5027\">Because entity physics objects usually do not exist on the client, the client's use entity will resolve to whatever the crosshair is placed on within a little less than 72 units of the player's eye position. This differs from the entity returned by the server, which has fully physical use checking. See <page>util.TraceHull</page>.\n\nIssue tracker: [5027](https://github.com/Facepunch/garrysmod-issues/issues/5027)</note>",
        "name": "GetUseEntity",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The entity that would be used or NULL.",
            "name": "ent",
            "type": "Entity"
          }
        ]
      },
      {
        "description": "Returns the player's user group. By default, player user groups are loaded from `garrysmod/settings/users.txt`.",
        "name": "GetUserGroup",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The user group of the player. This will return `\"user\"` if player has no user group.",
            "type": "string"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/player_auth.lua",
          "lineEnd": 48,
          "lineStart": 44
        }
      },
      {
        "description": "Returns the vehicle the player is driving.",
        "name": "GetVehicle",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The vehicle the player is currently driving, if any.\n\nReturns <page>NULL</page> entity if the player is not driving.",
            "type": "Vehicle"
          }
        ]
      },
      {
        "description": "Returns the entity the player is using to see from (such as the player itself, the camera, or another entity).\n<note>This function will return a [NULL Entity] until <page>Player:SetViewEntity</page> has been used</note>",
        "name": "GetViewEntity",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The entity the player is using to see from",
            "type": "Entity"
          }
        ]
      },
      {
        "arguments": [
          {
            "default": "0",
            "description": "optional index of the view model to return, can range from 0 to 2",
            "name": "index",
            "type": "number"
          }
        ],
        "description": "Returns the player's view model entity by the index.\nEach player has 3 view models by default, but only the first one is used.\n\nTo use the other viewmodels in your SWEP, see <page>Entity:SetWeaponModel</page>.\n\n<note>In the Client <page text=\"realm\">States</page>, other players' viewmodels are not available unless they are being spectated.</note>",
        "name": "GetViewModel",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The view model entity",
            "type": "Entity"
          }
        ]
      },
      {
        "description": "Returns the view offset of the player which equals the difference between the players actual position and their view.\n\nSee also <page>Player:GetViewOffsetDucked</page>.",
        "name": "GetViewOffset",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "New view offset, must be local vector to players <page>Entity:GetPos</page>",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the view offset of the player which equals the difference between the players actual position and their view when ducked.\n\nSee also <page>Player:GetViewOffset</page>.",
        "name": "GetViewOffsetDucked",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "New crouching view offset, must be local vector to players <page>Entity:GetPos</page>",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns players screen punch effect angle.",
        "name": "GetViewPunchAngles",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The punch angle",
            "type": "Angle"
          }
        ]
      },
      {
        "description": "Returns client's view punch velocity. See <page>Player:ViewPunch</page> and <page>Player:SetViewPunchVelocity</page>",
        "name": "GetViewPunchVelocity",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The current view punch angle velocity.",
            "name": "punchVel",
            "type": "Angle"
          }
        ]
      },
      {
        "description": "Returns the current voice volume scale for given player on client.",
        "name": "GetVoiceVolumeScale",
        "parent": "Player",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The voice volume scale, where 0 is 0% and 1 is 100%.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the player's normal walking speed. Not sprinting, not slow walking. (+walk)\n\nSee also <page>Player:SetWalkSpeed</page>, <page>Player:GetMaxSpeed</page> and <page>Player:GetRunSpeed</page>.",
        "name": "GetWalkSpeed",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The normal walking speed.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Class name of weapon",
            "name": "className",
            "type": "string"
          }
        ],
        "description": "Returns the weapon for the specified class",
        "name": "GetWeapon",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The weapon for the specified class, or NULL ENTITY if the player does not have this weapon.",
            "type": "Weapon"
          }
        ]
      },
      {
        "description": "Returns a player's weapon color. The part of the model that is colored is determined by the model itself, and is different for each model. The format is `Vector(r,g,b)`, and each color should be between 0 and 1.",
        "name": "GetWeaponColor",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "color",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns a table of the player's weapons.\n<note>\nThis function returns a sequential table. Prefer to loop it with <page>Global.ipairs</page> instead of the <page>Global.pairs</page> function.\n</note>",
        "name": "GetWeapons",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "All the weapons the player currently has.",
            "type": "table"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Class name of weapon to give the player",
            "name": "weaponClassName",
            "type": "string"
          },
          {
            "default": "false",
            "description": "Set to true to not give any ammo on weapon spawn. (Reserve ammo set by DefaultClip)",
            "name": "bNoAmmo",
            "type": "boolean"
          }
        ],
        "description": "Gives the player a weapon.\n\nThis function will call <page>GM:PlayerCanPickupWeapon</page>. If that hook returns false, this function will do nothing.\n\n<note>While this function is meant for weapons/pickupables only, it is **not** restricted to weapons. Any entity can be spawned using this function, including NPCs and SENTs.</note>",
        "name": "Give",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The weapon given to the player, if one was given. It will return NULL if the player already has the weapon, or the weapon entity (entity with given classname) doesn't exist.",
            "type": "Weapon"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Amount of ammo",
            "name": "amount",
            "type": "number"
          },
          {
            "description": "Type of ammo.\nThis is a string for named ammo types, and a number for ammo ID.\n\nYou can find a list of default ammo types <page text=\"here\">Default_Ammo_Types</page>.",
            "name": "type",
            "type": "string"
          },
          {
            "default": "false",
            "description": "Hide display popup when giving the ammo",
            "name": "hidePopup",
            "type": "boolean"
          }
        ],
        "description": "Gives ammo to a player",
        "name": "GiveAmmo",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Ammo given.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Disables god mode on the player.",
        "name": "GodDisable",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "source": {
          "file": "lua/includes/extensions/player.lua",
          "lineEnd": 240,
          "lineStart": 232
        }
      },
      {
        "description": "Enables god mode on the player.",
        "name": "GodEnable",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "source": {
          "file": "lua/includes/extensions/player.lua",
          "lineEnd": 262,
          "lineStart": 254
        }
      },
      {
        "description": "Returns whether the player has god mode or not, contolled by <page>Player:GodEnable</page> and <page>Player:GodDisable</page>.",
        "name": "HasGodMode",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the player has god mode or not.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/player.lua",
          "lineEnd": 262,
          "lineStart": 254
        }
      },
      {
        "arguments": [
          {
            "description": "Class name of the weapon",
            "name": "className",
            "type": "string"
          }
        ],
        "description": "Returns if the player has the specified weapon",
        "name": "HasWeapon",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "True if the player has the weapon",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns if the player is in a vehicle",
        "name": "InVehicle",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the player is in a vehicle.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the player's IP address and connection port in ip:port form\n<note>Returns `Error!` for bots.</note>",
        "name": "IPAddress",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The player's IP address and connection port",
            "name": "ip",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns whether the player is an admin or not. It will also return `true` if the player is <page>Player:IsSuperAdmin</page> by default.\n\nInternally this is determined by <page>Player:IsUserGroup</page>.",
        "name": "IsAdmin",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "True if the player is an admin or a super admin.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/player_auth.lua",
          "lineEnd": 16,
          "lineStart": 9
        }
      },
      {
        "description": "Returns if the player is an bot or not",
        "name": "IsBot",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "`true` if the player is a bot.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns true from the point when the player is sending client info but not fully in the game until they disconnect.",
        "name": "IsConnected",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "isConnected",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Used to find out if a player is currently 'driving' an entity (by which we mean 'right click &gt; drive' ).",
        "name": "IsDrivingEntity",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "A value representing whether or not the player is 'driving' an entity.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the players movement is currently frozen, controlled by <page>Player:Freeze</page>.",
        "name": "IsFrozen",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the players movement is currently frozen or not.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/player.lua",
          "lineEnd": 252,
          "lineStart": 244
        }
      },
      {
        "description": "Returns whether the player identity was confirmed by the Steam network.\n\nSee also <page>GM:NetworkIDValidated</page>.",
        "name": "IsFullyAuthenticated",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the player has been fully authenticated or not.\n\nThis will always be true for singleplayer and the listen server host.\nThis will always be false for bots.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns if a player is the host of the current session.",
        "name": "IsListenServerHost",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "`true` if the player is the listen server host, `false` otherwise.\n\nThis will always be `true` in single player, and `false` on a dedicated server.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether or not the player is voice muted locally.",
        "name": "IsMuted",
        "parent": "Player",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "whether or not the player is muted locally.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns true if the player is playing a taunt.",
        "name": "IsPlayingTaunt",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the player is playing a taunt.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whenever the player is heard by the local player clientside, or if the player is speaking serverside.",
        "name": "IsSpeaking",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Is the player speaking or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the player is currently sprinting or not, specifically if they are holding their sprint key and are allowed to sprint.\n\nThis will not check if the player is currently sprinting into a wall. (i.e. holding their sprint key but not moving)",
        "name": "IsSprinting",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Is the player sprinting or not",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whenever the player is equipped with the suit item.\n\n<bug issue=\"3449\">This will only work for the local player when used clientside.</bug>",
        "name": "IsSuitEquipped",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Is the suit equipped or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the player is a super admin.\n\nInternally this is determined by <page>Player:IsUserGroup</page>. See also <page>Player:IsAdmin</page>.",
        "name": "IsSuperAdmin",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "True if the player is a super admin.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/player_auth.lua",
          "lineEnd": 26,
          "lineStart": 22
        }
      },
      {
        "description": "Returns `true` if the player is timing out (i.e. is losing connection), `false` otherwise.\n\nA player is considered timing out when more than 4 seconds has elapsed since a network packet was received from given player.",
        "name": "IsTimingOut",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the player is timing out.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the player is typing in their chat.\n\nThis may not work properly if the server uses a custom chatbox.",
        "name": "IsTyping",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the player is typing in their chat or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Group to check the player for.",
            "name": "groupName",
            "type": "string"
          }
        ],
        "description": "Returns whether the player is in specified group or not. See <page>Player:GetUserGroup</page> for a way to get player's user group.",
        "name": "IsUserGroup",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "`true` if the player has the given user group.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/player_auth.lua",
          "lineEnd": 38,
          "lineStart": 32
        }
      },
      {
        "description": "Returns if the player can be heard by the local player.",
        "name": "IsVoiceAudible",
        "parent": "Player",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "isAudible",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns if the player currently walking. (`+walk` keybind)",
        "name": "IsWalking",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "`true` if the player is currently walking.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the player is using the world clicking feature, see <page>Panel:SetWorldClicker</page>",
        "name": "IsWorldClicking",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Is the player world clicking or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the world clicking is disabled for given player or not. See <page>Player:DisableWorldClicking</page>.",
        "name": "IsWorldClickingDisabled",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the world clicking is disabled or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key, see <page>Enums/IN</page>",
            "name": "key",
            "type": "number"
          }
        ],
        "description": "Returns whether a key is down. This is not networked to other players, meaning only the local client can see the keys they are pressing.",
        "name": "KeyDown",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "whether the key is down or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key, see <page>Enums/IN</page>",
            "name": "key",
            "type": "number"
          }
        ],
        "description": "Gets whether a key was down one tick ago.",
        "name": "KeyDownLast",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Is key down ?",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Corresponds to an <page>Enums/IN</page>. You can use <page>bit.bor</page> here (see example 2)",
            "name": "key",
            "type": "number"
          }
        ],
        "description": "Gets whether a key was just pressed this tick.",
        "name": "KeyPressed",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Was pressed or not",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The key, see <page>Enums/IN</page>",
            "name": "key",
            "type": "number"
          }
        ],
        "description": "Gets whether a key was just released this tick.",
        "name": "KeyReleased",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Was released or not",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "default": "No reason given",
            "description": "Reason to show for disconnection.\n\n<warning>This will be shortened to ~512 chars, though this includes the command itself and the player index so will realistically be more around ~498. It is recommended to avoid going near the limit to avoid truncation.</warning>",
            "name": "reason",
            "type": "string"
          }
        ],
        "description": "Kicks the player from the server.\n<note>This can not be run before the player has fully joined in. Use <page>game.KickID</page> for that.</note>",
        "name": "Kick",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Kills a player and calls <page>GM:PlayerDeath</page>.",
        "name": "Kill",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Kills a player without notifying the rest of the server.\n\nThis will call <page>GM:PlayerSilentDeath</page> instead of <page>GM:PlayerDeath</page>.",
        "name": "KillSilent",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The state of the lag compensation, true to enable and false to disable.",
            "name": "lagCompensation",
            "type": "boolean"
          }
        ],
        "description": "This allows the server to mitigate the lag of the player by moving back all the entities that can be lag compensated to the time the player attacked with his weapon.\n\nThis technique is most commonly used on things that hit other entities instantaneously, such as traces.\n\n<note><page>Entity:FireBullets</page> calls this function internally.</note>\n\nLag compensation only works for players and entities that have been enabled with <page>Entity:SetLagCompensated</page>\n\nDespite being defined shared, it can only be used server-side in a <page text=\"Predicted Hook\">~search?q=%3Cpredicted%3EYes</page>.\n\n<warning>This function NEEDS to be disabled after you're done with it or it will break the movement of the entities affected!</warning>\n\n<bug issue=\"3683\">Lag compensation does not support pose parameters.</bug>",
        "name": "LagCompensation",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Returns the hitgroup where the player was last hit.",
        "name": "LastHitGroup",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Hitgroup, see <page>Enums/HITGROUP</page>",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Type of hit limit.",
            "name": "type",
            "type": "string"
          }
        ],
        "description": "Shows \"limit hit\" notification in sandbox.\n<note>This function is only available in Sandbox and its derivatives.</note>",
        "name": "LimitHit",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/player_extension.lua",
          "lineEnd": 124,
          "lineStart": 120
        }
      },
      {
        "description": "Returns the direction a player is looking as a entity/local-oriented angle.\n\nUnlike <page>Entity:EyeAngles</page>, this function does not include angles of the Player's <page>Entity:GetParent</page>.\n\n<bug>Does not work correctly clientside for non local players when in a vehicle. (validate: when parented in general?)</bug>",
        "name": "LocalEyeAngles",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The local eye angles.",
            "type": "Angle"
          }
        ]
      },
      {
        "description": "Stops a player from using any inputs, such as moving, turning, or attacking. Key binds are still called. Similar to <page>Player:Freeze</page> but the player takes no damage.\n\nAdds the <page text=\"FL_FROZEN\">Enums/FL</page> and <page text=\"FL_GODMODE\">Enums/FL</page> flags to the player.",
        "name": "Lock",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Bone to get the position of. Must be from 0 to 19.",
            "name": "bone",
            "type": "number"
          }
        ],
        "description": "Returns the position of a Kinect bone.",
        "name": "MotionSensorPos",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Position of the bone.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the player's name. Identical to <page>Player:Nick</page> and <page>Player:GetName</page>.",
        "name": "Name",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Player's name.",
            "type": "string"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/player.lua",
          "lineEnd": 57,
          "lineStart": 57
        }
      },
      {
        "description": "Returns the player's name. Identical to <page>Player:Name</page> and <page>Player:GetName</page>.",
        "name": "Nick",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Player's name",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns the 64-bit SteamID aka CommunityID of the Steam Account that owns the Garry's Mod license this player is using. This is useful for detecting players using Steam Family Sharing.\n\nIf player is not using Steam Family Sharing, this will return the player's actual SteamID64().\n\n<note>This data will only be available after the player has fully authenticated with Steam. See <page>Player:IsFullyAuthenticated</page>.</note>",
        "name": "OwnerSteamID64",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The 64bit SteamID",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns the percentage of packets lost by the client. It is not networked so it only returns 0 when run clientside.",
        "name": "PacketLoss",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Percentage of packets lost (0-100)",
            "type": "number"
          }
        ]
      },
      {
        "description": "Unfreezes the props player is looking at. This is essentially the same as pressing reload with the physics gun, including double press for unfreeze all.\n\nFor freezing props, use <page>PhysObj:EnableMotion</page>.",
        "name": "PhysgunUnfreeze",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Number of props unfrozen.",
            "type": "number"
          }
        ],
        "source": {
          "file": "gamemodes/base/gamemode/obj_player_extend.lua",
          "lineEnd": 96,
          "lineStart": 53
        }
      },
      {
        "arguments": [
          {
            "description": "Entity to pick up.",
            "name": "entity",
            "type": "Entity"
          }
        ],
        "description": "This makes the player hold (same as pressing <key>E</key> on a small prop) given entity.\n\nNot to be confused with picking up items like ammo or health kits.\n\nThis picks up the passed entity regardless of its mass or distance from the player.",
        "name": "PickupObject",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The weapon to try to pick up.",
            "name": "wep",
            "type": "Weapon"
          },
          {
            "default": "false",
            "description": "If set to true, the player will only attempt to pick up the ammo from the weapon. The weapon will not be picked up even if the player doesn't have a weapon of this type, and the weapon will be removed if the player picks up any ammo from it.",
            "name": "ammoOnly",
            "type": "boolean"
          }
        ],
        "description": "Forces the player to pickup an existing weapon entity. The player will not pick up the weapon if they already own a weapon of given type, or if the player could not normally have this weapon in their inventory.\n\nThis function **will** bypass <page>GM:PlayerCanPickupWeapon</page>.",
        "name": "PickupWeapon",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the player succeeded in picking up the weapon or not.",
            "name": "result",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the player's ping to server.",
        "name": "Ping",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The player's ping.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Volume for the sound, in range from 0 to 1",
            "name": "volume",
            "type": "number"
          }
        ],
        "description": "Plays the correct step sound according to what the player is staying on.",
        "name": "PlayStepSound",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Which type of message should be sent to the player (<page>Enums/HUD</page>).",
            "name": "type",
            "type": "number"
          },
          {
            "description": "Message to be sent to the player.",
            "name": "message",
            "type": "string"
          }
        ],
        "description": "Displays a message either in their chat, console, or center of the screen. See also <page>Global.PrintMessage</page>.\n\n<note>When called serverside, this uses the archaic user message system (the <page>umsg</page>) and hence is limited to ≈250 characters.\n\n`HUD_PRINTCENTER` will not work when this is called clientside.</note>",
        "name": "PrintMessage",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Removes all ammo from a certain player",
        "name": "RemoveAllAmmo",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Removes all weapons and ammo from the player.",
        "name": "RemoveAllItems",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The amount of ammunition to remove.",
            "name": "ammoCount",
            "type": "number"
          },
          {
            "description": "The name of the ammunition to remove from. This can also be a <page>number</page> ammoID.",
            "name": "ammoName",
            "type": "string"
          }
        ],
        "description": "Removes the amount of the specified ammo from the player.",
        "name": "RemoveAmmo",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Key to remove",
            "name": "key",
            "type": "string"
          }
        ],
        "description": "Removes a **P**ersistent **Data** key-value pair from the SQL database. (`sv.db` when called on server, `cl.db` when called on client)\n\nInternally uses the <page>sql</page> library. See <page>util.RemovePData</page> for cases when the player is not currently on the server.\n\n<note>This function internally uses <page>Player:SteamID64</page>, it previously utilized <page>Player:UniqueID</page> which can cause collisions (two or more players sharing the same PData entry). <page>Player:SetPData</page> now replaces all instances of <page>Player:UniqueID</page> with <page>Player:SteamID64</page> when running <page>Player:SetPData</page></note>\n<note>PData is not networked from servers to clients!</note>",
        "name": "RemovePData",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "true is succeeded, false otherwise",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/player.lua",
          "lineEnd": 164,
          "lineStart": 148
        }
      },
      {
        "description": "Strips the player's suit item.",
        "name": "RemoveSuit",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Resets both normal and duck hulls to their default values.",
        "name": "ResetHull",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The text to force the player to say.",
            "name": "text",
            "type": "string"
          },
          {
            "default": "false",
            "description": "Whether to send this message to our own team only.",
            "name": "teamOnly",
            "type": "boolean"
          }
        ],
        "description": "Forces the player to say whatever the first argument is. Works on bots too.\n\n<note>This function ignores the default chat message cooldown</note>\n<warning>The argument can only contain 126 characters. [Source SDK 2013](https://github.com/ValveSoftware/source-sdk-2013/blob/0d8dceea4310fde5706b3ce1c70609d72a38efdf/sp/src/game/server/client.cpp#L84-L86)</warning>",
        "name": "Say",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Fade flags defined with <page>Enums/SCREENFADE</page>.",
            "name": "flags",
            "type": "number"
          },
          {
            "default": "color_white",
            "description": "The color of the screenfade",
            "name": "color",
            "type": "Color"
          },
          {
            "description": "Fade(in/out) effect transition time ( From no fade to full fade and vice versa ).\n\nThis is limited to 7 bits integer part and 9 bits fractional part.",
            "name": "fadeTime",
            "type": "number"
          },
          {
            "description": "Fade effect hold time.\n\nThis is limited to 7 bits integer part and 9 bits fractional part.",
            "name": "fadeHold",
            "type": "number"
          }
        ],
        "description": "Fades the screen",
        "name": "ScreenFade",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The class name of the weapon to switch to.\n\nIf the player doesn't have the specified weapon, nothing will happen. You can use <page>Player:Give</page> to give the weapon first.",
            "name": "className",
            "type": "string"
          }
        ],
        "description": "Sets the active weapon of the player by its class name.\n\n<warning>This will switch the weapon out of prediction, causing delay on the client and <page>WEAPON:Deploy</page> and <page>WEAPON:Holster</page> to be called out of prediction. Try using <page>CUserCmd:SelectWeapon</page> or <page>input.SelectWeapon</page>, instead.</warning>\n\n<note>This will trigger the weapon switch event and associated animations. To switch weapons silently, use <page>Player:SetActiveWeapon</page>.</note>",
        "name": "SelectWeapon",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Name/class/index of the hint. You can find a list of hint names for this function <page text=\"here\">List_of_Hint_Classes</page>.",
            "name": "name",
            "type": "string"
          },
          {
            "description": "Delay in seconds before showing the hint",
            "name": "delay",
            "type": "number"
          }
        ],
        "description": "Sends a hint to a player.\n\n<note>This function is only available in Sandbox and its derivatives. Since this adds `#Hint_` to the beginning of each message, you should only use it with default hint messages, or those cached with <page>language.Add</page>. For hints with custom text, look at <page>notification.AddLegacy</page>.</note>",
        "name": "SendHint",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/player_extension.lua",
          "lineEnd": 127,
          "lineStart": 119
        }
      },
      {
        "arguments": [
          {
            "description": "The script to execute.",
            "name": "script",
            "type": "string"
          }
        ],
        "description": "Executes a simple Lua string on the player.\n<note>If you need to use this function more than once consider using <page>net</page> library. Send net message and make the entire code you want to execute in <page>net.Receive</page> on client.</note>\n\n<note>The string is limited to 254 bytes. Consider using the <page text=\"net library\">Net_Library_Usage</page> for more advanced server-client interaction.</note>",
        "name": "SendLua",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The weapon to equip.",
            "name": "weapon",
            "type": "Weapon"
          }
        ],
        "description": "Sets the player's active weapon. You should use <page>CUserCmd:SelectWeapon</page> or <page>Player:SelectWeapon</page>, instead in most cases.\n\nThis function will not trigger the weapon switch events or associated equip animations. It will bypass\n<page>GM:PlayerSwitchWeapon</page> and the currently active weapon's <page>WEAPON:Holster</page> return value.",
        "name": "SetActiveWeapon",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new activity to set. See <page>Enums/ACT</page>.",
            "name": "act",
            "type": "number"
          }
        ],
        "description": "Sets the player's activity.",
        "name": "SetActivity",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Allowed to rotate",
            "name": "Allowed",
            "type": "boolean"
          }
        ],
        "description": "Set if the players' model is allowed to rotate around the pitch and roll axis.",
        "name": "SetAllowFullRotation",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Show we allow player to use their weapons in a vehicle or not.",
            "name": "allow",
            "type": "boolean"
          }
        ],
        "description": "Allows player to use their weapons in a vehicle. You need to call this before entering a vehicle.\n\n<bug issue=\"1277\">Shooting in a vehicle fires two bullets.</bug>",
        "name": "SetAllowWeaponsInVehicle",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The amount of ammunition to set.",
            "name": "ammoCount",
            "type": "number"
          },
          {
            "description": "The ammunition type. Can be either number ammo ID or string ammo name. See <page>Default Ammo Types</page> for default values.",
            "name": "ammoType",
            "type": "any"
          }
        ],
        "description": "Sets the amount of the specified ammo for the player.",
        "name": "SetAmmo",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The amount to set the armor value of the player to.",
            "name": "amount",
            "type": "number"
          }
        ],
        "description": "Sets the player armor value.\n\nSee <page>GM:HandlePlayerArmorReduction</page> for a hook that allows manipulating what armor does.",
        "name": "SetArmor",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether to avoid teammates, or not.",
            "name": "avoidPlayers",
            "type": "boolean"
          }
        ],
        "description": "Pushes the player away from other players whenever the player inside another players' bounding box.\n\nThis avoidance is performed clientside by altering movement sent to server.\n\nThis applies to players within a single team. (<page>Player:Team</page>)",
        "name": "SetAvoidPlayers",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "`true` allows the player to walk.",
            "name": "canWalk",
            "type": "boolean"
          }
        ],
        "description": "Set if the player should be allowed to walk using the (default) alt key. (`+walk` keybind)",
        "name": "SetCanWalk",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether to make the player able or unable to zoom.",
            "name": "canZoom",
            "type": "boolean"
          }
        ],
        "description": "Sets whether the player can use the HL2 suit zoom (`+zoom` bind) or not.",
        "name": "SetCanZoom",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The class id the player is being set with.",
            "name": "classID",
            "type": "number"
          }
        ],
        "description": "<internal>Use <page>player_manager.SetPlayerClass</page> instead.</internal>\n\nSets the player's class id.",
        "name": "SetClassID",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The walk speed multiplier that crouch speed should be.",
            "name": "speed",
            "type": "number"
          }
        ],
        "description": "Sets the crouched walk speed multiplier.\n\nHas no effect for values above 1.\n\nSee also <page>Player:SetWalkSpeed</page> and <page>Player:GetCrouchedWalkSpeed</page>.",
        "name": "SetCrouchedWalkSpeed",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new view offset.",
            "name": "viewOffset",
            "type": "Vector"
          }
        ],
        "description": "Sets the **actual** view offset which equals the difference between the players actual position and their view when standing.\n\nDo not confuse with <page>Player:SetViewOffset</page> and <page>Player:SetViewOffsetDucked</page>",
        "name": "SetCurrentViewOffset",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Number of deaths (positive or negative)",
            "name": "deathCount",
            "type": "number"
          }
        ],
        "description": "Sets a player's death count",
        "name": "SetDeaths",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "NULL",
            "description": "The entity the player should drive.",
            "name": "drivingEntity",
            "type": "Entity"
          },
          {
            "description": "The driving mode index.",
            "name": "drivingMode",
            "type": "number"
          }
        ],
        "description": "<internal></internal>\nSets the driving entity and driving mode.\n\nUse <page>drive.PlayerStartDriving</page> instead, see <page>Entity Driving</page>.",
        "name": "SetDrivingEntity",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The index of the DSP sound filter to apply.\n\nFor a list of the available IDs and their meaning, see <page text=\"DSP Presets\">DSP_Presets</page>.",
            "name": "dspEffectId",
            "type": "number"
          },
          {
            "description": "If set to true the sound filter will be removed faster.\n<note>\n**This only works clientside**\nIf used serverside, a message will be displayed (`SetPlayerDSP: fastReset only valid from client`) in the server console.\n</note>",
            "name": "fastReset",
            "type": "boolean"
          }
        ],
        "description": "Activates a given DSP (Digital Signal Processor) effect on all sounds that the player hears. This is equivalent to setting `dsp_player` convar on the player.\n\nTo apply a DSP effect to individual sounds, see <page>CSoundPatch:SetDSP</page>",
        "name": "SetDSP",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "How quickly the player will duck.",
            "name": "duckSpeed",
            "type": "number"
          }
        ],
        "description": "Sets how quickly a player ducks.\n\n<bug issue=\"2722\">This will not work for values &gt;= 1.</bug>",
        "name": "SetDuckSpeed",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Angle to set the view to",
            "name": "angle",
            "type": "Angle"
          }
        ],
        "description": "Sets the local angle of the player's view (may rotate body too if angular difference is large)\n\n<note>This function works differently when the player is in a vehicle. In that case passing `Angle(0, 90, 0)` will have the player look forward (out the windshield) and `Angle(0, 0, 0)` will have them look to the right.</note>",
        "name": "SetEyeAngles",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "the angle of perception (FOV). Set to 0 to return to default user FOV. ( Which is ranging from 75 to 100, depending on user settings )",
            "name": "fov",
            "type": "number"
          },
          {
            "default": "0",
            "description": "the time it takes to transition to the FOV expressed in a floating point.",
            "name": "time",
            "type": "number"
          },
          {
            "default": "self",
            "description": "The requester or \"owner\" of the zoom event. Only this entity will be able to change the player's FOV until it is set back to 0.",
            "name": "requester",
            "type": "Entity"
          }
        ],
        "description": "Set a player's FOV (Field Of View) over a certain amount of time.\n\nThis is meant to be called on the server or shared (for prediction), it will have no effect if called clientside only. You may want to use <page>GM:CalcView</page> for that instead.",
        "name": "SetFOV",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Number of frags (positive or negative)",
            "name": "fragCount",
            "type": "number"
          }
        ],
        "description": "Sets a player's frags (kills)",
        "name": "SetFrags",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The hands entity to set",
            "name": "hands",
            "type": "Entity"
          }
        ],
        "description": "Sets the hands entity of a player.\n\nThe hands entity is an entity introduced in Garry's Mod 13 and it's used to show the player's hands attached to the viewmodel.\nThis is similar to the approach used in L4D and CS:GO, for more information on how to implement this system in your gamemode visit <page>Using Viewmodel Hands</page>.",
        "name": "SetHands",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "NULL",
            "description": "The widget entity that the player is hovering.",
            "name": "widget",
            "type": "Entity"
          }
        ],
        "description": "Sets the widget that is currently hovered by the player's mouse.",
        "name": "SetHoveredWidget",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The hull mins, the lowest corner of the Player's bounding box.",
            "name": "mins",
            "type": "Vector"
          },
          {
            "description": "The hull maxs, the highest corner of the Player's bounding box, opposite of the mins.",
            "name": "maxs",
            "type": "Vector"
          }
        ],
        "description": "Sets the size of the <page text=\"Player's\">Player</page> [Axis-Aligned Bounding Box (AABB)](https://en.wikipedia.org/wiki/Minimum_bounding_box) used for physics and movement <page text=\"Hull Traces\">util.TraceHull</page>.\n\nSee also: <page>Player:GetHull</page>, <page>Player:SetHullDuck</page>, <page>Player:GetHullDuck</page>\n\n<note>\nThis value is **not** replicated automatically to clients and must be manually called in both the Server and Client <page text=\"Realms\">States</page>.\n</note>",
        "name": "SetHull",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The hull mins, the lowest corner of the Player's bounding box while crouching.",
            "name": "mins",
            "type": "Vector"
          },
          {
            "description": "The hull maxs, the highest corner of the Player's crouching bounding box, opposite of the mins.",
            "name": "maxs",
            "type": "Vector"
          }
        ],
        "description": "Sets the size of the <page text=\"Player's\">Player</page> [Axis-Aligned Bounding Box (AABB)](https://en.wikipedia.org/wiki/Minimum_bounding_box) used for physics and movement <page text=\"Hull Traces\">util.TraceHull</page> while they are crouching (or \"Ducking\").\n\nSee also: <page>Player:GetHullDuck</page>, <page>Player:GetHull</page>, <page>Player:SetHull</page>\n\n<note>\nThis value is **not** replicated automatically to clients and must be manually called in both the Server and Client <page text=\"Realms\">States</page>.\n</note>",
        "name": "SetHullDuck",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new jump velocity.",
            "name": "jumpPower",
            "type": "number"
          }
        ],
        "description": "Sets the jump power, eg. the velocity that will be applied to the player when they jump.",
        "name": "SetJumpPower",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The ladder climbing speed.",
            "name": "speed",
            "type": "number"
          }
        ],
        "description": "Sets the player's ladder climbing speed.\n\nSee <page>Player:SetWalkSpeed</page> for normal walking speed, <page>Player:SetRunSpeed</page> for sprinting speed and <page>Player:SetSlowWalkSpeed</page> for slow walking speed.",
        "name": "SetLadderClimbSpeed",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The timescale multiplier.",
            "name": "timescale",
            "type": "number"
          }
        ],
        "description": "Slows down the player movement simulation by the timescale, this is used internally in the HL2 weapon stripping sequence.\n\nIt achieves such behavior by multiplying the <page>Global.FrameTime</page> by the specified timescale at the start of the movement simulation and then restoring it afterwards.\n\n<note>This is reset to 1 on spawn.\n\nThere is no weapon counterpart to this, you'll have to hardcode the multiplier in the weapon or call <page>Weapon:SetNextPrimaryFire</page> / <page>Weapon:SetNextSecondaryFire</page> manually.</note>",
        "name": "SetLaggedMovementValue",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The hitgroup to set as the \"last hit\", see <page>Enums/HITGROUP</page>.",
            "name": "hitgroup",
            "type": "number"
          }
        ],
        "description": "Sets the hitgroup where the player was last hit.",
        "name": "SetLastHitGroup",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new max armor value.",
            "name": "maxarmor",
            "type": "number"
          }
        ],
        "description": "Sets the maximum amount of armor the player should have. This affects default built-in armor pickups, but not <page>Player:SetArmor</page>.",
        "name": "SetMaxArmor",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The maximum speed.",
            "name": "walkSpeed",
            "type": "number"
          }
        ],
        "description": "Sets the maximum speed which the player can move at.\n\n<note>This is called automatically by the engine. If you wish to limit player speed without setting their run/sprint speeds, see <page>CMoveData:SetMaxClientSpeed</page>.</note>",
        "name": "SetMaxSpeed",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Mute or unmute.",
            "name": "mute",
            "type": "boolean"
          }
        ],
        "description": "Sets if the player should be voicechat muted locally.",
        "name": "SetMuted",
        "parent": "Player",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "`true` to disable, `false` to enable collision.",
            "name": "shouldNotCollide",
            "type": "boolean"
          }
        ],
        "description": "Sets whenever the player should not collide with their teammates, based on their <page>Player:Team</page>.\n\n<note>This will only work for teams with ID 1 to 4 due to internal Engine limitations.</note>\n<note>This causes traces with <page text=\"COLLISION_GROUP_PLAYER\">Enums/COLLISION_GROUP</page> to pass through players.</note>",
        "name": "SetNoCollideWithTeammates",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The visibility.",
            "name": "visibility",
            "type": "boolean"
          }
        ],
        "description": "Sets the players visibility towards NPCs.\n\nInternally this toggles the <page text=\"FL_NOTARGET\">Enums/FL</page> flag, which you can manually test for using <page>Entity:IsFlagSet</page>",
        "name": "SetNoTarget",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Spectator mode using <page>Enums/OBS_MODE</page>.",
            "name": "mode",
            "type": "number"
          }
        ],
        "description": "Sets the players observer mode. You must start the spectating first with <page>Player:Spectate</page>.",
        "name": "SetObserverMode",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Name of the PData key",
            "name": "key",
            "type": "string"
          },
          {
            "description": "Value to write to the key (**must** be an SQL valid data type, such as a string or integer)",
            "name": "value",
            "type": "any"
          }
        ],
        "description": "Writes a **P**ersistent **Data** key-value pair to the SQL database. (`sv.db` when called on server, `cl.db` when called on client)\n\nInternally uses the <page>sql</page> library. See <page>util.SetPData</page> for cases when the player is not currently on the server.\n\n<note>This function internally uses <page>Player:SteamID64</page>, it previously utilized <page>Player:UniqueID</page> which could have caused collisions (two or more players sharing the same PData entry). <page>Player:SetPData</page> now replaces all instances of <page>Player:UniqueID</page> with <page>Player:SteamID64</page> when running <page>Player:SetPData</page></note>\n\n<note>PData is not networked from servers to clients!</note>",
        "name": "SetPData",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the operation was successful or not",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/player.lua",
          "lineEnd": 146,
          "lineStart": 133
        }
      },
      {
        "arguments": [
          {
            "description": "This is the color to be set. The format is Vector(r, g, b), and each color should be between 0 and 1.",
            "name": "Color",
            "type": "Vector"
          }
        ],
        "description": "Sets the player model's color. The part of the model that is colored is determined by the model itself, and is different for each model.",
        "name": "SetPlayerColor",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "NULL",
            "description": "The widget the player is currently using.",
            "name": "pressedWidget",
            "type": "Entity"
          }
        ],
        "description": "Sets the widget that is currently in use by the player's mouse.\n\nHaving a pressed widget stops the player from firing their weapon to allow input to be passed onto the widget.",
        "name": "SetPressedWidget",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new render angles to set",
            "name": "ang",
            "type": "Angle"
          }
        ],
        "description": "Sets the render angles of a player. Value set by this function is reset to player's angles (<page>Entity:GetAngles</page>) right after <page>GM:UpdateAnimation</page>.",
        "name": "SetRenderAngles",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new sprint speed when `sv_friction` is below `10`. Higher `sv_friction` values will result in slower speed.\n\nHas to be `7` or above or the player **won't** be able to move.",
            "name": "runSpeed",
            "type": "number"
          }
        ],
        "description": "Sets the player's sprint speed.\n\nSee also <page>Player:GetRunSpeed</page>, <page>Player:SetWalkSpeed</page> and <page>Player:SetMaxSpeed</page>.\n<note>player_default class run speed is: `400`</note>",
        "name": "SetRunSpeed",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new slow walking speed.",
            "name": "speed",
            "type": "number"
          }
        ],
        "description": "Sets the player's slow walking speed, which is activated via <key>+WALK</key> keybind.\n\nSee <page>Player:SetWalkSpeed</page> for normal walking speed, <page>Player:SetRunSpeed</page> for sprinting speed and <page>Player:SetLadderClimbSpeed</page> for ladder climb speed.",
        "name": "SetSlowWalkSpeed",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new maximum height the player can step onto without jumping",
            "name": "stepHeight",
            "type": "number"
          }
        ],
        "description": "Sets the maximum height a player can step onto without jumping.",
        "name": "SetStepSize",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new suit power.",
            "name": "power",
            "type": "number"
          }
        ],
        "description": "Sets the player's HEV suit power.\n\n<bug issue=\"3449\">This will only work for the local player when used clientside.</bug>",
        "name": "SetSuitPower",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whenever to suppress the notice or not.",
            "name": "doSuppress",
            "type": "boolean"
          }
        ],
        "description": "Sets whenever to suppress the pickup notification for the player.",
        "name": "SetSuppressPickupNotices",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The team that the player is being set to.",
            "name": "team",
            "type": "number"
          }
        ],
        "description": "Sets the player to the chosen team. The value is networked to clients at reduced bit count (16 bits) as as a signed value, so the real range is [-32768, 32767].\n\nCan be retrieved via <page>Player:Team</page>",
        "name": "SetTeam",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "How quickly the player will un-duck",
            "name": "UnDuckSpeed",
            "type": "number"
          }
        ],
        "description": "Sets how quickly a player un-ducks",
        "name": "SetUnDuckSpeed",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "nil",
            "description": "If the player is spectating an entity, this should be the entity the player is spectating, so we can use its hands model instead.",
            "name": "ent",
            "type": "Entity"
          }
        ],
        "description": "Sets up the player's hands for the viewmodel. Calls <page>GM:PlayerSetHandsModel</page> to determine the model. If no entity is provided, uses the player's own hands model. If spectating another entity, pass that entity to use its hands model instead.",
        "name": "SetupHands",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "source": {
          "file": "lua/includes/extensions/player.lua",
          "lineEnd": 200,
          "lineStart": 185
        }
      },
      {
        "arguments": [
          {
            "description": "The user group of the player.",
            "name": "groupName",
            "type": "string"
          }
        ],
        "description": "Sets the usergroup of the player.",
        "name": "SetUserGroup",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "source": {
          "file": "lua/includes/extensions/player_auth.lua",
          "lineEnd": 65,
          "lineStart": 61
        }
      },
      {
        "arguments": [
          {
            "description": "The entity to attach the player view to.",
            "name": "viewEntity",
            "type": "Entity"
          }
        ],
        "description": "Attaches the players view to the position and angles of the specified entity.",
        "name": "SetViewEntity",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new desired view offset when standing.",
            "name": "viewOffset",
            "type": "Vector"
          }
        ],
        "description": "Sets the **desired** view offset which equals the difference between the players actual position and their view when standing.\n\nIf you want to set **actual** view offset, use <page>Player:SetCurrentViewOffset</page>\n\nSee also <page>Player:SetViewOffsetDucked</page> for **desired** view offset when crouching.",
        "name": "SetViewOffset",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new desired view offset when crouching.",
            "name": "viewOffset",
            "type": "Vector"
          }
        ],
        "description": "Sets the **desired** view offset which equals the difference between the players actual position and their view when crouching.\n\nIf you want to set **actual** view offset, use <page>Player:SetCurrentViewOffset</page>\n\nSee also <page>Player:SetViewOffset</page> for **desired** view offset when standing.",
        "name": "SetViewOffsetDucked",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The angle to set.",
            "name": "punchAngle",
            "type": "Angle"
          }
        ],
        "description": "Sets client's view punch angle, but not the velocity. See <page>Player:ViewPunch</page>",
        "name": "SetViewPunchAngles",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The angle velocity to set.",
            "name": "punchVel",
            "type": "Angle"
          }
        ],
        "description": "Sets client's view punch velocity. See <page>Player:ViewPunch</page> and <page>Player:SetViewPunchAngles</page>",
        "name": "SetViewPunchVelocity",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The voice volume scale, where `0` is 0% and `1` is 100%.",
            "name": "",
            "type": "number"
          }
        ],
        "description": "Sets the voice volume scale for given player on client. This value will persist from server to server, but will be reset when the game is shut down.\n\n<note>This doesn't work on bots, their scale will always be `1`. Does not work with multiruns.</note>",
        "name": "SetVoiceVolumeScale",
        "parent": "Player",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new walk speed when `sv_friction` is below `10`. Higher `sv_friction` values will result in slower speed.\n\nHas to be `7` or above or the player **won't** be able to move.",
            "name": "walkSpeed",
            "type": "number"
          }
        ],
        "description": "Sets the player's normal walking speed. Not sprinting, not slow walking <key>+walk</key>.\n\nSee also <page>Player:SetSlowWalkSpeed</page>, <page>Player:GetWalkSpeed</page>, <page>Player:SetCrouchedWalkSpeed</page>, <page>Player:SetMaxSpeed</page> and <page>Player:SetRunSpeed</page>.\n\n<bug issue=\"2030\">Using a speed of `0` can lead to prediction errors, and can cause players to move at sv_maxvelocity</bug>\n\n<note>`player_default` class walk speed is: `200`.</note>",
        "name": "SetWalkSpeed",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "This is the color to be set. The format is Vector(r,g,b), and each color should be between 0 and 1.",
            "name": "Color",
            "type": "Vector"
          }
        ],
        "description": "Sets the player weapon's color. The part of the model that is colored is determined by the model itself, and is different for each model.",
        "name": "SetWeaponColor",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Returns whether the player's player model will be drawn at the time the function is called.",
        "name": "ShouldDrawLocalPlayer",
        "parent": "Player",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "`true` if the player's playermodel is visible",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether to drop the player's current weapon or not",
            "name": "drop",
            "type": "boolean"
          }
        ],
        "description": "Sets whether the player's current weapon should drop on death.\n\n<note>This is reset on spawn to the <page text=\"player class\">Player_Classes</page>'s **DropWeaponOnDie** field by <page>player_manager.OnPlayerSpawn</page>.</note>",
        "name": "ShouldDropWeapon",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Opens the player steam profile page in the steam overlay browser.",
        "name": "ShowProfile",
        "parent": "Player",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "Entity that was dropped.",
            "name": "ent",
            "type": "Entity"
          }
        ],
        "description": "Signals the entity that it was dropped by the gravity gun.",
        "name": "SimulateGravGunDrop",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The entity picked up",
            "name": "ent",
            "type": "Entity"
          },
          {
            "default": "false",
            "description": "Whether or not to show lightning effects around the entity",
            "name": "lightning",
            "type": "boolean"
          }
        ],
        "description": "Signals the entity that it was picked up by the gravity gun. This call is only required if you want to simulate the situation of picking up objects.",
        "name": "SimulateGravGunPickup",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Spectate mode, see <page>Enums/OBS_MODE</page>.",
            "name": "mode",
            "type": "number"
          }
        ],
        "description": "<warning>The player must be respawned, otherwise they will be able to walk through doors and become invincible.</warning>\nStarts spectate mode for given player. This will also affect the players movetype in some cases.",
        "name": "Spectate",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Entity to spectate.",
            "name": "entity",
            "type": "Entity"
          }
        ],
        "description": "<warning>The player must be respawned, otherwise they will be able to walk through doors and become invincible.</warning>\nMakes the player spectate the entity.\n\nTo get the applied spectated entity, use <page>Player:GetObserverTarget</page>.",
        "name": "SpectateEntity",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The location to spray from",
            "name": "sprayOrigin",
            "type": "Vector"
          },
          {
            "description": "The location to spray to",
            "name": "sprayEndPos",
            "type": "Vector"
          }
        ],
        "description": "Makes a player spray their decal.",
        "name": "SprayDecal",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Disables the sprint on the player.",
        "name": "SprintDisable",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Enables the sprint on the player.",
        "name": "SprintEnable",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "description": "<deprecated>This appears to be a direct binding to internal functionality that is overridden by the engine every frame so calling these functions may not have any or expected effect.</deprecated>\n\nDoesn't appear to do anything.",
        "name": "StartSprinting",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "<deprecated>This appears to be a direct binding to internal functionality that is overridden by the engine every frame so calling these functions may not have any or expected effect.</deprecated>\n\nWhen used in a <page>GM:SetupMove</page> hook, this function will force the player to walk, as well as preventing the player from sprinting.",
        "name": "StartWalking",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Returns the player's SteamID.\n\nSee <page>Player:AccountID</page> for a shorter version of the SteamID and <page>Player:SteamID64</page> for the full SteamID.\n\nIt is recommended to use <page>Player:SteamID64</page> over the other SteamID formats whenever possible.\n\n<note>In a `-multirun` environment, this will return `STEAM_ID_LAN` for all \"copies\" of a player because they are not authenticated with Steam.\n\nFor Bots this will return `BOT`.</note>",
        "name": "SteamID",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "\"Text\" representation of the player's SteamID.",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns the player's full **64-bit SteamID**, also known as **CommunityID**. Information on how data is packed into this value can be found [here](https://developer.valvesoftware.com/wiki/SteamID).\n\nSee <page>Player:AccountID</page> for a function that returns only the Account ID part of the SteamID and <page>Player:SteamID</page> for the text version of the SteamID.\n\n<note>In a `-multirun` environment, this will return `\"0\"` for all \"copies\" of a player because they are not authenticated with Steam.\n\nFor bots, this will return `90071996842377216` (equivalent to `STEAM_0:0:0`) for the first bot to join.\n\nFor each additional bot, the number increases by 1. So the next bot will be `90071996842377217` (`STEAM_0:1:0`) then `90071996842377218` (`STEAM_0:0:1`) and so on.</note>",
        "name": "SteamID64",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Player's 64-bit SteamID aka CommunityID.\n\n<note>The return value is a string, not a number, since Lua's numbers are unable to store the entire 64bit numbers without data loss.</note>",
            "type": "string"
          }
        ]
      },
      {
        "description": "<deprecated>This appears to be a direct binding to internal functionality that is overridden by the engine every frame so calling these functions may not have any or expected effect.</deprecated>\n\nWhen used in a <page>GM:SetupMove</page> hook, this function will prevent the player from sprinting.\n\nWhen +walk is engaged, the player will still be able to sprint to half speed (normal run speed) as opposed to full sprint speed without this function.",
        "name": "StopSprinting",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "<deprecated>This appears to be a direct binding to internal functionality that is overridden by the engine every frame so calling these functions may not have any or expected effect.</deprecated>\n\nWhen used in a <page>GM:SetupMove</page> hook, this function behaves unexpectedly by preventing the player from sprinting similar to <page>Player:StopSprinting</page>.",
        "name": "StopWalking",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Turns off the zoom mode of the player. (+zoom console command)\n\nBasically equivalent of entering \"-zoom\" into player's console.",
        "name": "StopZooming",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "description": "<deprecated>Alias of <page>Player:RemoveAllAmmo</page></deprecated>\n\nRemoves all ammo from the player.",
        "name": "StripAmmo",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The weapon class to remove",
            "name": "weapon",
            "type": "string"
          }
        ],
        "description": "Removes the specified weapon class from a certain player\n<note>this function will call the <page>Entity:OnRemove</page> but if you try use <page>Entity:GetOwner</page> it will return nil</note>",
        "name": "StripWeapon",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Removes all weapons from a certain player",
        "name": "StripWeapons",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Hint name/class/index to prevent from showing up. You can find a list of hint names for this function <page text=\"here\">List_of_Hint_Classes</page>.",
            "name": "name",
            "type": "string"
          }
        ],
        "description": "Prevents a hint from showing up.\n\n\n<note>This function is only available in Sandbox and its derivatives</note>",
        "name": "SuppressHint",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/player_extension.lua",
          "lineEnd": 137,
          "lineStart": 129
        }
      },
      {
        "description": "Attempts to switch the player weapon to the one specified in the \"cl_defaultweapon\" convar, if the player does not own the specified weapon nothing will happen.\n\nIf you want to switch to a specific weapon, use: <page>Player:SetActiveWeapon</page>",
        "name": "SwitchToDefaultWeapon",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "source": {
          "file": "lua/includes/extensions/player.lua",
          "lineEnd": 177,
          "lineStart": 166
        }
      },
      {
        "description": "Returns the player's team ID, set by <page>Player:SetTeam</page>\n\nReturns 0 clientside when the game is not fully loaded.",
        "name": "Team",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The player's team's index number, as in the <page>Enums/TEAM</page> or a custom team defined in <page>team.SetUp</page>.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the time in seconds since the player connected.\n\nBots will always return value 0.",
        "name": "TimeConnected",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "How long this player was connected to the server for, in seconds.",
            "name": "connectedTime",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The start position of the hull trace.",
            "name": "startPos",
            "type": "Vector"
          },
          {
            "description": "The end position of the hull trace.",
            "name": "endPos",
            "type": "Vector"
          },
          {
            "description": "The minimum coordinates of the hull.",
            "name": "mins",
            "type": "Vector"
          },
          {
            "description": "The maximum coordinates of the hull.",
            "name": "maxs",
            "type": "Vector"
          },
          {
            "description": "The damage to be applied.",
            "name": "damage",
            "type": "number"
          },
          {
            "description": "Bitflag specifying the damage type, see <page>Enums/DMG</page>.",
            "name": "damageFlags",
            "type": "number"
          },
          {
            "description": "The force to be applied to the hit object.",
            "name": "damageForce",
            "type": "number"
          },
          {
            "description": "Whether to apply damage to all hit NPCs or not.",
            "name": "damageAllNPCs",
            "type": "boolean"
          }
        ],
        "description": "Performs a trace hull and applies damage to the entities hit, returns the first entity hit.\n\n<warning>Hitting the victim entity with this function in <page>ENTITY:OnTakeDamage</page> can cause infinite loops.</warning>",
        "name": "TraceHullAttack",
        "parent": "Player",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The hit entity",
            "type": "Entity"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The initial <page>Enums/ACT</page>",
            "name": "act",
            "type": "number"
          }
        ],
        "description": "Translates <page>Enums/ACT</page> according to the holdtype of players currently held weapon.",
        "name": "TranslateWeaponActivity",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Translated <page>Enums/ACT</page>",
            "type": "number"
          }
        ]
      },
      {
        "description": "Unfreezes all objects the player has frozen with their Physics Gun. Same as double pressing <key>R</key> while holding Physics Gun.",
        "name": "UnfreezePhysicsObjects",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "source": {
          "file": "gamemodes/base/gamemode/obj_player_extend.lua",
          "lineEnd": 153,
          "lineStart": 98
        }
      },
      {
        "description": "<deprecated><br>\n**This function has collisions,** where more than one player can have the same UniqueID. It is **highly** recommended to use <page>Player:SteamID64</page>, <page>Player:SteamID</page> or <page>Player:AccountID</page> instead, which are guaranteed to be unique to each player.</deprecated>\n\nReturns a 32 bit integer that remains constant for a player across joins/leaves and across different servers. This can be used when a string is inappropriate - e.g. in a database primary key.\n\n<note>In Singleplayer, this function will always return 1.</note>\n<bug issue=\"6389\">In a `-multirun` environment, the value returned is different on the serverside and clientside.</bug>",
        "name": "UniqueID",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The player's Unique ID",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Unique table key.",
            "name": "key",
            "type": "any"
          }
        ],
        "description": "Returns a table that will stay allocated for the specific player serverside between connects until the server shuts down. On client it has no such special behavior.\n\n<note>This table is not synchronized (networked) between client and server.</note>",
        "name": "UniqueIDTable",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The table that contains any info you have put in it.",
            "type": "table"
          }
        ],
        "source": {
          "file": "gamemodes/base/gamemode/obj_player_extend.lua",
          "lineEnd": 170,
          "lineStart": 157
        }
      },
      {
        "description": "Unlocks the player movement if locked previously.\n\nWill disable godmode for the player if locked previously.",
        "name": "UnLock",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "description": "<warning>The player must be respawned, otherwise they will be able to walk through doors and become invincible.</warning>\nStops the player from spectating another entity.",
        "name": "UnSpectate",
        "parent": "Player",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Returns the player's user ID. This number will always be unique, but will reset if the player reconnects. (Always increments for each connecting player)\n\nYou can use <page>Global.Player</page> global function to get a player by their user ID.",
        "name": "UserID",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The player's user ID",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The angle in which to push the player's screen.",
            "name": "punchAngle",
            "type": "Angle"
          }
        ],
        "description": "Simulates a push on the client's screen. This **adds** view punch velocity, and does not reset the current view punch angle, for which you can use <page>Player:SetViewPunchAngles</page>.\n\n<note>Despite being defined shared, it only functions when called server-side.</note>",
        "name": "ViewPunch",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "0",
            "description": "Reset all ViewPunch below this threshold.",
            "name": "tolerance",
            "type": "number"
          }
        ],
        "description": "Resets the player's view punch (and the view punch velocity, read more at <page>Player:ViewPunch</page>) effect back to normal.",
        "name": "ViewPunchReset",
        "parent": "Player",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Returns the players voice volume, how loud the player's voice communication currently is, as a number in range of [0,1].",
        "name": "VoiceVolume",
        "parent": "Player",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The voice volume.",
            "type": "number"
          }
        ]
      }
    ],
    "name": "Player"
  },
  {
    "description": "A client side projected texture, created by <page>Global.ProjectedTexture</page>.",
    "functions": [
      {
        "description": "Returns the angle of the ProjectedTexture, which were previously set by <page>ProjectedTexture:SetAngles</page>",
        "name": "GetAngles",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The angles of the ProjectedTexture.",
            "type": "Angle"
          }
        ]
      },
      {
        "description": "Returns the brightness of the ProjectedTexture, which was previously set by <page>ProjectedTexture:SetBrightness</page>",
        "name": "GetBrightness",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The brightness of the ProjectedTexture.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the color of the ProjectedTexture, which was previously set by <page>ProjectedTexture:SetColor</page>.\n\n<bug issue=\"2407\">The returned color will not have the color metatable.</bug>",
        "name": "GetColor",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "<page>Color</page>, the color of the ProjectedTexture.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns the constant attenuation of the projected texture, which can also be set by <page>ProjectedTexture:SetConstantAttenuation</page>.",
        "name": "GetConstantAttenuation",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The constant attenuation",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns whether shadows are enabled for this ProjectedTexture, which was previously set by <page>ProjectedTexture:SetEnableShadows</page>",
        "name": "GetEnableShadows",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Whether shadows are enabled.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the projection distance of the ProjectedTexture, which was previously set by <page>ProjectedTexture:SetFarZ</page>",
        "name": "GetFarZ",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The projection distance of the ProjectedTexture.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the horizontal FOV of the ProjectedTexture, which was previously set by <page>ProjectedTexture:SetHorizontalFOV</page> or <page>ProjectedTexture:SetFOV</page>",
        "name": "GetHorizontalFOV",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The horizontal FOV of the ProjectedTexture.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns whenever or not the Texture should light up world geometry.",
        "name": "GetLightWorld",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "`true` if the Texture should light up world geometry.",
            "name": "lightworld",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the linear attenuation of the projected texture, which can also be set by <page>ProjectedTexture:SetLinearAttenuation</page>.",
        "name": "GetLinearAttenuation",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The linear attenuation.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the NearZ value of the ProjectedTexture, which was previously set by <page>ProjectedTexture:SetNearZ</page>",
        "name": "GetNearZ",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "NearZ of the ProjectedTexture.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the state of projected texture view-frustum culling. See <page>ProjectedTexture:SetNoCull</page>.",
        "name": "GetNoCull",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "`false` if culling is enabled (default), `true` if disabled.",
            "name": "enable",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the current orthographic settings of the Projected Texture. To set these values, use <page>ProjectedTexture:SetOrthographic</page>.",
        "name": "GetOrthographic",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Whether or not this projected texture is orthographic. When false, nothing else is returned.",
            "type": "boolean"
          },
          {
            "description": "left",
            "type": "number"
          },
          {
            "description": "top",
            "type": "number"
          },
          {
            "description": "right",
            "type": "number"
          },
          {
            "description": "bottom",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the position of the ProjectedTexture, which was previously set by <page>ProjectedTexture:SetPos</page>",
        "name": "GetPos",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The position of the ProjectedTexture.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the quadratic attenuation of the projected texture, which can also be set by <page>ProjectedTexture:SetQuadraticAttenuation</page>.",
        "name": "GetQuadraticAttenuation",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The quadratic attenuation",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the shadow depth bias of the projected texture.\n\nSet by <page>ProjectedTexture:SetShadowDepthBias</page>.",
        "name": "GetShadowDepthBias",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The current shadow depth bias.",
            "name": "bias",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the shadow \"filter size\" of the projected texture. `0` is fully pixelated, higher values will blur the shadow more.\n\nSet by <page>ProjectedTexture:SetShadowFilter</page>.",
        "name": "GetShadowFilter",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The current shadow filter size.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the shadow depth slope scale bias of the projected texture.\n\nSet by <page>ProjectedTexture:SetShadowSlopeScaleDepthBias</page>.",
        "name": "GetShadowSlopeScaleDepthBias",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The current shadow depth slope scale bias.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the target entity of this projected texture.",
        "name": "GetTargetEntity",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The current target entity.",
            "type": "Entity"
          }
        ]
      },
      {
        "description": "Returns the texture of the ProjectedTexture, which was previously set by <page>ProjectedTexture:SetTexture</page>",
        "name": "GetTexture",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The texture of the ProjectedTexture.",
            "type": "ITexture"
          }
        ]
      },
      {
        "description": "Returns the texture frame of the ProjectedTexture, which was previously set by <page>ProjectedTexture:SetTextureFrame</page>",
        "name": "GetTextureFrame",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The texture frame.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the vertical FOV of the ProjectedTexture, which was previously set by <page>ProjectedTexture:SetVerticalFOV</page> or <page>ProjectedTexture:SetFOV</page>",
        "name": "GetVerticalFOV",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The vertical FOV of the ProjectedTexture.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns true if the projected texture is valid (i.e. has not been removed), false otherwise.\n\nInstead of calling this directly it's a good idea to call <page>Global.IsValid</page> in case the variable is nil.\n\n\n```\nIsValid( ptexture )\n```\n\n\nThis not only checks whether the projected texture is valid - but also checks whether it's nil.",
        "name": "IsValid",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Whether the projected texture is valid.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Removes the projected texture. After calling this, <page>ProjectedTexture:IsValid</page> will return false, and any hooks with the projected texture as the identifier will be automatically deleted.",
        "name": "Remove",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "angle",
            "type": "Angle"
          }
        ],
        "description": "Sets the angles (direction) of the projected texture.\n\nYou must call <page>ProjectedTexture:Update</page> after using this function for it to take effect.",
        "name": "SetAngles",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The brightness to give the projected texture. A float from 0 to 1, where 1 is 100% brightness. Can be higher.",
            "name": "brightness",
            "type": "number"
          }
        ],
        "description": "Sets the brightness of the projected texture.\n\nYou must call <page>ProjectedTexture:Update</page> after using this function for it to take effect.",
        "name": "SetBrightness",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "Must be a <page>Color</page>.\n\nUnlike other projected textures, this color can only go up to 255.",
            "name": "color",
            "type": "table"
          }
        ],
        "description": "Sets the color of the projected texture.\n\nYou must call <page>ProjectedTexture:Update</page> after using this function for it to take effect.",
        "name": "SetColor",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "constAtten",
            "type": "number"
          }
        ],
        "description": "Sets the constant attenuation of the projected texture.\n\nSee also <page>ProjectedTexture:SetLinearAttenuation</page> and <page>ProjectedTexture:SetQuadraticAttenuation</page>.\n\nYou must call <page>ProjectedTexture:Update</page> after using this function for it to take effect.",
        "name": "SetConstantAttenuation",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "newState",
            "type": "boolean"
          }
        ],
        "description": "Enable or disable shadows cast from the projected texture.\n\n<note>As with all types of projected textures (including the player's flashlight and env_projectedtexture), there can only be 8 projected textures with shadows enabled in total.<br><br>This limit can be increased with the launch parameter `-numshadowtextures LIMIT` where `LIMIT` is the new limit.<br><br>Naturally, many projected lights with shadows enabled will drastically decrease framerate.</note>\n\nYou must call <page>ProjectedTexture:Update</page> after using this function for it to take effect.",
        "name": "SetEnableShadows",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "farZ",
            "type": "number"
          }
        ],
        "description": "Sets the distance at which the projected texture ends.\n\nYou must call <page>ProjectedTexture:Update</page> after using this function for it to take effect.",
        "name": "SetFarZ",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "Must be higher than 0 and lower than 180",
            "name": "fov",
            "type": "number"
          }
        ],
        "description": "Sets the angle of projection.\n\nYou must call <page>ProjectedTexture:Update</page> after using this function for it to take effect.",
        "name": "SetFOV",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new horizontal Field Of View for the projected texture. Must be in range between 0 and 180.",
            "name": "hFOV",
            "type": "number"
          }
        ],
        "description": "Sets the horizontal angle of projection without affecting the vertical angle.\n\nYou must call <page>ProjectedTexture:Update</page> after using this function for it to take effect.",
        "name": "SetHorizontalFOV",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "Set it to `true` if the Texture should light up world geometry.",
            "name": "lightworld",
            "type": "boolean"
          }
        ],
        "description": "Set whenever or not the Texture should light up world geometry.",
        "name": "SetLightWorld",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "linearAtten",
            "type": "number"
          }
        ],
        "description": "Sets the linear attenuation of the projected texture.\n\nSee also <page>ProjectedTexture:SetConstantAttenuation</page> and <page>ProjectedTexture:SetQuadraticAttenuation</page>.\n\nThe default value of linear attenuation when the projected texture is created is 100. (others are 0, as you are not supposed to mix them)\n\nYou must call <page>ProjectedTexture:Update</page> after using this function for it to take effect.",
        "name": "SetLinearAttenuation",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "nearZ",
            "type": "number"
          }
        ],
        "description": "Sets the distance at which the projected texture begins its projection.\n\nYou must call <page>ProjectedTexture:Update</page> after using this function for it to take effect.\n\n<note>Setting this to 0 will disable the projected texture completely! This may be useful if you want to disable a projected texture without actually removing it</note>\n\n<note>This seems to affect the rendering of shadows - a higher Near Z value will have shadows begin to render closer to their casting object. Comparing a low Near Z value (like 1) with a normal one (12) or high one (1000) is the easiest way to understand this artifact</note>",
        "name": "SetNearZ",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "`false` to enable culling (default), `true` to disable.",
            "name": "enable",
            "type": "boolean"
          }
        ],
        "description": "Allows disabling of projected texture view-frustum culling for cases where said culling creates unwanted side effects. Disabling culling will have a negative effect on performance.",
        "name": "SetNoCull",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "When false, all other arguments are ignored and the texture is reset to perspective projection.",
            "name": "orthographic",
            "type": "boolean"
          },
          {
            "description": "The amount of units left from the projected texture's origin to project.",
            "name": "left",
            "type": "number"
          },
          {
            "description": "The amount of units upwards from the projected texture's origin to project.",
            "name": "top",
            "type": "number"
          },
          {
            "description": "The amount of units right from the projected texture's origin to project.",
            "name": "right",
            "type": "number"
          },
          {
            "description": "The amount of units downwards from the projected texture's origin to project.",
            "name": "bottom",
            "type": "number"
          }
        ],
        "description": "Changes the current projected texture between orthographic and perspective projection.\n\nYou must call <page>ProjectedTexture:Update</page> after using this function for it to take effect.\n\nShadows dont work. (For non static props and for most map brushes)",
        "name": "SetOrthographic",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "position",
            "type": "Vector"
          }
        ],
        "description": "Move the Projected Texture to the specified position.\n\nYou must call <page>ProjectedTexture:Update</page> after using this function for it to take effect.",
        "name": "SetPos",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "quadAtten",
            "type": "number"
          }
        ],
        "description": "Sets the quadratic attenuation of the projected texture.\n\nSee also <page>ProjectedTexture:SetLinearAttenuation</page> and <page>ProjectedTexture:SetConstantAttenuation</page>.\n\nYou must call <page>ProjectedTexture:Update</page> after using this function for it to take effect.",
        "name": "SetQuadraticAttenuation",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The shadow depth bias to set.",
            "name": "bias",
            "type": "number"
          }
        ],
        "description": "Sets the shadow depth bias of the projected texture.\n\nThe initial value is `0.0001`. Normal projected textures obey the value of the `mat_depthbias_shadowmap` <page>ConVar</page>.\n\n<validate>You must call <page>ProjectedTexture:Update</page> after using this function for it to take effect.</validate>",
        "name": "SetShadowDepthBias",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The shadow filter size to set.",
            "name": "filter",
            "type": "number"
          }
        ],
        "description": "Sets the shadow \"filter size\" of the projected texture. `0` is fully pixelated, higher values will blur the shadow more. The initial value is the value of `r_projectedtexture_filter` <page>ConVar</page>.\n\n<validate>You must call <page>ProjectedTexture:Update</page> after using this function for it to take effect.</validate>",
        "name": "SetShadowFilter",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The shadow depth slope scale bias to set.",
            "name": "bias",
            "type": "number"
          }
        ],
        "description": "Sets the shadow depth slope scale bias of the projected texture.\n\nThe initial value is `2`. Normal projected textures obey the value of the `mat_slopescaledepthbias_shadowmap` <page>ConVar</page>.\n\n<validate>You must call <page>ProjectedTexture:Update</page> after using this function for it to take effect.</validate>",
        "name": "SetShadowSlopeScaleDepthBias",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "default": "NULL",
            "description": "The target entity, or `NULL` to reset.",
            "name": "target",
            "type": "Entity"
          }
        ],
        "description": "Sets the target entity for this projected texture, meaning it will only be lighting the given entity and the world.\n\n<validate>You must call <page>ProjectedTexture:Update</page> after using this function for it to take effect.</validate>",
        "name": "SetTargetEntity",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the texture. Can also be an <page>ITexture</page>.",
            "name": "texture",
            "type": "string"
          }
        ],
        "description": "Sets the texture to be projected.\n\nYou must call <page>ProjectedTexture:Update</page> after using this function for it to take effect.",
        "name": "SetTexture",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The frame index to use.",
            "name": "frame",
            "type": "number"
          }
        ],
        "description": "For animated textures, this will choose which frame in the animation will be projected.\n\nYou must call <page>ProjectedTexture:Update</page> after using this function for it to take effect.",
        "name": "SetTextureFrame",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new vertical Field Of View for the projected texture. Must be in range between 0 and 180.",
            "name": "vFOV",
            "type": "number"
          }
        ],
        "description": "Sets the vertical angle of projection without affecting the horizontal angle.\n\nYou must call <page>ProjectedTexture:Update</page> after using this function for it to take effect.",
        "name": "SetVerticalFOV",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ]
      },
      {
        "description": "Updates the Projected Light and applies all previously set parameters.\n\nThe best place to call this function is in <page>GM:PreDrawOpaqueRenderables</page>.",
        "name": "Update",
        "parent": "ProjectedTexture",
        "realms": [
          "client"
        ]
      }
    ],
    "name": "ProjectedTexture"
  },
  {
    "description": "The object returned by <page>ai_schedule.New</page>.",
    "functions": [
      {
        "arguments": [
          {
            "description": "Custom task name",
            "name": "taskname",
            "type": "string"
          },
          {
            "description": "Task data to be passed into the NPC's functions",
            "name": "taskdata",
            "type": "any"
          }
        ],
        "description": "Adds a task to the schedule. See also <page>Schedule:AddTaskEx</page> if you wish to customize task start and run function names.\n\nSee also <page>ENTITY:StartSchedule</page>, <page>NPC:StartEngineTask</page>, and <page>NPC:RunEngineTask</page>.",
        "name": "AddTask",
        "parent": "Schedule",
        "realms": [
          "server"
        ],
        "source": {
          "file": "lua/includes/modules/ai_schedule.lua",
          "lineEnd": 62,
          "lineStart": 56
        }
      },
      {
        "arguments": [
          {
            "description": "The full name of a function on the entity's table to be ran when the task is started.",
            "name": "start",
            "type": "string"
          },
          {
            "description": "The full name of a function on the entity's table to be ran when the task is continuously running.",
            "name": "run",
            "type": "string"
          },
          {
            "description": "Task data to be passed into the NPC's functions",
            "name": "data",
            "type": "number"
          }
        ],
        "description": "Adds a task to the schedule with completely custom function names.\n\nSee also <page>Schedule:AddTask</page>.",
        "name": "AddTaskEx",
        "parent": "Schedule",
        "realms": [
          "server"
        ],
        "source": {
          "file": "lua/includes/modules/ai_schedule.lua",
          "lineEnd": 76,
          "lineStart": 70
        }
      },
      {
        "arguments": [
          {
            "description": "Task name, see [ai_task.h](https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/server/ai_task.h#L89-L502)",
            "name": "taskname",
            "type": "string"
          },
          {
            "description": "Task data, can be a float.",
            "name": "taskdata",
            "type": "number"
          }
        ],
        "description": "Adds an engine task to the schedule.",
        "name": "EngTask",
        "parent": "Schedule",
        "realms": [
          "server"
        ],
        "source": {
          "file": "lua/includes/modules/ai_schedule.lua",
          "lineEnd": 42,
          "lineStart": 36
        }
      },
      {
        "arguments": [
          {
            "description": "Task index.",
            "name": "num",
            "type": "number"
          }
        ],
        "description": "Returns the task at the given index.",
        "name": "GetTask",
        "parent": "Schedule",
        "realms": [
          "server"
        ],
        "source": {
          "file": "lua/includes/modules/ai_schedule.lua",
          "lineEnd": 84,
          "lineStart": 82
        }
      },
      {
        "arguments": [
          {
            "description": "The name passed from <page>ai_schedule.New</page>.",
            "name": "debugName",
            "type": "string"
          }
        ],
        "description": "<internal></internal> Initialises the Schedule. Called by <page>ai_schedule.New</page> when the Schedule is created.",
        "name": "Init",
        "parent": "Schedule",
        "realms": [
          "server"
        ],
        "source": {
          "file": "lua/includes/modules/ai_schedule.lua",
          "lineEnd": 27,
          "lineStart": 21
        }
      },
      {
        "description": "Returns the number of tasks in the schedule.",
        "name": "NumTasks",
        "parent": "Schedule",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The number of tasks in this schedule.",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/includes/modules/ai_schedule.lua",
          "lineEnd": 80,
          "lineStart": 78
        }
      }
    ],
    "name": "Schedule"
  },
  {
    "description": "An object returned by <page>util.Stack</page>.\n\nLike a Lua table, a Stack is a container. It follows the principle of LIFO (last in, first out).\n\nThe Stack works like a stack of papers: the first page you put down (push) will be the last one you remove (pop). That also means that the last page you put down, will be the first to be removed.",
    "functions": [
      {
        "arguments": [
          {
            "default": "1",
            "description": "Amount of items you want to pop.",
            "name": "amount",
            "type": "number"
          }
        ],
        "description": "Pop an item from the stack",
        "name": "Pop",
        "parent": "Stack",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Latest popped item.",
            "name": "object",
            "type": "any"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/util.lua",
          "lineEnd": 277,
          "lineStart": 257
        }
      },
      {
        "arguments": [
          {
            "default": "1",
            "description": "Amount of items you want to pop.",
            "name": "amount",
            "type": "number"
          }
        ],
        "description": "Pop an item from the stack",
        "name": "PopMulti",
        "parent": "Stack",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The Popped Items.",
            "name": "items",
            "type": "table"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/util.lua",
          "lineEnd": 305,
          "lineStart": 279
        }
      },
      {
        "arguments": [
          {
            "description": "The item you want to push",
            "name": "object",
            "type": "any"
          }
        ],
        "description": "Push an item onto the stack",
        "name": "Push",
        "parent": "Stack",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "source": {
          "file": "lua/includes/extensions/util.lua",
          "lineEnd": 255,
          "lineStart": 251
        }
      },
      {
        "description": "Returns the size of the stack",
        "name": "Size",
        "parent": "Stack",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The size of the stack",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/util.lua",
          "lineEnd": 319,
          "lineStart": 317
        }
      },
      {
        "description": "Get the item at the top of the stack",
        "name": "Top",
        "parent": "Stack",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The item at the top of the stack",
            "type": "any"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/util.lua",
          "lineEnd": 315,
          "lineStart": 307
        }
      }
    ],
    "name": "Stack"
  },
  {
    "description": "A brush surface object returned by <page>Entity:GetBrushSurfaces</page>.\n\nBrush surfaces are a part of what makes up the map geometry aside from displacements. Any primitive brush model, including most breakable windows, can be represented by this object.\n\n<note>This object internally uses the `SurfaceHandle_t` class, which is an alias for `msurface2_t*`.</note>",
    "functions": [
      {
        "description": "Returns the brush surface's material.",
        "name": "GetMaterial",
        "parent": "SurfaceInfo",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Material of one portion of a brush model.",
            "type": "IMaterial"
          }
        ]
      },
      {
        "description": "Returns a list of vertices the brush surface is built from.",
        "name": "GetVertices",
        "parent": "SurfaceInfo",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "A list of <page>Vector</page> points. This will usually be 4 corners of a quadrilateral in counter-clockwise order.",
            "type": "table<Vector>"
          }
        ]
      },
      {
        "description": "Checks if the brush surface is a nodraw surface, meaning it will not be drawn by the engine.\n\n<note>This internally checks the SURFDRAW_NODRAW flag.</note>",
        "name": "IsNoDraw",
        "parent": "SurfaceInfo",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Returns true if this surface won't be drawn.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Checks if the brush surface is displaying the skybox.\n\n<note>This internally checks the SURFDRAW_SKY flag.</note>",
        "name": "IsSky",
        "parent": "SurfaceInfo",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Returns true if the surface is the sky.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Checks if the brush surface is water.\n\n<note>This internally checks the SURFDRAW_WATER flag.</note>",
        "name": "IsWater",
        "parent": "SurfaceInfo",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Returns true if the surface is water.",
            "type": "boolean"
          }
        ]
      }
    ],
    "name": "SurfaceInfo"
  },
  {
    "description": "A single AI task. Returned by <page>ai_task.New</page>.",
    "functions": [
      {
        "description": "<internal></internal> Initialises the AI task. Called by <page>ai_task.New</page>.",
        "name": "Init",
        "parent": "Task",
        "realms": [
          "server"
        ],
        "source": {
          "file": "lua/includes/modules/ai_task.lua",
          "lineEnd": 31,
          "lineStart": 29
        }
      },
      {
        "arguments": [
          {
            "description": "The name of the task.",
            "name": "taskname",
            "type": "string"
          },
          {
            "description": "",
            "name": "taskdata",
            "type": "number"
          }
        ],
        "description": "Initialises the AI task as an engine task.",
        "name": "InitEngine",
        "parent": "Task",
        "realms": [
          "server"
        ],
        "source": {
          "file": "lua/includes/modules/ai_task.lua",
          "lineEnd": 43,
          "lineStart": 36
        }
      },
      {
        "arguments": [
          {
            "description": "The name of the NPC method to call on task start.",
            "name": "startname",
            "type": "string"
          },
          {
            "description": "The name of the NPC method to call on task run.",
            "name": "runname",
            "type": "string"
          },
          {
            "description": "",
            "name": "taskdata",
            "type": "number"
          }
        ],
        "description": "Initialises the AI task as NPC method-based.",
        "name": "InitFunctionName",
        "parent": "Task",
        "realms": [
          "server"
        ],
        "source": {
          "file": "lua/includes/modules/ai_task.lua",
          "lineStart": 56
        }
      },
      {
        "description": "Determines if the task is an engine task (`TYPE_ENGINE`, 1).",
        "name": "IsEngineType",
        "parent": "Task",
        "realms": [
          "server"
        ],
        "source": {
          "file": "lua/includes/modules/ai_task.lua",
          "lineStart": 67
        }
      },
      {
        "description": "Determines if the task is an NPC method-based task (`TYPE_FNAME`, 2).",
        "name": "IsFNameType",
        "parent": "Task",
        "realms": [
          "server"
        ],
        "source": {
          "file": "lua/includes/modules/ai_task.lua",
          "lineStart": 75
        }
      },
      {
        "arguments": [
          {
            "description": "The NPC to run the task on.",
            "name": "target",
            "type": "NPC"
          }
        ],
        "description": "Runs the AI task.",
        "name": "Run",
        "parent": "Task",
        "realms": [
          "server"
        ],
        "source": {
          "file": "lua/includes/modules/ai_task.lua",
          "lineStart": 112
        }
      },
      {
        "arguments": [
          {
            "description": "The NPC to run the task on.",
            "name": "target",
            "type": "NPC"
          }
        ],
        "description": "<internal></internal> Runs the AI task as an NPC method. This requires the task to be of type `TYPE_FNAME`.",
        "name": "Run_FName",
        "parent": "Task",
        "realms": [
          "server"
        ],
        "source": {
          "file": "lua/includes/modules/ai_task.lua",
          "lineStart": 125
        }
      },
      {
        "arguments": [
          {
            "description": "The NPC to start the task on.",
            "name": "target",
            "type": "NPC"
          }
        ],
        "description": "Starts the AI task.",
        "name": "Start",
        "parent": "Task",
        "realms": [
          "server"
        ],
        "source": {
          "file": "lua/includes/modules/ai_task.lua",
          "lineStart": 83
        }
      },
      {
        "arguments": [
          {
            "description": "The NPC to start the task on.",
            "name": "target",
            "type": "NPC"
          }
        ],
        "description": "<internal></internal> Starts the AI task as an NPC method.",
        "name": "Start_FName",
        "parent": "Task",
        "realms": [
          "server"
        ],
        "source": {
          "file": "lua/includes/modules/ai_task.lua",
          "lineStart": 99
        }
      }
    ],
    "name": "Task"
  },
  {
    "description": "A list of functions available inside a Sandbox Toolgun tool.\n\nYou can find the hooks <page text=\"here\">TOOL_Hooks</page>, and members <page text=\"here\">Structures/TOOL</page>.",
    "functions": [
      {
        "description": "Returns whether the tool is allowed to be used or not. This function ignores the <page>SANDBOX:CanTool</page> hook.\n\nBy default this will always return true clientside and uses `TOOL.AllowedCVar`which is a <page>ConVar</page> object pointing to  `toolmode_allow_*toolname*` convar on the server.",
        "name": "Allowed",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Returns true if the tool is allowed.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/entities/weapons/gmod_tool/stool.lua",
          "lineStart": 90
        }
      },
      {
        "description": "Builds a list of all ConVars set via the ClientConVar variable on the <page>Structures/TOOL</page> and their default values. This is used for the preset system.",
        "name": "BuildConVarList",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "A list of all convars and their default values.",
            "name": "convars",
            "type": "table"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/entities/weapons/gmod_tool/stool.lua",
          "lineStart": 67
        }
      },
      {
        "description": "<internal>This is called automatically for most toolgun actions so you shouldn't need to use it.</internal>\n\nChecks all added objects to see if they're still valid, if not, clears the list of objects.",
        "name": "CheckObjects",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "source": {
          "file": "gamemodes/sandbox/entities/weapons/gmod_tool/stool.lua",
          "lineStart": 117
        }
      },
      {
        "description": "Clears all objects previously set with <page>Tool:SetObject</page>.",
        "name": "ClearObjects",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "source": {
          "file": "gamemodes/sandbox/entities/weapons/gmod_tool/object.lua",
          "lineStart": 34
        }
      },
      {
        "description": "<internal>This is called automatically for all tools.</internal>\nInitializes the tool object",
        "name": "Create",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The created tool object.",
            "name": "tool",
            "type": "Tool"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/entities/weapons/gmod_tool/stool.lua",
          "lineStart": 11
        }
      },
      {
        "description": "<internal>This is called automatically for all tools.</internal>\n\nCreates clientside ConVars based on the ClientConVar table specified in the tool structure. Also creates the 'toolmode_allow_X' ConVar.",
        "name": "CreateConVars",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "source": {
          "file": "gamemodes/sandbox/entities/weapons/gmod_tool/stool.lua",
          "lineStart": 33
        }
      },
      {
        "arguments": [
          {
            "description": "The id of the object which was set in <page>Tool:SetObject</page>.",
            "name": "id",
            "type": "number"
          }
        ],
        "description": "Retrieves a physics bone number previously stored using <page>Tool:SetObject</page>.",
        "name": "GetBone",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Associated physics bone with given id.",
            "type": "number"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/entities/weapons/gmod_tool/object.lua",
          "lineStart": 81
        }
      },
      {
        "arguments": [
          {
            "description": "Name of the <page>ConVar</page> to retrieve. The function will automatically add the `mytoolfilename_` part to it.",
            "name": "name",
            "type": "string"
          },
          {
            "default": "false",
            "description": "The default value to return in case the lookup fails.",
            "name": "default",
            "type": "boolean"
          }
        ],
        "description": "Attempts to grab a clientside tool <page>ConVar</page> value as a <page>boolean</page>.",
        "name": "GetClientBool",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value of the requested <page>ConVar</page>. It will be true if the value if the convar is not 0, just like <page>ConVar:GetBool</page>",
            "type": "number"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/entities/weapons/gmod_tool/stool.lua",
          "lineStart": 87
        }
      },
      {
        "arguments": [
          {
            "description": "Name of the convar to retrieve. The function will automatically add the `mytoolfilename_` part to it.",
            "name": "name",
            "type": "string"
          }
        ],
        "description": "Attempts to grab a clientside tool <page>ConVar</page> as a <page>string</page>.",
        "name": "GetClientInfo",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value of the requested <page>ConVar</page>.",
            "type": "string"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/entities/weapons/gmod_tool/stool.lua",
          "lineStart": 67
        }
      },
      {
        "arguments": [
          {
            "description": "Name of the convar to retrieve. The function will automatically add the `mytoolfilename_` part to it.",
            "name": "name",
            "type": "string"
          },
          {
            "default": "0",
            "description": "The default value to return in case the lookup fails.",
            "name": "default",
            "type": "number"
          }
        ],
        "description": "Attempts to grab a clientside tool <page>ConVar</page>'s value as a <page>number</page>.",
        "name": "GetClientNumber",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value of the requested <page>ConVar</page>.",
            "type": "number"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/entities/weapons/gmod_tool/stool.lua",
          "lineStart": 77
        }
      },
      {
        "arguments": [
          {
            "description": "The id of the object which was set in <page>Tool:SetObject</page>.",
            "name": "id",
            "type": "number"
          }
        ],
        "description": "Retrieves an Entity previously stored using <page>Tool:SetObject</page>.",
        "name": "GetEnt",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Associated Entity with given id.",
            "type": "Entity"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/entities/weapons/gmod_tool/object.lua",
          "lineStart": 48
        }
      },
      {
        "description": "Returns a language key based on this tool's name and the current stage it is on.",
        "name": "GetHelpText",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The returned language key, for example `\"#tool.weld.1\"`",
            "name": "key",
            "type": "string"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/entities/weapons/gmod_tool/object.lua",
          "lineStart": 163
        }
      },
      {
        "arguments": [
          {
            "description": "The id of the object which was set in <page>Tool:SetObject</page>.",
            "name": "id",
            "type": "number"
          }
        ],
        "description": "Retrieves an local vector previously stored using <page>Tool:SetObject</page>.\nSee also <page>Tool:GetPos</page>.",
        "name": "GetLocalPos",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Associated local vector with given id.",
            "type": "Vector"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/entities/weapons/gmod_tool/object.lua",
          "lineStart": 76
        }
      },
      {
        "description": "Returns the name of the current tool mode.",
        "name": "GetMode",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The current tool mode.",
            "type": "string"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/entities/weapons/gmod_tool/stool.lua",
          "lineStart": 101
        }
      },
      {
        "arguments": [
          {
            "description": "The id of the object which was set in <page>Tool:SetObject</page>.",
            "name": "id",
            "type": "number"
          }
        ],
        "description": "Retrieves an normal vector previously stored using <page>Tool:SetObject</page>.",
        "name": "GetNormal",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Associated normal vector with given id.",
            "type": "Vector"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/entities/weapons/gmod_tool/object.lua",
          "lineStart": 85
        }
      },
      {
        "description": "Returns the current operation of the tool set by <page>Tool:SetOperation</page>.",
        "name": "GetOperation",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The current operation the tool is at.",
            "type": "number"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/entities/weapons/gmod_tool/object.lua",
          "lineStart": 28
        }
      },
      {
        "description": "Returns the owner of this tool.",
        "name": "GetOwner",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Player using the tool",
            "type": "Player"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/entities/weapons/gmod_tool/stool.lua",
          "lineStart": 120
        }
      },
      {
        "arguments": [
          {
            "description": "The id of the object which was set in <page>Tool:SetObject</page>.",
            "name": "id",
            "type": "number"
          }
        ],
        "description": "Retrieves an <page>PhysObj</page> previously stored using <page>Tool:SetObject</page>.\nSee also <page>Tool:GetEnt</page>.",
        "name": "GetPhys",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Associated PhysObj with given id. If it wasn't specified, returns current <page>PhysObj</page> of associated Entity.",
            "type": "PhysObj"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/entities/weapons/gmod_tool/object.lua",
          "lineEnd": 108,
          "lineStart": 100
        }
      },
      {
        "arguments": [
          {
            "description": "The id of the object which was set in <page>Tool:SetObject</page>.",
            "name": "id",
            "type": "number"
          }
        ],
        "description": "Retrieves an vector previously stored using <page>Tool:SetObject</page>. See also <page>Tool:GetLocalPos</page>.",
        "name": "GetPos",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Associated vector with given id. The vector is converted from <page>Tool:GetLocalPos</page>.",
            "type": "Vector"
          }
        ],
        "source": {
          "file": "gamemode/sandbox/entities/weapons/gmod_tool/object.lua",
          "lineStart": 61
        }
      },
      {
        "arguments": [
          {
            "description": "Name of the convar to retrieve. The function will automatically add the \"mytoolfilename_\" part to it.",
            "name": "name",
            "type": "string"
          }
        ],
        "description": "Attempts to grab a serverside tool <page>ConVar</page>.\nThis will not do anything on client, despite the function being defined shared.",
        "name": "GetServerInfo",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value of the requested <page>ConVar</page>.",
            "type": "string"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/entities/weapons/gmod_tool/stool.lua",
          "lineStart": 59
        }
      },
      {
        "description": "Returns the current stage of the tool set by <page>Tool:SetStage</page>.",
        "name": "GetStage",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The current stage of the current operation the tool is at.",
            "type": "number"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/entities/weapons/gmod_tool/object.lua",
          "lineStart": 16
        }
      },
      {
        "description": "<deprecated>Use <page>Tool:GetWeapon</page> instead.</deprecated>\n\nReturns the Tool Gun (`gmod_tool`) Scripted <page>Weapon</page>.",
        "name": "GetSWEP",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The tool gun weapon. (`gmod_tool`)",
            "type": "Weapon"
          }
        ]
      },
      {
        "description": "Returns the Tool Gun (`gmod_tool`) Scripted <page>Weapon</page>.",
        "name": "GetWeapon",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The tool gun weapon. (`gmod_tool`)",
            "type": "Weapon"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The model of the new ghost entity",
            "name": "model",
            "type": "string"
          },
          {
            "description": "Position to initialize the ghost entity at, usually not needed since this is updated in <page>Tool:UpdateGhostEntity</page>.",
            "name": "pos",
            "type": "Vector"
          },
          {
            "description": "Angle to initialize the ghost entity at, usually not needed since this is updated in <page>Tool:UpdateGhostEntity</page>.",
            "name": "angle",
            "type": "Angle"
          }
        ],
        "description": "Initializes the ghost entity with the given model. Removes any old ghost entity if called multiple times.\n\nThe ghost is a regular prop_physics entity in singleplayer games, and a clientside prop in multiplayer games.",
        "name": "MakeGhostEntity",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "source": {
          "file": "gamemodes/sandbox/entities/weapons/gmod_tool/ghostentity.lua",
          "lineStart": 6
        }
      },
      {
        "description": "Returns the amount of stored objects ( <page>Entity</page>s ) the tool has.\n<validate>Are TOOLs limited to 4 entities?</validate>",
        "name": "NumObjects",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The amount of stored objects, or <page>Tool:GetStage</page> clientide.",
            "type": "number"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/entities/weapons/gmod_tool/object.lua",
          "lineStart": 149
        }
      },
      {
        "arguments": [
          {
            "description": "Any arguments given to this function will be added to <page>TOOL.BuildCPanel</page>'s arguments.",
            "name": "extra_args",
            "type": "vararg"
          }
        ],
        "description": "Automatically forces the tool's control panel to be rebuilt.",
        "name": "RebuildControlPanel",
        "parent": "Tool",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/entities/weapons/gmod_tool/stool_cl.lua",
          "lineStart": 12
        }
      },
      {
        "description": "Removes any ghost entity created for this tool.\n\nThis is called automatically at various points, including when changing tools, holstering the toolgun, therefore it is a very good idea to implement this callback in your custom tool to cleanup any custom ghost entities.",
        "name": "ReleaseGhostEntity",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "source": {
          "file": "gamemodes/sandbox/entities/weapons/gmod_tool/ghostentity.lua",
          "lineStart": 68
        }
      },
      {
        "arguments": [
          {
            "description": "The id of the object to store.",
            "name": "id",
            "type": "number"
          },
          {
            "description": "The entity to store.",
            "name": "ent",
            "type": "Entity"
          },
          {
            "description": "The position to store.\n<note>this position is in **global space** and is internally converted to **local space** relative to the object, so when you retrieve it later it will be corrected to the object's new position</note>",
            "name": "pos",
            "type": "Vector"
          },
          {
            "description": "The physics object to store.",
            "name": "phys",
            "type": "PhysObj"
          },
          {
            "description": "The hit bone to store.",
            "name": "bone",
            "type": "number"
          },
          {
            "description": "The hit normal to store.",
            "name": "normal",
            "type": "Vector"
          }
        ],
        "description": "Stores an <page>Entity</page> for later use in the tool.\n\nThe stored values can be retrieved by <page>Tool:GetEnt</page>, <page>Tool:GetPos</page>, <page>Tool:GetLocalPos</page>, <page>Tool:GetPhys</page>, <page>Tool:GetBone</page> and <page>Tool:GetNormal</page>",
        "name": "SetObject",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "source": {
          "file": "gamemodes/sandbox/entities/weapons/gmod_tool/object.lua",
          "lineStart": 112
        }
      },
      {
        "arguments": [
          {
            "description": "The new operation ID to set.",
            "name": "operation",
            "type": "number"
          }
        ],
        "description": "Sets the current operation of the tool. Does nothing clientside. See also <page>Tool:SetStage</page>.\n\nOperations and stages work as follows:\n* Operation 1\n* * Stage 1\n* * Stage 2\n* * Stage 3\n* Operation 2\n* * Stage 1\n* * Stage 2\n* * Stage ...",
        "name": "SetOperation",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "source": {
          "file": "gamemodes/sandbox/entities/weapons/gmod_tool/object.lua",
          "lineStart": 20
        }
      },
      {
        "arguments": [
          {
            "description": "The new stage to set.",
            "name": "stage",
            "type": "number"
          }
        ],
        "description": "Sets the current stage of the tool. Does nothing clientside.\n\nSee also <page>Tool:SetOperation</page>.",
        "name": "SetStage",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "source": {
          "file": "/gamemodes/sandbox/entities/weapons/gmod_tool/object.lua",
          "lineEnd": 14,
          "lineStart": 8
        }
      },
      {
        "arguments": [
          {
            "description": "The entity to copy ghost parameters off",
            "name": "ent",
            "type": "Entity"
          }
        ],
        "description": "Initializes the ghost entity based on the supplied entity.",
        "name": "StartGhostEntity",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "source": {
          "file": "gamemodes/sandbox/entities/weapons/gmod_tool/ghostentity.lua",
          "lineStart": 54
        }
      },
      {
        "description": "<internal>Called on deploy automatically</internal>\n\nSets the tool's stage to how many stored objects the tool has.",
        "name": "UpdateData",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "source": {
          "file": "gamemodes/sandbox/entities/weapons/gmod_tool/object.lua",
          "lineStart": 2
        }
      },
      {
        "description": "Updates the position and orientation of the ghost entity based on where the toolgun owner is looking along with data from object with id 1 set by <page>Tool:SetObject</page>.\n\nThis should be called in the tool's <page>TOOL:Think</page> hook.\n\nThis command is only used for tools that move props, such as easy weld, axis and motor. If you want to update a ghost like the thruster tool does it for example, check its [source code](https://github.com/Facepunch/garrysmod/blob/master/garrysmod/gamemodes/sandbox/entities/weapons/gmod_tool/stools/thruster.lua#L179).",
        "name": "UpdateGhostEntity",
        "parent": "Tool",
        "realms": [
          "client",
          "server"
        ],
        "source": {
          "file": "gamemodes/sandbox/entities/weapons/gmod_tool/ghostentity.lua",
          "lineStart": 101
        }
      }
    ],
    "name": "Tool"
  },
  {
    "description": "List of all possible functions to manipulate vectors.\n\nCreated by <page>Global.Vector</page>.\n\nType   | Name           | Description\n------ | -------------- | ------------------------------\n<page>number</page> | `x`, `X`, `r` or `1` | The X component of the vector.\n<page>number</page> | `y`, `Y`, `g` or `2` | The Y component of the vector.\n<page>number</page> | `z`, `Z`, `b` or `3` | The Z component of the vector.\n\nMetamethod | Second Operand | Description\n---------- | -------------- | -----------\n`__add` | <page>Vector</page> | Returns new <page>Vector</page> with the result of addition.\n`__div` | <page>number</page> or <page>Vector</page> | Returns new <page>Vector</page> with the result of division.\n`__eq` | <page>any</page> | Compares 2 operands, if they both are <page>Vector</page>, compares each individual component.\n`__index` | <page>number</page> or <page>string</page> | Gets the component of the <page>Vector</page>. Returns a <page>number</page>.\n`__mul` | <page>number</page> or <page>Vector</page>| Returns new <page>Vector</page> with the result of multiplication.\n`__newindex` | <page>number</page> or <page>string</page> | Sets the component of the <page>Vector</page>. Accepts <page>number</page> and <page>string</page>.\n`__sub` | <page>Vector</page> | Returns new <page>Vector</page> with the result of subtraction.\n`__tostring` | | Returns `x y z`.\n`__unm` | | Returns new <page>Vector</page> with the result of negation.",
    "functions": [
      {
        "arguments": [
          {
            "description": "The vector to add.",
            "name": "vector",
            "type": "Vector"
          }
        ],
        "description": "Adds the values of the argument vector to the original vector. This function is the same as vector1 + vector2 without creating a new vector object, skipping object construction and garbage collection.",
        "name": "Add",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "description": "Returns an angle representing the normal of the vector.",
        "name": "Angle",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The angle/direction of the vector.",
            "type": "Angle"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The up direction vector",
            "name": "up",
            "type": "Vector"
          }
        ],
        "description": "Returns the angle of this vector (normalized), but instead of assuming that up is <page>Global.Vector</page>( 0, 0, 1 ) (Like <page>Vector:Angle</page> does) you can specify which direction is 'up' for the angle.",
        "name": "AngleEx",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The angle",
            "type": "Angle"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Vector to calculate the cross product with.",
            "name": "otherVector",
            "type": "Vector"
          }
        ],
        "description": "Calculates the cross product of this vector and the passed one.\n\nThe cross product of two vectors is a 3-dimensional vector with a direction perpendicular (at right angles) to both of them (according to the [right-hand rule](https://en.wikipedia.org/wiki/Right-hand_rule)), and magnitude equal to the area of parallelogram they span. This is defined as the product of the magnitudes, the sine of the angle between them, and unit (normal) vector `n` defined by the right-hand rule:\n:**a** × **b** = |**a**| |**b**| sin(θ) **n̂**\nwhere **a** and **b** are vectors, and **n̂** is a unit vector (magnitude of 1) perpendicular to both.",
        "name": "Cross",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The cross product of the two vectors.",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The vector to get the distance to.",
            "name": "otherVector",
            "type": "Vector"
          }
        ],
        "description": "Returns the Euclidean distance between the vector and the other vector.\n\n<note>This function is more expensive than <page>Vector:DistToSqr</page>. However, please see the notes for <page>Vector:DistToSqr</page> before using it as squared distances are not the same as euclidean distances.</note>",
        "name": "Distance",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Distance between the vectors.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The vector to get the distance to.",
            "name": "otherVector",
            "type": "Vector"
          }
        ],
        "description": "Returns the Euclidean distance between the vector and the other vector in 2D space. The Z axis is ignored.\n\n<note>This function is more expensive than <page>Vector:Distance2DSqr</page>. However, please see the notes for <page>Vector:Distance2DSqr</page> before using it as squared distances are not the same as Euclidean distances.</note>",
        "name": "Distance2D",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Distance between the vectors in 2D space.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The vector to calculate the distance to.",
            "name": "otherVec",
            "type": "Vector"
          }
        ],
        "description": "Returns the squared distance between 2 vectors in 2D space, ignoring the Z axis. This is faster than <page>Vector:Distance2D</page> as calculating the square root is an expensive process.\n\n<note>Squared distances should not be summed. If you need to sum distances, use <page>Vector:Distance2D</page>.\n\nWhen performing a distance check, ensure the distance being checked against is squared.</note>",
        "name": "Distance2DSqr",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Squared distance to the vector in 2D space.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The vector to calculate the distance to.",
            "name": "otherVec",
            "type": "Vector"
          }
        ],
        "description": "Returns the squared distance of 2 vectors, this is quicker to call than <page>Vector:Distance</page> as DistToSqr does not need to calculate the square root, which is an expensive process.\n\n<note>Squared distances should not be summed. If you need to sum distances, use <page>Vector:Distance</page>.\n\nWhen performing a distance check, ensure the distance being checked against is squared. See example code below.</note>",
        "name": "DistToSqr",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Squared distance to the vector.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The value to divide the vector with.",
            "name": "divisor",
            "type": "number"
          }
        ],
        "description": "Divide the vector by the given number, that means x, y and z are divided by that value. This will change the value of the original vector, see example 2 for division without changing the value.",
        "name": "Div",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The vector to calculate the dot product with",
            "name": "otherVector",
            "type": "Vector"
          }
        ],
        "description": "Returns the [dot product](https://en.wikipedia.org/wiki/Dot_product#Geometric_definition)  of this vector and the passed one.\n\nThe dot product of two vectors is the product of their magnitudes (lengths), and the cosine of the angle between them:<br><br>\n**a · b** = |**a**| |**b**| cos(θ) <br><br>\nwhere **a** and **b** are vectors.<br><br>\nSee <page>Vector:Length</page> for obtaining magnitudes.\n\nA dot product returns just the cosine of the angle if both vectors are normalized, and zero if the vectors are at right angles to each other.",
        "name": "Dot",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The dot product between the two vectors",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The other vector.",
            "name": "Vector",
            "type": "Vector"
          }
        ],
        "description": "<deprecated>This is an alias of <page>Vector:Dot</page>. Use that instead.</deprecated>Returns the dot product of the two vectors.",
        "name": "DotProduct",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Dot Product",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the negative version of this vector, i.e. a vector with every component to the negative value of itself.\n\nSee also <page>Vector:Negate</page>.",
        "name": "GetNegated",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The negative of this vector.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "<deprecated>Use <page>Vector:GetNormalized</page> instead.</deprecated>\n\nReturns a normalized version of the vector. This is a alias of <page>Vector:GetNormalized</page>.",
        "name": "GetNormal",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Normalized version of the vector.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns a normalized version of the vector. Normalized means vector with same direction but with length of 1.\n\nThis does not affect the vector you call it on; to do this, use <page>Vector:Normalize</page>.",
        "name": "GetNormalized",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Normalized version of the vector.",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The vector to compare to.",
            "name": "compare",
            "type": "Vector"
          },
          {
            "description": "The tolerance range.",
            "name": "tolerance",
            "type": "number"
          }
        ],
        "description": "Returns if the vector is equal to another vector with the given tolerance.",
        "name": "IsEqualTol",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Are the vectors equal or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Checks whenever all fields of the vector are 0.",
        "name": "IsZero",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Do all fields of the vector equal 0 or not",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the [Euclidean length](https://en.wikipedia.org/wiki/Euclidean_vector#Length) of the vector: √(x² + y² + z²).\n\n<warning>\nThis is a relatively expensive process since it uses the square root. It is recommended that you use <page>Vector:LengthSqr</page> whenever possible.\n</warning>",
        "name": "Length",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Length of the vector.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the length of the vector in two dimensions, without the Z axis.\n\n<warning>\nThis is a relatively expensive process since it uses the square root. It is recommended that you use <page>Vector:Length2DSqr</page> whenever possible.\n</warning>",
        "name": "Length2D",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Length of the vector in two dimensions, √(x² + y²)",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the squared length of the vectors x and y value, x² + y².\n\nThis is faster than <page>Vector:Length2D</page> as calculating the square root is an expensive process.",
        "name": "Length2DSqr",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Squared length of the vector in two dimensions",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the squared length of the vector, x² + y² + z².\n\nThis is faster than <page>Vector:Length</page> as calculating the square root is an expensive process.",
        "name": "LengthSqr",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Squared length of the vector",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The value to scale the vector with.",
            "name": "multiplier",
            "type": "number"
          }
        ],
        "description": "Scales the vector by the given <page>number</page> (that means x, y and z are multiplied by that value), a <page>Vector</page> (X, Y, and Z of each vector are multiplied) or a <page>VMatrix</page> (Transforms the vector by the matrix's rotation/translation).",
        "name": "Mul",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "description": "Negates this vector, i.e. sets every component to the negative value of itself. Same as `Vector( -vec.x, -vec.y, -vec.z )`",
        "name": "Negate",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "description": "Normalizes the given vector. This changes the vector you call it on, if you want to return a normalized copy without affecting the original, use <page>Vector:GetNormalized</page>.",
        "name": "Normalize",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "-1",
            "description": "The minimum value for each component.",
            "name": "min",
            "type": "number"
          },
          {
            "default": "1",
            "description": "The maximum value for each component.",
            "name": "max",
            "type": "number"
          }
        ],
        "description": "Randomizes each element of this Vector object.",
        "name": "Random",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The angle to rotate the vector by.",
            "name": "rotation",
            "type": "Angle"
          }
        ],
        "description": "Rotates a vector by the given angle.\nDoesn't return anything, but rather changes the original vector.",
        "name": "Rotate",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The vector to copy from.",
            "name": "vector",
            "type": "Vector"
          }
        ],
        "description": "Copies the values from the second vector to the first vector.",
        "name": "Set",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The x component",
            "name": "x",
            "type": "number"
          },
          {
            "description": "The y component",
            "name": "y",
            "type": "number"
          },
          {
            "description": "The z component",
            "name": "z",
            "type": "number"
          }
        ],
        "description": "Sets the x, y, and z of the vector.",
        "name": "SetUnpacked",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The other vector.",
            "name": "vector",
            "type": "Vector"
          }
        ],
        "description": "Substracts the values of the second vector from the orignal vector, this function can be used to avoid garbage collection.",
        "name": "Sub",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "description": "Translates the <page>Vector</page> (values ranging from 0 to 1) into a <page>Color</page>. This will also range the values from 0 - 1 to 0 - 255.\n\nx * 255 -&gt; r<br>\ny * 255 -&gt; g<br>\nz * 255 -&gt; b\n\nThis is the opposite of <page>Color:ToVector</page>",
        "name": "ToColor",
        "parent": "Vector",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The created <page>Color</page>.",
            "type": "Color"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/vector.lua",
          "lineEnd": 12,
          "lineStart": 8
        }
      },
      {
        "description": "Returns where on the screen the specified position vector would appear. A related function is <page>gui.ScreenToVector</page>, which converts a 2D coordinate to a 3D direction.\n\n<note>Should be called from a 3D rendering environment or after <page>cam.Start3D</page> or it may not work correctly.</note>\n\n<bug issue=\"462\">Errors in a render hook can make this value incorrect until the player restarts their game.</bug>\n\n<bug issue=\"1404\"><page>cam.Start3D</page> or 3D context <page>cam.Start</page> with non-default parameters incorrectly sets the reference FOV for this function, causing incorrect return values. This can be fixed by creating and ending a default 3D context (<page>cam.Start3D</page> with no arguments).</bug>",
        "name": "ToScreen",
        "parent": "Vector",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The created <page>Structures/ToScreenData</page>.",
            "type": "table{ToScreenData}"
          }
        ]
      },
      {
        "description": "Returns the vector as a table with three elements.",
        "name": "ToTable",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The table with elements 1 = x, 2 = y, 3 = z.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns the x, y, and z of the vector.",
        "name": "Unpack",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "x or Vector[1].",
            "type": "number"
          },
          {
            "description": "y or Vector[2].",
            "type": "number"
          },
          {
            "description": "z or Vector[3].",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The first vector.",
            "name": "boxStart",
            "type": "Vector"
          },
          {
            "description": "The second vector.",
            "name": "boxEnd",
            "type": "Vector"
          }
        ],
        "description": "Returns whenever the given vector is in a box created by the 2 other vectors.\n\n<upload src=\"22674/8d9276d7e6dd0af.png\" size=\"6279\" name=\"image.png\">\n</upload>",
        "name": "WithinAABox",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Is the vector in the box or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Sets x, y and z to 0.",
        "name": "Zero",
        "parent": "Vector",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      }
    ],
    "name": "Vector"
  },
  {
    "description": "This is a list of all methods only available for vehicles. It is also possible to call <page>Entity</page> functions on vehicles.",
    "functions": [
      {
        "description": "Returns the remaining boosting time left.",
        "name": "BoostTimeLeft",
        "parent": "Vehicle",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The remaining boosting time left",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Yaw/roll from vehicle angle to check for exit",
            "name": "yaw",
            "type": "number"
          },
          {
            "description": "Distance from origin to drop player",
            "name": "distance",
            "type": "number"
          }
        ],
        "description": "Tries to find an Exit Point for leaving vehicle, if one is unobstructed in the direction given.",
        "name": "CheckExitPoint",
        "parent": "Vehicle",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Returns the vector for exit position or nil if cannot exit that way.",
            "type": "Vector"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Enable or disable the engine",
            "name": "enable",
            "type": "boolean"
          }
        ],
        "description": "Sets whether the engine is enabled or disabled, i.e. can be started or not.",
        "name": "EnableEngine",
        "parent": "Vehicle",
        "realms": [
          "server"
        ]
      },
      {
        "description": "Returns information about the ammo of the vehicle",
        "name": "GetAmmo",
        "parent": "Vehicle",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Ammo type of the vehicle ammo",
            "type": "number"
          },
          {
            "description": "Clip size",
            "type": "number"
          },
          {
            "description": "Count",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns third person camera distance.",
        "name": "GetCameraDistance",
        "parent": "Vehicle",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Camera distance",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/entity.lua",
          "lineEnd": 687,
          "lineStart": 683
        }
      },
      {
        "description": "Gets the driver of the vehicle, returns `NULL` if no driver is present.",
        "name": "GetDriver",
        "parent": "Vehicle",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The driver of the vehicle.",
            "type": "Entity"
          }
        ]
      },
      {
        "description": "Returns the current speed of the vehicle in Half-Life Hammer Units (in/s). Same as <page>Entity:GetVelocity</page> + <page>Vector:Length</page>.",
        "name": "GetHLSpeed",
        "parent": "Vehicle",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The speed of the vehicle",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the max speed of the vehicle in MPH.",
        "name": "GetMaxSpeed",
        "parent": "Vehicle",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The max speed of the vehicle in MPH",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns some info about the vehicle.",
        "name": "GetOperatingParams",
        "parent": "Vehicle",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The operating parameters.",
            "type": "table{OperatingParams}"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The index of the passenger",
            "name": "passenger",
            "type": "number"
          }
        ],
        "description": "Gets the passenger of the vehicle, returns NULL if no drivers is present.",
        "name": "GetPassenger",
        "parent": "Vehicle",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The passenger",
            "type": "Entity"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The passenger role. ( 0 is the driver )",
            "name": "role",
            "type": "number"
          }
        ],
        "description": "Returns the seat position and angle of a given passenger seat.",
        "name": "GetPassengerSeatPoint",
        "parent": "Vehicle",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The seat position",
            "type": "Vector"
          },
          {
            "description": "The seat angle",
            "type": "Angle"
          }
        ]
      },
      {
        "description": "Returns the current RPM of the vehicle. This value is fake and doesn't actually affect the vehicle movement.",
        "name": "GetRPM",
        "parent": "Vehicle",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The RPM.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the current speed of the vehicle in MPH.",
        "name": "GetSpeed",
        "parent": "Vehicle",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The speed of the vehicle in MPH",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the current steering of the vehicle.",
        "name": "GetSteering",
        "parent": "Vehicle",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The current steering of the vehicle.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the maximum steering degree of the vehicle",
        "name": "GetSteeringDegrees",
        "parent": "Vehicle",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The maximum steering degree of the vehicle",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns if vehicle has thirdperson mode enabled or not.",
        "name": "GetThirdPersonMode",
        "parent": "Vehicle",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Returns true if third person mode enabled, false otherwise",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/entity.lua",
          "lineEnd": 675,
          "lineStart": 671
        }
      },
      {
        "description": "Returns the current throttle of the vehicle.",
        "name": "GetThrottle",
        "parent": "Vehicle",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The current throttle of the vehicle",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the vehicle class name. This is only useful for Sandbox spawned vehicles or any vehicle that properly sets the vehicle class with <page>Vehicle:SetVehicleClass</page>.",
        "name": "GetVehicleClass",
        "parent": "Vehicle",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The class name of the vehicle.",
            "type": "string"
          }
        ],
        "source": {
          "file": "lua/includes/extensions/entity.lua",
          "lineEnd": 688,
          "lineStart": 684
        }
      },
      {
        "description": "Returns the vehicle parameters of given vehicle.",
        "name": "GetVehicleParams",
        "parent": "Vehicle",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The vehicle parameters.",
            "type": "table{VehicleParams}"
          }
        ]
      },
      {
        "arguments": [
          {
            "default": "0",
            "description": "The passenger role. 0 is the driver. This parameter seems to be ignored by the game engine and is therefore optional.",
            "name": "role",
            "type": "number"
          }
        ],
        "description": "Returns the view position and forward angle of a given passenger seat.",
        "name": "GetVehicleViewPosition",
        "parent": "Vehicle",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The view position, will be 0, 0, 0 on failure",
            "type": "Vector"
          },
          {
            "description": "The view angles, will be 0, 0, 0 on failure",
            "type": "Angle"
          },
          {
            "description": "The field of view, will be 0 on failure",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The wheel to retrieve",
            "name": "wheel",
            "type": "number"
          }
        ],
        "description": "Returns the <page>PhysObj</page> of given wheel.",
        "name": "GetWheel",
        "parent": "Vehicle",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The wheel",
            "type": "PhysObj"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The wheel to get the base wheel height of.",
            "name": "wheel",
            "type": "number"
          }
        ],
        "description": "Returns the base wheel height.",
        "name": "GetWheelBaseHeight",
        "parent": "Vehicle",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The base wheel height.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The wheel to check",
            "name": "wheel",
            "type": "number"
          }
        ],
        "description": "Returns the wheel contact point.",
        "name": "GetWheelContactPoint",
        "parent": "Vehicle",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The contact position",
            "type": "Vector"
          },
          {
            "description": "The Surface Properties ID of hit surface.",
            "type": "number"
          },
          {
            "description": "Whether the wheel is on ground or not",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the wheel count of the vehicle",
        "name": "GetWheelCount",
        "parent": "Vehicle",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The amount of wheels",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The wheel to get the base wheel height of.",
            "name": "wheel",
            "type": "number"
          }
        ],
        "description": "Returns the total wheel height.",
        "name": "GetWheelTotalHeight",
        "parent": "Vehicle",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "The total wheel height.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns whether this vehicle has boost at all.",
        "name": "HasBoost",
        "parent": "Vehicle",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether this vehicle has boost at all.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether this vehicle has a brake pedal. See <page>Vehicle:SetHasBrakePedal</page>.",
        "name": "HasBrakePedal",
        "parent": "Vehicle",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether this vehicle has a brake pedal or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether this vehicle is currently boosting or not.",
        "name": "IsBoosting",
        "parent": "Vehicle",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether this vehicle is currently boosting or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the engine is enabled or not, i.e. whether it can be started.",
        "name": "IsEngineEnabled",
        "parent": "Vehicle",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the engine is enabled",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the engine is started or not.",
        "name": "IsEngineStarted",
        "parent": "Vehicle",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the engine is started or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Determines whether a given <page>Vehicle</page> is fully initialized.\n\nIt is possible, in uncommon circumstances, for a <page text=\"valid\">Global.IsValid</page> <page text=\"vehicle\">Entity:IsVehicle</page> entity to be in an invalid state, such as before <page>Entity:Spawn</page> is called on the vehicle after creation.\n\nIf this function returns `false`, then the <page>Vehicle</page> functions are not usable on this vehicle, while <page>Entity</page> functions are.",
        "name": "IsValidVehicle",
        "parent": "Vehicle",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "`true` if the Vehicle is in a valid state, or `false` if the Vehicle is in an invalid state.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether this vehicle's engine is underwater or not. ( Internally the attachment point \"engine\" or \"vehicle_engine\" is checked )",
        "name": "IsVehicleBodyInWater",
        "parent": "Vehicle",
        "realms": [
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether this vehicle's engine is underwater or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Releases the vehicle's handbrake (Jeep) so it can roll without any passengers.\n\nThis will be overwritten if the vehicle has a driver. Same as <page>Vehicle:SetHandbrake</page>( false )",
        "name": "ReleaseHandbrake",
        "parent": "Vehicle",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new boost value",
            "name": "boost",
            "type": "number"
          }
        ],
        "description": "Sets the boost. It is possible that this function does not work while the vehicle has a valid driver in it.",
        "name": "SetBoost",
        "parent": "Vehicle",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Camera distance to set to",
            "name": "distance",
            "type": "number"
          }
        ],
        "description": "Sets the third person camera distance of the vehicle.",
        "name": "SetCameraDistance",
        "parent": "Vehicle",
        "realms": [
          "client",
          "server"
        ],
        "source": {
          "file": "lua/includes/extensions/entity.lua",
          "lineEnd": 681,
          "lineStart": 677
        }
      },
      {
        "arguments": [
          {
            "description": "true to turn on, false to turn off.",
            "name": "handbrake",
            "type": "boolean"
          }
        ],
        "description": "Turns on or off the Jeep handbrake so it can roll without a driver inside.\n\nDoes nothing while the vehicle has a driver in it.",
        "name": "SetHandbrake",
        "parent": "Vehicle",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether this vehicle has a brake pedal",
            "name": "brakePedal",
            "type": "boolean"
          }
        ],
        "description": "Sets whether this vehicle has a brake pedal.",
        "name": "SetHasBrakePedal",
        "parent": "Vehicle",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new maximum throttle. This number must be negative.",
            "name": "maxRevThrottle",
            "type": "number"
          }
        ],
        "description": "Sets maximum reverse throttle",
        "name": "SetMaxReverseThrottle",
        "parent": "Vehicle",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new maximum throttle.",
            "name": "maxThrottle",
            "type": "number"
          }
        ],
        "description": "Sets maximum forward throttle",
        "name": "SetMaxThrottle",
        "parent": "Vehicle",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The wheel to change spring length of",
            "name": "wheel",
            "type": "number"
          },
          {
            "description": "The new spring length",
            "name": "length",
            "type": "number"
          }
        ],
        "description": "Sets spring length of given wheel",
        "name": "SetSpringLength",
        "parent": "Vehicle",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Angle of the front wheels (-1 to 1)",
            "name": "front",
            "type": "number"
          },
          {
            "description": "Angle of the rear wheels (-1 to 1)",
            "name": "rear",
            "type": "number"
          }
        ],
        "description": "Sets the steering of the vehicle.\n<validate>The correct range, 0 to 1 or -1 to 1</validate>",
        "name": "SetSteering",
        "parent": "Vehicle",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new maximum steering degree",
            "name": "steeringDegrees",
            "type": "number"
          }
        ],
        "description": "Sets the maximum steering degrees of the vehicle",
        "name": "SetSteeringDegrees",
        "parent": "Vehicle",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Enable or disable the third person mode for this vehicle",
            "name": "enable",
            "type": "boolean"
          }
        ],
        "description": "Sets the third person mode state.",
        "name": "SetThirdPersonMode",
        "parent": "Vehicle",
        "realms": [
          "client",
          "server"
        ],
        "source": {
          "file": "lua/includes/extensions/entity.lua",
          "lineEnd": 669,
          "lineStart": 665
        }
      },
      {
        "arguments": [
          {
            "description": "The new throttle.",
            "name": "throttle",
            "type": "number"
          }
        ],
        "description": "Sets the throttle of the vehicle. It is possible that this function does not work with a valid driver in it.",
        "name": "SetThrottle",
        "parent": "Vehicle",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The vehicle class name to set",
            "name": "class",
            "type": "string"
          }
        ],
        "description": "<internal></internal>Sets the vehicle class name.",
        "name": "SetVehicleClass",
        "parent": "Vehicle",
        "realms": [
          "client",
          "server"
        ],
        "source": {
          "file": "lua/includes/extensions/entity.lua",
          "lineEnd": 682,
          "lineStart": 678
        }
      },
      {
        "arguments": [
          {
            "description": "Whether the entry or exit camera animation should be played or not.",
            "name": "bOn",
            "type": "boolean"
          }
        ],
        "description": "Sets whether the entry or exit camera animation should be played or not.",
        "name": "SetVehicleEntryAnim",
        "parent": "Vehicle",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new new vehicle parameters. See <page>Structures/VehicleParams</page>.",
            "name": "params",
            "type": "table"
          }
        ],
        "description": "Sets the vehicle parameters for given vehicle.\n\n<note>Not all variables from the <page>Structures/VehicleParams</page> can be set.</note>",
        "name": "SetVehicleParams",
        "parent": "Vehicle",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The wheel to change the friction of",
            "name": "wheel",
            "type": "number"
          },
          {
            "description": "The new friction to set",
            "name": "friction",
            "type": "number"
          }
        ],
        "description": "Sets friction of given wheel.  This function may be broken.",
        "name": "SetWheelFriction",
        "parent": "Vehicle",
        "realms": [
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "True to start, false to stop.",
            "name": "start",
            "type": "boolean"
          }
        ],
        "description": "Starts or stops the engine.",
        "name": "StartEngine",
        "parent": "Vehicle",
        "realms": [
          "server"
        ]
      }
    ],
    "name": "Vehicle"
  },
  {
    "description": "A 4x4 matrix.\n\nThis page lists all possible functions to manipulate matrices.\n\nThis object can be created by <page>Global.Matrix</page>.\n\nMetamethod | Second Operand | Description\n---------- | -------------- | -----------\n`__add` | <page>VMatrix</page> | Returns new <page>VMatrix</page> with the result of addition.\n`__eq` | <page>any</page> | Compares 2 operands, if they both are <page>VMatrix</page>, compares each individual component.\n`__mul` | <page>VMatrix</page> or <page>Vector</page> | Returns new <page>VMatrix</page> or <page>Vector</page> with the result of multiplication.\n`__sub` | <page>VMatrix</page> | Returns new <page>VMatrix</page> with the result of subtraction.\n`__tostring` |  | Returns a <page>string</page> in format `[%f,\\t%f,\\t%f,\\t%f]\\n[%f,\\t%f,\\t%f,\\t%f]\\n[%f,\\t%f,\\t%f,\\t%f]\\n[%f,\\t%f,\\t%f,\\t%f]`.\n`__unm` | | Returns new <page>VMatrix</page> with the result of negation.",
    "functions": [
      {
        "arguments": [
          {
            "description": "The input matrix to add.",
            "name": "input",
            "type": "VMatrix"
          }
        ],
        "description": "Adds given matrix to this matrix.",
        "name": "Add",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Returns the absolute rotation of the matrix. Scaled matrix might produce unexpected results!",
        "name": "GetAngles",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Absolute rotation of the matrix",
            "type": "Angle"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Row of the field whose value is to be retrieved, from 1 to 4",
            "name": "row",
            "type": "number"
          },
          {
            "description": "Column of the field whose value is to be retrieved, from 1 to 4",
            "name": "column",
            "type": "number"
          }
        ],
        "description": "Returns a specific field in the matrix.",
        "name": "GetField",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value of the specified field",
            "type": "number"
          }
        ]
      },
      {
        "description": "Gets the forward direction of the matrix.\n\nie. The first column of the matrix, excluding the w coordinate.",
        "name": "GetForward",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The forward direction of the matrix.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns an inverted matrix without modifying the original matrix.\n\nInverting the matrix will fail if its [determinant](https://en.wikipedia.org/wiki/Determinant) is 0 or close to 0. (ie. its \"scale\" in any direction is 0.)\n\nSee also <page>VMatrix:GetInverseTR</page>.",
        "name": "GetInverse",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The inverted matrix if possible, nil otherwise",
            "type": "VMatrix"
          }
        ]
      },
      {
        "description": "Returns an inverted matrix without modifying the original matrix. This function will not fail, but only works correctly on matrices that contain only translation and/or rotation.\n\nUsing this function on a matrix with modified scale may return an incorrect inverted matrix.\n\nTo get the inverse of a matrix that contains other modifications, see <page>VMatrix:GetInverse</page>.",
        "name": "GetInverseTR",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The inverted matrix.",
            "type": "VMatrix"
          }
        ]
      },
      {
        "description": "Gets the right direction of the matrix.\n\nie. The second column of the matrix, negated, excluding the w coordinate.",
        "name": "GetRight",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The right direction of the matrix.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the absolute scale of the matrix.",
        "name": "GetScale",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Absolute scale of the matrix",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the absolute translation of the matrix.",
        "name": "GetTranslation",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Absolute translation of the matrix",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the transpose (each row becomes a column) of this matrix.",
        "name": "GetTransposed",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The transposed matrix.",
            "name": "transposed",
            "type": "VMatrix"
          }
        ]
      },
      {
        "description": "Gets the up direction of the matrix.\n\nie. The third column of the matrix, excluding the w coordinate.",
        "name": "GetUp",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The up direction of the matrix.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Initializes the matrix as Identity matrix.",
        "name": "Identity",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Inverts the matrix.\n\nInverting the matrix will fail if its [determinant](https://en.wikipedia.org/wiki/Determinant) is 0 or close to 0. (ie. its \"scale\" in any direction is 0.)\n\nIf the matrix cannot be inverted, it does not get modified.\n\nSee also <page>VMatrix:InvertTR</page>.",
        "name": "Invert",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the matrix was inverted or not",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Quickly inverts the matrix. This function will not fail, but only works correctly on matrices that contain only translation and/or rotation.\n\nUsing this function on a matrix with modified scale may return an incorrect inverted matrix.\n\nTo invert a matrix that contains other modifications, see <page>VMatrix:Invert</page>. This function is faster.",
        "name": "InvertTR",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Returns whether the matrix is equal to Identity matrix or not.",
        "name": "IsIdentity",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Is the matrix an Identity matrix or not",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the matrix is a rotation matrix or not.\n\nTechnically it checks if the forward, right and up vectors are orthogonal and normalized.",
        "name": "IsRotationMatrix",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Is the matrix a rotation matrix or not",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Checks whenever all fields of the matrix are 0, aka if this is a [null matrix](https://en.wikipedia.org/wiki/Zero_matrix).",
        "name": "IsZero",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "If the matrix is a null matrix.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The input matrix to multiply by.",
            "name": "input",
            "type": "VMatrix"
          }
        ],
        "description": "Multiplies this matrix by given matrix.",
        "name": "Mul",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Rotation.",
            "name": "rotation",
            "type": "Angle"
          }
        ],
        "description": "Rotates the matrix by the given angle.\n\nPostmultiplies the matrix by a rotation matrix (A = AR).",
        "name": "Rotate",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Vector to scale with matrix with.",
            "name": "scale",
            "type": "Vector"
          }
        ],
        "description": "Scales the matrix by the given vector.\n\nPostmultiplies the matrix by a scaling matrix (A = AS).",
        "name": "Scale",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Value to scale the translation with.",
            "name": "scale",
            "type": "number"
          }
        ],
        "description": "Scales the absolute translation with the given value.",
        "name": "ScaleTranslation",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The matrix to copy values from.",
            "name": "src",
            "type": "VMatrix"
          }
        ],
        "description": "Copies values from the given matrix object.",
        "name": "Set",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "New angles.",
            "name": "angle",
            "type": "Angle"
          }
        ],
        "description": "Sets the absolute rotation of the matrix.",
        "name": "SetAngles",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Row of the field to be set, from 1 to 4",
            "name": "row",
            "type": "number"
          },
          {
            "description": "Column of the field to be set, from 1 to 4",
            "name": "column",
            "type": "number"
          },
          {
            "description": "The value to set in that field",
            "name": "value",
            "type": "number"
          }
        ],
        "description": "Sets a specific field in the matrix.",
        "name": "SetField",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The forward direction of the matrix.",
            "name": "forward",
            "type": "Vector"
          }
        ],
        "description": "Sets the forward direction of the matrix.\n\nie. The first column of the matrix, excluding the w coordinate.",
        "name": "SetForward",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The right direction of the matrix.",
            "name": "forward",
            "type": "Vector"
          }
        ],
        "description": "Sets the right direction of the matrix.\n\nie. The second column of the matrix, negated, excluding the w coordinate.",
        "name": "SetRight",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The scale to set.",
            "name": "scale",
            "type": "Vector"
          }
        ],
        "description": "Modifies the scale of the matrix while preserving the rotation and translation.",
        "name": "SetScale",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "New translation.",
            "name": "translation",
            "type": "Vector"
          }
        ],
        "description": "Sets the absolute translation of the matrix.",
        "name": "SetTranslation",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "e11",
            "type": "number"
          },
          {
            "description": "",
            "name": "e12",
            "type": "number"
          },
          {
            "description": "",
            "name": "e13",
            "type": "number"
          },
          {
            "description": "",
            "name": "e14",
            "type": "number"
          },
          {
            "description": "",
            "name": "e21",
            "type": "number"
          },
          {
            "description": "",
            "name": "e22",
            "type": "number"
          },
          {
            "description": "",
            "name": "e23",
            "type": "number"
          },
          {
            "description": "",
            "name": "e24",
            "type": "number"
          },
          {
            "description": "",
            "name": "e31",
            "type": "number"
          },
          {
            "description": "",
            "name": "e32",
            "type": "number"
          },
          {
            "description": "",
            "name": "e33",
            "type": "number"
          },
          {
            "description": "",
            "name": "e34",
            "type": "number"
          },
          {
            "description": "",
            "name": "e41",
            "type": "number"
          },
          {
            "description": "",
            "name": "e42",
            "type": "number"
          },
          {
            "description": "",
            "name": "e43",
            "type": "number"
          },
          {
            "description": "",
            "name": "e44",
            "type": "number"
          }
        ],
        "description": "Sets each component of the matrix.",
        "name": "SetUnpacked",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The up direction of the matrix.",
            "name": "forward",
            "type": "Vector"
          }
        ],
        "description": "Sets the up direction of the matrix.\n\nie. The third column of the matrix, excluding the w coordinate.",
        "name": "SetUp",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The input matrix to subtract.",
            "name": "input",
            "type": "VMatrix"
          }
        ],
        "description": "Subtracts given matrix from this matrix.",
        "name": "Sub",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Converts the matrix to a 4x4 table. See <page>Global.Matrix</page> function.",
        "name": "ToTable",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The 4x4 table.",
            "type": "table"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Vector to translate the matrix by.",
            "name": "translation",
            "type": "Vector"
          }
        ],
        "description": "Translates the matrix by the given vector aka. adds the vector to the translation.\n\nPostmultiplies the matrix by a translation matrix (A = AT).",
        "name": "Translate",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Returns each component of the matrix, expanding rows before columns.",
        "name": "Unpack",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "<page>VMatrix:GetField</page>(1, 1)",
            "type": "number"
          },
          {
            "description": "<page>VMatrix:GetField</page>(1, 2)",
            "type": "number"
          },
          {
            "description": "<page>VMatrix:GetField</page>(1, 3)",
            "type": "number"
          },
          {
            "description": "<page>VMatrix:GetField</page>(1, 4)",
            "type": "number"
          },
          {
            "description": "<page>VMatrix:GetField</page>(2, 1)",
            "type": "number"
          },
          {
            "description": "<page>VMatrix:GetField</page>(2, 2)",
            "type": "number"
          },
          {
            "description": "<page>VMatrix:GetField</page>(2, 3)",
            "type": "number"
          },
          {
            "description": "<page>VMatrix:GetField</page>(2, 4)",
            "type": "number"
          },
          {
            "description": "<page>VMatrix:GetField</page>(3, 1)",
            "type": "number"
          },
          {
            "description": "<page>VMatrix:GetField</page>(3, 2)",
            "type": "number"
          },
          {
            "description": "<page>VMatrix:GetField</page>(3, 3)",
            "type": "number"
          },
          {
            "description": "<page>VMatrix:GetField</page>(3, 4)",
            "type": "number"
          },
          {
            "description": "<page>VMatrix:GetField</page>(4, 1)",
            "type": "number"
          },
          {
            "description": "<page>VMatrix:GetField</page>(4, 2)",
            "type": "number"
          },
          {
            "description": "<page>VMatrix:GetField</page>(4, 3)",
            "type": "number"
          },
          {
            "description": "<page>VMatrix:GetField</page>(4, 4)",
            "type": "number"
          }
        ]
      },
      {
        "description": "Sets all components of the matrix to 0, also known as a [null matrix](https://en.wikipedia.org/wiki/Zero_matrix).\n\nThis function is more efficient than setting each element manually.",
        "name": "Zero",
        "parent": "VMatrix",
        "realms": [
          "client",
          "server"
        ]
      }
    ],
    "name": "VMatrix"
  },
  {
    "description": "This is a list of all methods only available for weapons. It is also possible to call <page>Entity</page> functions on weapons.\n\n<note>A list of available methods has been expanded in your navigation bar.</note>",
    "functions": [
      {
        "description": "Returns whether the weapon allows to being switched from when a better ( <page>Weapon:GetWeight</page> ) weapon is being picked up.",
        "name": "AllowsAutoSwitchFrom",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the weapon allows to being switched from.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the weapon allows to being switched to when a better (<page>Weapon:GetWeight</page>) weapon is being picked up.",
        "name": "AllowsAutoSwitchTo",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the weapon allows to being switched to.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Name of function to call. If you want to call `SWEP:MyFunc()` on client, you type in `\"MyFunc\"`",
            "name": "functionName",
            "type": "string"
          },
          {
            "default": "",
            "description": "Custom data to be passed to the target SWEP function as the first argument.",
            "name": "data",
            "type": "string"
          }
        ],
        "description": "Calls a SWEP function on client. Does nothing on client.\n\n<warning>This uses the <page>usermessage</page> internally, because of that, the combined length of the arguments of this function may not exceed 254 bytes/characters or the function will cease to function!</warning>",
        "name": "CallOnClient",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "description": "Returns how much primary ammo is in the magazine.\n<note>This is not shared between clients and will instead return the maximum primary clip size.</note>",
        "name": "Clip1",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The amount of primary ammo in the magazine.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns how much secondary ammo is in the magazine.\n<note>This is not shared between clients and will instead return the maximum secondary clip size.</note>",
        "name": "Clip2",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The amount of secondary ammo in the magazine.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Sequence to use as reload animation. Uses the <page>Enums/ACT</page>.",
            "name": "act",
            "type": "number"
          }
        ],
        "description": "Forces the weapon to reload while playing given animation.\n<note>\nThis will stop the <page>Weapon:Think</page> function from getting called while the weapon is reloading!\n</note>",
        "name": "DefaultReload",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Did reloading actually take place",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the sequence enumeration number that the weapon is playing.\n\n<bug issue=\"2543\">This can return inconsistent results between the server and client.</bug>",
        "name": "GetActivity",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Current activity, see <page>Enums/ACT</page>. Returns 0 if the weapon doesn't have active sequence.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the weapon deploy speed, as set by <page>Weapon:SetDeploySpeed</page>. If not previously set, the value will be polled from the `sv_defaultdeployspeed` <page>ConVar</page>.",
        "name": "GetDeploySpeed",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The value to set deploy speed to.",
            "name": "speed",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the hold type of the weapon.",
        "name": "GetHoldType",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The hold type of the weapon. You can find a list of default hold types <page text=\"here\">Hold_Types</page>.",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns maximum primary clip size",
        "name": "GetMaxClip1",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Maximum primary clip size",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns maximum secondary clip size",
        "name": "GetMaxClip2",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Maximum secondary clip size",
            "type": "number"
          }
        ]
      },
      {
        "description": "Gets the next time the weapon can primary fire. ( Can call <page>WEAPON:PrimaryAttack</page> )",
        "name": "GetNextPrimaryFire",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The time, relative to <page>Global.CurTime</page>",
            "type": "number"
          }
        ]
      },
      {
        "description": "Gets the next time the weapon can secondary fire. ( Can call <page>WEAPON:SecondaryAttack</page> )",
        "name": "GetNextSecondaryFire",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The time, relative to <page>Global.CurTime</page>",
            "type": "number"
          }
        ]
      },
      {
        "description": "Gets the primary ammo type of the given weapon.",
        "name": "GetPrimaryAmmoType",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The ammo type ID, or -1 if not found.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the non-internal name of the weapon, that should be for displaying.\n\n<note>If that returns an untranslated message (#HL2_XX), use <page>language.GetPhrase</page> to see the \"nice\" name.</note>\n<note>If SWEP.PrintName is not set in the Weapon or the Weapon Base then \"&lt;MISSING SWEP PRINT NAME&gt;\" will be returned.</note>",
        "name": "GetPrintName",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The \"nice\" name of the weapon.",
            "type": "string"
          }
        ]
      },
      {
        "description": "Gets the ammo type of the given weapons secondary fire.",
        "name": "GetSecondaryAmmoType",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The secondary ammo type ID, or -1 if not found.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the slot of the weapon.\n<note>The slot numbers start from 0.</note>",
        "name": "GetSlot",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The slot of the weapon.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns slot position of the weapon",
        "name": "GetSlotPos",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The slot position of the weapon",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the view model of the weapon.",
        "name": "GetWeaponViewModel",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The view model of the weapon.",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns the world model of the weapon.",
        "name": "GetWeaponWorldModel",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The world model of the weapon.",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns the \"weight\" of the weapon, which is used when deciding which <page>Weapon</page> is better by the engine.",
        "name": "GetWeight",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The weapon \"weight\".",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns whether the weapon has ammo left or not. It will return false when there's no ammo left in the magazine **and** when there's no reserve ammo left.\n\n<note>This will return true for weapons like crowbar, gravity gun, etc.</note>",
        "name": "HasAmmo",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Whether the weapon has ammo or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whenever the weapon is carried by the local player.",
        "name": "IsCarriedByLocalPlayer",
        "parent": "Weapon",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Is the weapon is carried by the local player or not",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Checks if the weapon is a SWEP or a built-in weapon.",
        "name": "IsScripted",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Returns true if weapon is scripted ( SWEP ), false if not ( A built-in HL2/HL:S weapon )",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the weapon is visible. The term visibility is not exactly what gets checked here, first it checks if the owner is a player, then checks if the active view model has EF_NODRAW flag NOT set.",
        "name": "IsWeaponVisible",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "Is visible or not",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the time since this weapon last fired a bullet with <page>Entity:FireBullets</page> in seconds. It is not networked.",
        "name": "LastShootTime",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ],
        "returnValues": [
          {
            "description": "The time in seconds when the last bullet was fired.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Activity to play. See the <page>Enums/ACT</page> (specifically `ACT_VM_`).",
            "name": "act",
            "type": "number"
          }
        ],
        "description": "Forces weapon to play activity/animation.",
        "name": "SendWeaponAnim",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new activity to set, see <page>Enums/ACT</page>.",
            "name": "act",
            "type": "number"
          }
        ],
        "description": "Sets the activity the weapon is playing.\n\nSee also <page>Weapon:GetActivity</page>.",
        "name": "SetActivity",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The amount of bullets the clip should contain",
            "name": "ammo",
            "type": "number"
          }
        ],
        "description": "Lets you change the number of bullets in the given weapons primary clip.",
        "name": "SetClip1",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The amount of bullets the clip should contain",
            "name": "ammo",
            "type": "number"
          }
        ],
        "description": "Lets you change the number of bullets in the given weapons secondary clip.",
        "name": "SetClip2",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The value to set deploy speed to. Values less than `1` will slow down the animations. Minimum value is `0.1`.",
            "name": "speed",
            "type": "number"
          }
        ],
        "description": "Sets the weapon deploy speed. This value needs to match on client and server.",
        "name": "SetDeploySpeed",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Name of the hold type. You can find all default hold types <page text=\"here\">Hold_Types</page>",
            "name": "name",
            "type": "string"
          }
        ],
        "description": "Sets the hold type of the weapon. This function also calls <page>WEAPON:SetWeaponHoldType</page> and properly networks it to all clients.\n\n<note>This only works on scripted weapons.</note>\n\n<bug>Using this function on weapons held by bots will not network holdtype changes to clients if the world model is set to an empty string (SWEP.WorldModel = \"\").</bug>",
        "name": "SetHoldType",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "default": "CurTime()",
            "description": "The time in seconds when the last time the weapon was fired.",
            "name": "time",
            "type": "number"
          }
        ],
        "description": "Sets the time since this weapon last fired in seconds. Used in conjunction with <page>Weapon:LastShootTime</page>",
        "name": "SetLastShootTime",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Time when player should be able to use primary fire again",
            "name": "time",
            "type": "number"
          }
        ],
        "description": "Sets when the weapon can fire again. Time should be based on <page>Global.CurTime</page>.\n\n<note>The standard HL2 Pistol (`weapon_pistol`) bypasses this function due to an [internal implementation](https://github.com/ValveSoftware/source-sdk-2013/blob/master/src/game/server/hl2/weapon_pistol.cpp#L313-L317).</note>\n<bug issue=\"3786\">This will fire extra bullets if the time is set to less than <page>Global.CurTime</page>.</bug>",
        "name": "SetNextPrimaryFire",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Time when player should be able to use secondary fire again",
            "name": "time",
            "type": "number"
          }
        ],
        "description": "Sets when the weapon can alt-fire again. Time should be based on <page>Global.CurTime</page>.",
        "name": "SetNextSecondaryFire",
        "parent": "Weapon",
        "realms": [
          "client",
          "server"
        ]
      }
    ],
    "name": "Weapon"
  },
  {
    "description": "<internal></internal>\nThis object is created by <page>Global.WorkshopFileBase</page> which is used internally to fetch data of the specific namespace\nor to publish saves and dupes.\n\nThis also exists on the Server but most functions may throw an error. It's meant to be used clientside.\n<note>\nYou need to set the `HTML` field to a <page>DHTML</page> panel that is set up correctly like [here](https://github.com/Facepunch/garrysmod/blob/master/garrysmod/gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contenttypes/dupes.lua#L12), or else you might get errors.\n</note>",
    "functions": [
      {
        "arguments": [
          {
            "description": "The type to search for. (`local`, `subscribed`, `subscribed_ugc`, `mine`, `favorite`)",
            "name": "type",
            "type": "string"
          },
          {
            "description": "Skips the first x results.",
            "name": "offset",
            "type": "number"
          },
          {
            "description": "How many results per page should be returned.",
            "name": "perpage",
            "type": "number"
          },
          {
            "description": "additional tags to filter the results.",
            "name": "extratags",
            "type": "table"
          },
          {
            "description": "text that needs to be in the addon title. Use an empty string for none",
            "name": "searchText",
            "type": "string"
          },
          {
            "default": "nil",
            "description": "The filter for the results. (`enabledonly`, `disabledonly`)",
            "name": "filter",
            "type": "number"
          },
          {
            "default": "nil",
            "description": "How it should be sorted. If set to `nil`, it will fallback to `timeadded`. (`title`, `size`, `updated`)",
            "name": "sort",
            "type": "string"
          }
        ],
        "description": "Fetches all subscriptions for the set namespace and type\n<note>\nIf you want to use the type `local` you need to implement the `:FetchLocal(offset, perpage)` function!\n</note>",
        "name": "Fetch",
        "parent": "WorkshopFileBase",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "Skips the first x results.",
            "name": "offset",
            "type": "number"
          },
          {
            "description": "How many results per page should be returned.",
            "name": "perpage",
            "type": "number"
          },
          {
            "description": "additional tags to filter the results.",
            "name": "tags",
            "type": "table"
          },
          {
            "description": "text that needs to be in the addon title. Use an empty string for none",
            "name": "searchText",
            "type": "string"
          },
          {
            "default": "nil",
            "description": "if true it will use <page>engine.GetUserContent</page> instead of <page>engine.GetAddons</page>",
            "name": "isUGC",
            "type": "boolean"
          },
          {
            "default": "nil",
            "description": "The filter for the results. (`enabledonly`, `disabledonly`)",
            "name": "filter",
            "type": "number"
          },
          {
            "default": "nil",
            "description": "How it should be sorted. If set to `nil`, it will fallback to `timeadded`. (`title`, `size`, `updated`)",
            "name": "sort",
            "type": "string"
          }
        ],
        "description": "Fetches all subscriptions for the set namespace and passes the result to <page>WorkshopFileBase:FillFileInfo</page>.",
        "name": "FetchSubscribed",
        "parent": "WorkshopFileBase",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The type to search for. (`local`, `subscribed`, `subscribed_ugc`, `mine`, `favorite`)",
            "name": "results",
            "type": "table"
          },
          {
            "description": "Skips the first x results.",
            "name": "isUGC",
            "type": "boolean"
          }
        ],
        "description": "Updates the set HTML panel with the newly fetched results",
        "name": "FillFileInfo",
        "parent": "WorkshopFileBase",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "The type to search for. (`local`, `subscribed`, `subscribed_ugc`, `mine`, `favorite`)",
            "name": "filename",
            "type": "string"
          },
          {
            "description": "The image to use",
            "name": "image",
            "type": "string"
          }
        ],
        "description": "Creates a <page>UGCPublishWindow</page> to publish the dupe or save",
        "name": "Publish",
        "parent": "WorkshopFileBase",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      },
      {
        "arguments": [
          {
            "description": "SteamID to retrieve the name for",
            "name": "steamid",
            "type": "string"
          },
          {
            "description": "Callback function.\n<callback>\n<arg type=\"string\" name=\"name\">The retrieved name</arg>\n</callback>",
            "name": "callback",
            "type": "function"
          }
        ],
        "description": "Retrieves the username for the given SteamID.",
        "name": "RetrieveUserName",
        "parent": "WorkshopFileBase",
        "realms": [
          "menu",
          "client",
          "server"
        ]
      }
    ],
    "name": "WorkshopFileBase"
  }
]
