[
  {
    "name": "EFFECT",
    "functions": [
      {
        "name": "EndTouch",
        "parent": "EFFECT",
        "realms": [
          "client"
        ],
        "description": "Effect alternative to <page>ENTITY:EndTouch</page>."
      },
      {
        "name": "GetTracerShootPos",
        "parent": "EFFECT",
        "realms": [
          "client"
        ],
        "description": "Used to get the \"real\" start position of a trace, for weapon tracer effects.\n\n\"real\" meaning in 3rd person, the 3rd person position will be used, in first person the first person position will be used.",
        "arguments": [
          {
            "name": "pos",
            "type": "Vector",
            "description": "Default position if we fail"
          },
          {
            "name": "ent",
            "type": "Weapon",
            "description": "The weapon to use."
          },
          {
            "name": "attachment",
            "type": "number",
            "description": "Attachment ID of on the weapon \"muzzle\", to use as the start position.\n\n<note>Please note that it is expected that the same attachment ID is used on both, the world and the view model.</note>"
          }
        ],
        "returnValues": [
          {
            "type": "Vector",
            "description": "The \"real\" start position."
          }
        ]
      },
      {
        "name": "Init",
        "parent": "EFFECT",
        "realms": [
          "client"
        ],
        "description": "Called when the effect is created.",
        "arguments": [
          {
            "name": "effectData",
            "type": "CEffectData",
            "description": "The effect data used to create the effect."
          }
        ]
      },
      {
        "name": "PhysicsCollide",
        "parent": "EFFECT",
        "realms": [
          "client"
        ],
        "description": "Called when the effect collides with anything.",
        "arguments": [
          {
            "name": "colData",
            "type": "table",
            "description": "Information regarding the collision. See <page>Structures/CollisionData</page>"
          },
          {
            "name": "collider",
            "type": "PhysObj",
            "description": "The physics object of the entity that collided with the effect."
          }
        ]
      },
      {
        "name": "Render",
        "parent": "EFFECT",
        "realms": [
          "client"
        ],
        "description": "Called when the effect should be rendered."
      },
      {
        "name": "StartTouch",
        "parent": "EFFECT",
        "realms": [
          "client"
        ],
        "description": "Effect alternative to <page>ENTITY:StartTouch</page>."
      },
      {
        "name": "Think",
        "parent": "EFFECT",
        "realms": [
          "client"
        ],
        "description": "Called when the effect should think, return false to kill the effect.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return false to remove this effect."
          }
        ]
      },
      {
        "name": "Touch",
        "parent": "EFFECT",
        "realms": [
          "client"
        ],
        "description": "Effect alternative to <page>ENTITY:Touch</page>."
      }
    ]
  },
  {
    "name": "ENTITY",
    "functions": [
      {
        "name": "AcceptInput",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called when another entity fires an event to this entity.",
        "arguments": [
          {
            "name": "inputName",
            "type": "string",
            "description": "The name of the input that was triggered."
          },
          {
            "name": "activator",
            "type": "Entity",
            "description": "The initial cause for the input getting triggered. (EG the player who pushed a button)"
          },
          {
            "name": "caller",
            "type": "Entity",
            "description": "The entity that directly triggered the input. (EG the button that was pushed)"
          },
          {
            "name": "data",
            "type": "string",
            "description": "The data passed."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Should we suppress the default action for this input?"
          }
        ]
      },
      {
        "name": "AddOutputFromAcceptInput",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "A helper function for creating <page>Scripted Entities</page>.\n\nSimilar to <page>ENTITY:AddOutputFromKeyValue</page>, call it from <page>ENTITY:AcceptInput</page> and it'll return true if it successfully added an output from the passed input data.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "The input name from <page>ENTITY:AcceptInput</page>."
          },
          {
            "name": "data",
            "type": "string",
            "description": "The input data from <page>ENTITY:AcceptInput</page>."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether any outputs were added or not."
          }
        ]
      },
      {
        "name": "AddOutputFromKeyValue",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "A helper function for creating <page>Scripted Entities</page>.\n\nCall it from <page>ENTITY:KeyValue</page> and it'll return true if it successfully added an output from the passed KV pair.",
        "arguments": [
          {
            "name": "key",
            "type": "string",
            "description": "The key-value key."
          },
          {
            "name": "value",
            "type": "string",
            "description": "The key-value value."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether any outputs were added or not."
          }
        ]
      },
      {
        "name": "CalcAbsolutePosition",
        "parent": "ENTITY",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called whenever the entity's position changes. A callback for when an entity's angle changes is available via <page>Entity:AddCallback</page>.\n\nLike <page>ENTITY:RenderOverride</page>, this hook works on any entity (scripted or not) it is applied on.\n\n<note>If EFL_DIRTY_ABSTRANSFORM is set on the entity, this will be called serverside only; otherwise, this will be called clientside only. This means serverside calls of <page>Entity:SetPos</page> without the EFL_DIRTY_ABSTRANSFORM flag enabled (most cases) will be called clientside only.</note>\n\n<note>The give concommand will call this hook serverside only upon entity spawn.</note>",
        "arguments": [
          {
            "name": "pos",
            "type": "Vector",
            "description": "The entity's actual position. May differ from <page>Entity:GetPos</page>"
          },
          {
            "name": "ang",
            "type": "Angle",
            "description": "The entity's actual angles. May differ from <page>Entity:GetAngles</page>"
          }
        ],
        "returnValues": [
          {
            "type": "Vector",
            "description": "New position"
          },
          {
            "type": "Angle",
            "description": "New angles"
          }
        ]
      },
      {
        "name": "CanProperty",
        "parent": "ENTITY",
        "realms": [
          "client",
          "server"
        ],
        "description": "Controls if a property can be used on this entity or not.\n\nThis hook will only work in Sandbox derived gamemodes that do not have <page>SANDBOX:CanProperty</page> overridden.\n\n<note>This hook will work on ALL entities, not just the scripted ones (SENTs)</note>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player, that tried to use the property"
          },
          {
            "name": "property",
            "type": "string",
            "description": "Class of the property that is tried to use, for example - bonemanipulate"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return false to disallow using that property, return true to allow.\n\nYou must return a value. Not returning anything can cause unexpected results."
          }
        ]
      },
      {
        "name": "CanTool",
        "parent": "ENTITY",
        "realms": [
          "client",
          "server"
        ],
        "description": "Controls if a tool can be used on this entity or not.\n\nThis hook will only work in Sandbox derived gamemodes that do not have <page>SANDBOX:CanTool</page> overridden.\n\n<note>This hook will work on ALL entities, not just the scripted ones (SENTs)</note>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player, that tried to use the tool"
          },
          {
            "name": "tr",
            "type": "table",
            "description": "The trace of the tool. See <page text=\"TraceResult\">Structures/TraceResult</page>."
          },
          {
            "name": "toolname",
            "type": "string",
            "description": "Class of the tool that is tried to use, for example - `weld`"
          },
          {
            "name": "tool",
            "type": "table",
            "description": "The tool mode table the player currently has selected."
          },
          {
            "name": "button",
            "type": "number",
            "description": "The tool button pressed."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return `false` to disallow using that tool on this entity, return `true` to allow."
          }
        ]
      },
      {
        "name": "CreateSchedulesInternal",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "<internal></internal>Called just before <page>ENTITY:Initialize</page> for \"ai\" type entities only."
      },
      {
        "name": "DoImpactEffect",
        "parent": "ENTITY",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called so the entity can override the bullet impact effects it makes. This is called when the entity itself fires bullets via <page>Entity:FireBullets</page>, not when it gets hit.\n\n<note>This hook only works for the \"anim\" type entities.</note>",
        "arguments": [
          {
            "name": "tr",
            "type": "table",
            "description": "A <page>Structures/TraceResult</page> from the bullet's start point to the impact point"
          },
          {
            "name": "damageType",
            "type": "number",
            "description": "The damage type of bullet. See <page>Enums/DMG</page>"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to not do the default thing - which is to call UTIL_ImpactTrace in C++"
          }
        ]
      },
      {
        "name": "DoingEngineSchedule",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called by the default `base_ai` SNPC, checking whether `ENT.bDoingEngineSchedule` is set by <page>ENTITY:StartEngineSchedule</page>..\n<note>This is a helper function only available if your SENT is based on `base_ai`</note>"
      },
      {
        "name": "DoSchedule",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Runs a Lua schedule. Runs tasks inside the schedule.",
        "arguments": [
          {
            "name": "sched",
            "type": "table",
            "description": "The schedule to run."
          }
        ]
      },
      {
        "name": "Draw",
        "parent": "ENTITY",
        "realms": [
          "client"
        ],
        "description": "Called if and when the entity should be drawn opaquely, based on the <page>Entity:GetRenderGroup</page> of the entity.\n\nSee <page>Structures/ENT</page> and <page>Enums/RENDERGROUP</page> for more information.\n\nSee also <page>ENTITY:DrawTranslucent</page>.\n\n<note>This function is not called by the game whenever the player looks away from the entity due to optimizations. To change that,\nyou must define an empty <page>Entity:Think</page> method client-side!</note>",
        "arguments": [
          {
            "name": "flags",
            "type": "number",
            "description": "The bit flags from <page>Enums/STUDIO</page>"
          }
        ]
      },
      {
        "name": "DrawTranslucent",
        "parent": "ENTITY",
        "realms": [
          "client"
        ],
        "description": "Called when the entity should be drawn translucently. If your scripted entity has a translucent model, it will be invisible unless it is drawn here.",
        "arguments": [
          {
            "name": "flags",
            "type": "number",
            "description": "The bit flags from <page>Enums/STUDIO</page>"
          }
        ]
      },
      {
        "name": "EndTouch",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called when the entity stops touching another entity.\n\n<warning>This only works for **brush** entities and for entities that have <page>Entity:SetTrigger</page> set to true.</warning>",
        "arguments": [
          {
            "name": "entity",
            "type": "Entity",
            "description": "The entity which was touched."
          }
        ]
      },
      {
        "name": "EngineScheduleFinish",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called whenever an engine schedule is finished; either the last task within the engine schedule has been finished or the schedule has been interrupted by an interrupt condition.\n<note>This hook only exists for `ai` type [SENTs](Scripted_Entities).</note>\n<note>This hook isn't called when the engine schedule is failed, the schedule is cleared with <page>NPC:ClearSchedule</page> or <page>NPC:SetSchedule</page> has been called. </note>"
      },
      {
        "name": "ExpressionFinished",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called when an NPC's expression has finished.\n<note>This hook only exists for `ai` type [SENTs](Scripted_Entities).</note>",
        "arguments": [
          {
            "name": "strExp",
            "type": "string",
            "description": "The path of the expression."
          }
        ]
      },
      {
        "name": "FireAnimationEvent",
        "parent": "ENTITY",
        "realms": [
          "client"
        ],
        "description": "Called before firing clientside animation events, such as muzzle flashes or shell ejections.\n\nSee <page>ENTITY:HandleAnimEvent</page> for the serverside version.\n\n<note>This hook only works on \"anim\", \"nextbot\" and \"ai\" type entities.</note>",
        "arguments": [
          {
            "name": "pos",
            "type": "Vector",
            "description": "Position of the effect"
          },
          {
            "name": "ang",
            "type": "Angle",
            "description": "Angle of the effect"
          },
          {
            "name": "event",
            "type": "number",
            "description": "The event ID of happened even. See [this page](http://developer.valvesoftware.com/wiki/Animation_Events)."
          },
          {
            "name": "name",
            "type": "string",
            "description": "Name of the event"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to disable the effect"
          }
        ]
      },
      {
        "name": "GetAttackSpread",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called to determine how good an NPC is at using a particular weapon.\n\n<note>\"ai\" base only</note>",
        "arguments": [
          {
            "name": "wep",
            "type": "Entity",
            "description": "The weapon being used by the NPC."
          },
          {
            "name": "target",
            "type": "Entity",
            "description": "The target the NPC is attacking"
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The number of degrees of inaccuracy in the NPC's attack."
          }
        ]
      },
      {
        "name": "GetRelationship",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called when scripted NPC needs to check how he \"feels\" against another entity, such as when <page>NPC:Disposition</page> is called.",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity in question"
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "How our scripter NPC \"feels\" towards the entity in question. See <page>Enums/D</page>. Not returning any value will make <page>NPC:Disposition</page> return the default disposition for this SNPC's given `m_iClass` by the engine."
          }
        ]
      },
      {
        "name": "GetRenderMesh",
        "parent": "ENTITY",
        "realms": [
          "client"
        ],
        "description": "Specify a mesh that should be rendered instead of this SENT's model.",
        "returnValues": [
          {
            "type": "table",
            "description": "A table containing the following keys:\n* <page>IMesh</page> Mesh - Required\n* <page>IMaterial</page> Material - Required\n* <page>VMatrix</page> Matrix - Optional"
          }
        ]
      },
      {
        "name": "GetShadowCastDirection",
        "parent": "ENTITY",
        "realms": [
          "client"
        ],
        "description": "Called when the shadow needs to be recomputed. Allows shadow angles to be customized. This only works for `anim` type entities.",
        "arguments": [
          {
            "name": "type",
            "type": "number",
            "description": "Type of the shadow this entity uses. Possible values:\n* 0 - No shadow\n* 1 - Simple 'blob' shadow\n* 2 - Render To Texture shadow (updates only when necessary)\n* 3 - Dynamic RTT - updates always\n* 4 - Render to Depth Texture"
          }
        ],
        "returnValues": [
          {
            "type": "Vector",
            "name": "dir",
            "description": "The new shadow direction to use."
          }
        ]
      },
      {
        "name": "GetSoundInterests",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called every second to poll the sound hint interests of this SNPC. This is used in conjunction with other sound hint functions, such as <page>sound.EmitHint</page> and <page>NPC:GetBestSoundHint</page>.\n<note>This hook only exists for `ai` type SENTs</note>",
        "returnValues": [
          {
            "type": "number",
            "name": "types",
            "description": "A bitflag representing which sound types this NPC wants to react to.  See <page text=\"SOUND_ enums\">Enums/SOUND</page>."
          }
        ]
      },
      {
        "name": "GravGunPickupAllowed",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called by <page>GM:GravGunPickupAllowed</page> on ALL entites in Sandbox-derived  gamemodes and acts as an override.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player aiming at us"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to allow the entity to be picked up"
          }
        ]
      },
      {
        "name": "GravGunPunt",
        "parent": "ENTITY",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when this entity is about to be punted with the gravity gun (primary fire).\n\nOnly works in Sandbox derived gamemodes and only if <page>GM:GravGunPunt</page> is not overridden.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player pressing left-click with the gravity gun at an entity"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true or false to enable or disable punting respectively."
          }
        ]
      },
      {
        "name": "HandleAnimEvent",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called before firing serverside animation events, such as weapon reload, drawing and holstering for NPCs, scripted sequences, etc.\n\nSee <page>ENTITY:FireAnimationEvent</page> for the clientside version.\n\n<note>This hook only works on \"anim\", \"ai\" and \"nextbot\" type entities.</note>",
        "arguments": [
          {
            "name": "event",
            "type": "number",
            "description": "The event ID of happened even. See [this page](http://developer.valvesoftware.com/wiki/Animation_Events)."
          },
          {
            "name": "eventTime",
            "type": "number",
            "description": "The absolute time this event occurred using <page>Global.CurTime</page>."
          },
          {
            "name": "cycle",
            "type": "number",
            "description": "The frame this event occurred as a number between 0 and 1."
          },
          {
            "name": "type",
            "type": "number",
            "description": "Event type. See [the Source SDK](https://github.com/ValveSoftware/source-sdk-2013/blob/master/mp/src/game/shared/eventlist.h#L14-L23)."
          },
          {
            "name": "options",
            "type": "string",
            "description": "Name or options of this event."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to mark the event as handled"
          }
        ]
      },
      {
        "name": "ImpactTrace",
        "parent": "ENTITY",
        "realms": [
          "client"
        ],
        "description": "Called when a bullet trace hits this entity and allows you to override the default behavior by returning true.",
        "arguments": [
          {
            "name": "traceResult",
            "type": "table",
            "description": "The trace that hit this entity as a <page>Structures/TraceResult</page>."
          },
          {
            "name": "damageType",
            "type": "number",
            "description": "The damage bits associated with the trace, see <page>Enums/DMG</page>"
          },
          {
            "name": "customImpactName",
            "type": "string",
            "default": "nil",
            "description": "The effect name to override the impact effect with.\nPossible arguments are ImpactJeep, AirboatGunImpact, HelicopterImpact, ImpactGunship."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to override the default impact effects."
          }
        ]
      },
      {
        "name": "Initialize",
        "parent": "ENTITY",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when the entity is created. This is called when you <page>Entity:Spawn</page> the custom entity.\n\nThis is called **after** <page>ENTITY:SetupDataTables</page> and <page>GM:OnEntityCreated</page>."
      },
      {
        "name": "IsJumpLegal",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called when deciding if the Scripted NPC should be able to perform a certain jump or not.\n<note>This is only called for \"ai\" type entities</note>",
        "arguments": [
          {
            "name": "startPos",
            "type": "Vector",
            "description": "Start of the jump"
          },
          {
            "name": "apex",
            "type": "Vector",
            "description": "Apex point of the jump"
          },
          {
            "name": "endPos",
            "type": "Vector",
            "description": "The landing position"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true if this jump should be allowed to be performed, false otherwise.\n\nNot returning anything, or returning a non boolean will perform the default action."
          }
        ]
      },
      {
        "name": "KeyValue",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called when the engine sets a value for this scripted entity.\n\nThis hook is called **before** <page>ENTITY:Initialize</page> when the key-values are set by the map.<br>\nOtherwise this hook will be called whenever <page>Entity:SetKeyValue</page> is called on the entity.\n\nSee <page>GM:EntityKeyValue</page> for a hook that works for all entities.\n\nSee <page>WEAPON:KeyValue</page> for a hook that works for scripted weapons.",
        "arguments": [
          {
            "name": "key",
            "type": "string",
            "description": "The key that was affected."
          },
          {
            "name": "value",
            "type": "string",
            "description": "The new value."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to suppress this KeyValue or return false or nothing to apply this key value."
          }
        ]
      },
      {
        "name": "NextTask",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Start the next task in specific schedule.\n<note>This hook only exists for `ai` type [SENTs](Scripted_Entities).</note>",
        "arguments": [
          {
            "name": "sched",
            "type": "table",
            "description": "The schedule to start next task in."
          }
        ]
      },
      {
        "name": "OnChangeActiveWeapon",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called when the currently active weapon of the SNPC changes.\n<note>This hook only works on `ai` type entities.</note>",
        "arguments": [
          {
            "name": "old",
            "type": "Weapon",
            "description": "The previous active weapon."
          },
          {
            "name": "new",
            "type": "Weapon",
            "description": "The new active weapon."
          }
        ]
      },
      {
        "name": "OnChangeActivity",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called when the NPC has changed its activity.\n\n<note>This hook only works for `ai` type entities.</note>",
        "arguments": [
          {
            "name": "act",
            "type": "number",
            "description": "The new activity. See <page>Enums/ACT</page>."
          }
        ]
      },
      {
        "name": "OnCondition",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called each time the NPC updates its condition.\n<note>This hook only exists for `ai` type [SENTs](Scripted_Entities).</note>",
        "arguments": [
          {
            "name": "conditionID",
            "type": "number",
            "description": "The ID of condition. See <page>NPC:ConditionName</page>."
          }
        ]
      },
      {
        "name": "OnDuplicated",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called on any entity after it has been created by the <page>duplicator</page> and before any bone/entity modifiers have been applied.\n\nThis hook is called after <page>ENTITY:Initialize</page> and before <page>ENTITY:PostEntityPaste</page>.",
        "arguments": [
          {
            "name": "entTable",
            "type": "table",
            "description": "The stored data about the original entity that was duplicated. This would typically contain the <page>Entity:GetTable</page> fields that are serializalble. See <page>Structures/EntityCopyData</page>."
          }
        ]
      },
      {
        "name": "OnEntityCopyTableFinish",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called after duplicator finishes saving the entity, allowing you to modify the save data.\n\nThis is called after <page>ENTITY:PostEntityCopy</page>.",
        "arguments": [
          {
            "name": "data",
            "type": "table",
            "description": "The save <page>Structures/EntityCopyData</page> that you can modify."
          }
        ]
      },
      {
        "name": "OnMovementComplete",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called when the SNPC completes its movement to its destination.\n<note>This hook only works on `ai` type entities.</note>"
      },
      {
        "name": "OnMovementFailed",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called when the SNPC failed to move to its destination.\n<note>This hook only works on `ai` type entities.</note>"
      },
      {
        "name": "OnReloaded",
        "parent": "ENTITY",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when the entity is reloaded by the lua auto-refresh system, i.e. when the developer edits the lua file for the entity while the game is running."
      },
      {
        "name": "OnRemove",
        "parent": "ENTITY",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when the entity is about to be removed.\n\nSee also <page>Entity:CallOnRemove</page>, which can even be used on engine (non-Lua) entities.\n\n<example>\n<description>Create an explosion when the entity will be removed. To create an entity, you can read <page>ents.Create</page>.</description>\n<code>\nfunction ENT:OnRemove()\nlocal explosion = ents.Create( \"env_explosion\" ) -- The explosion entity\nexplosion:SetPos( self:GetPos() ) -- Put the position of the explosion at the position of the entity\nexplosion:Spawn() -- Spawn the explosion\nexplosion:SetKeyValue( \"iMagnitude\", \"50\" ) -- the magnitude of the explosion\nexplosion:Fire( \"Explode\", 0, 0 ) -- explode\nend\n</code>\n</example>",
        "arguments": [
          {
            "name": "fullUpdate",
            "type": "boolean",
            "description": "Whether the removal is happening due to a full update clientside.\n\nThe entity may or **may not** be recreated immediately after, depending on whether it is in the local player's [PVS](https://developer.valvesoftware.com/wiki/PVS \"PVS - Valve Developer Community\"). (See <page>Entity:IsDormant</page>)"
          }
        ]
      },
      {
        "name": "OnRestore",
        "parent": "ENTITY",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when the entity is reloaded from a Source Engine save (not the Sandbox saves or dupes) or on a changelevel (for example Half-Life 2 campaign level transitions).\n\nFor the <page>duplicator</page> callbacks, see <page>ENTITY:OnDuplicated</page>."
      },
      {
        "name": "OnStateChange",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called by the engine when NPC's state changes.\n\n<note>This hook only exists for `ai` type SENTs.</note>",
        "arguments": [
          {
            "name": "oldState",
            "type": "number",
            "description": "The old state. See <page>Enums/NPC_STATE</page>."
          },
          {
            "name": "newState",
            "type": "number",
            "description": "The new state. See <page>Enums/NPC_STATE</page>."
          }
        ]
      },
      {
        "name": "OnTakeDamage",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called when the entity is taking damage.\n\n<warning>Calling <page>Entity:TakeDamage</page>, <page>Entity:TakeDamageInfo</page>, <page>Entity:DispatchTraceAttack</page>, or <page>Player:TraceHullAttack</page> (if the entity is hit) in this hook on the victim entity can cause infinite loops since the hook will be called again. Make sure to setup recursion safeguards like the example below.</warning>\n\n<note>This hook is only called for `ai`, `nextbot` and `anim` type entities.</note>",
        "arguments": [
          {
            "name": "damage",
            "type": "CTakeDamageInfo",
            "description": "The damage to be applied to the entity."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "How much damage the entity took. Basically `> 0` means took damage, `0` means did not take damage."
          }
        ]
      },
      {
        "name": "OnTaskComplete",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called from the engine when TaskComplete is called.\nThis allows us to move onto the next task - even when TaskComplete was called from an engine side task.\n\n<note>This hook only exists for `ai` type [SENTs](Scripted_Entities).</note>"
      },
      {
        "name": "OnTaskFailed",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called when a task this NPC was running has failed for whatever reason.\n<note>This hook only exists for `ai` type [SENTs](Scripted_Entities).</note>",
        "arguments": [
          {
            "name": "failCode",
            "type": "number",
            "description": "The fail code for the task. It will be a [FAIL_ enum](https://github.com/ValveSoftware/source-sdk-2013/blob/0d8dceea4310fde5706b3ce1c70609d72a38efdf/sp/src/game/server/ai_task.h#L26) or a generated code for a custom string. (second argument)"
          },
          {
            "name": "failReason",
            "type": "string",
            "description": "If set, a custom reason for the failure."
          }
        ]
      },
      {
        "name": "OverrideMove",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called to completely override NPC movement. This can be used for example for flying NPCs.\n\n<note>This hook only exists for `ai` type SENTs.</note>",
        "arguments": [
          {
            "name": "interval",
            "type": "number",
            "description": "Time interval for the movement, in seconds. Usually time since last movement."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return `true` to disable the default movement code."
          }
        ]
      },
      {
        "name": "OverrideMoveFacing",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called to completely override NPC movement facing.\n\n<note>This hook only exists for `ai` type SENTs.</note>",
        "arguments": [
          {
            "name": "interval",
            "type": "number",
            "description": "Time interval for the movement, in seconds. Usually time since last movement."
          },
          {
            "name": "data",
            "type": "table",
            "description": "Extra data for the movement. A table containing the following data:\n* <page>boolean</page> hasTraced - The result if a forward probing trace has been done\n* <page>number</page> expectedDist - The distance expected to move this think\n* <page>number</page> flags - AILMG flags\n* <page>number</page> maxDist - The distance maximum distance intended to travel in path length\n* <page>number</page> navType - <page>Enums/NAV</page>\n* <page>number</page> speed - The sequence ground speed. Note these need not always agree with `target`\n* <page>Entity</page> moveTarget - Target entity\n* <page>Vector</page> dir - The actual move. Note these need not always agree with `target`\n* <page>Vector</page> facing - The actual move. Note these need not always agree with `target`\n* <page>Vector</page> target - Object of the goal"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return `true` to disable the default movement facing code."
          }
        ]
      },
      {
        "name": "PassesTriggerFilters",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Polls whenever the entity should trigger the brush.\n\n<warning>This hook is broken and will not work without code below</warning>",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity that is about to trigger."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Should trigger or not."
          }
        ]
      },
      {
        "name": "PhysicsCollide",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called when the entity collides with anything. The move type and solid type must be VPHYSICS for the hook to be called.\n\n<note>If you want to use this hook on default/engine/non-Lua entites ( like prop_physics ), use <page>Entity:AddCallback</page> instead! This page describes a hook for Lua entities</note>",
        "arguments": [
          {
            "name": "colData",
            "type": "table",
            "description": "Information regarding the collision. See <page>Structures/CollisionData</page>."
          },
          {
            "name": "collider",
            "type": "PhysObj",
            "description": "The physics object that collided."
          }
        ]
      },
      {
        "name": "PhysicsSimulate",
        "parent": "ENTITY",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called from the Entity's motion controller to simulate physics.\n\nThis will only be called after using <page>Entity:StartMotionController</page> on a <page text=\"scripted entity\">Scripted_Entities</page> of `anim` type.\n\n<note>This hook can work on the CLIENT if you call <page>Entity:StartMotionController</page> and use <page>Entity:AddToMotionController</page> on the physics objects you want to control</note>\n\n<warning>Do not use functions such as <page>PhysObj:EnableCollisions</page> or <page>PhysObj:EnableGravity</page> in this hook as they're very likely to crash your game. You may want to use <page>ENTITY:PhysicsUpdate</page> instead.</warning>",
        "arguments": [
          {
            "name": "phys",
            "type": "PhysObj",
            "description": "The physics object of the entity."
          },
          {
            "name": "deltaTime",
            "type": "number",
            "description": "Time since the last call."
          }
        ],
        "returnValues": [
          {
            "type": "Vector",
            "description": "Angular force"
          },
          {
            "type": "Vector",
            "description": "Linear force"
          },
          {
            "type": "number",
            "description": "One of the <page>Enums/SIM</page>."
          }
        ]
      },
      {
        "name": "PhysicsUpdate",
        "parent": "ENTITY",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called whenever the physics of the entity are updated.\n\n<warning>This hook won't be called if the Entity's <page>PhysObj</page> goes asleep</warning>",
        "arguments": [
          {
            "name": "phys",
            "type": "PhysObj",
            "description": "The physics object of the entity."
          }
        ]
      },
      {
        "name": "PostEntityCopy",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called after the duplicator finished copying the entity.\n\nSee also <page>ENTITY:PreEntityCopy</page>, <page>ENTITY:PostEntityPaste</page> and <page>ENTITY:OnEntityCopyTableFinish</page>."
      },
      {
        "name": "PostEntityPaste",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called after the <page>duplicator</page> pastes the entity, after the bone/entity modifiers have been applied to the entity.\n\nThis hook is called after <page>ENTITY:OnDuplicated</page>. See also <page>ENTITY:PreEntityCopy</page>.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player who pasted the entity.\n\n<warning>This may not be a valid player in some circumstances. For example, when a save is loaded from the main menu, this hook will be called before the player is spawned. This argument will be a NULL entity in that case.</warning>"
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity itself. Same as `self` within the function context."
          },
          {
            "name": "createdEntities",
            "type": "table",
            "description": "All entities that are within the placed dupe.\n<note>The keys of each value in this table are the original entity indexes when the duplication was created. This can be utilized to restore entity references that don't get saved in duplications.</note>"
          }
        ]
      },
      {
        "name": "PreEntityCopy",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called before the duplicator copies the entity.\n\nIf you are looking for a way to make the duplicator spawn another entity when duplicated. (For example, you duplicate a `prop_physics`, but you want the duplicator to spawn `prop_physics_my`), you should add `prop_physics.ClassOverride = \"prop_physics_my\"`. The duplication table should be also stored on that `prop_physics`, not on `prop_physics_my`.\n\nSee also <page>ENTITY:PostEntityCopy</page>."
      },
      {
        "name": "RenderOverride",
        "parent": "ENTITY",
        "realms": [
          "client"
        ],
        "description": "Called instead of the engine drawing function of the entity. This hook works on any entity (scripted or not) it is applied on.\n\nThis does not work on \"physgun_beam\", use <page>GM:DrawPhysgunBeam</page> instead.\n\n<note>As a downside of this implementation, only one RenderOverride may be applied at a time.</note>\n\n<bug issue=\"3292\">Drawing a viewmodel in this function will cause <page>GM:PreDrawViewModel</page>, <page>WEAPON:PreDrawViewModel</page>, <page>WEAPON:ViewModelDrawn</page>, <page>GM:PostDrawViewModel</page>, and <page>WEAPON:PostDrawViewModel</page> to be called twice.</bug>\n\n<bug issue=\"3299\">This is called before PrePlayerDraw for players. If this function exists at all on a player, their worldmodel will always be rendered regardless of PrePlayerDraw's return.</bug>",
        "arguments": [
          {
            "name": "flags",
            "type": "number",
            "description": "The <page text=\"STUDIO_\">Enums/STUDIO</page> flags for this render operation."
          }
        ]
      },
      {
        "name": "RunAI",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called from the engine every 0.1 seconds. Returning `true` inside this hook will allow `CAI_BaseNPC::MaintainSchedule` to also be called.\n\n<note>This hook only exists for `ai` type [SENTs](Scripted_Entities).</note>"
      },
      {
        "name": "RunEngineTask",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called when an engine task is ran on the entity.\n\n<note>This hook only exists for `ai` type [SENTs](Scripted_Entities).</note>",
        "arguments": [
          {
            "name": "taskID",
            "type": "number",
            "description": "The task ID, see [ai_task.h](https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/server/ai_task.h#L89-L502)"
          },
          {
            "name": "taskData",
            "type": "number",
            "description": "The task data."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "true to prevent default action"
          }
        ]
      },
      {
        "name": "RunTask",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called every think on running task.\nThe actual task function should tell us when the task is finished.\n<note>This hook only exists for `ai` type [SENTs](Scripted_Entities).</note>",
        "arguments": [
          {
            "name": "task",
            "type": "table",
            "description": "The task to run"
          }
        ]
      },
      {
        "name": "ScheduleFinished",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called whenever a Lua schedule is finished or <page>ENTITY:StartEngineSchedule</page> is called. Clears out schedule and task data stored within NPC's table.\n<note>This is a helper function only available if your SENT is based on `base_ai`</note>"
      },
      {
        "name": "SelectSchedule",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Set the schedule we should be playing right now. Allows the NPC to start either a Lua schedule or an engine schedule. Despite sharing the same name as `CAI_BaseNPC::SelectSchedule()`, this isn't hooked to that function; this is called by Lua's <page>ENTITY:RunAI</page>, doesn't return an engine function, returning an engine function doesn't help and doesn't make the NPC start an engine schedule. To alter initial engine schedule, it is recommended to use <page>ENT:TranslateSchedule</page>.\n<note>This is a helper function only available if your SENT is based on `base_ai`</note>"
      },
      {
        "name": "SetAutomaticFrameAdvance",
        "parent": "ENTITY",
        "realms": [
          "client",
          "server"
        ],
        "description": "Toggles automatic frame advancing for animated sequences on an entity.\n\nThis has the same effect as setting the ``ENT.AutomaticFrameAdvance`` property. (See <page>Structures/ENT</page>)",
        "arguments": [
          {
            "name": "enable",
            "type": "boolean",
            "description": "Whether or not to set automatic frame advancing."
          }
        ]
      },
      {
        "name": "SetTask",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Sets the current task.\n<note>This hook only exists for `ai` type [SENTs](Scripted_Entities).</note>",
        "arguments": [
          {
            "name": "task",
            "type": "table",
            "description": "The task to set."
          }
        ]
      },
      {
        "name": "SetupDataTables",
        "parent": "ENTITY",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when the entity should set up its <page text=\" Data Tables\">Networking_Entities</page>.\n\nThis is a much better option than using Set/Get Networked Values.\n\nThis hook is called after <page>GM:OnEntityCreated</page> and <page>GM:NetworkEntityCreated</page>."
      },
      {
        "name": "SpawnFunction",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "This is the spawn function. It's called when a player spawns the entity from the spawnmenu.\n\nIf you want to make your SENT spawnable you need this function to properly create the entity.\n\n<warning>Unlike other ENTITY functions, the \"self\" parameter of this function is not an entity but rather the table used to generate the SENT. This table is equivalent to <page>scripted_ents.GetStored</page>(\"ent_name\").</warning>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player that is spawning this SENT"
          },
          {
            "name": "tr",
            "type": "table",
            "description": "A <page>Structures/TraceResult</page> from player eyes to their aim position"
          },
          {
            "name": "ClassName",
            "type": "string",
            "description": "The classname of your entity"
          }
        ]
      },
      {
        "name": "StartEngineSchedule",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called by the engine only whenever <page>NPC:SetSchedule</page> is called.\n<note>This hook only exists for `ai` type [SENTs](Scripted_Entities).</note>",
        "arguments": [
          {
            "name": "scheduleID",
            "type": "number",
            "description": "Schedule ID to start. See <page>Enums/SCHED</page>"
          }
        ]
      },
      {
        "name": "StartEngineTask",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called when an engine task has been started on the entity.\n\n<note>This hook only exists for `ai` type [SENTs](Scripted_Entities).</note>",
        "arguments": [
          {
            "name": "taskID",
            "type": "number",
            "description": "Task ID to start, see [ai_task.h](https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/server/ai_task.h#L89-L502)"
          },
          {
            "name": "TaskData",
            "type": "number",
            "description": "Task data"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "true to stop default action"
          }
        ]
      },
      {
        "name": "StartSchedule",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Starts a schedule previously created by <page>ai_schedule.New</page>.\n\nNot to be confused with <page>ENTITY:StartEngineSchedule</page> or <page>NPC:SetSchedule</page> which start an Engine-based schedule.\n\n<note>This hook only exists for `ai` type [SENTs](Scripted_Entities).</note>",
        "arguments": [
          {
            "name": "sched",
            "type": "Schedule",
            "description": "Schedule to start."
          }
        ]
      },
      {
        "name": "StartTask",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called once on starting task.\n<note>This hook only exists for `ai` type [SENTs](Scripted_Entities).</note>",
        "arguments": [
          {
            "name": "task",
            "type": "Task",
            "description": "The task to start, created by <page>ai_task.New</page>."
          }
        ]
      },
      {
        "name": "StartTouch",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called when the entity starts touching another entity.\n\n<warning>This only works for **brush** entities and for entities that have <page>Entity:SetTrigger</page> set to true.</warning>",
        "arguments": [
          {
            "name": "entity",
            "type": "Entity",
            "description": "The entity which is being touched."
          }
        ]
      },
      {
        "name": "StoreOutput",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Used to store an output so it can be triggered with <page>ENTITY:TriggerOutput</page>.\nOutputs compiled into a map are passed to entities as key/value pairs through <page>ENTITY:KeyValue</page>.\n\nTriggerOutput will do nothing if this function has not been called first.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "Name of output to store"
          },
          {
            "name": "info",
            "type": "string",
            "description": "Output info"
          }
        ]
      },
      {
        "name": "TaskFinished",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Returns true if the current running <page>Task</page> is finished.\nTasks finish whenever <page>NPC:TaskComplete</page> is called, which sets `TASKSTATUS_COMPLETE` for all NPCs, also sets `self.bTaskComplete` for `ai` type [SENTs](Scripted_Entities).\n<note>This hook only exists for `ai` type [SENTs](Scripted_Entities).</note>",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Is the current running Task is finished or not."
          }
        ]
      },
      {
        "name": "TaskTime",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Returns how many seconds we've been doing this current task\n<note>This hook only exists for `ai` type [SENTs](Scripted_Entities).</note>",
        "returnValues": [
          {
            "type": "number",
            "description": "How many seconds we've been doing this current task"
          }
        ]
      },
      {
        "name": "TestCollision",
        "parent": "ENTITY",
        "realms": [
          "client",
          "server"
        ],
        "description": "Allows you to override trace result when a trace hits the entity.\n\nYour entity **must** have <page>Entity:EnableCustomCollisions</page> enabled for this hook to work.\n\nYour entity must also be otherwise \"hit-able\" with a trace, so it should have <page text=\"SOLID_OBB\">Enums/SOLID#SOLID_OBB</page> or <page text=\"SOLID_VPHYSICS\">Enums/SOLID#SOLID_VPHYSICS</page> be set (as an example), and it must have its <page text=\"collision bounds\">Entity:SetCollisionBounds</page> be set accordingly.\n\n<note>This hook is called for `anim` type only.</note>",
        "arguments": [
          {
            "name": "startpos",
            "type": "Vector",
            "description": "Start position of the trace."
          },
          {
            "name": "delta",
            "type": "Vector",
            "description": "Offset from startpos to the endpos of the trace."
          },
          {
            "name": "isbox",
            "type": "boolean",
            "description": "Is the trace a hull trace?"
          },
          {
            "name": "extents",
            "type": "Vector",
            "description": "Size of the hull trace, with the center of the Bounding Box being `0, 0, 0`, so mins are `-extents`, and maxs are `extents`."
          },
          {
            "name": "mask",
            "type": "number",
            "description": "The <page>Enums/CONTENTS</page> mask."
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "Returning a `table` will allow you to override trace results. Table should contain the following keys: (All keys fallback to the original trace value)\n* <page>Vector</page> `HitPos` - The new hit position of the trace.\n* <page>number</page> `Fraction` - A number from `0` to `1`, describing how far the trace went from its origin point, `1` = did not hit.\n* Could be calculated like so : `Fraction = ( startpos + delta ):Length() / myCustomHitPos:Length()`\n* <page>Vector</page> `Normal` - A unit vector (length=1) describing the direction perpendicular to the hit surface.\n\nReturning `true` will allow \"normal\" collisions to happen for `SOLID_VPHYSICS` and `SOLID_OBB` entities.<br>\nReturning `nothing` or `false` allows the trace to ignore the entity completely."
          }
        ]
      },
      {
        "name": "Think",
        "parent": "ENTITY",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called every frame on the client.\nCalled about 5-6 times per second on the server.\n\n<note>You may need to call <page>Entity:Spawn</page> to get this hook to run server side.\n\nYou can force it to run at servers tickrate using the example below.</note>",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return `true` if you used <page>Entity:NextThink</page> to override the next execution time."
          }
        ]
      },
      {
        "name": "Touch",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called every tick for every entity being \"touched\".\n\nSee also <page>ENTITY:StartTouch</page> and <page>ENTITY:EndTouch</page>.\n\n<note>For physics enabled entities, this hook will **not** be ran while the entity's physics is asleep. See <page>PhysObj:Wake</page>.</note>",
        "arguments": [
          {
            "name": "entity",
            "type": "Entity",
            "description": "The entity that touched it."
          }
        ]
      },
      {
        "name": "TranslateActivity",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called by the engine to alter NPC activities, if desired by the NPC.\n\n<note>This hook only exists for `ai` type SENTs.</note>",
        "arguments": [
          {
            "name": "act",
            "type": "number",
            "description": "The activity to translate. See <page>Enums/ACT</page>."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The activity that should override the incoming activity. See <page>Enums/ACT</page>.\n\nDo not return anything to not override."
          }
        ]
      },
      {
        "name": "TranslateSchedule",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called by the engine to alter NPC schedules, if desired by the NPC.\n\n<note>This hook only exists for `ai` type SENTs.</note>",
        "arguments": [
          {
            "name": "schedule",
            "type": "number",
            "description": "The schedule to translate. See <page>Enums/SCHED</page>."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The schedule that should override the incoming schedule. See <page>Enums/SCHED</page>.\n\nDo not return anything to not override."
          }
        ]
      },
      {
        "name": "TriggerOutput",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Triggers all outputs stored using <page>ENTITY:StoreOutput</page>.",
        "arguments": [
          {
            "name": "output",
            "type": "string",
            "description": "Name of output to fire"
          },
          {
            "name": "activator",
            "type": "Entity",
            "description": "Activator entity"
          },
          {
            "name": "data",
            "type": "string",
            "default": "nil",
            "description": "The data to give to the output."
          }
        ]
      },
      {
        "name": "UpdateTransmitState",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called whenever the transmit state should be updated.",
        "returnValues": [
          {
            "type": "number",
            "description": "Transmit state to set, see <page>Enums/TRANSMIT</page>."
          }
        ]
      },
      {
        "name": "Use",
        "parent": "ENTITY",
        "realms": [
          "server"
        ],
        "description": "Called when an entity \"uses\" this entity, for example a player pressing their `+use` key (default <key>E</key>) on this entity.\n\nTo change how often the hook is called, see <page>Entity:SetUseType</page>.\n\n<note>This hook only works for `nextbot`, `ai` and `anim` scripted entity types.</note>",
        "arguments": [
          {
            "name": "activator",
            "type": "Entity",
            "description": "The entity that caused this input. This will usually be the player who pressed their use key."
          },
          {
            "name": "caller",
            "type": "Entity",
            "description": "The entity responsible for the input. This will typically be the same as `activator` unless some other entity is acting as a proxy"
          },
          {
            "name": "useType",
            "type": "number",
            "description": "Use type, see <page>Enums/USE</page>."
          },
          {
            "name": "value",
            "type": "number",
            "description": "Any passed value."
          }
        ]
      }
    ]
  },
  {
    "name": "GM",
    "functions": [
      {
        "name": "AcceptInput",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when a map I/O event occurs.\n\nSee also <page>Entity:Fire</page> and <page>Entity:Input</page> for functions to fire Inputs on entities.",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "Entity that receives the input"
          },
          {
            "name": "input",
            "type": "string",
            "description": "The input name. Is not guaranteed to be a valid input on the entity."
          },
          {
            "name": "activator",
            "type": "Entity",
            "description": "Activator of the input"
          },
          {
            "name": "caller",
            "type": "Entity",
            "description": "Caller of the input"
          },
          {
            "name": "value",
            "type": "any",
            "description": "Data provided with the input. Will be either a <page>string</page>, a <page>number</page>, a <page>boolean</page> or a <page>nil</page>."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to prevent this input from being processed. Do not return otherwise."
          }
        ]
      },
      {
        "name": "AddDeathNotice",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Adds a death notice entry.",
        "arguments": [
          {
            "name": "attacker",
            "type": "string",
            "description": "The name of the attacker"
          },
          {
            "name": "attackerTeam",
            "type": "number",
            "description": "The team of the attacker"
          },
          {
            "name": "inflictor",
            "type": "string",
            "description": "Class name of the entity inflicting the damage"
          },
          {
            "name": "victim",
            "type": "string",
            "description": "Name of the victim"
          },
          {
            "name": "victimTeam",
            "type": "number",
            "description": "Team of the victim"
          }
        ]
      },
      {
        "name": "AdjustMouseSensitivity",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Allows you to adjust the mouse sensitivity.",
        "arguments": [
          {
            "name": "defaultSensitivity",
            "type": "number",
            "description": "The old sensitivity\n\nIn general it will be 0, which is equivalent to a sensitivity of 1."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "A fraction of the normal sensitivity (0.5 would be half as sensitive).\n\nReturn -1 to not override and prevent subsequent hooks and <page>WEAPON:AdjustMouseSensitivity</page> from running.\nReturn <page>nil</page> to not override and allow subsequent hooks and <page>WEAPON:AdjustMouseSensitivity</page> to run."
          }
        ]
      },
      {
        "name": "AllowPlayerPickup",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when a player tries to pick up something using the \"use\" key, return to override.\n\nThis hook will not be called if `sv_playerpickupallowed` is set to 0.\n\nSee <page>GM:GravGunPickupAllowed</page> for the Gravity Gun pickup variant.<br>\nSee <page>GM:PhysgunPickup</page> for the Physics Gun pickup variant.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player trying to pick up something."
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "The Entity the player attempted to pick up."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Allow the player to pick up the entity or not."
          }
        ]
      },
      {
        "name": "CalcMainActivity",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "This hook is used to calculate animations for a player.\n\n<warning>This hook must return the same values at the same time on both, client **and** server. On client for players to see the animations, on server for hit detection to work properly.</warning>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player to apply the animation."
          },
          {
            "name": "vel",
            "type": "Vector",
            "description": "The velocity of the player."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "<page>Enums/ACT</page> for the activity the player should use. A nil return will be treated as ACT_INVALID."
          },
          {
            "type": "number",
            "description": "Sequence for the player to use. This takes precedence over the activity (the activity is still used for layering). Return -1 or nil to let the activity determine the sequence."
          }
        ]
      },
      {
        "name": "CalcVehicleView",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called from <page>GM:CalcView</page> when player is in driving a vehicle.\n\nThis hook may not be called in gamemodes that override <page>GM:CalcView</page>.",
        "arguments": [
          {
            "name": "veh",
            "type": "Vehicle",
            "description": "The vehicle the player is driving"
          },
          {
            "name": "ply",
            "type": "Player",
            "description": "The vehicle driver"
          },
          {
            "name": "view",
            "type": "table",
            "description": "The view data containing players FOV, view position and angles, see <page>Structures/CamData</page>"
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "The modified view table containing new values, see <page>Structures/CamData</page>"
          }
        ]
      },
      {
        "name": "CalcView",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Allows override of the default view.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The local player."
          },
          {
            "name": "origin",
            "type": "Vector",
            "description": "The player's view position."
          },
          {
            "name": "angles",
            "type": "Angle",
            "description": "The player's view angles."
          },
          {
            "name": "fov",
            "type": "number",
            "description": "Field of view."
          },
          {
            "name": "znear",
            "type": "number",
            "description": "Distance to near clipping plane."
          },
          {
            "name": "zfar",
            "type": "number",
            "description": "Distance to far clipping plane."
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "View data table. See <page>Structures/CamData</page>"
          }
        ]
      },
      {
        "name": "CalcViewModelView",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Allows overriding the position and angle of the viewmodel.",
        "arguments": [
          {
            "name": "wep",
            "type": "Weapon",
            "description": "The weapon entity"
          },
          {
            "name": "vm",
            "type": "Entity",
            "description": "The viewmodel entity"
          },
          {
            "name": "oldPos",
            "type": "Vector",
            "description": "Original position (before viewmodel bobbing and swaying)"
          },
          {
            "name": "oldAng",
            "type": "Angle",
            "description": "Original angle (before viewmodel bobbing and swaying)"
          },
          {
            "name": "pos",
            "type": "Vector",
            "description": "Current position"
          },
          {
            "name": "ang",
            "type": "Angle",
            "description": "Current angle"
          }
        ],
        "returnValues": [
          {
            "type": "Vector",
            "description": "New position"
          },
          {
            "type": "Angle",
            "description": "New angle"
          }
        ]
      },
      {
        "name": "CanCreateUndo",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called whenever a players tries to create an undo.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player who tried to create something."
          },
          {
            "name": "undo",
            "type": "table",
            "description": "The undo table as a <page>Structures/Undo</page>."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return false to disallow creation of the undo."
          }
        ]
      },
      {
        "name": "CanEditVariable",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when a variable is edited on an Entity (called by `Edit Properties...` menu), to determine if the edit should be permitted.\n\nSee <page text=\"Editable entities\">Editable_Entities</page> for more details about the system.",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity being edited."
          },
          {
            "name": "ply",
            "type": "Player",
            "description": "The player doing the editing."
          },
          {
            "name": "key",
            "type": "string",
            "description": "The name of the variable."
          },
          {
            "name": "val",
            "type": "string",
            "description": "The new value, as a string which will later be converted to its appropriate type."
          },
          {
            "name": "editor",
            "type": "table",
            "description": "The edit table defined in <page>Entity:NetworkVar</page>."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to allow editing."
          }
        ]
      },
      {
        "name": "CanExitVehicle",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Determines if the player can exit the vehicle on their own. <page>Player:ExitVehicle</page> will bypass this hook.\n\nSee <page>GM:CanPlayerEnterVehicle</page> for the opposite hook.\nSee also <page>GM:PlayerLeaveVehicle</page> for a hook that will be called whenever a player exits any vehicle for any reason.",
        "arguments": [
          {
            "name": "veh",
            "type": "Vehicle",
            "description": "The vehicle entity"
          },
          {
            "name": "ply",
            "type": "Player",
            "description": "The player"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "True if the player can exit the vehicle."
          }
        ]
      },
      {
        "name": "CanPlayerEnterVehicle",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Determines whether or not a given player player can enter the given vehicle. <page>Player:EnterVehicle</page> will still call this hook.\n\nCalled just before <page>GM:PlayerEnteredVehicle</page>. See also <page>GM:CanExitVehicle</page>.",
        "arguments": [
          {
            "name": "player",
            "type": "Player",
            "description": "The player that wants to enter a vehicle."
          },
          {
            "name": "vehicle",
            "type": "Vehicle",
            "description": "The vehicle in question."
          },
          {
            "name": "role",
            "type": "number",
            "description": "The seat number."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "`false` if the player is not allowed to enter the vehicle."
          }
        ]
      },
      {
        "name": "CanPlayerSuicide",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Determines if the player can kill themselves using the concommands `kill` or `explode`.",
        "arguments": [
          {
            "name": "player",
            "type": "Player",
            "description": "The player"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "True if they can suicide."
          }
        ]
      },
      {
        "name": "CanPlayerUnfreeze",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Determines if the player can unfreeze the entity.",
        "arguments": [
          {
            "name": "player",
            "type": "Player",
            "description": "The player"
          },
          {
            "name": "entity",
            "type": "Entity",
            "description": "The entity"
          },
          {
            "name": "phys",
            "type": "PhysObj",
            "description": "The physics object of the entity"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "True if they can unfreeze."
          }
        ]
      },
      {
        "name": "CanProperty",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Controls if a <page text=\"property\">properties</page> can be used or not.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player, that tried to use the property"
          },
          {
            "name": "property",
            "type": "string",
            "description": "Class of the property that is tried to use, for example - bonemanipulate\n\n<warning>This is not guaranteed to be the internal property name used in <page>properties.Add</page>!</warning>"
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity, on which property is tried to be used on"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return false to disallow using that property"
          }
        ]
      },
      {
        "name": "CanUndo",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called whenever a players tries to undo.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player who tried to undo something."
          },
          {
            "name": "undo",
            "type": "table",
            "description": "The undo table as a <page>Structures/Undo</page>."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return false to disallow the undo."
          }
        ]
      },
      {
        "name": "CaptureVideo",
        "parent": "GM",
        "realms": [
          "menu"
        ],
        "description": "Called each frame to record demos to video using <page>IVideoWriter</page>.\n\n<note>This hook is called every frame regardless of whether or not a demo is being recorded</note>"
      },
      {
        "name": "ChatText",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when a message is printed to the chat box. Note, that this isn't working with player messages even though there are arguments for it.\n\nFor player messages see <page>GM:PlayerSay</page> and <page>GM:OnPlayerChat</page>",
        "arguments": [
          {
            "name": "index",
            "type": "number",
            "description": "The index of the player."
          },
          {
            "name": "name",
            "type": "string",
            "description": "The name of the player."
          },
          {
            "name": "text",
            "type": "string",
            "description": "The text that is being sent."
          },
          {
            "name": "type",
            "type": "string",
            "description": "Chat filter type. Possible values are:\n* `joinleave` - Player join and leave messages\n* `namechange` - Player name change messages\n* `servermsg` - Server messages such as convar changes\n* `teamchange` - Team changes?\n* `chat` - (Obsolete?) Player chat? Seems to trigger when server console uses the `say` command\n* `none` - A fallback value"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to suppress the chat message."
          }
        ]
      },
      {
        "name": "ChatTextChanged",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called whenever the content of the user's chat input box is changed.",
        "arguments": [
          {
            "name": "text",
            "type": "string",
            "description": "The new contents of the input box"
          }
        ]
      },
      {
        "name": "CheckPassword",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when a non local player connects to allow the Lua system to check the password.\n\nThe default behaviour in the base gamemodes emulates what would normally happen. If sv_password is set and its value matches the password passed in by the client - then they are allowed to join. If it isn't set it lets them in too.",
        "arguments": [
          {
            "name": "steamID64",
            "type": "string",
            "description": "The 64bit Steam ID of the joining player, use <page>util.SteamIDFrom64</page> to convert it to a `STEAM_0:` one."
          },
          {
            "name": "ipAddress",
            "type": "string",
            "description": "The IP of the connecting client"
          },
          {
            "name": "svPassword",
            "type": "string",
            "description": "The current value of sv_password (the password set by the server)"
          },
          {
            "name": "clPassword",
            "type": "string",
            "description": "The password provided by the client"
          },
          {
            "name": "name",
            "type": "string",
            "description": "The name of the joining player"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "If the hook returns false then the player is disconnected"
          },
          {
            "type": "string",
            "description": "If returning false in the first argument, then this should be the disconnect message. This will default to `#GameUI_ServerRejectBadPassword`, which is `Bad Password.` translated to the client's language."
          }
        ]
      },
      {
        "name": "ClientSignOnStateChanged",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when a player's sign on state changes.\n<bug issue=\"4899\">You cannot get a valid player object from the userID at any point during this hook.</bug>",
        "arguments": [
          {
            "name": "userID",
            "type": "number",
            "description": "The userID of the player whose sign on state has changed."
          },
          {
            "name": "oldState",
            "type": "number",
            "description": "The previous sign on state. See <page text=\"SIGNONSTATE\">Enums/SIGNONSTATE</page> enums."
          },
          {
            "name": "newState",
            "type": "number",
            "description": "The new/current sign on state. See <page text=\"SIGNONSTATE\">Enums/SIGNONSTATE</page> enums."
          }
        ]
      },
      {
        "name": "CloseDermaMenus",
        "parent": "GM",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when derma menus are closed with <page>Global.CloseDermaMenus</page>."
      },
      {
        "name": "CreateClientsideRagdoll",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called whenever an entity becomes a clientside ragdoll.\n\nSee <page>GM:CreateEntityRagdoll</page> for serverside ragdolls.",
        "arguments": [
          {
            "name": "entity",
            "type": "Entity",
            "description": "The Entity that created the ragdoll"
          },
          {
            "name": "ragdoll",
            "type": "Entity",
            "description": "The ragdoll being created."
          }
        ]
      },
      {
        "name": "CreateEntityRagdoll",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when a serverside ragdoll of an entity has been created.\n\nSee <page>GM:CreateClientsideRagdoll</page> for clientside ragdolls.",
        "arguments": [
          {
            "name": "owner",
            "type": "Entity",
            "description": "Entity that owns the ragdoll"
          },
          {
            "name": "ragdoll",
            "type": "Entity",
            "description": "The ragdoll entity"
          }
        ]
      },
      {
        "name": "CreateMove",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Allows you to change the players movements before they're sent to the server.\n\nSee <page>Game Movement</page> for an explanation on the move system.\n\n<note>Due to this hook being clientside only, it could be overridden by the user allowing them to completely skip your logic, it is recommended to use <page>GM:StartCommand</page> in a shared file instead.</note>",
        "arguments": [
          {
            "name": "cmd",
            "type": "CUserCmd",
            "description": "The User Command data"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to:\n* Disable Sandbox C menu \"screen clicking\"\n* Disable Teammate nocollide (verification required)\n* Prevent calling of C_BaseHLPlayer::CreateMove & subsequently C_BasePlayer::CreateMove"
          }
        ]
      },
      {
        "name": "CreateTeams",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Teams are created within this hook using <page>team.SetUp</page>.\n\nThis hook is called before <page>GM:PreGamemodeLoaded</page>."
      },
      {
        "name": "DoAnimationEvent",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called upon an animation event, this is the ideal place to call player animation functions such as <page>Player:AddVCDSequenceToGestureSlot</page>, <page>Player:AnimRestartGesture</page> and so on.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player who is being animated"
          },
          {
            "name": "event",
            "type": "number",
            "description": "Animation event. See <page>Enums/PLAYERANIMEVENT</page>"
          },
          {
            "name": "data",
            "type": "number",
            "default": "0",
            "description": "The data for the event. This is interpreted as an <page>Enums/ACT</page> by `PLAYERANIMEVENT_CUSTOM` and `PLAYERANIMEVENT_CUSTOM_GESTURE`, or a sequence by `PLAYERANIMEVENT_CUSTOM_SEQUENCE`."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The translated activity to send to the weapon. See <page>Enums/ACT</page>. Return `ACT_INVALID` if you don't want to send an activity."
          }
        ]
      },
      {
        "name": "DoPlayerDeath",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Handles the player's death.\n\nThis hook is **not** called if the player is killed by <page>Player:KillSilent</page>. See <page>GM:PlayerSilentDeath</page> for that.\n\n* <page>GM:PlayerDeath</page> is called after this hook\n* <page>GM:PostPlayerDeath</page> is called after that\n\n<note><page>Player:Alive</page> will return false in this hook.</note>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player"
          },
          {
            "name": "attacker",
            "type": "Entity",
            "description": "The entity that killed the player"
          },
          {
            "name": "dmg",
            "type": "CTakeDamageInfo",
            "description": "Damage info"
          }
        ]
      },
      {
        "name": "DrawDeathNotice",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "This hook is called every frame to draw all of the current death notices.",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "description": "X position to draw death notices as a ratio"
          },
          {
            "name": "y",
            "type": "number",
            "description": "Y position to draw death notices as a ratio"
          }
        ]
      },
      {
        "name": "DrawMonitors",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called every frame before drawing the in-game monitors ( Breencast, in-game TVs, etc ), but doesn't seem to be doing anything, trying to render 2D or 3D elements fail."
      },
      {
        "name": "DrawOverlay",
        "parent": "GM",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called after all other 2D draw hooks are called. Draws over all VGUI Panels and HUDs.\n\nUnlike <page>GM:HUDPaint</page>, this hook is called with the game paused and while the Camera SWEP is equipped.\n\n<note>Only gets called when `r_drawvgui` is enabled.</note>\n<rendercontext hook=\"true\" type=\"2D\"></rendercontext>"
      },
      {
        "name": "DrawPhysgunBeam",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Allows you to override physgun effects rendering.\n\n<note>This is still called when `physgun_drawbeams` is set to `0`, because this hook is also capable of overriding physgun sprite effects, while the convar does not.</note>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Physgun owner"
          },
          {
            "name": "physgun",
            "type": "Weapon",
            "description": "The physgun"
          },
          {
            "name": "enabled",
            "type": "boolean",
            "description": "Is the beam enabled"
          },
          {
            "name": "target",
            "type": "Entity",
            "description": "Entity we are grabbing. This will be NULL if nothing is being held"
          },
          {
            "name": "physBone",
            "type": "number",
            "description": "ID of the physics bone (<page>PhysObj</page>) we are grabbing at. Use <page>Entity:TranslatePhysBoneToBone</page> to translate to an actual bone."
          },
          {
            "name": "hitPos",
            "type": "Vector",
            "description": "Beam hit position relative to the physics bone (<page>PhysObj</page>) we are grabbing."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return false to hide default effects"
          }
        ]
      },
      {
        "name": "EndEntityDriving",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called right before an entity stops driving. Overriding this hook will cause it to not call <page>drive.End</page> and the player will not stop driving.",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity being driven"
          },
          {
            "name": "ply",
            "type": "Player",
            "description": "The player driving the entity"
          }
        ]
      },
      {
        "name": "EntityEmitSound",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called whenever a sound has been played. This will not be called clientside if the server played the sound without the client also calling <page>Entity:EmitSound</page>.",
        "arguments": [
          {
            "name": "data",
            "type": "table",
            "description": "Information about the played sound. Changes done to this table can be applied by returning `true` from this hook.\n\nSee <page>Structures/EmitSoundInfo</page>."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "* Return `true` to apply all changes done to the data table.\n* Return `false` to prevent the sound from playing.\n* Return `nil` or nothing to play the sound without altering it."
          }
        ]
      },
      {
        "name": "EntityFireBullets",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called every time a bullet is fired from an entity.\n\n<warning>This hook is called directly from <page>Entity:FireBullets</page>. Due to this, you cannot call <page>Entity:FireBullets</page> inside this hook or an infinite loop will occur crashing the game.</warning>",
        "arguments": [
          {
            "name": "entity",
            "type": "Entity",
            "description": "The entity that fired the bullet"
          },
          {
            "name": "data",
            "type": "table",
            "description": "The bullet data. See <page>Structures/Bullet</page>."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "* Return `true` to apply all changes done to the bullet table.\n* Return `false` to suppress the bullet."
          }
        ]
      },
      {
        "name": "EntityKeyValue",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when a key-value pair is set on an entity on map spawn. Is **not** called by <page>Entity:SetKeyValue</page>.\n\nSee <page>ENTITY:KeyValue</page> for a <page>scripted entities</page> hook, and its scripted weapon alternative: <page>WEAPON:KeyValue</page>.",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "Entity that the keyvalue is being set on"
          },
          {
            "name": "key",
            "type": "string",
            "description": "Key of the key/value pair"
          },
          {
            "name": "value",
            "type": "string",
            "description": "Value of the key/value pair"
          }
        ],
        "returnValues": [
          {
            "type": "string",
            "description": "If set, the value of the key-value pair will be overridden by this string."
          }
        ]
      },
      {
        "name": "EntityNetworkedVarChanged",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when an NW2Var is changed.\n<bug issue=\"5455\">If a NW2Var is set on an entity that is based on a Lua Entity could result in the NW2Var being mixed up with other ones and being updated multiple times.</bug>\n<note>\nThis hook is fired before the client value is actually changed. Calling the GetNW2 function for the specified variable name within this hook will return the old value, not the current/updated one.\n\nThis hook gets called for all NW2Vars on all Entities in a full update. The old value will be nil in this case.\nIf this hook seems to be called for no apparent reason, check if it's caused by a full update.\n</note>",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "The owner entity of changed NW2Var"
          },
          {
            "name": "name",
            "type": "string",
            "description": "The name if changed NW2Var"
          },
          {
            "name": "oldval",
            "type": "any",
            "description": "The old value of the NW2Var"
          },
          {
            "name": "newval",
            "type": "any",
            "description": "The new value of the NW2Var"
          }
        ]
      },
      {
        "name": "EntityRemoved",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called right before removal of an entity.\n<warning>This hook is called clientside during full updates due to how networking works in the Source Engine.\n\nThis can happen when the client briefly loses connection to the server, and can be simulated via `cl_fullupdate` for testing purposes.</warning>",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "Entity being removed"
          },
          {
            "name": "fullUpdate",
            "type": "boolean",
            "description": "Whether the removal is happening due to a full update clientside.\n\nThe entity may or **may not** be recreated immediately after, depending on whether it is in the local player's [PVS](https://developer.valvesoftware.com/wiki/PVS \"PVS - Valve Developer Community\"). (See <page>Entity:IsDormant</page>)"
          }
        ]
      },
      {
        "name": "EntityTakeDamage",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when an entity takes damage. You can modify all parts of the damage info in this hook.\n\n<warning>Applying damage from this hook to the entity taking damage will lead to infinite loop/crash.</warning>",
        "arguments": [
          {
            "name": "target",
            "type": "Entity",
            "description": "The entity taking damage"
          },
          {
            "name": "dmg",
            "type": "CTakeDamageInfo",
            "description": "Damage info"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to completely block the damage event"
          }
        ]
      },
      {
        "name": "FindUseEntity",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "This hook polls the entity the player use action should be applied to.\n\n<note>The default behavior of this hook is in [CBasePlayer::FindUseEntity](https://github.com/ValveSoftware/source-sdk-2013/blob/0d8dceea4310fde5706b3ce1c70609d72a38efdf/mp/src/game/shared/baseplayer_shared.cpp#L1068-L1270). Despite CBasePlayer::FindUseEntity being defined shared, it is only called serverside in practice, so this hook will be only called serverside, as well. It is possible for modules to call it clientside, so the Lua code should still be treated as shared.</note>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player who initiated the use action."
          },
          {
            "name": "defaultEnt",
            "type": "Entity",
            "description": "The entity that was chosen by the engine."
          }
        ],
        "returnValues": [
          {
            "type": "Entity",
            "description": "The entity to use instead of default entity"
          }
        ]
      },
      {
        "name": "FinishChat",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Runs when user cancels/finishes typing."
      },
      {
        "name": "FinishMove",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called after <page>GM:Move</page>, applies all the changes from the <page>CMoveData</page> to the player.\n\nSee <page>Game Movement</page> for an explanation on the move system.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player"
          },
          {
            "name": "mv",
            "type": "CMoveData",
            "description": "Movement data"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to suppress default engine behavior, i.e. declare that you have already moved the player according to the move data in a custom way."
          }
        ]
      },
      {
        "name": "ForceDermaSkin",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called to allow override of the default Derma skin for all panels.\n\n<note>This hook is only called on Lua start up, changing its value (or adding new hooks) after it has been already called will not have any effect.</note>",
        "returnValues": [
          {
            "type": "string",
            "description": "A **case sensitive** Derma skin name to be used as default, registered previously via <page>derma.DefineSkin</page>.\n\n\nReturning nothing, nil or invalid name will make it fallback to the \"Default\" skin."
          }
        ]
      },
      {
        "name": "GameContentChanged",
        "parent": "GM",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Called when game content has been changed, for example an addon or a mountable game was (un)mounted."
      },
      {
        "name": "GetDeathNoticeEntityName",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "An internal function used to get an untranslated string to show in the kill feed as the entity's name. See <page>GM:SendDeathNotice</page>",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity to get a name of."
          }
        ],
        "returnValues": [
          {
            "type": "string",
            "description": "The untranslated name for given NPC. The translation/localization would happen on the client."
          }
        ]
      },
      {
        "name": "GetFallDamage",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when a player takes damage from falling, allows to override the damage.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player"
          },
          {
            "name": "speed",
            "type": "number",
            "description": "The fall speed"
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "New fall damage"
          }
        ]
      },
      {
        "name": "GetGameDescription",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when the game(server) needs to update the text shown in the server browser as the gamemode.\n\n<note>This hook (and the `sv_gamename_override` command) may not work on some popular gamemodes like DarkRP or Trouble Terrorist Town. This is not a bug, it's just how it works. See [here](https://github.com/Facepunch/garrysmod-issues/issues/4637#issuecomment-677884989) for more information.\n\nAlso, it **only** works on dedicated servers and is called at regular intervals (about one second) **even** if the server has no players and the hibernation function is enabled.</note>",
        "returnValues": [
          {
            "type": "string",
            "description": "The text to be shown in the server browser as the gamemode."
          }
        ]
      },
      {
        "name": "GetMotionBlurValues",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Allows you to modify the Source Engine's motion blur shaders.",
        "arguments": [
          {
            "name": "horizontal",
            "type": "number",
            "description": "The amount of horizontal blur."
          },
          {
            "name": "vertical",
            "type": "number",
            "description": "The amount of vertical  blur."
          },
          {
            "name": "forward",
            "type": "number",
            "description": "The amount of forward/radial blur."
          },
          {
            "name": "rotational",
            "type": "number",
            "description": "The amount of rotational blur."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "New amount of horizontal blur."
          },
          {
            "type": "number",
            "description": "New amount of vertical blur."
          },
          {
            "type": "number",
            "description": "New amount of forward/radial blur."
          },
          {
            "type": "number",
            "description": "New amount of rotational blur."
          }
        ]
      },
      {
        "name": "GetPreferredCarryAngles",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called to determine preferred carry angles for the entity. It works for both, +use pickup and gravity gun pickup.\n\n<warning>Due to nature of the gravity gun coding in multiplayer, this hook **MAY** seem to not work ( but rest assured it does ), due to clientside prediction not knowing the carry angles. The +use pickup doesn't present this issue as it doesn't predict the player carrying the object clientside ( as you may notice by the prop lagging behind in multiplayer )</warning>\n\n<note>This hook can **not** override preferred carry angles of props such as the sawblade and the harpoon.</note>",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity to generate carry angles for"
          },
          {
            "name": "ply",
            "type": "Player",
            "description": "The player who is holding the object"
          }
        ],
        "returnValues": [
          {
            "type": "Angle",
            "description": "The preferred carry angles for the entity."
          }
        ]
      },
      {
        "name": "GetTeamColor",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Returns the color for the given entity's team. This is used in chat and deathnotice text.",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "Entity"
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "Team <page>Global.Color</page>"
          }
        ]
      },
      {
        "name": "GetTeamNumColor",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Returns the team color for the given team index.",
        "arguments": [
          {
            "name": "team",
            "type": "number",
            "description": "Team index"
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "Team <page>Global.Color</page>"
          }
        ]
      },
      {
        "name": "GrabEarAnimation",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Override this hook to disable/change ear-grabbing in your gamemode.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player"
          }
        ]
      },
      {
        "name": "GravGunOnDropped",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when an entity is released by a gravity gun.\n\nSee <page>GM:PhysgunDrop</page> for the Physics Gun drop variant.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player who is wielding the gravity gun"
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity that has been dropped"
          }
        ]
      },
      {
        "name": "GravGunOnPickedUp",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when an entity is picked up by a gravity gun.\n\nSee <page>GM:OnPlayerPhysicsPickup</page> for the player `+use` pickup variant.<br>\nSee <page>GM:OnPhysgunPickup</page> for the Physics Gun pickup variant.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player wielding the gravity gun"
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity that has been picked up by the gravity gun"
          }
        ]
      },
      {
        "name": "GravGunPickupAllowed",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called every tick to poll whether a player is allowed to pick up an entity with the gravity gun or not.\n\nSee <page>GM:AllowPlayerPickup</page> for the +USE pickup variant.<br>\nSee <page>GM:PhysgunPickup</page> for the Physics Gun pickup variant.\n\nCalls <page>ENTITY:GravGunPickupAllowed</page> on the entity being hovered every frame in Sandbox-derived gamemodes.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player wielding the gravity gun"
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity the player is attempting to pick up"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to allow entity pick up"
          }
        ]
      },
      {
        "name": "GravGunPunt",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when an entity is about to be punted with the gravity gun (primary fire).\n\nBy default this function makes <page>ENTITY:GravGunPunt</page> work in Sandbox derived gamemodes.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player wielding the gravity gun"
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity the player is attempting to punt"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to allow and false to disallow."
          }
        ]
      },
      {
        "name": "GUIMouseDoublePressed",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when the mouse has been double clicked on any panel derived from CGModBase, such as the panel used by <page>gui.EnableScreenClicker</page> and the panel used by <page>Panel:ParentToHUD</page>.\n\nBy default this hook calls <page>GM:GUIMousePressed</page>.",
        "arguments": [
          {
            "name": "mouseCode",
            "type": "number",
            "description": "The code of the mouse button pressed, see <page>Enums/MOUSE</page>"
          },
          {
            "name": "aimVector",
            "type": "Vector",
            "description": "A normalized vector pointing in the direction the client has clicked"
          }
        ]
      },
      {
        "name": "GUIMousePressed",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called whenever a players presses a mouse key on the context menu in Sandbox or on any panel derived from CGModBase, such as the panel used by <page>gui.EnableScreenClicker</page> and the panel used by <page>Panel:ParentToHUD</page>.\n\nSee <page>GM:VGUIMousePressed</page> for a hook that is called on all VGUI elements.",
        "arguments": [
          {
            "name": "mouseCode",
            "type": "number",
            "description": "The key that the player pressed using <page>Enums/MOUSE</page>."
          },
          {
            "name": "aimVector",
            "type": "Vector",
            "description": "A normalized direction vector local to the camera. Internally, this is  <page>gui.ScreenToVector</page>( <page>gui.MousePos</page>() )."
          }
        ]
      },
      {
        "name": "GUIMouseReleased",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called whenever a players releases a mouse key on the context menu in Sandbox or on any panel derived from CGModBase, such as the panel used by <page>gui.EnableScreenClicker</page> and the panel used by <page>Panel:ParentToHUD</page>.",
        "arguments": [
          {
            "name": "mouseCode",
            "type": "number",
            "description": "The key the player released, see <page>Enums/MOUSE</page>"
          },
          {
            "name": "aimVector",
            "type": "Vector",
            "description": "A normalized direction vector local to the camera. Internally this is  <page>gui.ScreenToVector</page>( <page>gui.MousePos</page>() )."
          }
        ]
      },
      {
        "name": "HandlePlayerArmorReduction",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called to handle player armor reduction, when player receives damage.\n\n<validate>Clarify hook order with other damage hooks.</validate>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player that took damage."
          },
          {
            "name": "dmginfo",
            "type": "CTakeDamageInfo",
            "description": "The taken damage."
          }
        ]
      },
      {
        "name": "HandlePlayerDriving",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Allows to override player driving animations.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player to process"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true if we've changed/set the animation, false otherwise"
          }
        ]
      },
      {
        "name": "HandlePlayerDucking",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Allows to override player crouch animations.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player"
          },
          {
            "name": "velocity",
            "type": "number",
            "description": "Players velocity"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true if we've changed/set the animation, false otherwise"
          }
        ]
      },
      {
        "name": "HandlePlayerJumping",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called every frame by the player model animation system. Allows to override player jumping animations.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player"
          },
          {
            "name": "velocity",
            "type": "number",
            "description": "Players velocity"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true if we've changed/set the animation, false otherwise"
          }
        ]
      },
      {
        "name": "HandlePlayerLanding",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called every frame by the player model animation system. Allows to override player landing animations.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player"
          },
          {
            "name": "velocity",
            "type": "number",
            "description": "Players velocity"
          },
          {
            "name": "onGround",
            "type": "boolean",
            "description": "Was the player on ground?"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true if we've changed/set the animation, false otherwise"
          }
        ]
      },
      {
        "name": "HandlePlayerNoClipping",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Allows to override player noclip animations.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player"
          },
          {
            "name": "velocity",
            "type": "number",
            "description": "Players velocity"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true if we've changed/set the animation, false otherwise"
          }
        ]
      },
      {
        "name": "HandlePlayerSwimming",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Allows to override player swimming animations.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player"
          },
          {
            "name": "velocity",
            "type": "number",
            "description": "Players velocity"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true if we've changed/set the animation, false otherwise"
          }
        ]
      },
      {
        "name": "HandlePlayerVaulting",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Allows to override player flying ( in mid-air, not noclipping ) animations.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player"
          },
          {
            "name": "velocity",
            "type": "number",
            "description": "Players velocity"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true if we've changed/set the animation, false otherwise"
          }
        ]
      },
      {
        "name": "HideTeam",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Hides the team selection panel."
      },
      {
        "name": "HUDAmmoPickedUp",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when the client has picked up ammo. Override to disable default HUD notification.",
        "arguments": [
          {
            "name": "itemName",
            "type": "string",
            "description": "Name of the item (ammo) picked up"
          },
          {
            "name": "amount",
            "type": "number",
            "description": "Amount of the item (ammo) picked up"
          }
        ]
      },
      {
        "name": "HUDDrawPickupHistory",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Renders the HUD pick-up history. Override to hide default or draw your own HUD."
      },
      {
        "name": "HUDDrawScoreBoard",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called every frame to render the scoreboard.\n\n\nIt is recommended to use Derma and VGUI for this job instead of this hook. Called right after <page>GM:HUDPaint</page>.\n\n<rendercontext hook=\"true\" type=\"2D\"></rendercontext>"
      },
      {
        "name": "HUDDrawTargetID",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called from <page>GM:HUDPaint</page> to draw player info when you hover over a player with your crosshair or mouse.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Should the player info be drawn."
          }
        ]
      },
      {
        "name": "HUDItemPickedUp",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when an item has been picked up. Override to disable the default HUD notification.",
        "arguments": [
          {
            "name": "itemName",
            "type": "string",
            "description": "Name of the picked up item"
          }
        ]
      },
      {
        "name": "HUDPaint",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called whenever the HUD should be drawn.\n\nThis is the ideal place to draw custom HUD elements.\n\nTo prevent the default game HUD from drawing, use <page>GM:HUDShouldDraw</page>.\n\nThis hook does **not** get called when the Camera SWEP is held, or when the <key>esc</key> menu is open.\nIf you need to draw in those situations, use <page>GM:DrawOverlay</page> instead.\n\n<rendercontext hook=\"true\" type=\"2D\"></rendercontext>"
      },
      {
        "name": "HUDPaintBackground",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called before <page>GM:HUDPaint</page> when the HUD background is being drawn.\n\nJust like <page>GM:HUDPaint</page>, this hook will not be called when the main menu is visible. <page>GM:PostDrawHUD</page> does not have this behavior.\n\nThings rendered in this hook will **always** appear behind things rendered in <page>GM:HUDPaint</page>.\n\n<rendercontext hook=\"true\" type=\"2D\"></rendercontext>"
      },
      {
        "name": "HUDShouldDraw",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when the Gamemode is about to draw a given element on the client's HUD (heads-up display).\n\n<warning>This hook is called HUNDREDS of times per second (more than 5 times per frame on average). You shouldn't be performing any computationally intensive operations.</warning>",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "The name of the HUD element. You can find a full list of HUD elements for this hook <page text=\"here\">HUD_Element_List</page>."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return false to prevent the given element from being drawn on the client's screen."
          }
        ]
      },
      {
        "name": "HUDWeaponPickedUp",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when a weapon has been picked up. Override to disable the default HUD notification.",
        "arguments": [
          {
            "name": "weapon",
            "type": "Weapon",
            "description": "The picked up weapon"
          }
        ]
      },
      {
        "name": "Initialize",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called after the gamemode loads and starts.\n\nNo entities would be present at the time this hook is called, please see <page>GM:InitPostEntity</page> for a one time fire hook after all map entities have been initialized."
      },
      {
        "name": "InitPostEntity",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called after all the entities are initialized. Starting from this hook <page>Global.LocalPlayer</page> will return valid object.\n\n<note>At this point the client only knows about the entities that are within the spawnpoints' [PVS (Potential Visibility Set)](https://developer.valvesoftware.com/wiki/PVS \"PVS - Valve Developer Community\"). For instance, if the server sends an entity that is not within this PVS, the client will receive it as NULL entity.</note>"
      },
      {
        "name": "InputMouseApply",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Allows you to modify the supplied User Command with mouse input. This could be used to make moving the mouse do funky things to view angles.",
        "arguments": [
          {
            "name": "cmd",
            "type": "CUserCmd",
            "description": "User command."
          },
          {
            "name": "x",
            "type": "number",
            "description": "The amount of mouse movement across the X axis this frame."
          },
          {
            "name": "y",
            "type": "number",
            "description": "The amount of mouse movement across the Y axis this frame."
          },
          {
            "name": "ang",
            "type": "Angle",
            "description": "The current view angle."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true if we modified something."
          }
        ]
      },
      {
        "name": "IsSpawnpointSuitable",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Check if a player can spawn at a certain spawnpoint.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player who is spawned"
          },
          {
            "name": "spawnpoint",
            "type": "Entity",
            "description": "The spawnpoint entity (on the map)."
          },
          {
            "name": "makeSuitable",
            "type": "boolean",
            "description": "If this is true, it'll kill any players blocking the spawnpoint."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to indicate that the spawnpoint is suitable (Allow for the player to spawn here), false to prevent spawning."
          }
        ]
      },
      {
        "name": "KeyPress",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called whenever a player pressed a key included within the IN keys.\n\nFor a more general purpose function that handles all kinds of input, see <page>GM:PlayerButtonDown</page>.\n\nDespite being a predicted hook, it will still be called in singleplayer for your convenience.\n\n<warning>Due to this being a predicted hook, <page>Global.ParticleEffect</page>s created only serverside from this hook will not be networked to the client, so make sure to do that on both realms.</warning>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player pressing the key. If running client-side, this will always be <page>Global.LocalPlayer</page>."
          },
          {
            "name": "key",
            "type": "number",
            "description": "The key that the player pressed using <page>Enums/IN</page>."
          }
        ]
      },
      {
        "name": "KeyRelease",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Runs when a IN key was released by a player.\n\nFor a more general purpose function that handles all kinds of input, see <page>GM:PlayerButtonUp</page>.\n\nDespite being a predicted hook, it will still be called in singleplayer for your convenience.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player releasing the key. If running client-side, this will always be <page>Global.LocalPlayer</page>."
          },
          {
            "name": "key",
            "type": "number",
            "description": "The key that the player released using <page>Enums/IN</page>."
          }
        ]
      },
      {
        "name": "LoadGModSave",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "<internal></internal>Called from `gm_load` when the game should load a map.",
        "arguments": [
          {
            "name": "data",
            "type": "string",
            "description": "Compressed save data"
          },
          {
            "name": "map",
            "type": "string",
            "description": "The name of the map the save was created on"
          },
          {
            "name": "timestamp",
            "type": "number",
            "description": "The time the save was created on. Will always be 0."
          }
        ]
      },
      {
        "name": "LoadGModSaveFailed",
        "parent": "GM",
        "realms": [
          "menu"
        ],
        "description": "Called while an addon from the Steam workshop is downloading. Used by default to update details on the fancy workshop download panel.",
        "returnValues": [
          {
            "type": "string",
            "name": "reason",
            "description": "Failure Reason."
          },
          {
            "type": "string",
            "name": "workshopid",
            "description": "the workshop ID of the missing map (if found). Can be an empty string"
          }
        ]
      },
      {
        "name": "MenuStart",
        "parent": "GM",
        "realms": [
          "menu"
        ],
        "description": "Called when `menu.lua` has finished loading."
      },
      {
        "name": "MouthMoveAnimation",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Override this gamemode function to disable mouth movement when talking on voice chat.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player in question"
          }
        ]
      },
      {
        "name": "Move",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "The Move hook is called for you to manipulate the player's MoveData.\n\nYou shouldn't adjust the player's position in any way in the move hook. This is because due to prediction errors, the netcode might run the move hook multiple times as packets arrive late. Therefore you should only adjust the movedata construct in this hook.\n\nGenerally you shouldn't have to use this hook - if you want to make a custom move type you should look at the drive system.\n\nThis hook is called after <page>GM:PlayerTick</page>.\n\nSee <page>Game Movement</page> for an explanation on the move system.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player"
          },
          {
            "name": "mv",
            "type": "CMoveData",
            "description": "Movement information"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to suppress default engine action."
          }
        ]
      },
      {
        "name": "NeedsDepthPass",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Returning true in this hook will cause it to render depth buffers defined with <page>render.GetResolvedFullFrameDepth</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Render depth buffer"
          }
        ]
      },
      {
        "name": "NetworkEntityCreated",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when an entity has been created over the network.",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "Created entity"
          }
        ]
      },
      {
        "name": "NetworkIDValidated",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when a player's SteamID has been validated by Steam.\n\nSee also <page>GM:PlayerAuthed</page>.\n\n<note>This hook doesn't work intentionally in singleplayer [because the SteamID is not validated](https://github.com/Facepunch/garrysmod-issues/issues/4906#issuecomment-819337130) in that case. This also applies to `sv_lan 1` servers for every duplicate `-multirun` client.</note>",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "Player name"
          },
          {
            "name": "steamID",
            "type": "string",
            "description": "Player SteamID"
          },
          {
            "name": "ownerID",
            "type": "string",
            "description": "SteamID64 of the game license owner, in case Family Sharing is used. See also <page>Player:OwnerSteamID64</page>"
          }
        ]
      },
      {
        "name": "NotifyShouldTransmit",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called whenever this entity changes its transmission state for this <page>Global.LocalPlayer</page>, such as exiting or re entering the [PVS (Potential Visibility Set)](https://developer.valvesoftware.com/wiki/PVS \"PVS - Valve Developer Community\").\n\n<note>\nThis is the best place to handle the reset of <page>Entity:SetPredictable</page>, as this would be usually called when the player lags and requests a full packet update.\n\nWhen the entity stops transmitting, <page>Entity:IsDormant</page> will only return true **after** this hook.\n</note>",
        "arguments": [
          {
            "name": "entity",
            "type": "Entity",
            "description": "The entity that changed its transmission state."
          },
          {
            "name": "shouldtransmit",
            "type": "boolean",
            "description": "`True` if we started transmitting to this client and `false` if we stopped."
          }
        ]
      },
      {
        "name": "OnAchievementAchieved",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when a player has achieved an achievement. You can get the name and other information from an achievement ID with the <page>achievements</page> library.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player that earned the achievement"
          },
          {
            "name": "achievement",
            "type": "number",
            "description": "The index of the achievement"
          }
        ]
      },
      {
        "name": "OnChatTab",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when the local player presses TAB while having their chatbox opened.",
        "arguments": [
          {
            "name": "text",
            "type": "string",
            "description": "The currently typed into chatbox text"
          }
        ],
        "returnValues": [
          {
            "type": "string",
            "description": "What should be placed into the chatbox instead of what currently is when player presses tab"
          }
        ]
      },
      {
        "name": "OnCleanup",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when the player cleans up something.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "The name of the cleanup type"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "name": "suppress",
            "description": "Return false to suppress the cleanup notification."
          }
        ]
      },
      {
        "name": "OnCloseCaptionEmit",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when a caption has been emitted to the closed caption box.",
        "arguments": [
          {
            "name": "soundScript",
            "type": "string",
            "description": "The name of the soundscript, or `customLuaToken` if it's from <page>gui.AddCaption</page>"
          },
          {
            "name": "duration",
            "type": "number",
            "description": "How long the caption should stay for"
          },
          {
            "name": "fromPlayer",
            "type": "boolean",
            "description": "Is this caption coming from the player?"
          },
          {
            "name": "fullText",
            "type": "string",
            "description": "The caption. Can be nil if its token is not registered"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return `true` to prevent the caption from appearing"
          }
        ]
      },
      {
        "name": "OnContextMenuClose",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when the context menu keybind (+menu_context) is released, which by default is C.\n\nThis hook will not run if <page>input.IsKeyTrapping</page> returns true.\n\nSee also <page>GM:OnContextMenuOpen</page>."
      },
      {
        "name": "OnContextMenuOpen",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when the context menu keybind (`+menu_context`) is pressed, which by default is <key>C</key>.\n\nSee also <page>GM:OnContextMenuClose</page>."
      },
      {
        "name": "OnCrazyPhysics",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when the crazy physics detection detects an entity with Crazy Physics.",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity that was detected as crazy"
          },
          {
            "name": "physobj",
            "type": "PhysObj",
            "description": "The physics object that is going crazy"
          }
        ]
      },
      {
        "name": "OnDamagedByExplosion",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when a player has been hurt by an explosion. Override to disable default sound effect.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player who has been hurt"
          },
          {
            "name": "dmginfo",
            "type": "CTakeDamageInfo",
            "description": "Damage info from explosion"
          }
        ]
      },
      {
        "name": "OnEntityCreated",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called as soon as the entity is created. Very little of the entity's properties will be initialized at this stage. (keyvalues, classname, flags, anything), especially on the serverside.\n\n<note>Some entities on initial map spawn are passed through this hook, and then removed in the same frame. This is used by the engine to precache things like models and sounds, so always check their validity with <page>Global.IsValid</page>.</note>\n\n<warning>Removing the created entity during this event can lead to unexpected problems. Use <page>timer.Simple</page>( 0, .... ) to safely remove the entity.</warning>",
        "arguments": [
          {
            "name": "entity",
            "type": "Entity",
            "description": "The entity"
          }
        ]
      },
      {
        "name": "OnEntityWaterLevelChanged",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when the <page>Entity:WaterLevel</page> of an entity is changed.\n\n0 - The entity isn't in water.\n\n1 - Slightly submerged (at least to the feet).\n\n2 - The majority of the entity is submerged (at least to the waist).\n\n3 - Completely submerged.\n\n<warning>This hook can be considered a physics callback, so changing collision rules (<page>Entity:SetSolidFlags</page>) in it may lead to a crash!</warning>",
        "arguments": [
          {
            "name": "entity",
            "type": "Entity",
            "description": "The entity."
          },
          {
            "name": "old",
            "type": "number",
            "description": "Previous water level."
          },
          {
            "name": "new",
            "type": "number",
            "description": "The new water level."
          }
        ]
      },
      {
        "name": "OnGamemodeLoaded",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when the gamemode is loaded.\n\n<page>Global.LocalPlayer</page>() returns NULL at the time this is run."
      },
      {
        "name": "OnLuaError",
        "parent": "GM",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Called when a Lua error occurs. Doesn't run for <page>Global.ErrorNoHalt</page> or <page>Global.Error</page>.\n<note>On the <page text=\"server realm\">States</page>, this hook will only account for server-side errors, not client-side ones.</note>",
        "arguments": [
          {
            "name": "error",
            "type": "string",
            "description": "The error that occurred."
          },
          {
            "name": "realm",
            "type": "string",
            "description": "Where the Lua error took place, \"client\", or \"server\""
          },
          {
            "name": "stack",
            "type": "table",
            "description": "The Lua error stack trace"
          },
          {
            "name": "name",
            "type": "string",
            "description": "Title of the addon that is creating the Lua errors."
          },
          {
            "name": "id",
            "type": "string",
            "description": "Steam Workshop ID of the addon creating Lua errors, if it is an addon."
          }
        ]
      },
      {
        "name": "OnNotifyAddonConflict",
        "parent": "GM",
        "realms": [
          "menu"
        ],
        "description": "Called when a Addon Conflict occurs, only works in the Menu realm.",
        "arguments": [
          {
            "name": "addon1",
            "type": "string",
            "description": "The first Addon"
          },
          {
            "name": "addon2",
            "type": "string",
            "description": "The second Addon"
          },
          {
            "name": "fileName",
            "type": "string",
            "description": "The File the Conflict occurred in."
          }
        ]
      },
      {
        "name": "OnNPCKilled",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called whenever an NPC is killed.",
        "arguments": [
          {
            "name": "npc",
            "type": "NPC",
            "description": "The killed NPC"
          },
          {
            "name": "attacker",
            "type": "Entity",
            "description": "The NPCs attacker, the entity that gets the kill credit, for example a player or an NPC."
          },
          {
            "name": "inflictor",
            "type": "Entity",
            "description": "Death inflictor. The entity that did the killing. Not necessarily a weapon."
          }
        ]
      },
      {
        "name": "OnPauseMenuBlockedTooManyTimes",
        "parent": "GM",
        "realms": [
          "menu"
        ],
        "description": "Called when the main menu has been blocked by <page>GM:OnPauseMenuShow</page> four times in a small interval. This is used internally to explain to the user that they can hold <key>SHIFT</key> to force open the main menu."
      },
      {
        "name": "OnPauseMenuShow",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when the pause menu is attempting to be opened. Allows you to prevent the main menu from being opened that time.\n\nThe user can hold <key>SHIFT</key> to not call this hook. If the main menu is blocked multiple times in short succession, a warning will be displayed to the end user on how to bypass the hook.",
        "returnValues": [
          {
            "type": "boolean",
            "name": "ShouldOpen",
            "description": "Should the menu be allowed to open?"
          }
        ]
      },
      {
        "name": "OnPermissionsChanged",
        "parent": "GM",
        "realms": [
          "menu"
        ],
        "description": "Called when a permission gets Granted or Revoked."
      },
      {
        "name": "OnPhysgunFreeze",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when a player freezes an entity with the physgun.\n\n<bug issue=\"723\">This is not called for players or NPCs being held with the physgun.</bug>",
        "arguments": [
          {
            "name": "weapon",
            "type": "Entity",
            "description": "The weapon that was used to freeze the entity."
          },
          {
            "name": "physobj",
            "type": "PhysObj",
            "description": "Physics object of the entity."
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "The target entity."
          },
          {
            "name": "ply",
            "type": "Player",
            "description": "The player who tried to freeze the entity."
          }
        ]
      },
      {
        "name": "OnPhysgunPickup",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called to when a player has successfully picked up an entity with their Physics Gun.\n\nNot to be confused with <page>GM:PhysgunPickup</page> which is called multiple times to ask if the player should be able to pick up an entity.\n\n\nSee <page>GM:GravGunOnPickedUp</page> for the Gravity Gun pickup variant.<br>\nSee <page>GM:OnPlayerPhysicsPickup</page> for the player `+use` pickup variant.<br>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player that has picked up something using the physics gun."
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity that was picked up."
          }
        ]
      },
      {
        "name": "OnPhysgunReload",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when a player reloads with the physgun. Override this to disable default unfreezing behavior.",
        "arguments": [
          {
            "name": "physgun",
            "type": "Weapon",
            "description": "The physgun in question"
          },
          {
            "name": "ply",
            "type": "Player",
            "description": "The player wielding the physgun"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the player can reload with the physgun or not"
          }
        ]
      },
      {
        "name": "OnPlayerChangedTeam",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "<deprecated>Use <page>GM:PlayerChangedTeam</page> instead, which works for every <page>Player:SetTeam</page> call.</deprecated>\nCalled when a player has changed team using <page>GM:PlayerJoinTeam</page>.\n\n<warning>This hook will not work with <page>hook.Add</page> and it is only called manually from <page>GM:PlayerJoinTeam</page> by the base gamemode</warning>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player who has changed team"
          },
          {
            "name": "oldTeam",
            "type": "number",
            "description": "Index of the team the player was originally in"
          },
          {
            "name": "newTeam",
            "type": "number",
            "description": "Index of the team the player has changed to"
          }
        ]
      },
      {
        "name": "OnPlayerChat",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called whenever a player sends a chat message. For the serverside equivalent, see <page>GM:PlayerSay</page>.\n<note>The text input of this hook depends on <page>GM:PlayerSay</page>. If it is suppressed on the server, it will be suppressed on the client. This also means, that a message surpressed with this hook will be still visible to other clients.</note>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player"
          },
          {
            "name": "text",
            "type": "string",
            "description": "The message's text"
          },
          {
            "name": "teamChat",
            "type": "boolean",
            "description": "Is the player typing in team chat?"
          },
          {
            "name": "isDead",
            "type": "boolean",
            "description": "Is the player dead?"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Should the message be suppressed?"
          }
        ]
      },
      {
        "name": "OnPlayerHitGround",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when a player makes contact with the ground after a jump or a fall.",
        "arguments": [
          {
            "name": "player",
            "type": "Entity",
            "description": "Player"
          },
          {
            "name": "inWater",
            "type": "boolean",
            "description": "Did the player land in water?"
          },
          {
            "name": "onFloater",
            "type": "boolean",
            "description": "Did the player land on an object floating in the water?"
          },
          {
            "name": "speed",
            "type": "number",
            "description": "The speed at which the player hit the ground"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to suppress default action"
          }
        ]
      },
      {
        "name": "OnPlayerJump",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when a player jumps.",
        "arguments": [
          {
            "name": "player",
            "type": "Entity",
            "description": "Player"
          },
          {
            "name": "speed",
            "type": "number",
            "description": "The velocity/impulse of the jump"
          }
        ]
      },
      {
        "name": "OnPlayerPhysicsDrop",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when a player +use drops an entity.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player that dropped the object"
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "The object that was dropped."
          },
          {
            "name": "thrown",
            "type": "boolean",
            "description": "Whether the object was throw or simply let go of."
          }
        ]
      },
      {
        "name": "OnPlayerPhysicsPickup",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when a player +use pickups up an entity. This will be called after the entity passes though <page>GM:AllowPlayerPickup</page>.\n\nSee <page>GM:GravGunOnPickedUp</page> for the Gravity Gun pickup variant.<br>\nSee <page>GM:OnPhysgunPickup</page> for the Physics Gun pickup variant.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player that picked up the object"
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "The object that was picked up."
          }
        ]
      },
      {
        "name": "OnReloaded",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when gamemode has been reloaded by auto refresh.\n\n<note>It seems that this event can be triggered more than once for a single refresh event.</note>"
      },
      {
        "name": "OnScreenSizeChanged",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when the player's screen resolution of the game changes.\n\n<page>Global.ScrW</page> and <page>Global.ScrH</page> will return the new values when this hook is called.",
        "arguments": [
          {
            "name": "oldWidth",
            "type": "number",
            "description": "The previous width of the game's window."
          },
          {
            "name": "oldHeight",
            "type": "number",
            "description": "The previous height of the game's window."
          },
          {
            "name": "newWidth",
            "type": "number",
            "description": "The new/current width of the game's window."
          },
          {
            "name": "newHeight",
            "type": "number",
            "description": "The new/current height of the game's window."
          }
        ]
      },
      {
        "name": "OnSpawnMenuClose",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when a player releases the `+menu` bind on their keyboard, which is bound to Q by default."
      },
      {
        "name": "OnSpawnMenuOpen",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when a player presses the `+menu` bind on their keyboard, which is bound to <key>Q</key> by default."
      },
      {
        "name": "OnTextEntryGetFocus",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when a <page>DTextEntry</page> gets focus.\n\nThis hook is run from <page>DTextEntry:OnGetFocus</page> and <page>PANEL:OnMousePressed</page> of <page>DTextEntry</page>.",
        "arguments": [
          {
            "name": "panel",
            "type": "Panel",
            "description": "The panel that got focus"
          }
        ]
      },
      {
        "name": "OnTextEntryLoseFocus",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when a <page>DTextEntry</page> loses focus.",
        "arguments": [
          {
            "name": "panel",
            "type": "Panel",
            "description": "The panel that lost focus"
          }
        ]
      },
      {
        "name": "OnUndo",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when the player undoes something.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "The name of the undo action"
          },
          {
            "name": "customText",
            "type": "string",
            "description": "The custom text for the undo, set by <page>undo.SetCustomUndoText</page>"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "name": "suppress",
            "description": "Return false to suppress the undo notification."
          }
        ]
      },
      {
        "name": "OnViewModelChanged",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when the player changes their weapon to another one - and their viewmodel model changes.\n\n<bug issue=\"2473\">This is not always called clientside.</bug>",
        "arguments": [
          {
            "name": "viewmodel",
            "type": "Entity",
            "description": "The viewmodel that is changing"
          },
          {
            "name": "oldModel",
            "type": "string",
            "description": "The old model"
          },
          {
            "name": "newModel",
            "type": "string",
            "description": "The new model"
          }
        ]
      },
      {
        "name": "PhysgunDrop",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when a player drops an entity with the Physgun.\n\nSee <page>GM:GravGunOnDropped</page> for the Gravity Gun drop variant.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player who dropped an entitiy"
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "The dropped entity"
          }
        ]
      },
      {
        "name": "PhysgunPickup",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called to determine if a player should be able to pick up an entity with the Physics Gun.\n\nSee <page>GM:OnPhysgunPickup</page> for a hook which is called when a player has successfully picked up an entity.\n\nSee <page>GM:GravGunPickupAllowed</page> for the Gravity Gun pickup variant.<br>\nSee <page>GM:AllowPlayerPickup</page> for the +USE pickup variant.",
        "arguments": [
          {
            "name": "player",
            "type": "Player",
            "description": "The player that is picking up using the Physics Gun."
          },
          {
            "name": "entity",
            "type": "Entity",
            "description": "The entity that is being picked up."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Returns whether the player can pick up the entity or not."
          }
        ]
      },
      {
        "name": "PlayerAmmoChanged",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called after player's reserve ammo count changes.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player whose ammo is being affected."
          },
          {
            "name": "ammoID",
            "type": "number",
            "description": "The ammo type ID."
          },
          {
            "name": "oldCount",
            "type": "number",
            "description": "The old ammo count."
          },
          {
            "name": "newCount",
            "type": "number",
            "description": "The new ammo count."
          }
        ]
      },
      {
        "name": "PlayerAuthed",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called after the player is authenticated by Steam. This hook will also be called in singleplayer. See also <page>GM:NetworkIDValidated</page>\n\n<bug issue=\"3026\"><page>Global.CurTime</page> returns 0 in this hook.</bug>\n<bug issue=\"5988\">Calling <page>Player:UniqueID</page> before <page>GM:PlayerAuthed</page> causes <page>GM:PlayerAuthed</page> to be triggered prematurely. As a result, <page>Player:IsFullyAuthenticated</page> returns false when checked within this hook.</bug>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player"
          },
          {
            "name": "steamid",
            "type": "string",
            "description": "The player's SteamID"
          },
          {
            "name": "uniqueid",
            "type": "string",
            "description": "The player's UniqueID"
          }
        ]
      },
      {
        "name": "PlayerBindPress",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Runs when a bind has been pressed. Allows to block commands.\n\n<note>By using the \"alias\" console command, this hook can be effectively circumvented. To prevent this use <page>input.TranslateAlias</page>.\n\nTo stop the user from using `+attack`, `+left` and any other movement commands of the sort, please look into using <page>GM:StartCommand</page> instead.</note>\n\n<bug issue=\"1176\">The third argument will always be true.</bug>\n\n<bug issue=\"2888\">This does not run for function keys binds (F1-F12).</bug>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player who used the command; this will always be equal to <page>Global.LocalPlayer</page>."
          },
          {
            "name": "bind",
            "type": "string",
            "description": "The bind command."
          },
          {
            "name": "pressed",
            "type": "boolean",
            "description": "If the bind was activated or deactivated."
          },
          {
            "name": "code",
            "type": "number",
            "description": "The button code. See <page text=\"BUTTON_CODE\">Enums/BUTTON_CODE</page> Enums."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return `true` to prevent the bind."
          }
        ]
      },
      {
        "name": "PlayerButtonDown",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when a player presses a button.\n\nThis will not be called if player has a panel opened with keyboard input enabled, use <page>PANEL:OnKeyCodePressed</page> instead.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player who pressed the button"
          },
          {
            "name": "button",
            "type": "number",
            "description": "The button, see <page>Enums/BUTTON_CODE</page>"
          }
        ]
      },
      {
        "name": "PlayerButtonUp",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when a player releases a button.\n\nThis will not be called if player has a panel opened with keyboard input enabled, use <page>PANEL:OnKeyCodeReleased</page> instead.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player who released the button"
          },
          {
            "name": "button",
            "type": "number",
            "description": "The button, see <page>Enums/BUTTON_CODE</page>"
          }
        ]
      },
      {
        "name": "PlayerCanHearPlayersVoice",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Decides whether a player can hear another player using voice chat.\n\n<warning>This hook is called **several** times a tick, so ensure your code is efficient.</warning>",
        "arguments": [
          {
            "name": "listener",
            "type": "Player",
            "description": "The listening player."
          },
          {
            "name": "talker",
            "type": "Player",
            "description": "The talking player."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return `true` if the listener should hear the talker, `false` if they shouldn't."
          },
          {
            "type": "boolean",
            "description": "3D sound. If set to `true`, will fade out the sound the further away listener is from the  talker, the voice will also be in stereo, and not mono."
          }
        ]
      },
      {
        "name": "PlayerCanJoinTeam",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Returns whether or not a player is allowed to join a team",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player attempting to switch teams"
          },
          {
            "name": "team",
            "type": "number",
            "description": "Index of the team"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Allowed to switch"
          }
        ]
      },
      {
        "name": "PlayerCanPickupItem",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Returns whether or not a player is allowed to pick an item up. (ammo, health, armor)",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player attempting to pick up"
          },
          {
            "name": "item",
            "type": "Entity",
            "description": "The item the player is attempting to pick up"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Allow pick up"
          }
        ]
      },
      {
        "name": "PlayerCanPickupWeapon",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Returns whether or not a player is allowed to pick up a weapon.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player attempting to pick up the weapon."
          },
          {
            "name": "weapon",
            "type": "Weapon",
            "description": "The weapon entity in question."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Allowed pick up or not."
          }
        ]
      },
      {
        "name": "PlayerCanSeePlayersChat",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Returns whether or not the player can see the other player's chat.\n<note>The **speaker** parameter does not have to be a valid <page>Player</page> object which happens when console messages are displayed for example.</note>",
        "arguments": [
          {
            "name": "text",
            "type": "string",
            "description": "The chat text"
          },
          {
            "name": "teamOnly",
            "type": "boolean",
            "description": "If the message is team-only"
          },
          {
            "name": "listener",
            "type": "Player",
            "description": "The player receiving the message"
          },
          {
            "name": "speaker",
            "type": "Player",
            "description": "The player sending the message."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Can see other player's chat"
          }
        ]
      },
      {
        "name": "PlayerChangedTeam",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when a player has changed team using <page>Player:SetTeam</page>.\n<warning>Avoid calling <page>Player:SetTeam</page> in this hook as it may cause an infinite loop!</warning>\n<warning><page>Player:Team</page> inside this hook will return `oldTeam`.</warning>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player whose team has changed."
          },
          {
            "name": "oldTeam",
            "type": "number",
            "description": "Index of the team the player was originally in. See <page>team.GetName</page> and the <page>team</page> library."
          },
          {
            "name": "newTeam",
            "type": "number",
            "description": "Index of the team the player has changed to."
          }
        ]
      },
      {
        "name": "PlayerCheckLimit",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called whenever a player is about to spawn something to see if they hit a limit for whatever they are spawning.\n<note>This hook will not be called in singleplayer, as singleplayer does not have limits.</note>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player who is trying to spawn something."
          },
          {
            "name": "limitName",
            "type": "string",
            "description": "The limit's name."
          },
          {
            "name": "current",
            "type": "number",
            "description": "The amount of whatever player is trying to spawn that the player already has spawned."
          },
          {
            "name": "defaultMax",
            "type": "number",
            "description": "The default maximum count, as dictated by the `sbox_max<limitname>` convar on the server. This is the amount that will be used if nothing is returned from this hook.</limitname>"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return `false` to indicate the limit was hit, or nothing otherwise"
          }
        ]
      },
      {
        "name": "PlayerClassChanged",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "<internal></internal>\n\nCalled whenever a player's class is changed on the server-side with <page>player_manager.SetPlayerClass</page>.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player whose class has been changed."
          },
          {
            "name": "newID",
            "type": "number",
            "description": "The network ID of the player class's name string, or `0` if we are clearing a player class from the player.\n\nPass this into <page>util.NetworkIDToString</page> to retrieve the proper name of the player class."
          }
        ]
      },
      {
        "name": "PlayerConnect",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Executes when a player connects to the server. Called before the player has been assigned a <page text=\"UserID\">Player:UserID</page> and entity. See the <page text=\"player_connect\">gameevent/player_connect</page> gameevent for a version of this hook called after the player entity has been created.\n\n<note>This is only called clientside for listen server hosts.</note>\n<note>This is not called clientside for the local player.</note>",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "The player's name."
          },
          {
            "name": "ip",
            "type": "string",
            "description": "The player's IP address. Will be \"none\" for bots.\n\n<note>This argument will only be passed serverside.</note>"
          }
        ]
      },
      {
        "name": "PlayerDeath",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when a player is killed by <page>Player:Kill</page> or any other normal means.\n\nThis hook is **not** called if the player is killed by <page>Player:KillSilent</page>. See <page>GM:PlayerSilentDeath</page> for that.\n\n* <page>GM:DoPlayerDeath</page> is called **before** this hook.\n* <page>GM:PostPlayerDeath</page> is called **after** this hook.\n\nSee <page>Player:LastHitGroup</page> if you need to get the last hit hitgroup of the player.\n\n<note><page>Player:Alive</page> will return false in this hook.</note>",
        "arguments": [
          {
            "name": "victim",
            "type": "Player",
            "description": "The player who died"
          },
          {
            "name": "inflictor",
            "type": "Entity",
            "description": "Item used to kill the victim"
          },
          {
            "name": "attacker",
            "type": "Entity",
            "description": "Player or entity that killed the victim"
          }
        ]
      },
      {
        "name": "PlayerDeathSound",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Returns whether or not the default death sound should be muted.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Mute death sound"
          }
        ]
      },
      {
        "name": "PlayerDeathThink",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called every think while the player is dead. The return value will determine if the player respawns.\n\nOverwriting this function will prevent players from respawning by pressing space or clicking.\n\n<bug issue=\"1577\">This hook is not called for players with the <page text=\"FL_FROZEN\">Enums/FL</page> flag applied.</bug>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player affected in the hook."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "<note>This hook does not define a return value. The description below just describes how the hook library works in general.</note>\n\nReturn a non-nil value to prevent the current gamemode from handling this event. In the `base` gamemode, the gamemode handles player respawning in this hook. So blocking the gamemode hook will prevent player from respawning, in this specific case."
          }
        ]
      },
      {
        "name": "PlayerDisconnected",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when a player leaves the server. See the <page text=\"player_disconnect gameevent\">gameevent/player_disconnect</page> for a shared version of this hook.\n<note> <page>gameevent/player_disconnect</page> is more reliable. </note>\n\n<bug issue=\"3523\">This is not called in single-player or listen servers for the host.</bug>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "the player"
          }
        ]
      },
      {
        "name": "PlayerDriveAnimate",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called to update the player's animation during a drive.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The driving player"
          }
        ]
      },
      {
        "name": "PlayerDroppedWeapon",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when a weapon is dropped by a player via <page>Player:DropWeapon</page>.\n\nAlso called when a weapon is removed from a player via <page>Player:StripWeapon</page>.\n\nSee also <page>GM:WeaponEquip</page> for a hook when a player picks up a weapon.\n\nThe weapon's <page>Entity:GetOwner</page> will be NULL at the time this hook is called.\n\n\n<page>WEAPON:OnDrop</page> will be called before this hook is.",
        "arguments": [
          {
            "name": "owner",
            "type": "Player",
            "description": "The player who owned this weapon before it was dropped"
          },
          {
            "name": "wep",
            "type": "Weapon",
            "description": "The weapon that was dropped"
          }
        ]
      },
      {
        "name": "PlayerEndVoice",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when player stops using voice chat.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player who stopped talking"
          }
        ]
      },
      {
        "name": "PlayerEnteredVehicle",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when a player enters a vehicle.\n\nCalled just after <page>GM:CanPlayerEnterVehicle</page>.\n\nSee also <page>GM:PlayerLeaveVehicle</page>.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player who entered vehicle."
          },
          {
            "name": "veh",
            "type": "Vehicle",
            "description": "Vehicle the player entered."
          },
          {
            "name": "role",
            "type": "number",
            "description": "The seat number."
          }
        ]
      },
      {
        "name": "PlayerFireAnimationEvent",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called before firing clientside animation events on a player model.\n\nSee <page>GM:PlayerHandleAnimEvent</page> for the serverside version.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player who has triggered the event."
          },
          {
            "name": "pos",
            "type": "Vector",
            "description": "Position of the effect"
          },
          {
            "name": "ang",
            "type": "Angle",
            "description": "Angle of the effect"
          },
          {
            "name": "event",
            "type": "number",
            "description": "The event ID of happened even. See [this page](http://developer.valvesoftware.com/wiki/Animation_Events)."
          },
          {
            "name": "name",
            "type": "string",
            "description": "Name of the event"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to disable the effect"
          }
        ]
      },
      {
        "name": "PlayerFootstep",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called whenever a player steps. Return true to mute the normal sound.\n<note>This hook is called on all clients.</note>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The stepping player"
          },
          {
            "name": "pos",
            "type": "Vector",
            "description": "The position of the step"
          },
          {
            "name": "foot",
            "type": "number",
            "description": "Foot that is stepped. 0 for left, 1 for right"
          },
          {
            "name": "sound",
            "type": "string",
            "description": "Sound that is going to play"
          },
          {
            "name": "volume",
            "type": "number",
            "description": "Volume of the footstep"
          },
          {
            "name": "filter",
            "type": "CRecipientFilter",
            "description": "The Recipient filter of players who can hear the footstep"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Prevent default step sound"
          }
        ]
      },
      {
        "name": "PlayerFrozeObject",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when a player freezes an object.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player who has frozen an object"
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "The frozen object"
          },
          {
            "name": "physobj",
            "type": "PhysObj",
            "description": "The frozen physics object of the frozen entity ( For ragdolls )"
          }
        ]
      },
      {
        "name": "PlayerHandleAnimEvent",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called before firing serverside animation events on the player models.\n\nSee <page>GM:PlayerFireAnimationEvent</page> for the clientside version.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player who has triggered the event."
          },
          {
            "name": "event",
            "type": "number",
            "description": "The event ID of happened even. See [this page](http://developer.valvesoftware.com/wiki/Animation_Events)."
          },
          {
            "name": "eventTime",
            "type": "number",
            "description": "The absolute time this event occurred using <page>Global.CurTime</page>."
          },
          {
            "name": "cycle",
            "type": "number",
            "description": "The frame this event occurred as a number between 0 and 1."
          },
          {
            "name": "type",
            "type": "number",
            "description": "Event type. See [the Source SDK](https://github.com/ValveSoftware/source-sdk-2013/blob/master/mp/src/game/shared/eventlist.h#L14-L23)."
          },
          {
            "name": "options",
            "type": "string",
            "description": "Name or options of this event."
          }
        ]
      },
      {
        "name": "PlayerHurt",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when a player gets hurt.",
        "arguments": [
          {
            "name": "victim",
            "type": "Player",
            "description": "Victim"
          },
          {
            "name": "attacker",
            "type": "Entity",
            "description": "Attacker Entity"
          },
          {
            "name": "healthRemaining",
            "type": "number",
            "description": "Remaining Health"
          },
          {
            "name": "damageTaken",
            "type": "number",
            "description": "Damage Taken"
          }
        ]
      },
      {
        "name": "PlayerInitialSpawn",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when the player spawns for the first time.\n\nSee <page>GM:PlayerSpawn</page> for a hook called every player spawn.\n\n<note>This hook is called before the player has fully loaded, when the player is still in seeing the `Starting Lua` screen. For example, trying to use the <page>Entity:GetModel</page> function will return the default model (`models/player.mdl`).</note>\n\n<note>You can send <page>net</page> messages starting from the [player_activate](gameevent/player_activate) game event.</note>\n\n<warning>Due to the above note, sending <page>net</page> messages to the spawned player in this hook are highly unreliable, and they most likely won't be received (more information here: https://github.com/Facepunch/garrysmod-requests/issues/718).\n\nWorkaround without networking:\n```\nlocal load_queue = {}\n\nhook.Add( \"PlayerInitialSpawn\", \"myAddonName/Load\", function( ply )\nload_queue[ ply ] = true\nend )\n\nhook.Add( \"StartCommand\", \"myAddonName/Load\", function( ply, cmd )\nif load_queue[ ply ] and not cmd:IsForced() then\nload_queue[ ply ] = nil\n\n-- Send what you need here!\nend\nend )\n```\n\n\nWith networking:\n```\n-- CLIENT\nhook.Add( \"InitPostEntity\", \"Ready\", function()\nnet.Start( \"cool_addon_client_ready\" )\nnet.SendToServer()\nend )\n```\n```\n-- SERVER\nutil.AddNetworkString( \"cool_addon_client_ready\" )\n\nnet.Receive( \"cool_addon_client_ready\", function( len, ply )\n-- Send what you need here!\nend )\n```\n</warning>",
        "arguments": [
          {
            "name": "player",
            "type": "Player",
            "description": "The player who spawned."
          },
          {
            "name": "transition",
            "type": "boolean",
            "description": "If `true`, the player just spawned from a map transition."
          }
        ]
      },
      {
        "name": "PlayerJoinTeam",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Makes the player join a specified team. This is a convenience function that calls <page>Player:SetTeam</page> and runs the <page>GM:OnPlayerChangedTeam</page> hook.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player to force"
          },
          {
            "name": "team",
            "type": "number",
            "description": "The team to put player into"
          }
        ]
      },
      {
        "name": "PlayerLeaveVehicle",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when a player leaves a vehicle for any reason, including <page>Player:ExitVehicle</page>.\n\nSee <page>GM:PlayerEnteredVehicle</page> for the opposite hook.\n\n<note>For vehicles with exit animations, this will be called **at the end** of the animation, **not at the start**!</note>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player who left a vehicle."
          },
          {
            "name": "veh",
            "type": "Vehicle",
            "description": "Vehicle the player left."
          }
        ]
      },
      {
        "name": "PlayerLoadout",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called to give players the default set of weapons.\n\n\n<note>This function may not work in your custom gamemode if you have overridden your <page>GM:PlayerSpawn</page> and you do not use self.BaseClass.PlayerSpawn or <page>hook.Call</page>.</note>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player to give weapons to."
          }
        ]
      },
      {
        "name": "PlayerNoClip",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when a player tries to switch noclip mode.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The person who entered/exited noclip"
          },
          {
            "name": "desiredState",
            "type": "boolean",
            "description": "Represents the noclip state (on/off) the user will enter if this hook allows them to."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return false to disallow the switch."
          }
        ]
      },
      {
        "name": "PlayerPostThink",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called after the player's think, just after <page>GM:FinishMove</page>.\n\n\n<note>On the client side, it is only called for the local player.</note>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player"
          }
        ]
      },
      {
        "name": "PlayerRequestTeam",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Request a player to join the team. This function will check if the team is available to join or not.\n\nThis hook is called when the player runs \"changeteam\" in the console.\n\nTo prevent the player from changing teams, see <page>GM:PlayerCanJoinTeam</page>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player to try to put into a team"
          },
          {
            "name": "team",
            "type": "number",
            "description": "Team to put the player into if the checks succeeded"
          }
        ]
      },
      {
        "name": "PlayerSay",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when a player dispatched a chat message. For the clientside equivalent, see <page>GM:OnPlayerChat</page>.\n\n<note>\nIt may be more reliable to use <page>gameevent/player_say</page> to read messages serverside because addons commonly return values in this hook to change chat messages.\n</note>",
        "arguments": [
          {
            "name": "sender",
            "type": "Player",
            "description": "The player which sent the message."
          },
          {
            "name": "text",
            "type": "string",
            "description": "The message's content."
          },
          {
            "name": "teamChat",
            "type": "boolean",
            "description": "Return false when the message is for everyone, true when the message is for the sender's team."
          }
        ],
        "returnValues": [
          {
            "type": "string",
            "description": "What to show instead of original text. Set to `\"\"` to stop the message from displaying."
          }
        ]
      },
      {
        "name": "PlayerSelectSpawn",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called to determine a spawn point for a player to spawn at.\n<note>The spawn point entity will also impact the player's eye angle. For example, if the entity is upside down, the player's view will be as well.</note>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player who needs a spawn point"
          },
          {
            "name": "transition",
            "type": "boolean",
            "description": "If true, the player just spawned from a map transition (`trigger_changelevel`). You probably want to not return an entity for that case to not override player's position."
          }
        ],
        "returnValues": [
          {
            "type": "Entity",
            "description": "The spawn point entity to spawn the player at"
          }
        ]
      },
      {
        "name": "PlayerSelectTeamSpawn",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Find a team spawn point entity for this player.",
        "arguments": [
          {
            "name": "team",
            "type": "number",
            "description": "Players team"
          },
          {
            "name": "ply",
            "type": "Player",
            "description": "The player"
          }
        ],
        "returnValues": [
          {
            "type": "Entity",
            "description": "The entity to use as a spawn point."
          }
        ]
      },
      {
        "name": "PlayerSetHandsModel",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called whenever view model hands needs setting a model. By default this calls <page>PLAYER:GetHandsModel</page> and if that fails, sets the hands model according to his player model.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player whose hands needs a model set"
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "The hands to set model of"
          }
        ]
      },
      {
        "name": "PlayerSetModel",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called whenever a player spawns and must choose a model. A good place to assign a model to a player.\n<note>This function may not work in your custom gamemode if you have overridden your <page>GM:PlayerSpawn</page> and you do not use self.BaseClass.PlayerSpawn or <page>hook.Call</page>.</note>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player being chosen"
          }
        ]
      },
      {
        "name": "PlayerShouldTakeDamage",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Returns true if the player should take damage from the given attacker.\n\n<warning>Applying damage from this hook to the player taking damage will lead to infinite loop/crash.</warning>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player"
          },
          {
            "name": "attacker",
            "type": "Entity",
            "description": "The attacker"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Allow damage"
          }
        ]
      },
      {
        "name": "PlayerShouldTaunt",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Allows to suppress player taunts.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player who tried to taunt"
          },
          {
            "name": "act",
            "type": "number",
            "description": "Act ID of the taunt player tries to do, see <page>Enums/ACT</page>"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return false to disallow player taunting"
          }
        ]
      },
      {
        "name": "PlayerSilentDeath",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when the player is killed by <page>Player:KillSilent</page>.\n\nThe player is already considered dead when this hook is called.\n\n* See <page>GM:PlayerDeath</page> for a hook which handles all other death causes.\n* <page>GM:PostPlayerDeath</page> is called **after** this hook.\n\n<note><page>Player:Alive</page> will return true in this hook.</note>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player who was killed"
          }
        ]
      },
      {
        "name": "PlayerSpawn",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called whenever a player spawns, including respawns.\n\nSee <page>GM:PlayerInitialSpawn</page> for a hook called only the first time a player spawns.\n\nSee the <page text=\"player_spawn gameevent\">gameevent/player_spawn</page> for a shared version of this hook.\n\n<warning>By default, in \"base\" derived gamemodes, this hook will also call <page>GM:PlayerLoadout</page> and <page>GM:PlayerSetModel</page>, which may override your <page>Entity:SetModel</page> and <page>Player:Give</page> calls. Consider using the other hooks or a 0-second timer.</warning>",
        "arguments": [
          {
            "name": "player",
            "type": "Player",
            "description": "The player who spawned."
          },
          {
            "name": "transition",
            "type": "boolean",
            "description": "If true, the player just spawned from a map transition. You probably want to not touch player's weapons or position if this is set to `true`."
          }
        ]
      },
      {
        "name": "PlayerSpawnAsSpectator",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called to spawn the player as a spectator.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player to spawn as a spectator"
          }
        ]
      },
      {
        "name": "PlayerSpray",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Determines if the player can spray using the `impulse 201` console command.",
        "arguments": [
          {
            "name": "sprayer",
            "type": "Player",
            "description": "The player."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return `false` to allow spraying, return `true` to prevent spraying."
          }
        ]
      },
      {
        "name": "PlayerStartTaunt",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when player starts taunting.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player who is taunting"
          },
          {
            "name": "act",
            "type": "number",
            "description": "The sequence ID of the taunt"
          },
          {
            "name": "length",
            "type": "number",
            "description": "Length of the taunt"
          }
        ]
      },
      {
        "name": "PlayerStartVoice",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when a player starts using voice chat.\n<note>Set mp_show_voice_icons to 0, if you want disable icons above player.</note>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player who started using voice chat."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Set true to hide player's `CHudVoiceStatus`."
          }
        ]
      },
      {
        "name": "PlayerStepSoundTime",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Allows you to override the time between footsteps.\n<note>This hook is called on all clients.</note>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player who is walking"
          },
          {
            "name": "type",
            "type": "number",
            "description": "The type of footsteps, see <page>Enums/STEPSOUNDTIME</page>"
          },
          {
            "name": "walking",
            "type": "boolean",
            "description": "Is the player walking or not ( +walk? )"
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "Time between footsteps, in ms"
          }
        ]
      },
      {
        "name": "PlayerSwitchFlashlight",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called whenever a player attempts to either turn on or off their flashlight, returning false will deny the change.\n<note>Also gets called when using <page>Player:Flashlight</page>.</note>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player who attempts to change their flashlight state."
          },
          {
            "name": "enabled",
            "type": "boolean",
            "description": "The new state the player requested, true for on, false for off."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Can toggle the flashlight or not"
          }
        ]
      },
      {
        "name": "PlayerSwitchWeapon",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when a player attempts to switch their weapon.\n\nPrimary usage of this hook is to prevent/allow weapon switching, **not** to detect weapon switching. It will not be called for <page>Player:SetActiveWeapon</page>.",
        "arguments": [
          {
            "name": "player",
            "type": "Player",
            "description": "The player switching weapons."
          },
          {
            "name": "oldWeapon",
            "type": "Weapon",
            "description": "The previous weapon. Will be `NULL` if the previous weapon was removed or the player is switching from nothing."
          },
          {
            "name": "newWeapon",
            "type": "Weapon",
            "description": "The weapon the player switched to. Will be `NULL` if the player is switching to nothing.\n\n<bug issue=\"2922\">This can be `NULL` on the client if the weapon hasn't been created over the network yet.</bug>"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return `true` to prevent weapon switch."
          }
        ]
      },
      {
        "name": "PlayerTick",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "The Move hook is called for you to manipulate the player's <page>CMoveData</page>. This hook is called moments before <page>GM:Move</page> and <page>GM:PlayerNoClip</page>.\n\n<warning>This hook will not run when inside a vehicle. <page>GM:VehicleMove</page> will be called instead.</warning>",
        "arguments": [
          {
            "name": "player",
            "type": "Player",
            "description": "The player"
          },
          {
            "name": "mv",
            "type": "CMoveData",
            "description": "The current movedata for the player."
          }
        ]
      },
      {
        "name": "PlayerTraceAttack",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when a player has been hit by a trace and damaged (such as from a bullet). Returning true overrides the damage handling and prevents <page>GM:ScalePlayerDamage</page> from being called.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player that has been hit"
          },
          {
            "name": "dmginfo",
            "type": "CTakeDamageInfo",
            "description": "The damage info of the bullet"
          },
          {
            "name": "dir",
            "type": "Vector",
            "description": "Normalized vector direction of the bullet's path"
          },
          {
            "name": "trace",
            "type": "table",
            "description": "The trace of the bullet's path, see <page>Structures/TraceResult</page>"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Override engine handling"
          }
        ]
      },
      {
        "name": "PlayerUnfrozeObject",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when a player unfreezes an object.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player who has unfrozen an object"
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "The unfrozen object"
          },
          {
            "name": "physobj",
            "type": "PhysObj",
            "description": "The frozen physics object of the unfrozen entity ( For ragdolls )"
          }
        ]
      },
      {
        "name": "PlayerUse",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Triggered when the player presses use on an object. Continuously runs until USE is released but will not activate other Entities until the USE key is released; dependent on activation type of the Entity.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player pressing the \"use\" key."
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity which the player is looking at / activating USE on."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return `false` if the player is not allowed to USE the entity.\n\nDo not return `true` if using a hook, otherwise other mods may not get a chance to block a player's use."
          }
        ]
      },
      {
        "name": "PopulateMenuBar",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when it's time to populate the context menu menu bar at the top.",
        "arguments": [
          {
            "name": "menubar",
            "type": "Panel",
            "description": "The <page>DMenuBar</page> itself."
          }
        ]
      },
      {
        "name": "PostCleanupMap",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called right after the map has cleaned up (usually because <page>game.CleanUpMap</page> was called)\n\nSee also <page>GM:PreCleanupMap</page>."
      },
      {
        "name": "PostDraw2DSkyBox",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called right after the 2D skybox has been drawn - allowing you to draw over it.\n\n<rendercontext hook=\"true\" type=\"3D\"></rendercontext>"
      },
      {
        "name": "PostDrawEffects",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called after rendering effects. This is where halos are drawn. Called just before <page>GM:PreDrawHUD</page>.\n\n<rendercontext hook=\"true\" type=\"2D\"></rendercontext>"
      },
      {
        "name": "PostDrawHUD",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called after <page>GM:PreDrawHUD</page>,  <page>GM:HUDPaintBackground</page> and <page>GM:HUDPaint</page> but before  <page>GM:DrawOverlay</page>.\n\nUnlike <page>GM:HUDPaint</page>(<page text=\"Background\">GM:HUDPaintBackground</page>) hooks, this will still be called when the main menu is visible. And so will be <page>GM:PreDrawHUD</page>\n\n<rendercontext hook=\"true\" type=\"2D\"></rendercontext>"
      },
      {
        "name": "PostDrawOpaqueRenderables",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called after drawing opaque entities.\n\nSee also <page>GM:PostDrawTranslucentRenderables</page> and <page>GM:PreDrawOpaqueRenderables</page>.\n\n<rendercontext hook=\"true\" type=\"3D\"></rendercontext>",
        "arguments": [
          {
            "name": "bDrawingDepth",
            "type": "boolean",
            "description": "Whether the current draw is writing depth."
          },
          {
            "name": "bDrawingSkybox",
            "type": "boolean",
            "description": "Whether the current draw is drawing the 3D or 2D skybox.\n\nIn case of 2D skyboxes it is possible for this hook to always be called with this parameter set to `true`."
          },
          {
            "name": "isDraw3DSkybox",
            "type": "boolean",
            "description": "Whether the current draw is drawing the 3D."
          }
        ]
      },
      {
        "name": "PostDrawPlayerHands",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called after the player hands are drawn.",
        "arguments": [
          {
            "name": "hands",
            "type": "Entity",
            "description": "This is the gmod_hands entity."
          },
          {
            "name": "vm",
            "type": "Entity",
            "description": "This is the view model entity."
          },
          {
            "name": "ply",
            "type": "Player",
            "description": "The the owner of the view model."
          },
          {
            "name": "weapon",
            "type": "Weapon",
            "description": "This is the weapon that is from the view model."
          }
        ]
      },
      {
        "name": "PostDrawSkyBox",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called after drawing the 3D skybox. This will not be called if skybox rendering was prevented via the <page>GM:PreDrawSkyBox</page> hook.\n\nSee also <page>GM:PostDraw2DSkyBox</page>.\n\n<rendercontext hook=\"true\" type=\"3D\"></rendercontext>"
      },
      {
        "name": "PostDrawTranslucentRenderables",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called after all translucent entities are drawn.\n\nSee also <page>GM:PostDrawOpaqueRenderables</page> and  <page>GM:PreDrawTranslucentRenderables</page>.\n\n<rendercontext hook=\"true\" type=\"3D\"></rendercontext>\n\n<bug issue=\"3295\">This is still called when r_drawentities or r_drawopaquerenderables is disabled.</bug>\n<bug issue=\"3296\">This is not called when r_drawtranslucentworld is disabled.</bug>",
        "arguments": [
          {
            "name": "bDrawingDepth",
            "type": "boolean",
            "description": "Whether the current call is writing depth."
          },
          {
            "name": "bDrawingSkybox",
            "type": "boolean",
            "description": "Whether the current draw is drawing the 3D or 2D skybox.\n\nIn case of 2D skyboxes it is possible for this hook to always be called with this parameter set to `true`."
          },
          {
            "name": "isDraw3DSkybox",
            "type": "boolean",
            "description": "Whether the current draw is drawing the 3D."
          }
        ]
      },
      {
        "name": "PostDrawViewModel",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called after view model is drawn.\n\n<rendercontext hook=\"true\" type=\"3D\"></rendercontext>\n\n<note>The 3D rendering context in this event is different from the main view. Every render operation will only be accurate with the view model entity.</note>",
        "arguments": [
          {
            "name": "viewmodel",
            "type": "Entity",
            "description": "Players view model"
          },
          {
            "name": "player",
            "type": "Player",
            "description": "The owner of the weapon/view model"
          },
          {
            "name": "weapon",
            "type": "Weapon",
            "description": "The weapon the player is currently holding"
          }
        ]
      },
      {
        "name": "PostEntityFireBullets",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called every time a bullet pellet is fired from an entity.\n\n<warning>This hook is called directly from <page>Entity:FireBullets</page>. Due to this, you cannot call <page>Entity:FireBullets</page> inside this hook or an infinite loop will occur crashing the game.</warning>",
        "arguments": [
          {
            "name": "entity",
            "type": "Entity",
            "description": "The entity that fired the bullet"
          },
          {
            "name": "data",
            "type": "table",
            "description": "The bullet data. Contains the following keys:\n* <page>table</page> **Trace** - The bullet pellet trace result. See <page>Structures/TraceResult</page>\n\nFrom <page>Structures/Bullet</page>:\n* `AmmoType`, `Tracer`, `Damage`, `Force`, `Attacker`, `TracerName`."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return `false` to suppress the bullet."
          }
        ]
      },
      {
        "name": "PostEntityTakeDamage",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when an entity receives a damage event, after passing damage filters, etc.\n\n<warning>Applying damage from this hook to the entity taking damage will lead to infinite loop/crash.</warning>",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity that took the damage."
          },
          {
            "name": "dmg",
            "type": "CTakeDamageInfo"
          },
          {
            "name": "took",
            "type": "boolean",
            "description": "Whether the entity actually took the damage. (For example, shooting a Strider will generate this event, but it won't take bullet damage)."
          }
        ]
      },
      {
        "name": "PostGamemodeLoaded",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called after the gamemode has loaded."
      },
      {
        "name": "PostPlayerDeath",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called right after <page>GM:DoPlayerDeath</page>, <page>GM:PlayerDeath</page> and <page>GM:PlayerSilentDeath</page>.\n\nThis hook will be called for all deaths, including <page>Player:KillSilent</page>\n\n<note><page>Player:Alive</page> will return false in this hook.</note>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player"
          }
        ]
      },
      {
        "name": "PostPlayerDraw",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called after a player in your [PVS (Potential Visibility Set)](https://developer.valvesoftware.com/wiki/PVS \"PVS - Valve Developer Community\") was drawn.\n<rendercontext hook=\"true\" type=\"3D\"></rendercontext>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player that was drawn."
          },
          {
            "name": "flags",
            "type": "number",
            "description": "The <page text=\"STUDIO_\">Enums/STUDIO</page> flags for this render operation."
          }
        ]
      },
      {
        "name": "PostProcessPermitted",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Allows you to suppress post processing effect drawing.",
        "arguments": [
          {
            "name": "ppeffect",
            "type": "string",
            "description": "The classname of Post Processing effect"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true/false depending on whether this post process should be allowed"
          }
        ]
      },
      {
        "name": "PostRender",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called after the frame has been rendered."
      },
      {
        "name": "PostRenderVGUI",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called after the VGUI has been drawn.\n\n<rendercontext hook=\"true\" type=\"2D\"></rendercontext>"
      },
      {
        "name": "PostUndo",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called just after performing an undo.",
        "arguments": [
          {
            "name": "undo",
            "type": "table",
            "description": "The undo table. See <page text=\"Undo\">Structures/Undo</page> struct."
          },
          {
            "name": "count",
            "type": "number",
            "description": "The amount of props/actions undone. This will be `0` for undos that are skipped in cases where for example the entity that is meant to be undone is already deleted."
          }
        ]
      },
      {
        "name": "PreCleanupMap",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called right before the map cleans up (usually because <page>game.CleanUpMap</page> was called)\n\nSee also <page>GM:PostCleanupMap</page>."
      },
      {
        "name": "PreDrawEffects",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called just after <page>GM:PreDrawViewModel</page> and can technically be considered \"PostDrawAllViewModels\".\n\n<rendercontext hook=\"true\" type=\"3D\"></rendercontext>"
      },
      {
        "name": "PreDrawHalos",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called before rendering the halos. This is the place to call <page>halo.Add</page>. This hook is actually running inside of <page>GM:PostDrawEffects</page>.\n\n<rendercontext hook=\"true\" type=\"3D\"></rendercontext>"
      },
      {
        "name": "PreDrawHUD",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called just after <page>GM:PostDrawEffects</page>. Drawing anything in it seems to work incorrectly."
      },
      {
        "name": "PreDrawOpaqueRenderables",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called before all opaque entities are drawn.\n\nSee also <page>GM:PreDrawTranslucentRenderables</page> and  <page>GM:PostDrawOpaqueRenderables</page>.\n\n<rendercontext hook=\"true\" type=\"3D\"></rendercontext>",
        "arguments": [
          {
            "name": "isDrawingDepth",
            "type": "boolean",
            "description": "Whether the current draw is writing depth."
          },
          {
            "name": "isDrawSkybox",
            "type": "boolean",
            "description": "Whether the current draw is drawing the 3D or 2D skybox.\n\nIn case of 2D skyboxes it is possible for this hook to always be called with this parameter set to `true`."
          },
          {
            "name": "isDraw3DSkybox",
            "type": "boolean",
            "description": "Whether the current draw is drawing the 3D."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to prevent opaque renderables from drawing."
          }
        ]
      },
      {
        "name": "PreDrawPlayerHands",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called before the player hands are drawn.",
        "arguments": [
          {
            "name": "hands",
            "type": "Entity",
            "description": "This is the gmod_hands entity before it is drawn."
          },
          {
            "name": "vm",
            "type": "Entity",
            "description": "This is the view model entity before it is drawn."
          },
          {
            "name": "ply",
            "type": "Player",
            "description": "The the owner of the view model."
          },
          {
            "name": "weapon",
            "type": "Weapon",
            "description": "This is the weapon that is from the view model."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to prevent the viewmodel hands from rendering"
          }
        ]
      },
      {
        "name": "PreDrawSkyBox",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called before the 3D sky box is drawn. This will not be called for maps with no 3D skybox, or when the 3d skybox is disabled. (`r_3dsky 0`)\n\nSee also <page>GM:PostDrawSkyBox</page>\n\n<rendercontext hook=\"true\" type=\"3D\"></rendercontext>",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to disable skybox drawing (both 2D and 3D skybox)"
          }
        ]
      },
      {
        "name": "PreDrawTranslucentRenderables",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called before all the translucent entities are drawn.\n\nSee also <page>GM:PreDrawOpaqueRenderables</page> and  <page>GM:PostDrawTranslucentRenderables</page>.\n\n<rendercontext hook=\"true\" type=\"3D\"></rendercontext>\n\n<bug issue=\"3295\">This is still called when r_drawentities or r_drawopaquerenderables is disabled.</bug>\n<bug issue=\"3296\">This is not called when r_drawtranslucentworld is disabled.</bug>",
        "arguments": [
          {
            "name": "isDrawingDepth",
            "type": "boolean",
            "description": "Whether the current draw is writing depth."
          },
          {
            "name": "isDrawSkybox",
            "type": "boolean",
            "description": "Whether the current draw is drawing the 3D or 2D skybox.\n\nIn case of 2D skyboxes it is possible for this hook to always be called with this parameter set to `true`."
          },
          {
            "name": "isDraw3DSkybox",
            "type": "boolean",
            "description": "Whether the current draw is drawing the 3D."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to prevent translucent renderables from drawing."
          }
        ]
      },
      {
        "name": "PreDrawViewModel",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called before the view model has been drawn. This hook by default also calls this on weapons, so you can use <page>WEAPON:PreDrawViewModel</page>.\n\nYou can use <page>GM:PreDrawEffects</page> as a \"PostDrawViewModel\" hook as it is called just after the view model(s) are drawn.\n\n<rendercontext hook=\"true\" type=\"3D\"></rendercontext>",
        "arguments": [
          {
            "name": "vm",
            "type": "Entity",
            "description": "This is the view model entity before it is drawn. On server-side, this entity is the predicted view model."
          },
          {
            "name": "ply",
            "type": "Player",
            "description": "The owner of the view model."
          },
          {
            "name": "weapon",
            "type": "Weapon",
            "description": "This is the weapon that is from the view model."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to prevent the default view model rendering. This also affects <page>GM:PostDrawViewModel</page>."
          }
        ]
      },
      {
        "name": "PreDrawViewModels",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called before view models and entities with `RENDERGROUP_VIEWMODEL` are drawn.\n\nYou can use <page>GM:PreDrawEffects</page> as a `PostDrawViewModel` hook as it is called just after the view model(s) are drawn.\n<rendercontext hook=\"true\" type=\"3D\"></rendercontext>"
      },
      {
        "name": "PreGamemodeLoaded",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called before the gamemode is loaded."
      },
      {
        "name": "PrePlayerDraw",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called before the player is drawn.",
        "arguments": [
          {
            "name": "player",
            "type": "Player",
            "description": "The player that is about to be drawn."
          },
          {
            "name": "flags",
            "type": "number",
            "description": "The <page text=\"STUDIO_\">Enums/STUDIO</page> flags for this render operation."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Prevent default player rendering. Return `true` to hide the player."
          }
        ]
      },
      {
        "name": "PreRegisterSENT",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called by <page>scripted_ents.Register</page>.",
        "arguments": [
          {
            "name": "ent",
            "type": "table",
            "description": "The entity table to be registered."
          },
          {
            "name": "class",
            "type": "string",
            "description": "The class name to be assigned."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return `false` to prevent the entity from being registered. Returning any other value has no effect."
          }
        ]
      },
      {
        "name": "PreRegisterSWEP",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when a Scripted Weapon (SWEP) is about to be registered, allowing addons to alter the weapon's SWEP table with custom data for later usage. Called internally from <page>weapons.Register</page>.",
        "arguments": [
          {
            "name": "swep",
            "type": "table",
            "description": "The SWEP table to be registered."
          },
          {
            "name": "class",
            "type": "string",
            "description": "The class name to be assigned."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return `false` to prevent the weapon from being registered. Returning any other value has no effect."
          }
        ]
      },
      {
        "name": "PreRender",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called before the renderer is about to start rendering the next frame.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to prevent all rendering. This can make the whole game stop rendering anything."
          }
        ]
      },
      {
        "name": "PreUndo",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called just before performing an undo.",
        "arguments": [
          {
            "name": "undo",
            "type": "table",
            "description": "The undo table. See <page text=\"Undo\">Structures/Undo</page> struct."
          }
        ]
      },
      {
        "name": "PreventScreenClicks",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "This will prevent <key>IN_ATTACK</key> from sending to server when player tries to shoot from C menu.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to prevent screen clicks."
          }
        ]
      },
      {
        "name": "PropBreak",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when a prop has been destroyed.",
        "arguments": [
          {
            "name": "attacker",
            "type": "Player",
            "description": "The person who broke the prop. This can be a NULL entity for cases where the prop was not broken by a player."
          },
          {
            "name": "prop",
            "type": "Entity",
            "description": "The entity that has been broken by the attacker."
          }
        ]
      },
      {
        "name": "RenderScene",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Render the scene. Used by the `Stereoscopy` post-processing effect.\n\n<note>Materials rendered in this hook require `$ignorez` parameter to draw properly.</note>",
        "arguments": [
          {
            "name": "origin",
            "type": "Vector",
            "description": "View origin"
          },
          {
            "name": "angles",
            "type": "Angle",
            "description": "View angles"
          },
          {
            "name": "fov",
            "type": "number",
            "description": "View FOV"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return `true` to override drawing the scene."
          }
        ]
      },
      {
        "name": "RenderScreenspaceEffects",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Used to render post processing effects.\n\n<rendercontext hook=\"true\" type=\"2D\"></rendercontext>"
      },
      {
        "name": "Restored",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when the game is reloaded from a Source Engine save system ( not the Sandbox saves or dupes ).\n\nSee <page>GM:Saved</page> for a hook that is called when such a save file is created."
      },
      {
        "name": "Saved",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when the game is saved using the Source Engine save system (not the Sandbox saves or dupes).\n\nSee <page>GM:Restored</page> for a hook that is called when such a save file is loaded.\n\nSee also the <page>saverestore</page> for relevant functions."
      },
      {
        "name": "ScaleNPCDamage",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when an NPC takes damage.\n\n<note>This hook is called only when a specific hit group of the NPC is hit. In cases where the hitgroup doesn't matter, you should use <page>GM:EntityTakeDamage</page> instead!</note>",
        "arguments": [
          {
            "name": "npc",
            "type": "NPC",
            "description": "The NPC that takes damage"
          },
          {
            "name": "hitgroup",
            "type": "number",
            "description": "The hitgroup (hitbox) enum where the NPC took damage. See <page>Enums/HITGROUP</page>"
          },
          {
            "name": "dmginfo",
            "type": "CTakeDamageInfo",
            "description": "Damage info"
          }
        ]
      },
      {
        "name": "ScalePlayerDamage",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "This hook allows you to change how much damage a player receives when one takes damage to a specific body part.\n\n<note>This is called only for bullet damage a player receives, you should use <page>GM:EntityTakeDamage</page> instead if you need to detect **ALL** damage.</note>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player taking damage."
          },
          {
            "name": "hitgroup",
            "type": "number",
            "description": "The hitgroup where the player took damage. See <page>Enums/HITGROUP</page>"
          },
          {
            "name": "dmginfo",
            "type": "CTakeDamageInfo",
            "description": "The damage info."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to prevent damage that this hook is called for, stop blood particle effects and blood decals.\n\nIt is possible to return true only on client ( This will work **only in multiplayer** ) to stop the effects but still take damage."
          }
        ]
      },
      {
        "name": "ScoreboardHide",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when player released the scoreboard button (<key>TAB</key> by default)."
      },
      {
        "name": "ScoreboardShow",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when player presses the scoreboard button (<key>TAB</key> by default).",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to prevent default scoreboard from showing."
          }
        ]
      },
      {
        "name": "SendDeathNotice",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "An internal function used to send a death notice event to all clients.",
        "arguments": [
          {
            "name": "attacker",
            "type": "Entity",
            "description": "The entity that caused the death."
          },
          {
            "name": "inflictor",
            "type": "Entity",
            "description": "The attacker's weapon or the attacker itself if no weapon was equipped."
          },
          {
            "name": "victim",
            "type": "Entity",
            "description": "The entity that died."
          },
          {
            "name": "flags",
            "type": "number",
            "description": "Death notice flags. 1 = Friendly victim (to the player), 2 = friendly attacker (to the player)"
          }
        ]
      },
      {
        "name": "SetPlayerSpeed",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets player run and sprint speeds.\n\n<warning>This is not a hook. Treat this as a utility function to set the player's speed.</warning>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player to set the speed of."
          },
          {
            "name": "walkSpeed",
            "type": "number",
            "description": "The walk speed."
          },
          {
            "name": "runSpeed",
            "type": "number",
            "description": "The run speed."
          }
        ]
      },
      {
        "name": "SetupMove",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "SetupMove is called before the engine process movements. This allows us to override the players movement.\n\nSee <page>Game Movement</page> for an explanation on the move system.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player whose movement we are about to process"
          },
          {
            "name": "mv",
            "type": "CMoveData",
            "description": "The move data to override/use"
          },
          {
            "name": "cmd",
            "type": "CUserCmd",
            "description": "The command data"
          }
        ]
      },
      {
        "name": "SetupPlayerVisibility",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Allows you to add extra positions to the player's [PVS (Potential Visibility Set)](https://developer.valvesoftware.com/wiki/PVS \"PVS - Valve Developer Community\"). This is the place to call <page>Global.AddOriginToPVS</page>.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player"
          },
          {
            "name": "viewEntity",
            "type": "Entity",
            "description": "Players <page>Player:GetViewEntity</page>"
          }
        ]
      },
      {
        "name": "SetupSkyboxFog",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Allows you to use render.Fog* functions to manipulate skybox fog.\nThis will not be called for maps with no 3D skybox, or when the 3d skybox is disabled. (`r_3dsky 0`)",
        "arguments": [
          {
            "name": "scale",
            "type": "number",
            "description": "The scale of 3D skybox"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to tell the engine that fog is set up"
          }
        ]
      },
      {
        "name": "SetupWorldFog",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Allows you to use render.Fog* functions to manipulate world fog.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to tell the engine that fog is set up"
          }
        ]
      },
      {
        "name": "ShouldCollide",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called to decide whether a pair of entities should collide with each other. This is only called if <page>Entity:SetCustomCollisionCheck</page> was used on one or both entities.\n\nWhere applicable, consider using <page>constraint.NoCollide</page> or a [logic_collision_pair](https://developer.valvesoftware.com/wiki/Logic_collision_pair) entity instead - they are considerably easier to use and may be more appropriate in some situations.\n\n<warning>This hook **must** return the same value consistently for the same pair of entities. If an entity changed in such a way that its collision rules change, you **must** call <page>Entity:CollisionRulesChanged</page> on that entity immediately - **not in this hook and not in physics callbacks.**</warning>\n\n<warning>The default <page>Entity:CollisionRulesChanged</page> has been found to be ineffective in preventing issues in this hook, a more reliable alternative can be found in the examples below. As long as you religiously follow the rules set by the examples this hook will work reliably without breaking, even a small mistake will break physics.</warning>\n\n<bug issue=\"642\">This hook can cause all physics to break under certain conditions.</bug>",
        "arguments": [
          {
            "name": "ent1",
            "type": "Entity",
            "description": "The first entity in the collision poll."
          },
          {
            "name": "ent2",
            "type": "Entity",
            "description": "The second entity in the collision poll."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the entities should collide."
          }
        ]
      },
      {
        "name": "ShouldDrawLocalPlayer",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called to determine if the <page>Global.LocalPlayer</page> should be drawn.\n\nIf you're using this hook to draw a player for a <page>GM:CalcView</page> hook, then you may want to consider using the `drawviewer` variable you can use in your <page>Structures/CamData</page> table instead.\n\n<note>\nThis hook has an internal cache that is reset at the start of every frame. This will prevent this hook from running in certain cases. This cache is reset in <page>cam.Start</page> and in a future update in <page>render.RenderView</page> when rendering extra views.\n</note>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "`true` to draw the player, `false` to hide."
          }
        ]
      },
      {
        "name": "ShowHelp",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when a player executes `gm_showhelp` console command. (Default bind is <key>F1</key>)",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player who executed the command"
          }
        ]
      },
      {
        "name": "ShowSpare1",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when a player executes `gm_showspare1` console command ( Default bind is <key>F3</key> ).",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player who executed the command."
          }
        ]
      },
      {
        "name": "ShowSpare2",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when a player executes `gm_showspare2` console command ( Default bind is <key>F4</key> ).",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player who executed the command."
          }
        ]
      },
      {
        "name": "ShowTeam",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when a player executes `gm_showteam` console command. ( Default bind is <key>F2</key> )",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player who executed the command"
          }
        ]
      },
      {
        "name": "ShutDown",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called whenever the Lua environment is about to be shut down, for example on map change, or when the server is going to shut down.\n<warning><page>Player:SteamID</page>, <page>Player:SteamID64</page>, and the like will return nil for the listen host here but work fine for other players.</warning>"
      },
      {
        "name": "SpawniconGenerated",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when spawn icon is generated.",
        "arguments": [
          {
            "name": "lastmodel",
            "type": "string",
            "description": "File path of previously generated model."
          },
          {
            "name": "imagename",
            "type": "string",
            "description": "File path of the generated icon."
          },
          {
            "name": "modelsleft",
            "type": "number",
            "description": "Amount of models left to generate."
          }
        ]
      },
      {
        "name": "SpawnMenuCreated",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when the Spawnmenu is Created."
      },
      {
        "name": "StartChat",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Runs when the user tries to open the chat box.\n\n<bug issue=\"855\">Returning true won't stop the chatbox from taking VGUI focus.</bug>",
        "arguments": [
          {
            "name": "isTeamChat",
            "type": "boolean",
            "description": "Whether the message was sent through team chat."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to hide the default chat box."
          }
        ]
      },
      {
        "name": "StartCommand",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Allows you to change the players inputs before they are processed by the server. This function is also called for bots, making it the best solution to control them.\n\nThis is basically a shared version of <page>GM:CreateMove</page>.\n\n\n<note>This hook is predicted, but not by usual means, it is called when a <page>CUserCmd</page> is generated on the client, and on the server when it is received, so it is necessary for this hook to be called clientside even on singleplayer</note>",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player"
          },
          {
            "name": "ucmd",
            "type": "CUserCmd",
            "description": "The usercommand"
          }
        ]
      },
      {
        "name": "StartEntityDriving",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called right before an entity starts driving. Overriding this hook will cause it to not call <page>drive.Start</page> and the player will not begin driving the entity.",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity that is going to be driven"
          },
          {
            "name": "ply",
            "type": "Player",
            "description": "The player that is going to drive the entity"
          }
        ]
      },
      {
        "name": "StartGame",
        "parent": "GM",
        "realms": [
          "menu"
        ],
        "description": "Called when you start a new game via the menu."
      },
      {
        "name": "Think",
        "parent": "GM",
        "realms": [
          "menu",
          "client",
          "server"
        ],
        "description": "Called every frame. This will be the same as <page>GM:Tick</page> on the server when there is no lag, but will only be called once every processed server frame during lag.\n\nSee <page>GM:Tick</page> for a hook that runs every tick on both the client and server.\n\n<note>On server, this hook **WILL NOT** run if the server is empty, unless you set the <page>ConVar</page> `sv_hibernate_think` to `1`.</note>"
      },
      {
        "name": "Tick",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called every server tick. Serverside, this is similar to <page>GM:Think</page>.\n\n<note>This hook **WILL NOT** run if the server is empty, unless you set the <page>ConVar</page> `sv_hibernate_think` to 1</note>"
      },
      {
        "name": "TranslateActivity",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "<note>Isn't call when CalcMainActivity return a valid override sequence id</note>\nAllows you to translate player activities.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player"
          },
          {
            "name": "act",
            "type": "number",
            "description": "The activity. See <page>Enums/ACT</page>"
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The new, translated activity"
          }
        ]
      },
      {
        "name": "UpdateAnimation",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Animation updates (pose params etc) should be done here.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player to update the animation info for."
          },
          {
            "name": "velocity",
            "type": "Vector",
            "description": "The player's velocity."
          },
          {
            "name": "maxSeqGroundSpeed",
            "type": "number",
            "description": "Speed of the animation - used for playback rate scaling."
          }
        ]
      },
      {
        "name": "VariableEdited",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called when a variable is edited on an Entity (called by Edit Properties... menu). See <page>Editable Entities</page> for more information.",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity being edited"
          },
          {
            "name": "ply",
            "type": "Player",
            "description": "The player doing the editing"
          },
          {
            "name": "key",
            "type": "string",
            "description": "The name of the variable"
          },
          {
            "name": "val",
            "type": "string",
            "description": "The new value, as a string which will later be converted to its appropriate type"
          },
          {
            "name": "editor",
            "type": "table",
            "description": "The edit table defined in <page>Entity:NetworkVar</page>"
          }
        ]
      },
      {
        "name": "VehicleMove",
        "parent": "GM",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when you are driving a vehicle. This hook works just like <page>GM:Move</page>.\n\nThis hook is called before <page>GM:Move</page> and will be called when <page>GM:PlayerTick</page> is not.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "Player who is driving the vehicle"
          },
          {
            "name": "veh",
            "type": "Vehicle",
            "description": "The vehicle being driven"
          },
          {
            "name": "mv",
            "type": "CMoveData",
            "description": "Move data"
          }
        ]
      },
      {
        "name": "VGUIMousePressAllowed",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when user clicks on a VGUI panel.",
        "arguments": [
          {
            "name": "button",
            "type": "number",
            "description": "The button that was pressed, see <page>Enums/MOUSE</page>"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true if the mouse click should be ignored or not."
          }
        ]
      },
      {
        "name": "VGUIMousePressed",
        "parent": "GM",
        "realms": [
          "client"
        ],
        "description": "Called when a mouse button is pressed on a VGUI element or menu.",
        "arguments": [
          {
            "name": "pnl",
            "type": "Panel",
            "description": "Panel that currently has focus."
          },
          {
            "name": "mouseCode",
            "type": "number",
            "description": "The key that the player pressed using <page>Enums/MOUSE</page>."
          }
        ]
      },
      {
        "name": "WeaponEquip",
        "parent": "GM",
        "realms": [
          "server"
        ],
        "description": "Called as a weapon entity is picked up by a player.\n\nSee also <page>GM:PlayerDroppedWeapon</page>.\n\n<note>At the time when this hook is called <page>Entity:GetOwner</page> will return `NULL`. The owner is set on the next frame.</note>\n<note>This will not be called when picking up a weapon you already have as the weapon will be removed and <page>WEAPON:EquipAmmo</page> will be called instead.</note>",
        "arguments": [
          {
            "name": "weapon",
            "type": "Weapon",
            "description": "The equipped weapon."
          },
          {
            "name": "owner",
            "type": "Player",
            "description": "The player that is picking up the weapon."
          }
        ]
      },
      {
        "name": "WorkshopDownloadedFile",
        "parent": "GM",
        "realms": [
          "menu"
        ],
        "description": "Called when an addon from the Steam workshop finishes downloading. Used by default to update details on the workshop downloading panel.",
        "arguments": [
          {
            "name": "id",
            "type": "number",
            "description": "Workshop ID of addon."
          },
          {
            "name": "title",
            "type": "string",
            "description": "Name of addon."
          }
        ]
      },
      {
        "name": "WorkshopDownloadFile",
        "parent": "GM",
        "realms": [
          "menu"
        ],
        "description": "Called when an addon from the Steam workshop begins downloading. Used by default to place details on the workshop downloading panel.",
        "arguments": [
          {
            "name": "id",
            "type": "number",
            "description": "Workshop ID of addon."
          },
          {
            "name": "imageID",
            "type": "number",
            "description": "ID of addon's preview image.\n\n\n\nFor example, for **Extended Spawnmenu** addon, the image URL is\n\n```\nhttp://cloud-4.steamusercontent.com/ugc/702859018846106764/9E7E1946296240314751192DA0AD15B6567FF92D/\n```\n\nSo, the value of this argument would be **702859018846106764**."
          },
          {
            "name": "title",
            "type": "string",
            "description": "Name of addon."
          },
          {
            "name": "size",
            "type": "number",
            "description": "File size of addon in bytes."
          }
        ]
      },
      {
        "name": "WorkshopDownloadProgress",
        "parent": "GM",
        "realms": [
          "menu"
        ],
        "description": "Called while an addon from the Steam workshop is downloading. Used by default to update details on the fancy workshop download panel.",
        "arguments": [
          {
            "name": "id",
            "type": "number",
            "description": "Workshop ID of addon."
          },
          {
            "name": "imageID",
            "type": "number",
            "description": "ID of addon's preview image.\n\n\n\nFor example, for **Extended Spawnmenu** addon, the image URL is\n\n```\nhttp://cloud-4.steamusercontent.com/ugc/702859018846106764/9E7E1946296240314751192DA0AD15B6567FF92D/\n```\n\nSo, the value of this argument would be **702859018846106764**."
          },
          {
            "name": "title",
            "type": "string",
            "description": "Name of addon."
          },
          {
            "name": "downloaded",
            "type": "number",
            "description": "Current bytes of addon downloaded."
          },
          {
            "name": "expected",
            "type": "number",
            "description": "Expected file size of addon in bytes."
          }
        ]
      },
      {
        "name": "WorkshopDownloadTotals",
        "parent": "GM",
        "realms": [
          "menu"
        ],
        "description": "Called after <page>GM:WorkshopStart</page>.",
        "arguments": [
          {
            "name": "remain",
            "type": "number",
            "description": "Remaining addons to download"
          },
          {
            "name": "total",
            "type": "number",
            "description": "Total addons needing to be downloaded"
          }
        ]
      },
      {
        "name": "WorkshopEnd",
        "parent": "GM",
        "realms": [
          "menu"
        ],
        "description": "Called when downloading content from Steam workshop ends. Used by default to hide fancy workshop downloading panel."
      },
      {
        "name": "WorkshopExtractProgress",
        "parent": "GM",
        "realms": [
          "menu"
        ],
        "description": "Called while an addon from the Steam workshop is extracting. Used by default to update details on the fancy workshop download panel.",
        "arguments": [
          {
            "name": "id",
            "type": "number",
            "description": "Workshop ID of addon."
          },
          {
            "name": "ImageID",
            "type": "number",
            "description": "ID of addon's preview image.\n\n\n\nFor example, for **Extended Spawnmenu** addon, the image URL is\n\n```\nhttp://cloud-4.steamusercontent.com/ugc/702859018846106764/9E7E1946296240314751192DA0AD15B6567FF92D/\n```\n\nSo, the value of this argument would be **702859018846106764**."
          },
          {
            "name": "title",
            "type": "string",
            "description": "Name of addon."
          },
          {
            "name": "percent",
            "type": "number",
            "description": "Current bytes of addon extracted."
          }
        ]
      },
      {
        "name": "WorkshopStart",
        "parent": "GM",
        "realms": [
          "menu"
        ],
        "description": "Called when downloading content from Steam workshop begins. Used by default to show fancy workshop downloading panel.\n\nThe order of Workshop hooks is this:\n* WorkshopStart\n* WorkshopDownloadTotals\n* * These are called for each new item:\n* WorkshopDownloadFile\n* WorkshopDownloadProgress - This is called until the file is finished\n* WorkshopDownloadedFile\n* WorkshopEnd (this ones called once)"
      },
      {
        "name": "WorkshopSubscriptionsChanged",
        "parent": "GM",
        "realms": [
          "menu"
        ],
        "description": "Called when UGC subscription status changes."
      },
      {
        "name": "WorkshopSubscriptionsMessage",
        "parent": "GM",
        "realms": [
          "menu"
        ],
        "description": "Called when a Workshop Message is received?. Currently, it seems like the message will be **#ugc.mounting** every time.\n<validate>When does this exactly get called?. If an addon is subscribed, unsubscribed, error occurs or on any event?</validate>",
        "arguments": [
          {
            "name": "message",
            "type": "string",
            "description": "The Message from the Workshop. Will be a phrase that needs to be translated."
          }
        ]
      },
      {
        "name": "WorkshopSubscriptionsProgress",
        "parent": "GM",
        "realms": [
          "menu"
        ],
        "description": "<internal></internal>\nCalled by the engine when the game initially fetches subscriptions to be displayed on the bottom of the main menu screen.",
        "arguments": [
          {
            "name": "num",
            "type": "number",
            "description": "Amount of subscribed addons that have info retrieved."
          },
          {
            "name": "max",
            "type": "number",
            "description": "Total amount of subscribed addons that need their info retrieved."
          }
        ]
      }
    ]
  },
  {
    "name": "NEXTBOT",
    "functions": [
      {
        "name": "BehaveStart",
        "parent": "NEXTBOT",
        "realms": [
          "server"
        ],
        "description": "Called to initialize the behaviour.\n\nThis is called automatically when the NextBot is created, you should not call it manually.\n\n<note>You shouldn't override this unless you know what you are doing - it's used to kick off the <page>coroutine</page> that runs the bot's behaviour. See <page>NEXTBOT:RunBehaviour</page> instead.</note>"
      },
      {
        "name": "BehaveUpdate",
        "parent": "NEXTBOT",
        "realms": [
          "server"
        ],
        "description": "Called to update the bot's behaviour.",
        "arguments": [
          {
            "name": "interval",
            "type": "number",
            "description": "How long since the last update"
          }
        ]
      },
      {
        "name": "BodyUpdate",
        "parent": "NEXTBOT",
        "realms": [
          "server"
        ],
        "description": "Called to update the bot's animation."
      },
      {
        "name": "OnContact",
        "parent": "NEXTBOT",
        "realms": [
          "server"
        ],
        "description": "Called when the nextbot touches another entity.",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity the nextbot came in contact with."
          }
        ]
      },
      {
        "name": "OnEntitySight",
        "parent": "NEXTBOT",
        "realms": [
          "server"
        ],
        "description": "Called when the nextbot NPC sees another Nextbot NPC or a Player.\n<note>This hook will only run after <page>NextBot:SetFOV</page> or other vision related function is called on the nextbot. See <page>NextBot:IsAbleToSee</page> for more details.</note>",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "the entity that was seen"
          }
        ]
      },
      {
        "name": "OnEntitySightLost",
        "parent": "NEXTBOT",
        "realms": [
          "server"
        ],
        "description": "Called when the nextbot NPC loses sight of another Nextbot NPC or a Player.\n<note>This hook will only run after <page>NextBot:SetFOV</page> or other vision related function is called on the nextbot. See <page>NextBot:IsAbleToSee</page> for more details.</note>",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "the entity that we lost sight of"
          }
        ]
      },
      {
        "name": "OnIgnite",
        "parent": "NEXTBOT",
        "realms": [
          "server"
        ],
        "description": "Called when the bot is ignited."
      },
      {
        "name": "OnInjured",
        "parent": "NEXTBOT",
        "realms": [
          "server"
        ],
        "description": "Called when the bot gets hurt. This is a good place to play hurt sounds or voice lines.",
        "arguments": [
          {
            "name": "info",
            "type": "CTakeDamageInfo",
            "description": "The damage info"
          }
        ]
      },
      {
        "name": "OnKilled",
        "parent": "NEXTBOT",
        "realms": [
          "server"
        ],
        "description": "Called when the bot gets killed.",
        "arguments": [
          {
            "name": "info",
            "type": "CTakeDamageInfo",
            "description": "The damage info"
          }
        ]
      },
      {
        "name": "OnLandOnGround",
        "parent": "NEXTBOT",
        "realms": [
          "server"
        ],
        "description": "Called when the bot's feet return to the ground.",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity the nextbot has landed on."
          }
        ]
      },
      {
        "name": "OnLeaveGround",
        "parent": "NEXTBOT",
        "realms": [
          "server"
        ],
        "description": "Called when the bot's feet leave the ground - for whatever reason.",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity the bot \"jumped\" from."
          }
        ]
      },
      {
        "name": "OnNavAreaChanged",
        "parent": "NEXTBOT",
        "realms": [
          "server"
        ],
        "description": "Called when the nextbot enters a new navigation area.",
        "arguments": [
          {
            "name": "old",
            "type": "CNavArea",
            "description": "The navigation area the bot just left"
          },
          {
            "name": "new",
            "type": "CNavArea",
            "description": "The navigation area the bot just entered"
          }
        ]
      },
      {
        "name": "OnOtherKilled",
        "parent": "NEXTBOT",
        "realms": [
          "server"
        ],
        "description": "Called when someone else or something else has been killed.",
        "arguments": [
          {
            "name": "victim",
            "type": "Entity",
            "description": "The victim that was killed"
          },
          {
            "name": "info",
            "type": "CTakeDamageInfo",
            "description": "The damage info"
          }
        ]
      },
      {
        "name": "OnStuck",
        "parent": "NEXTBOT",
        "realms": [
          "server"
        ],
        "description": "Called when the bot thinks it is stuck."
      },
      {
        "name": "OnTraceAttack",
        "parent": "NEXTBOT",
        "realms": [
          "server"
        ],
        "description": "Called when a trace attack is done against the nextbot, allowing override of the damage being dealt by altering the <page>CTakeDamageInfo</page>.\n\nThis is called before <page>NEXTBOT:OnInjured</page>.",
        "arguments": [
          {
            "name": "info",
            "type": "CTakeDamageInfo",
            "description": "The damage info"
          },
          {
            "name": "dir",
            "type": "Vector",
            "description": "The direction the damage goes in"
          },
          {
            "name": "trace",
            "type": "table",
            "description": "The <page>Structures/TraceResult</page> of the attack, containing the hitgroup."
          }
        ]
      },
      {
        "name": "OnUnStuck",
        "parent": "NEXTBOT",
        "realms": [
          "server"
        ],
        "description": "Called when the bot thinks it is un-stuck."
      },
      {
        "name": "RunBehaviour",
        "parent": "NEXTBOT",
        "realms": [
          "server"
        ],
        "description": "A hook called to process nextbot logic.\n\nThis hook runs in a <page>coroutine</page> by default. It will only be called if <page>NEXTBOT:BehaveStart</page> is not overriden."
      }
    ]
  },
  {
    "name": "PANEL",
    "functions": [
      {
        "name": "AnimationThink",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Called every frame unless <page>Panel:IsVisible</page> is set to false. Similar to <page>PANEL:Think</page>, but can be disabled by <page>Panel:SetAnimationEnabled</page> as explained below.\n\nIf you are overriding this, you must call <page>Panel:AnimationThinkInternal</page> every frame, else animations will cease to work.\n\nIf you want to \"disable\" this hook with <page>Panel:SetAnimationEnabled</page>, you must call it after defining this hook. Once disabled, a custom hook **will not** be re-enabled by <page>Panel:SetAnimationEnabled</page> again - the hook will have to be re-defined."
      },
      {
        "name": "ApplySchemeSettings",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Called whenever the panel should apply its scheme (colors, fonts, style).\n\nIt is called a few frames after panel's creation once.\n\nThe engine will overwrite <page>Panel:SetFGColor</page> and <page>Panel:SetBGColor</page> (from the engine panel theme/scheme) for most panels just before this hook is called in Lua."
      },
      {
        "name": "DragHoverClick",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Called when an object is dragged and hovered over this panel for 0.1 seconds.\n\nThis is used by <page>DPropertySheet</page> and <page>DTree</page>, for example to open a tab or expand a node when an object is hovered over it.",
        "arguments": [
          {
            "name": "hoverTime",
            "type": "number",
            "description": "The time the object was hovered over this panel."
          }
        ]
      },
      {
        "name": "DroppedOn",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Called when this panel is dropped onto another panel.\n\nOnly works for panels derived from <page>DDragBase</page>.",
        "arguments": [
          {
            "name": "pnl",
            "type": "Panel",
            "description": "The panel we are dropped onto"
          }
        ]
      },
      {
        "name": "GenerateExample",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Called when the panel should generate example use case / example code to use for this panel. Used in the panel opened by **derma_controls** console command.",
        "arguments": [
          {
            "name": "class",
            "type": "string",
            "description": "The classname of the panel to generate example for. This will be the class name of your panel."
          },
          {
            "name": "dpropertysheet",
            "type": "Panel",
            "description": "A <page>DPropertySheet</page> to add your example to. See examples below."
          },
          {
            "name": "width",
            "type": "number",
            "description": "Width of the property sheet?"
          },
          {
            "name": "height",
            "type": "number",
            "description": "Width of the property sheet?"
          }
        ]
      },
      {
        "name": "Init",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Called when the panel is created. This is called for each base type that the panel has."
      },
      {
        "name": "LoadCookies",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Called after <page>Panel:SetCookieName</page> is called on this panel to apply the just loaded cookie values for this panel."
      },
      {
        "name": "OnActivate",
        "parent": "PANEL",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>Called when we are activated during level load. Used by the loading screen panel."
      },
      {
        "name": "OnChildAdded",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Called whenever a child was parented to the panel.\n\n<bug issue=\"2759\">This is called before the panel's metatable is set.</bug>",
        "arguments": [
          {
            "name": "child",
            "type": "Panel",
            "description": "The child which was added."
          }
        ]
      },
      {
        "name": "OnChildRemoved",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Called whenever a child of the panel is about to removed.",
        "arguments": [
          {
            "name": "child",
            "type": "Panel",
            "description": "The child which is about to be removed."
          }
        ]
      },
      {
        "name": "OnCursorEntered",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Called whenever the cursor entered the panels bounds."
      },
      {
        "name": "OnCursorExited",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Called whenever the cursor left the panels bounds."
      },
      {
        "name": "OnCursorMoved",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Called whenever the cursor was moved with the panels bounds.",
        "arguments": [
          {
            "name": "cursorX",
            "type": "number",
            "description": "The new x position of the cursor relative to the panels origin."
          },
          {
            "name": "cursorY",
            "type": "number",
            "description": "The new y position of the cursor relative to the panels origin."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to suppress default action."
          }
        ]
      },
      {
        "name": "OnDeactivate",
        "parent": "PANEL",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>Called when we are deactivated during level load. Used by the loading screen panel."
      },
      {
        "name": "OnDrop",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "We're being dropped on something\nWe can create a new panel here and return it, so that instead of dropping us - it drops the new panel instead! We remain where we are!\n\nOnly works for panels derived from <page>DDragBase</page>.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "The panel to drop instead of us. By default you should return self."
          }
        ]
      },
      {
        "name": "OnFocusChanged",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Called whenever the panel gained or lost focus.\n\n<note><page>Panel:HasFocus</page> will only be updated on the next frame and will return the \"old\" value at the time this hook is run. Same goes for <page>vgui.GetKeyboardFocus</page>.</note>",
        "arguments": [
          {
            "name": "gained",
            "type": "boolean",
            "description": "If the focus was gained (`true`) or lost (`false`)."
          }
        ]
      },
      {
        "name": "OnHScroll",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Called when the panel a child <page>DHScrollBar</page> is scrolled.",
        "arguments": [
          {
            "name": "offset",
            "type": "number",
            "description": "The new horizontal scroll offset."
          }
        ]
      },
      {
        "name": "OnKeyCodePressed",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Called whenever a keyboard key was pressed while the panel is focused.\n\n<bug issue=\"2886\">This is not run for ESC/\"cancelselect\" binding.</bug>",
        "arguments": [
          {
            "name": "keyCode",
            "type": "number",
            "description": "The key code of the pressed key, see <page>Enums/KEY</page>."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to suppress default action."
          }
        ]
      },
      {
        "name": "OnKeyCodeReleased",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Called whenever a keyboard key was released while the panel is focused.\n\n<bug issue=\"2886\">This is not run for TILDE/\"toggleconsole\" binding.</bug>",
        "arguments": [
          {
            "name": "keyCode",
            "type": "number",
            "description": "The key code of the released key, see <page>Enums/KEY</page>."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to suppress default action."
          }
        ]
      },
      {
        "name": "OnMousePressed",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Called whenever a mouse key was pressed while the panel is focused.",
        "arguments": [
          {
            "name": "keyCode",
            "type": "number",
            "description": "They key code of the key pressed, see <page>Enums/MOUSE</page>."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to suppress default action such as right click opening edit menu for <page>DTextEntry</page>."
          }
        ]
      },
      {
        "name": "OnMouseReleased",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Called whenever a mouse key was released while the panel is focused.",
        "arguments": [
          {
            "name": "keyCode",
            "type": "number",
            "description": "They key code of the key released, see <page>Enums/MOUSE</page>."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to suppress default action."
          }
        ]
      },
      {
        "name": "OnMouseWheeled",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Called whenever the mouse wheel was used.",
        "arguments": [
          {
            "name": "scrollDelta",
            "type": "number",
            "description": "The scroll delta, indicating how much the user turned the mouse wheel."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to suppress default action."
          }
        ]
      },
      {
        "name": "OnRemove",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Called when the panel is about to be removed."
      },
      {
        "name": "OnScreenSizeChanged",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Called when the player's screen resolution of the game changes.\n\n<page>Global.ScrW</page> and <page>Global.ScrH</page> will return the new values when this hook is called.",
        "arguments": [
          {
            "name": "oldWidth",
            "type": "number",
            "description": "The previous width  of the game's window"
          },
          {
            "name": "oldHeight",
            "type": "number",
            "description": "The previous height of the game's window"
          },
          {
            "name": "newWidth",
            "type": "number",
            "description": "The new/current width of the game's window."
          },
          {
            "name": "newHeight",
            "type": "number",
            "description": "The new/current height of the game's window."
          }
        ]
      },
      {
        "name": "OnScrollbarAppear",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Called when the panel a child <page>DVScrollBar</page> or <page>DHScrollBar</page> becomes visible."
      },
      {
        "name": "OnSizeChanged",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Called just after the panel size changes.\n\nAll size functions will return the new values when this hook is called.\n\n<warning>Changing the panel size in this hook will cause an infinite loop!</warning>",
        "arguments": [
          {
            "name": "newWidth",
            "type": "number",
            "description": "The new width of the panel"
          },
          {
            "name": "newHeight",
            "type": "number",
            "description": "The new height of the panel"
          }
        ]
      },
      {
        "name": "OnStartDragging",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "<internal></internal> Called by <page>dragndrop.StartDragging</page> when the panel starts being dragged."
      },
      {
        "name": "OnStopDragging",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "<internal></internal> Called by <page>Panel:DragMouseRelease</page> when the panel object is released after being dragged."
      },
      {
        "name": "OnTextClicked",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Called whenever clickable text is clicked within a <page>RichText</page>.",
        "arguments": [
          {
            "name": "id",
            "type": "string",
            "description": "The identifier of the text clicked. The one passed to <page>Panel:InsertClickableTextStart</page>."
          }
        ]
      },
      {
        "name": "OnVScroll",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Called when the panel a child <page>DVScrollBar</page> is scrolled.",
        "arguments": [
          {
            "name": "offset",
            "type": "number",
            "description": "The new vertical scroll offset."
          }
        ]
      },
      {
        "name": "Paint",
        "parent": "PANEL",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called whenever the panel should be drawn.\n\nThis hook will not run if the panel is completely off the screen, and will still run if any parts of the panel are still on screen.\n\nYou can create panels with a customized appearance by overriding their `Paint()` function, which will prevent the default appearance from being drawn.\n\nSee also <page>PANEL:PaintOver</page>.\n\n<note>Render operations from the <page>surface</page> library (and consequentially the <page>draw</page> library) are always offset by the global position of this panel, as seen in the example below</note>",
        "arguments": [
          {
            "name": "width",
            "type": "number",
            "description": "The panel's width."
          },
          {
            "name": "height",
            "type": "number",
            "description": "The panel's height."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Returning true prevents the background from being drawn."
          }
        ]
      },
      {
        "name": "PaintOver",
        "parent": "PANEL",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called whenever the panel and all its children were drawn, return true to override the default drawing.\n\nThis is useful to draw content over the panel without having to overwrite it's <page>PANEL:Paint</page> hook, for example as an indicator that a panel is selected in <page>PropSelect</page>",
        "arguments": [
          {
            "name": "width",
            "type": "number",
            "description": "The panels current width."
          },
          {
            "name": "height",
            "type": "number",
            "description": "The panels current height."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Should we disable default PaintOver rendering? This is useful in case with Derma panels that use Derma hooks."
          }
        ]
      },
      {
        "name": "PerformLayout",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Called whenever the panels' layout needs to be performed again. This means all child panels must be re-positioned to fit the possibly new size of this panel.\n\nThis can be triggered in numerous ways:\n* <page>Panel:InvalidateLayout</page> was called this or previous frame (depending on the argument)\n* <page>Panel:SetPos</page> called more than once on the same panel ([Issue](https://github.com/Facepunch/garrysmod-issues/issues/5519))\n* A child element was added to this panel (TODO: Verify me)\n* The size of this panel has changed\n\nYou should not call this function directly. Use <page>Panel:InvalidateLayout</page> instead.\n\nYou can use `vgui_visualizelayout 1` to visualize panel layouts as they happen for debugging purposes. Panels should not be doing this every frame.",
        "arguments": [
          {
            "name": "width",
            "type": "number",
            "description": "The panels current width."
          },
          {
            "name": "height",
            "type": "number",
            "description": "The panels current height."
          }
        ]
      },
      {
        "name": "PostAutoRefresh",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Only works on elements defined with <page>derma.DefineControl</page> and only if the panel has **AllowAutoRefresh** set to true.\n\nCalled after <page>derma.DefineControl</page> is called with panel's class name.\n\nSee also <page>PANEL:PreAutoRefresh</page>"
      },
      {
        "name": "PreAutoRefresh",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Only works on elements defined with <page>derma.DefineControl</page> and only if the panel has **AllowAutoRefresh** set to true.\n\nCalled when <page>derma.DefineControl</page> is called with this panel's class name before applying changes to this panel.\n\nSee also <page>PANEL:PostAutoRefresh</page>"
      },
      {
        "name": "TestHover",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Called to test if the panel is being `hovered` by the mouse. This will only be called if the panel's parent is being hovered.",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "description": "The x coordinate of the cursor, in screen space."
          },
          {
            "name": "y",
            "type": "number",
            "description": "The y coordinate of the cursor, in screen space."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return false when the cursor is not considered on the panel, true if it is considered on the panel. Do not return anything for default behavior."
          }
        ]
      },
      {
        "name": "Think",
        "parent": "PANEL",
        "realms": [
          "client"
        ],
        "description": "Called every frame while <page>Panel:IsVisible</page> is true."
      }
    ]
  },
  {
    "name": "PLAYER",
    "functions": [
      {
        "name": "ClassChanged",
        "parent": "PLAYER",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when the player's class was changed from this class."
      },
      {
        "name": "Death",
        "parent": "PLAYER",
        "realms": [
          "server"
        ],
        "description": "Called when the player dies"
      },
      {
        "name": "FinishMove",
        "parent": "PLAYER",
        "realms": [
          "client"
        ],
        "description": "Called from <page>GM:FinishMove</page>.\n\n<warning>This hook will not work if the current gamemode overrides <page>GM:FinishMove</page> and does not call this hook.</warning>\n\n<note>This hook is run after the <page>drive.FinishMove</page> has been called.</note>",
        "arguments": [
          {
            "name": "mv",
            "type": "CMoveData"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to prevent default action"
          }
        ]
      },
      {
        "name": "GetHandsModel",
        "parent": "PLAYER",
        "realms": [
          "client"
        ],
        "description": "Called on player spawn to determine which hand model to use",
        "returnValues": [
          {
            "type": "table",
            "description": "A table containing info about view model hands model to be set. See examples."
          }
        ]
      },
      {
        "name": "Init",
        "parent": "PLAYER",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when the class object is created"
      },
      {
        "name": "Loadout",
        "parent": "PLAYER",
        "realms": [
          "server"
        ],
        "description": "Called on spawn to give the player their default loadout"
      },
      {
        "name": "Move",
        "parent": "PLAYER",
        "realms": [
          "client"
        ],
        "description": "Called from <page>GM:Move</page>.\n\n<warning>This hook will not work if the current gamemode overrides <page>GM:Move</page> and does not call this hook.</warning>\n\n<note>This hook is run after the <page>drive.Move</page> has been called.</note>",
        "arguments": [
          {
            "name": "mv",
            "type": "CMoveData",
            "description": "Movement information"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to prevent default action"
          }
        ]
      },
      {
        "name": "PostDrawViewModel",
        "parent": "PLAYER",
        "realms": [
          "client"
        ],
        "description": "Called after the viewmodel has been drawn",
        "arguments": [
          {
            "name": "viewmodel",
            "type": "Entity",
            "description": "The viewmodel"
          },
          {
            "name": "weapon",
            "type": "Entity",
            "description": "The weapon"
          }
        ]
      },
      {
        "name": "PreDrawViewModel",
        "parent": "PLAYER",
        "realms": [
          "client"
        ],
        "description": "Called before the viewmodel is drawn",
        "arguments": [
          {
            "name": "viewmodel",
            "type": "Entity",
            "description": "The viewmodel"
          },
          {
            "name": "weapon",
            "type": "Entity",
            "description": "The weapon"
          }
        ]
      },
      {
        "name": "SetModel",
        "parent": "PLAYER",
        "realms": [
          "server"
        ],
        "description": "Called when we need to set player model from the class.\n\n<note>This will only be called if you have not overridden <page>GM:PlayerSetModel</page> or call this function from it or anywhere else using <page>player_manager.RunClass</page></note>"
      },
      {
        "name": "SetupDataTables",
        "parent": "PLAYER",
        "realms": [
          "client",
          "server"
        ],
        "description": "Setup the network table accessors."
      },
      {
        "name": "Spawn",
        "parent": "PLAYER",
        "realms": [
          "server"
        ],
        "description": "Called when the player spawns"
      },
      {
        "name": "StartMove",
        "parent": "PLAYER",
        "realms": [
          "client"
        ],
        "description": "Called from <page>GM:CreateMove</page>.\n\n<warning>This hook will not work if the current gamemode overrides <page>GM:SetupMove</page> and does not call this hook.</warning>\n\n<note>This hook is run after the <page>drive.StartMove</page> has been called.</note>",
        "arguments": [
          {
            "name": "mv",
            "type": "CMoveData"
          },
          {
            "name": "cmd",
            "type": "CUserCmd"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to prevent default action"
          }
        ]
      },
      {
        "name": "ViewModelChanged",
        "parent": "PLAYER",
        "realms": [
          "client"
        ],
        "description": "Called when the player changes their weapon to another one causing their viewmodel model to change",
        "arguments": [
          {
            "name": "viewmodel",
            "type": "Entity",
            "description": "The viewmodel that is changing"
          },
          {
            "name": "old",
            "type": "string",
            "description": "The old model"
          },
          {
            "name": "new",
            "type": "string",
            "description": "The new model"
          }
        ]
      }
    ]
  },
  {
    "name": "SANDBOX",
    "functions": [
      {
        "name": "AddGamemodeToolMenuCategories",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "<internal></internal>\n\nThis hook is used to add default categories to spawnmenu tool tabs.\n\nDo not override or hook this function, use <page>SANDBOX:AddToolMenuCategories</page>!"
      },
      {
        "name": "AddGamemodeToolMenuTabs",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "<internal></internal>\n\nThis hook is used to add default tool tabs to spawnmenu.\n\nDo not override or hook this function, use <page>SANDBOX:AddToolMenuTabs</page>!"
      },
      {
        "name": "AddToolMenuCategories",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "This hook is used to add new categories to spawnmenu tool tabs."
      },
      {
        "name": "AddToolMenuTabs",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "This hook is used to add new tool tabs to spawnmenu."
      },
      {
        "name": "CanArmDupe",
        "parent": "SANDBOX",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when a player attempts to \"arm\" a duplication with the Duplicator tool. Return false to prevent the player from sending data to server, and to ignore data if it was somehow sent anyway.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player who attempted to arm a dupe."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Can the player arm a dupe or not."
          },
          {
            "type": "string",
            "description": "If given and the return value above is `false`, overrides the error message displayed to the player."
          }
        ]
      },
      {
        "name": "CanDrive",
        "parent": "SANDBOX",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when a player attempts to drive a prop via Prop Drive",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player who attempted to use Prop Drive."
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity the player is attempting to drive"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to allow driving, false to disallow"
          }
        ]
      },
      {
        "name": "CanTool",
        "parent": "SANDBOX",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when a player attempts to fire their tool gun. Return true to specifically allow the attempt, false to block it.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player who attempted to use their toolgun."
          },
          {
            "name": "tr",
            "type": "table",
            "description": "A trace from the players eye to where in the world their crosshair/cursor is pointing. See <page>Structures/TraceResult</page>"
          },
          {
            "name": "toolname",
            "type": "string",
            "description": "The tool mode the player currently has selected."
          },
          {
            "name": "tool",
            "type": "table",
            "description": "The tool mode table the player currently has selected."
          },
          {
            "name": "button",
            "type": "number",
            "description": "The tool button pressed."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Can use toolgun or not."
          }
        ]
      },
      {
        "name": "ContentSidebarSelection",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "Called when player selects an item on the spawnmenu sidebar at the left.",
        "arguments": [
          {
            "name": "parent",
            "type": "Panel",
            "description": "The panel that holds spawnicons and the sidebar of spawnmenu"
          },
          {
            "name": "node",
            "type": "Panel",
            "description": "The item player selected"
          }
        ]
      },
      {
        "name": "ContextMenuClosed",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "Called when the context menu is supposedly closed.\n\nThis is simply an alias of <page>GM:OnContextMenuClose</page>.\n\nThis hook **will** be called even if the Sandbox's context menu doesn't actually exist, i.e. <page>SANDBOX:ContextMenuEnabled</page> blocked its creation."
      },
      {
        "name": "ContextMenuCreated",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "Called when the context menu is created.",
        "arguments": [
          {
            "name": "g_ContextMenu",
            "type": "Panel",
            "description": "The created context menu panel"
          }
        ]
      },
      {
        "name": "ContextMenuEnabled",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "Allows to prevent the creation of the context menu. If the context menu is already created, this will have no effect.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return `false` to prevent the context menu from being created."
          }
        ]
      },
      {
        "name": "ContextMenuOpen",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "Called when the context menu is trying to be opened.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return `false` to block the opening."
          }
        ]
      },
      {
        "name": "ContextMenuOpened",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "Called when the context menu is supposedly opened.\n\nThis is simply an alias of <page>GM:OnContextMenuOpen</page> but will **not** be called if <page>SANDBOX:ContextMenuOpen</page> prevents the context menu from opening.\n\nThis hook **will** be called even if the context menu doesn't actually exist, i.e. <page>SANDBOX:ContextMenuEnabled</page> blocked its creation."
      },
      {
        "name": "ContextMenuShowTool",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "Called to poll if active tool settings should appear in the context menu. Please note that this is only called on initial opening of the context menu, not every frame the context menu is in use.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return `false` to prevent active tool settings from displaying in the context menu."
          }
        ]
      },
      {
        "name": "OnRevertSpawnlist",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "Called when the Client reverts spawnlist changes"
      },
      {
        "name": "OnSaveSpawnlist",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "Called when a player saves his changes made to the spawnmenu"
      },
      {
        "name": "OpenToolbox",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "<internal></internal>\nThis hook is called when the player edits a category in the Spawnmenu"
      },
      {
        "name": "PaintNotes",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "Called from <page>GM:HUDPaint</page>; does nothing by default.\n\n<note>This cannot be used with <page>hook.Add</page></note>"
      },
      {
        "name": "PaintWorldTips",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "Called from <page>GM:HUDPaint</page> to draw world tips. By default, enabling cl_drawworldtooltips will stop world tips from being drawn here.<br>\nSee <page>Global.AddWorldTip</page> for more information.\n\n<note>This cannot be used with <page>hook.Add</page></note>"
      },
      {
        "name": "PersistenceLoad",
        "parent": "SANDBOX",
        "realms": [
          "server"
        ],
        "description": "Called when persistent props are loaded.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "Save from which to load."
          }
        ]
      },
      {
        "name": "PersistenceSave",
        "parent": "SANDBOX",
        "realms": [
          "server"
        ],
        "description": "Called when persistent props are saved.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "Where to save. By default is convar \"sbox_persist\"."
          }
        ]
      },
      {
        "name": "PlayerGiveSWEP",
        "parent": "SANDBOX",
        "realms": [
          "server"
        ],
        "description": "Called when a player attempts to give themselves a weapon from the Q menu. ( Left mouse clicks on an icon )",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player who attempted to give themselves a weapon."
          },
          {
            "name": "weapon",
            "type": "string",
            "description": "Class name of the weapon the player tried to give themselves."
          },
          {
            "name": "spawninfo",
            "type": "table",
            "description": "The weapon list table of this weapon, see https://github.com/Facepunch/garrysmod/blob/c3801c10e1aacc4c114d81331f301c57bdcf5a52/garrysmod/gamemodes/sandbox/gamemode/commands.lua#L893 and https://github.com/Facepunch/garrysmod/blob/c3801c10e1aacc4c114d81331f301c57bdcf5a52/garrysmod/lua/includes/modules/weapons.lua#L58"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Can the SWEP be given to the player"
          }
        ]
      },
      {
        "name": "PlayerSpawnedEffect",
        "parent": "SANDBOX",
        "realms": [
          "server"
        ],
        "description": "Called after the player spawned an effect.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player that spawned the effect"
          },
          {
            "name": "model",
            "type": "string",
            "description": "The model of spawned effect"
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "The spawned effect itself"
          }
        ]
      },
      {
        "name": "PlayerSpawnedNPC",
        "parent": "SANDBOX",
        "realms": [
          "server"
        ],
        "description": "Called after the player spawned an NPC.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player that spawned the NPC"
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "The spawned NPC itself"
          }
        ]
      },
      {
        "name": "PlayerSpawnedProp",
        "parent": "SANDBOX",
        "realms": [
          "server"
        ],
        "description": "Called when a player has successfully spawned a prop from the Q menu.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player who spawned a prop."
          },
          {
            "name": "model",
            "type": "string",
            "description": "Path to the model of the prop the player is attempting to spawn."
          },
          {
            "name": "entity",
            "type": "Entity",
            "description": "The entity that was spawned."
          }
        ]
      },
      {
        "name": "PlayerSpawnedRagdoll",
        "parent": "SANDBOX",
        "realms": [
          "server"
        ],
        "description": "Called after the player spawned a ragdoll.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player that spawned the ragdoll"
          },
          {
            "name": "model",
            "type": "string",
            "description": "The ragdoll model that player wants to spawn"
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "The spawned ragdoll itself"
          }
        ]
      },
      {
        "name": "PlayerSpawnedSENT",
        "parent": "SANDBOX",
        "realms": [
          "server"
        ],
        "description": "Called after the player has spawned a scripted entity.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player that spawned the SENT"
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "The spawned SENT"
          }
        ]
      },
      {
        "name": "PlayerSpawnedSWEP",
        "parent": "SANDBOX",
        "realms": [
          "server"
        ],
        "description": "Called after the player has spawned a scripted weapon from the spawnmenu with a middle mouse click.\n\nFor left mouse click spawns, see <page>SANDBOX:PlayerGiveSWEP</page>.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player that spawned the SWEP"
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "The SWEP itself"
          }
        ]
      },
      {
        "name": "PlayerSpawnedVehicle",
        "parent": "SANDBOX",
        "realms": [
          "server"
        ],
        "description": "Called after the player spawned a vehicle.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player that spawned the vehicle"
          },
          {
            "name": "ent",
            "type": "Entity",
            "description": "The vehicle itself"
          }
        ]
      },
      {
        "name": "PlayerSpawnEffect",
        "parent": "SANDBOX",
        "realms": [
          "server"
        ],
        "description": "Called to ask if player allowed to spawn a particular effect or not.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player that wants to spawn an effect"
          },
          {
            "name": "model",
            "type": "string",
            "description": "The effect model that player wants to spawn"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return false to disallow spawning that effect"
          }
        ]
      },
      {
        "name": "PlayerSpawnNPC",
        "parent": "SANDBOX",
        "realms": [
          "server"
        ],
        "description": "Called to ask if player allowed to spawn a particular NPC or not.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player that wants to spawn that NPC"
          },
          {
            "name": "npc_type",
            "type": "string",
            "description": "The npc type that player is trying to spawn"
          },
          {
            "name": "weapon",
            "type": "string",
            "description": "The weapon of that NPC"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return false to disallow spawning that NPC"
          }
        ]
      },
      {
        "name": "PlayerSpawnObject",
        "parent": "SANDBOX",
        "realms": [
          "server"
        ],
        "description": "Called to ask whether player is allowed to spawn a given model. This includes props, effects, and ragdolls and is called before the respective PlayerSpawn* hook.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player in question"
          },
          {
            "name": "model",
            "type": "string",
            "description": "Model path"
          },
          {
            "name": "skin",
            "type": "number",
            "description": "Skin number"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return false to disallow the player to spawn the given model."
          }
        ]
      },
      {
        "name": "PlayerSpawnProp",
        "parent": "SANDBOX",
        "realms": [
          "server"
        ],
        "description": "Called when a player attempts to spawn a prop from the Q menu.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player who attempted to spawn a prop."
          },
          {
            "name": "model",
            "type": "string",
            "description": "Path to the model of the prop the player is attempting to spawn."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Should the player be able to spawn the prop or not."
          }
        ]
      },
      {
        "name": "PlayerSpawnRagdoll",
        "parent": "SANDBOX",
        "realms": [
          "server"
        ],
        "description": "Called when a player attempts to spawn a ragdoll from the Q menu.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player who attempted to spawn a ragdoll."
          },
          {
            "name": "model",
            "type": "string",
            "description": "Path to the model of the ragdoll the player is attempting to spawn."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Should the player be able to spawn the ragdoll or not."
          }
        ]
      },
      {
        "name": "PlayerSpawnSENT",
        "parent": "SANDBOX",
        "realms": [
          "server"
        ],
        "description": "Called when a player attempts to spawn an Entity from the Q menu.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player who attempted to spawn the entity."
          },
          {
            "name": "class",
            "type": "string",
            "description": "Class name of the entity the player tried to spawn."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Should the player be able to spawn the entity or not."
          }
        ]
      },
      {
        "name": "PlayerSpawnSWEP",
        "parent": "SANDBOX",
        "realms": [
          "server"
        ],
        "description": "Called when a player attempts to spawn a weapon from the Q menu. ( Mouse wheel clicks on an icon )",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player who attempted to spawn a weapon."
          },
          {
            "name": "weapon",
            "type": "string",
            "description": "Class name of the weapon the player tried to spawn."
          },
          {
            "name": "swep",
            "type": "table",
            "description": "Information about the weapon the player is trying to spawn, see <page>Structures/SWEP</page>"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Can the SWEP be spawned"
          }
        ]
      },
      {
        "name": "PlayerSpawnVehicle",
        "parent": "SANDBOX",
        "realms": [
          "server"
        ],
        "description": "Called to ask if player allowed to spawn a particular vehicle or not.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player that wants to spawn that vehicle"
          },
          {
            "name": "model",
            "type": "string",
            "description": "The vehicle model that player wants to spawn"
          },
          {
            "name": "name",
            "type": "string",
            "description": "Vehicle name"
          },
          {
            "name": "table",
            "type": "table",
            "description": "Table of that vehicle, containing info about it See <page>Structures/VehicleTable</page>."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return false to disallow spawning that vehicle"
          }
        ]
      },
      {
        "name": "PopulateContent",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "Called by the spawnmenu when the content tab is generated\n<warning>Creating an error in this Hook will result in a completely broken Content Tab</warning>",
        "arguments": [
          {
            "name": "pnlContent",
            "type": "Panel",
            "description": "The SpawnmenuContentPanel"
          },
          {
            "name": "tree",
            "type": "Panel",
            "description": "The ContentNavBar tree from the SpawnmenuContentPanel"
          },
          {
            "name": "node",
            "type": "Panel",
            "description": "The old Spawnlists"
          }
        ]
      },
      {
        "name": "PopulateEntities",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "Called by the spawnmenu when the Entities tab is generated\n<warning>Creating an error in this Hook will result in a completely broken Entites Tab</warning>",
        "arguments": [
          {
            "name": "pnlContent",
            "type": "Panel",
            "description": "The SpawnmenuContentPanel"
          },
          {
            "name": "tree",
            "type": "Panel",
            "description": "The ContentNavBar tree from the SpawnmenuContentPanel"
          },
          {
            "name": "node",
            "type": "Panel",
            "description": "The old Spawnlists"
          }
        ]
      },
      {
        "name": "PopulateNPCs",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "Called by the spawnmenu when the NPCs tab is generated\n<warning>Creating an error in this Hook will result in a completely broken NPCs Tab</warning>",
        "arguments": [
          {
            "name": "pnlContent",
            "type": "Panel",
            "description": "The SpawnmenuContentPanel"
          },
          {
            "name": "tree",
            "type": "Panel",
            "description": "The ContentNavBar tree from the SpawnmenuContentPanel"
          },
          {
            "name": "node",
            "type": "Panel",
            "description": "The old Spawnlists"
          }
        ]
      },
      {
        "name": "PopulatePropMenu",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "This hook makes the engine load the spawnlist text files.\nIt calls <page>spawnmenu.PopulateFromEngineTextFiles</page> by default."
      },
      {
        "name": "PopulateToolMenu",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "Add the <page text=\"Scripted TOOLs\">TOOL</page> to the tool menu. You want to call <page>spawnmenu.AddToolMenuOption</page> in this hook."
      },
      {
        "name": "PopulateVehicles",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "Called by the spawnmenu when the Vehicles tab is generated\n<warning>Creating an error in this Hook will result in a completely broken vehicles Tab</warning>",
        "arguments": [
          {
            "name": "pnlContent",
            "type": "Panel",
            "description": "The SpawnmenuContentPanel"
          },
          {
            "name": "tree",
            "type": "Panel",
            "description": "The ContentNavBar tree from the SpawnmenuContentPanel"
          },
          {
            "name": "node",
            "type": "Panel",
            "description": "The old Spawnlists"
          }
        ]
      },
      {
        "name": "PopulateWeapons",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "Called by the spawnmenu when the Weapons tab is generated\n<warning>Creating an error in this Hook will result in a completely broken Weapons Tab</warning>",
        "arguments": [
          {
            "name": "pnlContent",
            "type": "Panel",
            "description": "The SpawnmenuContentPanel"
          },
          {
            "name": "tree",
            "type": "Panel",
            "description": "The ContentNavBar tree from the SpawnmenuContentPanel"
          },
          {
            "name": "node",
            "type": "Panel",
            "description": "The old Spawnlists"
          }
        ]
      },
      {
        "name": "PostReloadToolsMenu",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "Called right after the Lua Loaded tool menus are reloaded. This is a good place to set up any <page>ControlPanel</page>s."
      },
      {
        "name": "PreRegisterTOOL",
        "parent": "SANDBOX",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called just before registering a Sandbox scripted tool.",
        "arguments": [
          {
            "name": "tool",
            "type": "table",
            "description": "The TOOL table to be registered. See <page>Structures/TOOL</page>."
          },
          {
            "name": "class",
            "type": "string",
            "description": "The class name to be assigned."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return `false` to prevent the TOOL from being registered."
          }
        ]
      },
      {
        "name": "PreReloadToolsMenu",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "Called right before the Lua Loaded tool menus are reloaded."
      },
      {
        "name": "SpawnlistContentChanged",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "Called when changes were made to the spawnmenu like creating a new category."
      },
      {
        "name": "SpawnlistOpenGenericMenu",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "<internal></internal>\nCalled when there's one or more items selected in the spawnmenu by the player, to open the multi selection right click menu (<page>DMenu</page>)",
        "arguments": [
          {
            "name": "canvas",
            "type": "Panel",
            "description": "The canvas that has the selection. (<page>SANDBOX:SpawnlistOpenGenericMenu</page>)"
          }
        ]
      },
      {
        "name": "SpawnMenuEnabled",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "If false is returned then the spawn menu is never created. This saves load times if your mod doesn't actually use the spawn menu for any reason.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether to create spawnmenu or not."
          }
        ]
      },
      {
        "name": "SpawnMenuOpen",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "Called when spawnmenu is trying to be opened.\n\n<note>Hiding the spawnmenu will not stop people from being able to use the various console commands to spawn in items, etc. See GM:PlayerSpawn* hooks for blocking actual spawning.</note>",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return false to dissallow opening the spawnmenu"
          }
        ]
      },
      {
        "name": "SpawnMenuOpened",
        "parent": "SANDBOX",
        "realms": [
          "client"
        ],
        "description": "Called when the spawnmenu is opened.\n\nThis is an alias of <page>GM:OnSpawnMenuOpen</page> but will **not** be called if <page>SANDBOX:SpawnMenuOpen</page> prevents the spawnmenu from opening.\n\nThis hook **will** be called even if the spawnmenu doesn't actually exist, i.e. <page>SANDBOX:SpawnMenuEnabled</page> blocked its creation."
      }
    ]
  },
  {
    "name": "TOOL",
    "functions": [
      {
        "name": "BuildCPanel",
        "parent": "TOOL",
        "realms": [
          "client"
        ],
        "description": "Called when the tool's control panel needs to be rebuilt.\n\n<warning>Due to historical reasons, this hook does not provide the tool object as `self`! See examples.</warning>",
        "arguments": [
          {
            "name": "cpanel",
            "type": "Panel",
            "description": "The <page>DForm</page> control panel to add settings to."
          }
        ]
      },
      {
        "name": "Deploy",
        "parent": "TOOL",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when <page>WEAPON:Deploy</page> of the toolgun is called.\n\nThis is also called when switching from another tool on the server.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to allow switching away from the toolgun using lastinv command"
          }
        ]
      },
      {
        "name": "DrawHUD",
        "parent": "TOOL",
        "realms": [
          "client"
        ],
        "description": "Called when <page>WEAPON:DrawHUD</page> of the toolgun is called, only when the user has this tool selected."
      },
      {
        "name": "DrawToolScreen",
        "parent": "TOOL",
        "realms": [
          "client"
        ],
        "description": "Called after the default tool screen has been drawn from <page>WEAPON:RenderScreen</page>.\n\n<note>If this method exists on the TOOL object table, the default scrolling text will not be drawn</note>\n<note>Materials rendered in this hook require $ignorez parameter to draw properly.</note>",
        "arguments": [
          {
            "name": "width",
            "type": "number",
            "description": "The width of the tool's screen in pixels."
          },
          {
            "name": "height",
            "type": "number",
            "description": "The height of the tool's screen in pixels."
          }
        ]
      },
      {
        "name": "FreezeMovement",
        "parent": "TOOL",
        "realms": [
          "client"
        ],
        "description": "Called when <page>WEAPON:Think</page> of the toolgun is called, only when the user has this tool selected.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to freeze the player"
          }
        ]
      },
      {
        "name": "Holster",
        "parent": "TOOL",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when <page>WEAPON:Holster</page> of the toolgun is called, as well as serverside when switching between different toolguns."
      },
      {
        "name": "LeftClick",
        "parent": "TOOL",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when the user left clicks with the tool.",
        "arguments": [
          {
            "name": "tr",
            "type": "table",
            "description": "A trace from user's eyes to wherever they aim at. See <page>Structures/TraceResult</page>"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return `true` to draw the tool gun beam and play fire animations, `false` otherwise."
          }
        ]
      },
      {
        "name": "Reload",
        "parent": "TOOL",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when the user presses the reload key with the tool out.",
        "arguments": [
          {
            "name": "tr",
            "type": "table",
            "description": "A trace from user's eyes to wherever they aim at. See <page>Structures/TraceResult</page>"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return `true` to draw the tool gun beam and play fire animations, `false` otherwise"
          }
        ]
      },
      {
        "name": "RightClick",
        "parent": "TOOL",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when the user right clicks with the tool.",
        "arguments": [
          {
            "name": "tr",
            "type": "table",
            "description": "A trace from user's eyes to wherever they aim at. See <page>Structures/TraceResult</page>"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return `true` to draw the tool gun beam and play fire animations, `false` otherwise"
          }
        ]
      },
      {
        "name": "Think",
        "parent": "TOOL",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when <page>WEAPON:Think</page> of the toolgun is called. This only happens when the tool gun is currently equipped/selected by the player and the selected tool is this tool."
      }
    ]
  },
  {
    "name": "WEAPON",
    "functions": [
      {
        "name": "AcceptInput",
        "parent": "WEAPON",
        "realms": [
          "server"
        ],
        "description": "Called when another entity fires an event to this entity.",
        "arguments": [
          {
            "name": "inputName",
            "type": "string",
            "description": "The name of the input that was triggered."
          },
          {
            "name": "activator",
            "type": "Entity",
            "description": "The initial cause for the input getting triggered."
          },
          {
            "name": "called",
            "type": "Entity",
            "description": "The entity that directly trigger the input."
          },
          {
            "name": "data",
            "type": "string",
            "description": "The data passed."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Should we suppress the default action for this input?"
          }
        ]
      },
      {
        "name": "AdjustMouseSensitivity",
        "parent": "WEAPON",
        "realms": [
          "client"
        ],
        "description": "Allows you to adjust the mouse sensitivity. This hook only works if you haven't overridden <page>GM:AdjustMouseSensitivity</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "Sensitivity scale"
          }
        ]
      },
      {
        "name": "Ammo1",
        "parent": "WEAPON",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns how much of primary ammo the player has.",
        "returnValues": [
          {
            "type": "number",
            "description": "The amount of primary ammo player has"
          }
        ]
      },
      {
        "name": "Ammo2",
        "parent": "WEAPON",
        "realms": [
          "client",
          "server"
        ],
        "description": "Returns how much of secondary ammo the player has.",
        "returnValues": [
          {
            "type": "number",
            "description": "The amount of secondary ammo player has"
          }
        ]
      },
      {
        "name": "CalcView",
        "parent": "WEAPON",
        "realms": [
          "client"
        ],
        "description": "Allows you to adjust player view while this weapon in use.\n\nThis hook is called from the default implementation of <page>GM:CalcView</page> which is [here](https://github.com/Facepunch/garrysmod/blob/master/garrysmod/gamemodes/base/gamemode/cl_init.lua#L387-L395). Therefore, it will not be called if any other hook added to `CalcView` returns any value, or if the current gamemode overrides the default hook and does not call the SWEP function.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The owner of weapon"
          },
          {
            "name": "pos",
            "type": "Vector",
            "description": "Current position of players view"
          },
          {
            "name": "ang",
            "type": "Angle",
            "description": "Current angles of players view"
          },
          {
            "name": "fov",
            "type": "number",
            "description": "Current FOV of players view"
          }
        ],
        "returnValues": [
          {
            "type": "Vector",
            "description": "New position of players view"
          },
          {
            "type": "Angle",
            "description": "New angle of players view"
          },
          {
            "type": "number",
            "description": "New FOV of players view"
          }
        ]
      },
      {
        "name": "CalcViewModelView",
        "parent": "WEAPON",
        "realms": [
          "client"
        ],
        "description": "Allows overriding the position and angle of the viewmodel. This hook only works if you haven't overridden <page>GM:CalcViewModelView</page>.",
        "arguments": [
          {
            "name": "ViewModel",
            "type": "Entity",
            "description": "The viewmodel entity"
          },
          {
            "name": "OldEyePos",
            "type": "Vector",
            "description": "Original position (before viewmodel bobbing and swaying)"
          },
          {
            "name": "OldEyeAng",
            "type": "Angle",
            "description": "Original angle (before viewmodel bobbing and swaying)"
          },
          {
            "name": "EyePos",
            "type": "Vector",
            "description": "Current position"
          },
          {
            "name": "EyeAng",
            "type": "Angle",
            "description": "Current angle"
          }
        ],
        "returnValues": [
          {
            "type": "Vector",
            "description": "New position"
          },
          {
            "type": "Angle",
            "description": "New angle"
          }
        ]
      },
      {
        "name": "CanBePickedUpByNPCs",
        "parent": "WEAPON",
        "realms": [
          "server"
        ],
        "description": "Called when a Citizen NPC is looking around to a (better) weapon to pickup.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to allow this weapon to be picked up by NPCs."
          }
        ]
      },
      {
        "name": "CanPrimaryAttack",
        "parent": "WEAPON",
        "realms": [
          "client",
          "server"
        ],
        "description": "Helper function for checking for no ammo.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Can use primary attack"
          }
        ]
      },
      {
        "name": "CanSecondaryAttack",
        "parent": "WEAPON",
        "realms": [
          "client",
          "server"
        ],
        "description": "Helper function for checking for no ammo.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Can use secondary attack"
          }
        ]
      },
      {
        "name": "CustomAmmoDisplay",
        "parent": "WEAPON",
        "realms": [
          "client"
        ],
        "description": "Allows you to use any numbers you want for the ammo display on the HUD.\n\nCan be useful for weapons that don't use standard ammo.",
        "returnValues": [
          {
            "type": "table",
            "description": "The new ammo display settings. A table with 4 possible keys:\n* <page>boolean</page> Draw - Whether to draw the ammo display or not\n* <page>number</page> PrimaryClip - Amount of primary ammo in the clip\n* <page>number</page> PrimaryAmmo - Amount of primary ammo in the reserves\n* <page>number</page> SecondaryAmmo - Amount of secondary ammo. It is shown like alt-fire for SMG1 and AR2 are shown.\n\nThere is **no** SecondaryClip!"
          }
        ]
      },
      {
        "name": "Deploy",
        "parent": "WEAPON",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when player has just switched to this weapon.\n\n<note>Due to this hook being predicted, it is not called clientside in singleplayer at all, and in multiplayer it will not be called clientside if the weapon is switched with <page>Player:SelectWeapon</page> or the \"use\" console command, however it will be called clientside with the default weapon selection menu and when using <page>CUserCmd:SelectWeapon</page></note>",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to allow switching away from this weapon using `lastinv` command"
          }
        ]
      },
      {
        "name": "DoDrawCrosshair",
        "parent": "WEAPON",
        "realms": [
          "client"
        ],
        "description": "Called when the crosshair is about to get drawn, and allows you to override it.\n\nThis function will **not** be called if `SWEP.DrawCrosshair` is set to false or if player is affected by <page>Player:CrosshairDisable</page>.",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "description": "X coordinate of the crosshair."
          },
          {
            "name": "y",
            "type": "number",
            "description": "Y coordinate of the crosshair."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to override the default crosshair."
          }
        ]
      },
      {
        "name": "DoImpactEffect",
        "parent": "WEAPON",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called so the weapon can override the impact effects it makes.",
        "arguments": [
          {
            "name": "tr",
            "type": "table",
            "description": "A <page>Structures/TraceResult</page> from player's eyes to the impact point"
          },
          {
            "name": "damageType",
            "type": "number",
            "description": "The damage type of bullet. See <page>Enums/DMG</page>"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to not do the default thing - which is to call `UTIL_ImpactTrace` in C++"
          }
        ]
      },
      {
        "name": "DrawHUD",
        "parent": "WEAPON",
        "realms": [
          "client"
        ],
        "description": "This hook allows you to draw on screen while this weapon is in use.\n\nIf you want to draw a custom crosshair, consider using <page>WEAPON:DoDrawCrosshair</page> instead."
      },
      {
        "name": "DrawHUDBackground",
        "parent": "WEAPON",
        "realms": [
          "client"
        ],
        "description": "This hook allows you to draw on screen while this weapon is in use. This hook is called **before** <page>WEAPON:DrawHUD</page> and is equivalent of <page>GM:HUDPaintBackground</page>."
      },
      {
        "name": "DrawWeaponSelection",
        "parent": "WEAPON",
        "realms": [
          "client"
        ],
        "description": "This hook draws the selection icon in the weapon selection menu.",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "description": "X coordinate of the selection panel"
          },
          {
            "name": "y",
            "type": "number",
            "description": "Y coordinate of the selection panel"
          },
          {
            "name": "width",
            "type": "number",
            "description": "Width of the selection panel"
          },
          {
            "name": "height",
            "type": "number",
            "description": "Height of the selection panel"
          },
          {
            "name": "alpha",
            "type": "number",
            "description": "Alpha value of the selection panel"
          }
        ]
      },
      {
        "name": "DrawWorldModel",
        "parent": "WEAPON",
        "realms": [
          "client"
        ],
        "description": "Called when we are about to draw the world model.",
        "arguments": [
          {
            "name": "flags",
            "type": "number",
            "description": "The <page text=\"STUDIO_\">Enums/STUDIO</page> flags for this render operation."
          }
        ]
      },
      {
        "name": "DrawWorldModelTranslucent",
        "parent": "WEAPON",
        "realms": [
          "client"
        ],
        "description": "Called when we are about to draw the translucent world model.",
        "arguments": [
          {
            "name": "flags",
            "type": "number",
            "description": "The <page text=\"STUDIO_\">Enums/STUDIO</page> flags for this render operation."
          }
        ]
      },
      {
        "name": "Equip",
        "parent": "WEAPON",
        "realms": [
          "server"
        ],
        "description": "Called when a player or NPC has picked the weapon up.",
        "arguments": [
          {
            "name": "NewOwner",
            "type": "Entity",
            "description": "The one who picked the weapon up. Can be <page>Player</page> or <page>NPC</page>."
          }
        ]
      },
      {
        "name": "EquipAmmo",
        "parent": "WEAPON",
        "realms": [
          "server"
        ],
        "description": "The player has picked up the weapon and has taken the ammo from it.\nThe weapon will be removed immidiately after this call.",
        "arguments": [
          {
            "name": "ply",
            "type": "Player",
            "description": "The player who picked up the weapon"
          }
        ]
      },
      {
        "name": "FireAnimationEvent",
        "parent": "WEAPON",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called before firing animation events, such as muzzle flashes or shell ejections.\n\nThis will only be called serverside for 3000-range events, and clientside for 5000-range  and other events.",
        "arguments": [
          {
            "name": "pos",
            "type": "Vector",
            "description": "Position of the effect."
          },
          {
            "name": "ang",
            "type": "Angle",
            "description": "Angle of the effect."
          },
          {
            "name": "event",
            "type": "number",
            "description": "The event ID of happened even. See [this page](http://developer.valvesoftware.com/wiki/Animation_Events)."
          },
          {
            "name": "options",
            "type": "string",
            "description": "Name or options of the event."
          },
          {
            "name": "source",
            "type": "Entity",
            "description": "The source entity. This will be a viewmodel on the client and the weapon itself on the server"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to disable the effect."
          }
        ]
      },
      {
        "name": "FreezeMovement",
        "parent": "WEAPON",
        "realms": [
          "client"
        ],
        "description": "This hook allows you to freeze players screen.\n<note>Player will still be able to move or shoot</note>",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to freeze moving the view"
          }
        ]
      },
      {
        "name": "GetCapabilities",
        "parent": "WEAPON",
        "realms": [
          "server"
        ],
        "description": "This hook is for NPCs, you return what they should try to do with it.",
        "returnValues": [
          {
            "type": "number",
            "description": "A number defining what NPC should do with the weapon. Use the <page>Enums/CAP</page>."
          }
        ]
      },
      {
        "name": "GetNPCBulletSpread",
        "parent": "WEAPON",
        "realms": [
          "server"
        ],
        "description": "Called when the weapon is used by NPCs to determine how accurate the bullets fired should be.\n\nThe inaccuracy is simulated by changing the <page>NPC:GetAimVector</page> based on the value returned from this hook.",
        "arguments": [
          {
            "name": "proficiency",
            "type": "number",
            "description": "How proficient the NPC is with this gun. See <page>Enums/WEAPON_PROFICIENCY</page>"
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "An amount of degrees the bullets should deviate from the NPC's <page>NPC:GetAimVector</page>. Default is 15."
          }
        ]
      },
      {
        "name": "GetNPCBurstSettings",
        "parent": "WEAPON",
        "realms": [
          "server"
        ],
        "description": "Called when the weapon is used by NPCs to tell the NPC how to use this weapon. Controls how long the NPC can or should shoot continuously.",
        "returnValues": [
          {
            "type": "number",
            "description": "Minimum amount of bullets per burst. Default is 1."
          },
          {
            "type": "number",
            "description": "Maximum amount of bullets per burst. Default is 1."
          },
          {
            "type": "number",
            "description": "Delay between each shot, aka firerate. Default is 1."
          }
        ]
      },
      {
        "name": "GetNPCRestTimes",
        "parent": "WEAPON",
        "realms": [
          "server"
        ],
        "description": "Called when the weapon is used by NPCs to tell the NPC how to use this weapon. Controls amount of time the NPC can rest (not shoot) between bursts.",
        "returnValues": [
          {
            "type": "number",
            "description": "Minimum amount of time the NPC can rest (not shoot) between bursts in seconds. Default is `0.3` seconds."
          },
          {
            "type": "number",
            "description": "Maximum amount of time the NPC can rest (not shoot) between bursts in seconds. Default is `0.66` seconds."
          }
        ]
      },
      {
        "name": "GetTracerOrigin",
        "parent": "WEAPON",
        "realms": [
          "client"
        ],
        "description": "Allows you to override where the tracer effect comes from. ( Visual bullets )",
        "returnValues": [
          {
            "type": "Vector",
            "description": "The new position to start tracer effect from"
          }
        ]
      },
      {
        "name": "GetViewModelPosition",
        "parent": "WEAPON",
        "realms": [
          "client"
        ],
        "description": "This hook allows you to adjust view model position and angles.",
        "arguments": [
          {
            "name": "EyePos",
            "type": "Vector",
            "description": "Current position"
          },
          {
            "name": "EyeAng",
            "type": "Angle",
            "description": "Current angle"
          }
        ],
        "returnValues": [
          {
            "type": "Vector",
            "description": "New position"
          },
          {
            "type": "Angle",
            "description": "New angle"
          }
        ]
      },
      {
        "name": "Holster",
        "parent": "WEAPON",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when weapon tries to holster.\n\n<note>This will only be called serverside when using <page>Player:SelectWeapon</page> as that function immediately switches the weapon out of prediction.</note>\n\n<bug issue=\"2854\">This is called twice for every holster clientside, one in <page>Prediction</page> and one not.</bug>\n\n<bug issue=\"3133\">Before <page>WEAPON:OnRemove</page> is called, this function is only called serverside.</bug>",
        "arguments": [
          {
            "name": "weapon",
            "type": "Entity",
            "description": "The weapon we are trying switch to."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to allow weapon to holster.\n\nThis will not have an effect if weapon was switched away from using <page>Player:SetActiveWeapon</page>"
          }
        ]
      },
      {
        "name": "HUDShouldDraw",
        "parent": "WEAPON",
        "realms": [
          "client"
        ],
        "description": "This hook determines which parts of the HUD to draw.",
        "arguments": [
          {
            "name": "element",
            "type": "string",
            "description": "The HUD element in question"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return false to hide this HUD element"
          }
        ]
      },
      {
        "name": "Initialize",
        "parent": "WEAPON",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when the weapon entity is created.\n\n<note><page>Entity:GetOwner</page> will return NULL at this point because the weapon is not equpped by a player or NPC yet. Use <page>WEAPON:Equip</page> or <page>WEAPON:Deploy</page> if you need the owner to be valid.</note>\n\n<bug issue=\"3015\">This is not called serverside after a quicksave.</bug>"
      },
      {
        "name": "KeyValue",
        "parent": "WEAPON",
        "realms": [
          "server"
        ],
        "description": "Called when the engine sets a value for this scripted weapon.\n\nSee <page>GM:EntityKeyValue</page> for a hook that works for all entities.\n\n\nSee <page>ENTITY:KeyValue</page> for an  hook that works for scripted entities.",
        "arguments": [
          {
            "name": "key",
            "type": "string",
            "description": "The key that was affected."
          },
          {
            "name": "value",
            "type": "string",
            "description": "The new value."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to suppress this KeyValue or return false or nothing to apply this key value."
          }
        ]
      },
      {
        "name": "OnDrop",
        "parent": "WEAPON",
        "realms": [
          "server"
        ],
        "description": "Called when weapon is dropped by <page>Player:DropWeapon</page>.\n\nSee also <page>WEAPON:OwnerChanged</page>."
      },
      {
        "name": "OnReloaded",
        "parent": "WEAPON",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called whenever the weapons Lua script is reloaded."
      },
      {
        "name": "OnRemove",
        "parent": "WEAPON",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when the swep is about to be removed."
      },
      {
        "name": "OnRestore",
        "parent": "WEAPON",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when the weapon entity is reloaded from a Source Engine save (not the Sandbox saves or dupes) or on a changelevel (for example Half-Life 2 campaign level transitions).\n\nFor the <page>duplicator</page> callbacks, see <page>ENTITY:OnDuplicated</page>.\n\nSee also <page>saverestore</page> for relevant functions."
      },
      {
        "name": "OwnerChanged",
        "parent": "WEAPON",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when weapon is dropped or picked up by a new player. This can be called clientside for all players on the server if the weapon has no owner and is picked up.\n\nSee also <page>WEAPON:OnDrop</page>."
      },
      {
        "name": "PostDrawViewModel",
        "parent": "WEAPON",
        "realms": [
          "client"
        ],
        "description": "Called after the view model has been drawn while the weapon in use. This hook is called from the default implementation of <page>GM:PostDrawViewModel</page>, and as such, will not occur if it has been overridden.\n\n<page>WEAPON:ViewModelDrawn</page> is an alternative hook which is always called before <page>GM:PostDrawViewModel</page>.",
        "arguments": [
          {
            "name": "vm",
            "type": "Entity",
            "description": "This is the view model entity after it is drawn"
          },
          {
            "name": "weapon",
            "type": "Weapon",
            "description": "This is the weapon that is from the view model (same as self)"
          },
          {
            "name": "ply",
            "type": "Player",
            "description": "The owner of the view model"
          }
        ]
      },
      {
        "name": "PreDrawViewModel",
        "parent": "WEAPON",
        "realms": [
          "client"
        ],
        "description": "Allows you to modify viewmodel while the weapon in use before it is drawn. This hook only works if you haven't overridden <page>GM:PreDrawViewModel</page>.",
        "arguments": [
          {
            "name": "vm",
            "type": "Entity",
            "description": "This is the view model entity before it is drawn."
          },
          {
            "name": "weapon",
            "type": "Weapon",
            "description": "This is the weapon that is from the view model."
          },
          {
            "name": "ply",
            "type": "Player",
            "description": "The the owner of the view model."
          }
        ]
      },
      {
        "name": "PrimaryAttack",
        "parent": "WEAPON",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when primary attack button ( +attack ) is pressed.\n\nWhen in singleplayer, this function is only called in the server realm. When in multiplayer, the hook will be called on both the server and the client in order to allow for <page>Prediction</page>.\n\nYou can force the hook to always be called on client like this:\n\n```\nif ( game.SinglePlayer() ) then self:CallOnClient( \"PrimaryAttack\" ) end\n```\n\n\nNote that due to prediction, in multiplayer SWEP:PrimaryAttack is called multiple times per one \"shot\" with the gun. To work around that, use <page>Global.IsFirstTimePredicted</page>."
      },
      {
        "name": "PrintWeaponInfo",
        "parent": "WEAPON",
        "realms": [
          "client"
        ],
        "description": "A convenience function that draws the weapon info box, used in <page>WEAPON:DrawWeaponSelection</page>.",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "description": "The x co-ordinate of box position"
          },
          {
            "name": "y",
            "type": "number",
            "description": "The y co-ordinate of box position"
          },
          {
            "name": "alpha",
            "type": "number",
            "description": "Alpha value for the box"
          }
        ]
      },
      {
        "name": "Reload",
        "parent": "WEAPON",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when the reload key ( +reload ) is pressed."
      },
      {
        "name": "RenderScreen",
        "parent": "WEAPON",
        "realms": [
          "client"
        ],
        "description": "Called every frame just before <page>GM:RenderScene</page>.\n\nUsed by the Tool Gun to render view model screens (<page>TOOL:DrawToolScreen</page>).\n\n\n<note>Materials rendered in this hook require $ignorez parameter to draw properly.</note>"
      },
      {
        "name": "SecondaryAttack",
        "parent": "WEAPON",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when secondary attack button ( +attack2 ) is pressed.\n\nFor issues with this hook being called rapidly on the client side, see the global function <page>Global.IsFirstTimePredicted</page>."
      },
      {
        "name": "SetupDataTables",
        "parent": "WEAPON",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when the SWEP should set up its <page text=\" Data Tables\">Networking_Entities</page>."
      },
      {
        "name": "SetWeaponHoldType",
        "parent": "WEAPON",
        "realms": [
          "client",
          "server"
        ],
        "description": "Sets the hold type of the weapon. This must be called on **both** the server and the client to work properly.\n\n**NOTE:** You should avoid calling this function and call <page>Weapon:SetHoldType</page> now.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "Name of the hold type. You can find all default hold types <page text=\"here\">Hold_Types</page>"
          }
        ]
      },
      {
        "name": "ShootBullet",
        "parent": "WEAPON",
        "realms": [
          "client",
          "server"
        ],
        "description": "A convenient function to shoot bullets.",
        "arguments": [
          {
            "name": "damage",
            "type": "number",
            "description": "The damage of the bullet"
          },
          {
            "name": "num_bullets",
            "type": "number",
            "description": "Amount of bullets to shoot"
          },
          {
            "name": "aimcone",
            "type": "number",
            "description": "Spread of bullets"
          },
          {
            "name": "ammo_type",
            "type": "string",
            "default": "self.Primary.Ammo",
            "description": "Ammo type of the bullets"
          },
          {
            "name": "force",
            "type": "number",
            "default": "1",
            "description": "Force of the bullets"
          },
          {
            "name": "tracer",
            "type": "number",
            "default": "5",
            "description": "Show a tracer on every x bullets"
          }
        ]
      },
      {
        "name": "ShootEffects",
        "parent": "WEAPON",
        "realms": [
          "client",
          "server"
        ],
        "description": "A convenience function to create shoot effects."
      },
      {
        "name": "ShouldDrawViewModel",
        "parent": "WEAPON",
        "realms": [
          "client"
        ],
        "description": "Called to determine if the view model should be drawn or not.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to draw the view model, false otherwise."
          }
        ]
      },
      {
        "name": "ShouldDropOnDie",
        "parent": "WEAPON",
        "realms": [
          "server"
        ],
        "description": "Should this weapon be dropped when its owner dies?\n\nThis only works if the player has <page>Player:ShouldDropWeapon</page> set to true.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to drop the weapon, false otherwise. Default ( if you don't return anything ) is false."
          }
        ]
      },
      {
        "name": "TakePrimaryAmmo",
        "parent": "WEAPON",
        "realms": [
          "client",
          "server"
        ],
        "description": "A convenience function to remove primary ammo from clip.",
        "arguments": [
          {
            "name": "amount",
            "type": "number",
            "description": "Amount of primary ammo to remove"
          }
        ]
      },
      {
        "name": "TakeSecondaryAmmo",
        "parent": "WEAPON",
        "realms": [
          "client",
          "server"
        ],
        "description": "A convenience function to remove secondary ammo from clip.",
        "arguments": [
          {
            "name": "amount",
            "type": "number",
            "description": "How much of secondary ammo to remove"
          }
        ]
      },
      {
        "name": "Think",
        "parent": "WEAPON",
        "realms": [
          "client",
          "server"
        ],
        "description": "Called when the weapon thinks.\n\nThis hook won't be called during the deploy animation and when using <page>Weapon:DefaultReload</page>.\n\nDespite being a predicted hook, this hook is called clientside in single player (for your convenience), however it will not be recognized as a predicted hook via <page>Player:GetCurrentCommand</page>, and will run more often in this case.\n\nThis hook will be called before Player movement is processed on the client, and after on the server.\n\n<note>This hook only runs while the weapon is in players hands. It does not run while it is carried by an NPC.</note>\n<bug issue=\"2855\">This will not be run during deploy animations after a serverside-only deploy. This usually happens after picking up and dropping an object with +use.</bug>"
      },
      {
        "name": "TranslateActivity",
        "parent": "WEAPON",
        "realms": [
          "client",
          "server"
        ],
        "description": "Translate a player's Activity into a weapon's activity, depending on how you want the player to be holding the weapon.\n\nFor example, ACT_MP_RUN becomes ACT_HL2MP_RUN_PISTOL.",
        "arguments": [
          {
            "name": "act",
            "type": "number",
            "description": "The activity to translate"
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The translated activity"
          }
        ]
      },
      {
        "name": "TranslateFOV",
        "parent": "WEAPON",
        "realms": [
          "client",
          "server"
        ],
        "description": "Allows to change players field of view while player holds the weapon.\n\n<note>This hook must be defined shared and return same value on both to properly affect Area Portals.</note>",
        "arguments": [
          {
            "name": "fov",
            "type": "number",
            "description": "The current/default FOV."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The target FOV."
          }
        ]
      },
      {
        "name": "ViewModelDrawn",
        "parent": "WEAPON",
        "realms": [
          "client"
        ],
        "description": "Called straight after the view model has been drawn. This is called before <page>GM:PostDrawViewModel</page> and <page>WEAPON:PostDrawViewModel</page>.",
        "arguments": [
          {
            "name": "ViewModel",
            "type": "Entity",
            "description": "Players view model"
          }
        ]
      }
    ]
  }
]