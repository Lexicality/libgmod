[
  {
    "description": "Used to show an icon for any of the [Garry's Mod Steam achievements](http://steamcommunity.com/stats/GarrysMod/achievements).\n\nIf the viewer has not unlocked the achievement on Steam, the icon will be grayed out.",
    "name": "AchievementIcon",
    "parent": "Panel"
  },
  {
    "description": "Used to show a player's Steam avatar. You are recommended but not limited to pick one of the following sizes: 16, 32, 64, 84, 128, 184.",
    "name": "AvatarImage",
    "parent": "Panel"
  },
  {
    "description": "<deprecated>You should be using <page>HTML</page> panel, which this is an alias of.</deprecated>\n\nBase panel for elements using the [Awesomium](http://www.awesomium.com) UI engine.\n\n<note>On the `x86-64` beta this panel isn't actually Awesomium, its the same as `HTML` (`HtmlPanel`)</note>",
    "name": "Awesomium",
    "parent": "Panel"
  },
  {
    "description": "<deprecated>\nOnly exists for backwards compatibility with <page>Panel:SetActionFunction</page>. Use <page>DButton</page> instead.\n</deprecated>\nCreates a button that players can click on.\n[View source](https://github.com/Facepunch/garrysmod/blob/dfdafba0f04e75be122961291a56d9c1714a3d8a/garrysmod/lua/vgui/dbutton.lua#L181-L193)",
    "name": "Button",
    "parent": "DButton"
  },
  {
    "description": "<internal>Use <page>DCheckBoxLabel</page> instead.</internal>\nEngine checkbox",
    "name": "CheckButton",
    "parent": ""
  },
  {
    "description": "<internal></internal>\n\nThe ContentHeader is used internally by the Spawnmenu and only use this if you know\nwhat you're doing because you can break a few things with it.",
    "functions": [
      {
        "arguments": [
          {
            "description": "",
            "name": "style",
            "type": "string"
          },
          {
            "default": "PopulateContent",
            "description": "A Populate Hook like PopulateEntities",
            "name": "hookname",
            "type": "string"
          }
        ],
        "description": "Creates a <page>Global.DermaMenu</page> and adds a delete option before opening the menu",
        "name": "OpenMenu",
        "parent": "ContentHeader",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contentheader.lua",
          "lineEnd": 105,
          "lineStart": 96
        }
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "bigtable",
            "type": "table"
          }
        ],
        "description": "",
        "name": "ToTable",
        "parent": "ContentHeader",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contentheader.lua",
          "lineEnd": 53,
          "lineStart": 44
        }
      }
    ],
    "name": "ContentHeader",
    "parent": "DLabelEditable"
  },
  {
    "description": "The spawn icon used for SWEPs and other SENTs, commonly featured as part of the spawn menu.\nDo note that at least one of your ContentIcon's parents must either be an <page>EditablePanel</page> or derived from it\n(like a <page>DFrame</page>, for example), else it won't be able to focus and thus be unclickable.\n\nThis control only exists in Sandbox derived gamemodes.",
    "functions": [
      {
        "description": "An <page>Global.AccessorFunc</page> that returns the color set by <page>ContentIcon:SetColor</page>",
        "name": "GetColor",
        "parent": "ContentIcon",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "See <page>Color</page>",
            "type": "table"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contenticon.lua",
          "lineStart": 13
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns the content type used to save and restore the content icon in a spawnlist.",
        "name": "GetContentType",
        "parent": "ContentIcon",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The content type, for example \"entity\" or \"weapon\".",
            "type": "string"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contenticon.lua",
          "lineStart": 14
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns a table of weapon classes for the content icon with \"NPC\" content type to be randomly chosen from when user tries to spawn the NPC.",
        "name": "GetNPCWeapon",
        "parent": "ContentIcon",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "A table of weapon classes to be chosen from when user tries to spawn the NPC.",
            "type": "table"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contenticon.lua",
          "lineStart": 16
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns the internal \"name\" for the content icon, usually a class name for an entity.",
        "name": "GetSpawnName",
        "parent": "ContentIcon",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Internal \"name\" to be used when user left clicks the icon.",
            "type": "string"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contenticon.lua",
          "lineStart": 15
        }
      },
      {
        "description": "A hook for override, by default does nothing. Called when user right clicks on the content icon, you are supposed to open a <page>Global.DermaMenu</page> here with additional options.",
        "name": "OpenMenu",
        "parent": "ContentIcon",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contenticon.lua",
          "lineEnd": 105,
          "lineStart": 104
        }
      },
      {
        "arguments": [
          {
            "description": "Whether this content should be admin only or not",
            "name": "adminOnly",
            "type": "boolean"
          }
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets whether the content item is admin only. This makes the icon to display a admin icon in the top left corner of the icon.",
        "name": "SetAdminOnly",
        "parent": "ContentIcon",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contenticon.lua",
          "lineStart": 17
        }
      },
      {
        "arguments": [
          {
            "description": "The color to set. See <page>Color</page>",
            "name": "clr",
            "type": "table"
          }
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the color for the content icon. Currently is not used by the content icon panel.",
        "name": "SetColor",
        "parent": "ContentIcon",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contenticon.lua",
          "lineStart": 13
        }
      },
      {
        "arguments": [
          {
            "description": "The content type, for example \"entity\" or \"weapon\"",
            "name": "type",
            "type": "string"
          }
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the content type used to save and restore the content icon in a spawnlist.",
        "name": "SetContentType",
        "parent": "ContentIcon",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contenticon.lua",
          "lineStart": 14
        }
      },
      {
        "arguments": [
          {
            "description": "Path to the icon to use.",
            "name": "path",
            "type": "string"
          }
        ],
        "description": "Sets the material to be displayed as the content icon.",
        "name": "SetMaterial",
        "parent": "ContentIcon",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contenticon.lua",
          "lineEnd": 88,
          "lineStart": 66
        }
      },
      {
        "arguments": [
          {
            "description": "\"Nice\" name to display.",
            "name": "name",
            "type": "string"
          }
        ],
        "description": "Sets the tool tip and the \"nice\" name to be displayed by the content icon.",
        "name": "SetName",
        "parent": "ContentIcon",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contenticon.lua",
          "lineEnd": 64,
          "lineStart": 58
        }
      },
      {
        "arguments": [
          {
            "description": "A table of weapon classes to be chosen from when user tries to spawn the NPC.",
            "name": "weapons",
            "type": "table"
          }
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets a table of weapon classes for the content icon with \"NPC\" content type to be randomly chosen from when user tries to spawn the NPC.",
        "name": "SetNPCWeapon",
        "parent": "ContentIcon",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contenticon.lua",
          "lineStart": 16
        }
      },
      {
        "arguments": [
          {
            "description": "Internal \"name\" to be used when user left clicks the icon.",
            "name": "name",
            "type": "string"
          }
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the internal \"name\" for the content icon, usually a class name for an entity.",
        "name": "SetSpawnName",
        "parent": "ContentIcon",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contenticon.lua",
          "lineStart": 15
        }
      }
    ],
    "name": "ContentIcon",
    "parent": "DButton"
  },
  {
    "description": "<internal></internal>\n\nThe ContentSidebar is internally used by the spawnmenu and manages things like the Spawnmenu Toolbar.\nIt internally uses a DTree which is accessible with ContentSidebar .Tree.\nWhen <page>ContentSidebar:EnableModify</page> has been called ContentSidebar.Toolbox will return a <page>ContentSidebarToolbox</page>",
    "functions": [
      {
        "arguments": [
          {
            "description": "",
            "name": "style",
            "type": "string"
          },
          {
            "default": "PopulateContent",
            "description": "A Populate Hook like PopulateEntities",
            "name": "hookname",
            "type": "string"
          }
        ],
        "description": "Creates a Save Notification which will be shown when <page>SANDBOX:SpawnlistContentChanged</page> has been called.",
        "name": "CreateSaveNotification",
        "parent": "ContentSidebar",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contentsidebar.lua",
          "lineEnd": 84,
          "lineStart": 42
        }
      },
      {
        "description": "Internally calls <page>ContentSidebar:EnableSearch</page>, <page>ContentSidebar:CreateSaveNotification</page> and creates a ContentSidebarToolbox which is accessible under ContentSidebar.Toolbox. Call the Hook <page>SANDBOX:OpenToolbox</page> to open the created Toolbox",
        "name": "EnableModify",
        "parent": "ContentSidebar",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contentsidebar.lua",
          "lineEnd": 40,
          "lineStart": 25
        }
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "style",
            "type": "string"
          },
          {
            "default": "PopulateContent",
            "description": "A Populate Hook like PopulateEntities",
            "name": "hookname",
            "type": "string"
          }
        ],
        "description": "Creates a search bar which will be displayed over the Nodes.",
        "name": "EnableSearch",
        "parent": "ContentSidebar",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contentsidebar.lua",
          "lineEnd": 23,
          "lineStart": 20
        }
      }
    ],
    "name": "ContentSidebar",
    "parent": "DPanel"
  },
  {
    "description": "<internal></internal>\nThe ContentSidebarToolbox is internally used by the <page>ContentSidebar</page> and is used to change the icon of a category.\nIt internally consists of a <page>DTextEntry</page>, <page>DPanel</page>, <page>DImageButton</page>, <page>Panel</page>, <page>ContentHeader</page> and a <page>DIconBrowser</page>",
    "name": "ContentSidebarToolbox",
    "parent": "DDrawer"
  },
  {
    "description": "A base for all context menu panels ( The ones used for tool options in sandbox )",
    "functions": [
      {
        "arguments": [
          {
            "description": "A two-membered table:\n* <page>string</page> convar - The console variable to use. Calls <page>ContextBase:SetConVar</page>.\n* <page>string</page> label - The text to display inside the control's label.",
            "name": "contextData",
            "type": "table"
          }
        ],
        "description": "Called by spawnmenu functions (when creating a context menu) to fill this control with data.",
        "name": "ControlValues",
        "parent": "ContextBase",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/contextbase.lua",
          "lineEnd": 25,
          "lineStart": 20
        }
      },
      {
        "description": "Returns the <page>ConVar</page> for the panel to change/handle, set by <page>ContextBase:SetConVar</page>",
        "name": "ConVar",
        "parent": "ContextBase",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The <page>ConVar</page> for the panel to change.",
            "type": "string"
          }
        ],
        "source": {
          "file": "lua/vgui/contextbase.lua",
          "lineEnd": 18,
          "lineStart": 16
        }
      },
      {
        "arguments": [
          {
            "description": "The <page>ConVar</page> for the panel to change.",
            "name": "cvar",
            "type": "string"
          }
        ],
        "description": "Sets the <page>ConVar</page> for the panel to change/handle.",
        "name": "SetConVar",
        "parent": "ContextBase",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/contextbase.lua",
          "lineEnd": 14,
          "lineStart": 12
        }
      },
      {
        "description": "You should override this function and use it to check whether your convar value changed.",
        "name": "TestForChanges",
        "parent": "ContextBase",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/contextbase.lua",
          "lineEnd": 45,
          "lineStart": 40
        }
      }
    ],
    "name": "ContextBase",
    "parent": "Panel"
  },
  {
    "description": "Used by the context menu in sandbox.",
    "functions": [
      {
        "arguments": [
          {
            "description": "The control type to add. The complete list is:\n* header\n* textbox\n* label\n* checkbox/toggle\n* slider\n* propselect\n* matselect\n* ropematerial\n* button\n* numpad\n* color\n* combobox\n* listbox\n* materialgallery",
            "name": "type",
            "type": "string"
          },
          {
            "description": "Each control takes their own table structure. You may search \"AddControl\" on GitHub for examples.\n\nHere is a full list of each type and the table members it requires:\n\n* header\n* description\n\n* textbox:\n* label (def: \"Untitled\")\n* command\n\n* label:\n* text\n\n* checkbox, toggle (same thing):\n* label (def: \"Untitled\")\n* command\n* help (boolean, if true assumes label is a language string (`#tool.toolname.stuff`) and adds `.help` at the end)\n\n* slider: (<page>DForm:NumSlider</page>)\n* type (optional string, if equals `float` then 2 digits after the decimal will be used, otherwise 0)\n* label (def: `Untitled`)\n* command\n* min (def: `0`)\n* max (def: `100`)\n* help (boolean, see above)\n\n* propselect:\n* (data goes directly to PropSelect's :ControlValues(data))\n\n* matselect:\n* (data goes directly to MatSelect's :ControlValues(data))\n\n* ropematerial:\n* convar (notice: NOT called command this time!)\n\n* button:\n* label / text (if label is missing will use text. Def: `No Label`)\n* command\n\n* numpad:\n* command\n* command2\n* label\n* label2\n\n* color:\n* label\n* red (convar)\n* green (convar)\n* blue (convar)\n* alpha (convar)\n\n* combobox:\n* menubutton (if doesn't equal \"1\", becomes a listbox)\n* folder\n* options (optional, ha)\n* cvars (optional)\n\n* listbox:\n* height (if set, becomes <page>DListView</page>, otherwise is <page>CtrlListBox</page>)\n* label (def: `unknown`)\n* options (optional)\n\n* materialgallery:\n* width (def: `32`)\n* height (def: `32`)\n* rows (def: `4`)\n* convar\n* options",
            "name": "controlinfo",
            "type": "table"
          }
        ],
        "description": "<deprecated>It is recommended to use <page>DForm</page>'s members instead.</deprecated>\n\nAdds a control to the control panel.",
        "name": "AddControl",
        "parent": "ControlPanel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Returns created control",
            "type": "Panel"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controlpanel.lua",
          "lineEnd": 431,
          "lineStart": 148
        }
      },
      {
        "arguments": [
          {
            "description": "Panel to add as an item to the control panel.",
            "name": "panel",
            "type": "Panel"
          }
        ],
        "description": "Adds an item by calling <page>DForm:AddItem</page>.",
        "name": "AddPanel",
        "parent": "ControlPanel",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controlpanel.lua",
          "lineEnd": 34,
          "lineStart": 29
        }
      },
      {
        "description": "<deprecated></deprecated>\n\nAlias of <page>Panel:Clear</page>.",
        "name": "ClearControls",
        "parent": "ControlPanel",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controlpanel.lua",
          "lineEnd": 21,
          "lineStart": 19
        }
      },
      {
        "arguments": [
          {
            "description": "The label for this color picker.",
            "name": "label",
            "type": "string"
          },
          {
            "description": "Name of the <page>convar</page> that will store the R component of the selected color.",
            "name": "convarR",
            "type": "string"
          },
          {
            "description": "Name of the <page>convar</page> that will store the G component of the selected color.",
            "name": "convarG",
            "type": "string"
          },
          {
            "description": "Name of the <page>convar</page> that will store the B component of the selected color.",
            "name": "convarB",
            "type": "string"
          },
          {
            "description": "Name of the <page>convar</page> that will store the A component of the selected color.",
            "name": "convarA",
            "type": "string"
          }
        ],
        "description": "Creates a <page>CtrlColor</page> (a color picker) panel and adds it as an <page text=\"item\">ControlPanel:AddPanel</page>.",
        "name": "ColorPicker",
        "parent": "ControlPanel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The created <page>CtrlColor</page> panel.",
            "type": "Panel"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controlpanel.lua",
          "lineEnd": 113,
          "lineStart": 94
        }
      },
      {
        "arguments": [
          {
            "description": "A two-membered table:\n* <page>boolean</page> closed - Sets if the control panel should be unexpanded.\n* <page>string</page> label - The text to display inside the control's label.",
            "name": "data",
            "type": "table"
          }
        ],
        "description": "Sets control values of the control panel.",
        "name": "ControlValues",
        "parent": "ControlPanel",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controlpanel.lua",
          "lineEnd": 145,
          "lineStart": 138
        }
      },
      {
        "arguments": [
          {
            "description": "The builder function.\n\n<callback>\n<arg type=\"ControlPanel\" name=\"panelToPopulate\"></arg>\n</callback>",
            "name": "func",
            "type": "function"
          }
        ],
        "description": "Calls the given function with this panel as the only argument. Used by the spawnmenu to populate the control panel.\n\n<deprecated>This is dumb. Just call the builder function directly.</deprecated>",
        "name": "FillViaFunction",
        "parent": "ControlPanel",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controlpanel.lua",
          "lineEnd": 136,
          "lineStart": 132
        }
      },
      {
        "description": "Returns this control panel.",
        "name": "GetEmbeddedPanel",
        "parent": "ControlPanel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The same control panel the function is being called on.",
            "type": "ControlPanel"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controlpanel.lua",
          "lineEnd": 27,
          "lineStart": 23
        }
      },
      {
        "arguments": [
          {
            "description": "The label for the left key binder.",
            "name": "label1",
            "type": "string"
          },
          {
            "description": "The name of the <page>convar</page> that will store the key code for player selected key of the left key binder.",
            "name": "convar1",
            "type": "string"
          },
          {
            "default": "nil",
            "description": "If set and `convar2` is set, the label for the right key binder.",
            "name": "label2",
            "type": "string"
          },
          {
            "default": "nil",
            "description": "If set and `label2` is set, the name of the <page>convar</page> that will store the key code for player selected key of the right key binder.",
            "name": "convar2",
            "type": "string"
          }
        ],
        "description": "Creates a <page>CtrlNumPad</page> (a Sandbox key binder) panel and adds it as an <page text=\"item\">ControlPanel:AddPanel</page>.",
        "name": "KeyBinder",
        "parent": "ControlPanel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The created <page>CtrlNumPad</page> panel.",
            "type": "Panel"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controlpanel.lua",
          "lineEnd": 92,
          "lineStart": 76
        }
      },
      {
        "arguments": [
          {
            "description": "Calls <page>MatSelect</page>:<page text=\"SetConVar\">ContextBase:SetConVar</page> with this value.",
            "name": "convar",
            "type": "string"
          },
          {
            "default": "nil",
            "description": "If specified, calls <page>MatSelect:AddMaterial</page>(key, value) for each table entry. If the table key is a number, the function will instead be called with the value as both arguments.",
            "name": "options",
            "type": "table"
          },
          {
            "default": "nil",
            "description": "If specified, calls <page>MatSelect:SetAutoHeight</page> with this value.",
            "name": "autostretch",
            "type": "boolean"
          },
          {
            "default": "nil",
            "description": "If specified, calls <page>MatSelect:SetItemWidth</page> with this value.",
            "name": "width",
            "type": "number"
          },
          {
            "default": "nil",
            "description": "If specified, calls <page>MatSelect:SetItemHeight</page> with this value.",
            "name": "height",
            "type": "number"
          }
        ],
        "description": "Creates a <page>MatSelect</page> panel and adds it as an <page text=\"item\">ControlPanel:AddPanel</page>.",
        "name": "MatSelect",
        "parent": "ControlPanel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The created MatSelect panel.",
            "type": "MatSelect"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controlpanel.lua",
          "lineEnd": 57,
          "lineStart": 36
        }
      },
      {
        "arguments": [
          {
            "description": "The <page text=\"preset\">presets</page> group. Must be unique.",
            "name": "group",
            "type": "string"
          },
          {
            "description": "A table of <page>convar</page> names as keys and their defaults as the values. Typically the output of <page>Tool:BuildConVarList</page>.",
            "name": "cvarList",
            "type": "table"
          }
        ],
        "description": "Creates a <page>ControlPresets</page> panel and adds it as an <page text=\"item\">ControlPanel:AddPanel</page>.",
        "name": "ToolPresets",
        "parent": "ControlPanel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The created <page>ControlPresets</page> panel.",
            "type": "Panel"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controlpanel.lua",
          "lineEnd": 74,
          "lineStart": 59
        }
      }
    ],
    "name": "ControlPanel",
    "parent": "DForm"
  },
  {
    "description": "A preset manager, found at the top of almost every default tool's C-menu.\n\nThis control only exists in Sandbox derived gamemodes.",
    "functions": [
      {
        "arguments": [
          {
            "description": "The convar to add.",
            "name": "convar",
            "type": "string"
          }
        ],
        "description": "Adds a convar to be managed by this control.",
        "name": "AddConVar",
        "parent": "ControlPresets",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controls/control_presets.lua",
          "lineEnd": 114,
          "lineStart": 110
        }
      },
      {
        "arguments": [
          {
            "description": "Name",
            "name": "strName",
            "type": "string"
          },
          {
            "description": "data",
            "name": "data",
            "type": "any"
          }
        ],
        "description": "Adds option to the <page>DComboBox</page> subelement with <page>DComboBox:AddChoice</page> then adds it to the `options` subtable",
        "name": "AddOption",
        "parent": "ControlPresets",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controls/control_presets.lua",
          "lineEnd": 54,
          "lineStart": 48
        }
      },
      {
        "description": "Runs <page>Panel:Clear</page> on the Internal <page>DComboBox</page>",
        "name": "Clear",
        "parent": "ControlPresets",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controls/control_presets.lua",
          "lineEnd": 54,
          "lineStart": 48
        }
      },
      {
        "description": "Get a list of all Console Variables being managed by this panel.",
        "name": "GetConVars",
        "parent": "ControlPresets",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "numbered table of convars",
            "type": "table"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controls/control_presets.lua",
          "lineEnd": 120,
          "lineStart": 116
        }
      },
      {
        "arguments": [
          {
            "description": "Name",
            "name": "index",
            "type": "number"
          },
          {
            "description": "",
            "name": "value",
            "type": "any"
          },
          {
            "description": "",
            "name": "data",
            "type": "table"
          }
        ],
        "description": "Checks if Data is valid then uses <page>Global.pairs</page> to iterate over the data parameter and run each entry using <page>Global.RunConsoleCommand</page>\n<validate>Index and Value parameters appear to not be used. Further testing should be done to confirm </validate>",
        "name": "OnSelect",
        "parent": "ControlPresets",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controls/control_presets.lua",
          "lineEnd": 70,
          "lineStart": 62
        }
      },
      {
        "description": "Creates and opens <page>PresetEditor</page>",
        "name": "OpenPresetEditor",
        "parent": "ControlPresets",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controls/control_presets.lua",
          "lineEnd": 108,
          "lineStart": 97
        }
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "text",
            "type": "string"
          }
        ],
        "name": "QuickSaveInternal",
        "parent": "ControlPresets",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controls/control_presets.lua",
          "lineEnd": 80,
          "lineStart": 72
        }
      },
      {
        "name": "QuickSavePreset",
        "parent": "ControlPresets",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controls/control_presets.lua",
          "lineEnd": 95,
          "lineStart": 82
        }
      },
      {
        "name": "ReloadPresets",
        "parent": "ControlPresets",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controls/control_presets.lua",
          "lineEnd": 149,
          "lineStart": 129
        }
      },
      {
        "arguments": [
          {
            "description": "The text to put in the label",
            "name": "name",
            "type": "string"
          }
        ],
        "description": "Set the name label text.",
        "name": "SetLabel",
        "parent": "ControlPresets",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controls/control_presets.lua",
          "lineEnd": 46,
          "lineStart": 42
        }
      },
      {
        "arguments": [
          {
            "description": "Options",
            "name": "Options",
            "type": "table"
          }
        ],
        "description": "Uses <page>table.Merge</page> to combine the provided table into the `Options` subtable",
        "name": "SetOptions",
        "parent": "ControlPresets",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controls/control_presets.lua",
          "lineEnd": 60,
          "lineStart": 56
        }
      },
      {
        "arguments": [
          {
            "description": "Name of preset to set",
            "name": "strName",
            "type": "string"
          }
        ],
        "name": "SetPreset",
        "parent": "ControlPresets",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controls/control_presets.lua",
          "lineEnd": 127,
          "lineStart": 122
        }
      },
      {
        "description": "Alias of <page>ControlPresets:ReloadPresets</page>",
        "name": "Update",
        "parent": "ControlPresets",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controls/control_presets.lua",
          "lineEnd": 54,
          "lineStart": 48
        }
      }
    ],
    "name": "ControlPresets",
    "parent": "Panel"
  },
  {
    "description": "A <page>DComboBox</page> based dropdown menu with build in easy <page>ConVar</page> support.\n\nThis control only exists in Sandbox derived gamemodes.",
    "name": "CtrlListBox",
    "parent": "DComboBox"
  },
  {
    "description": "A derivative of the DModelPanel in which the user may modify the perspective of the model with their mouse and keyboard by clicking and dragging.\n\nThe keyboard keys <key>W</key> <key>S</key> <key>A</key> <key>D</key> <key>Up</key> <key>Down</key> <key>Left</key> <key>Right</key> <key>Space</key> and <key>Ctrl</key> can be used when the right mouse is held down, with <key>Shift</key> acting as a speed multiplier. When the left mouse is used, the Shift key holds the current `y` angle steady.\n\nThis is used by <page>IconEditor</page> for modifying spawn icons.",
    "functions": [
      {
        "description": "<internal></internal> Used by the panel to perform mouse capture operations when adjusting the model.",
        "name": "CaptureMouse",
        "parent": "DAdjustableModelPanel",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dadjustablemodelpanel.lua",
          "lineEnd": 75,
          "lineStart": 61
        }
      },
      {
        "description": "<internal></internal> Used to adjust the perspective in the model panel via the keyboard, when the right mouse button is used.",
        "name": "FirstPersonControls",
        "parent": "DAdjustableModelPanel",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dadjustablemodelpanel.lua",
          "lineEnd": 146,
          "lineStart": 92
        }
      },
      {
        "description": "Gets whether mouse and keyboard-based adjustment of the perspective has been enabled. See <page>DAdjustableModelPanel:SetFirstPerson</page> for more information.\n\nThis is an <page>Global.AccessorFunc</page>",
        "name": "GetFirstPerson",
        "parent": "DAdjustableModelPanel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Whether first person controls are enabled. See <page>DAdjustableModelPanel:FirstPersonControls</page>.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dadjustablemodelpanel.lua",
          "lineStart": 4
        }
      },
      {
        "description": "Returns the movement speed multiplier set by <page>DAdjustableModelPanel:SetMovementScale</page>.\n\nAn <page>Global.AccessorFunc</page>",
        "name": "GetMovementScale",
        "parent": "DAdjustableModelPanel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The movement scale, where `1` is normal, `2` is double, etc.",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/vgui/dadjustablemodelpanel.lua",
          "lineStart": 5
        }
      },
      {
        "arguments": [
          {
            "description": "Whether to enable/disable first person controls. See <page>DAdjustableModelPanel:FirstPersonControls</page>.",
            "name": "enable",
            "type": "boolean"
          }
        ],
        "description": "Enables mouse and keyboard-based adjustment of the perspective.\n\nThis is set to `true` automatically each time mouse capture is enabled, and hence doesn't serve as a usable setting, other than to disable this functionality after the <page>PANEL:OnMousePressed</page> event.\n\nAn <page>Global.AccessorFunc</page>",
        "name": "SetFirstPerson",
        "parent": "DAdjustableModelPanel",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dadjustablemodelpanel.lua",
          "lineStart": 4
        }
      },
      {
        "arguments": [
          {
            "description": "The movement scale, where `1` is normal, `2` is double, etc.",
            "name": "",
            "type": "number"
          }
        ],
        "description": "Sets the movement speed multiplier. Currently this only affects first person camera controls.",
        "name": "SetMovementScale",
        "parent": "DAdjustableModelPanel",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dadjustablemodelpanel.lua",
          "lineStart": 5
        }
      }
    ],
    "name": "DAdjustableModelPanel",
    "parent": "DModelPanel"
  },
  {
    "description": "A bar to select the opacity (alpha level) of a color.",
    "functions": [
      {
        "description": "Returns the base color of the alpha bar. This is the color for which the alpha channel is being modified. An <page>Global.AccessorFunc</page>",
        "name": "GetBarColor",
        "parent": "DAlphaBar",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The current base color.",
            "type": "table"
          }
        ],
        "source": {
          "file": "lua/vgui/dalphabar.lua",
          "lineStart": 8
        }
      },
      {
        "description": "Returns the alpha value of the alpha bar. An <page>Global.AccessorFunc</page>",
        "name": "GetValue",
        "parent": "DAlphaBar",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The current alpha value.",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/vgui/dalphabar.lua",
          "lineStart": 7
        }
      },
      {
        "arguments": [
          {
            "description": "The new alpha value",
            "name": "alpha",
            "type": "number"
          }
        ],
        "description": "Called when user changes the desired alpha value with the control. This function is meant to be overridden",
        "name": "OnChange",
        "parent": "DAlphaBar",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dalphabar.lua",
          "lineEnd": 46,
          "lineStart": 45
        }
      },
      {
        "arguments": [
          {
            "description": "The new <page>Color</page> to set. See <page>Global.Color</page>.",
            "name": "clr",
            "type": "table"
          }
        ],
        "description": "Sets the base color of the alpha bar. This is the color for which the alpha channel is being modified. An <page>Global.AccessorFunc</page>",
        "name": "SetBarColor",
        "parent": "DAlphaBar",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dalphabar.lua",
          "lineStart": 8
        }
      },
      {
        "arguments": [
          {
            "description": "The new alpha value to set",
            "name": "alpha",
            "type": "number"
          }
        ],
        "description": "Sets the alpha value or the alpha bar. An <page>Global.AccessorFunc</page>",
        "name": "SetValue",
        "parent": "DAlphaBar",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dalphabar.lua",
          "lineStart": 7
        }
      }
    ],
    "name": "DAlphaBar",
    "parent": "DPanel"
  },
  {
    "description": "Input which can bind a command to a key. Used for binding inputs and outputs of TOOLs.",
    "functions": [
      {
        "description": "Gets the code of the key currently bound by the DBinder. Same as <page>DBinder:GetValue</page>. An <page>Global.AccessorFunc</page>",
        "name": "GetSelectedNumber",
        "parent": "DBinder",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The key code of the bound key. See <page>Enums/KEY</page>.",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/vgui/dbinder.lua",
          "lineStart": 4
        }
      },
      {
        "description": "Gets the code of the key currently bound by the DBinder. Same as <page>DBinder:GetSelectedNumber</page>.",
        "name": "GetValue",
        "parent": "DBinder",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The key code of the bound key. See <page>Enums/KEY</page>.",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/vgui/dbinder.lua",
          "lineEnd": 87,
          "lineStart": 83
        }
      },
      {
        "arguments": [
          {
            "description": "The new bound key. See <page>input.GetKeyName</page>.",
            "name": "iNum",
            "type": "number"
          }
        ],
        "description": "Called when the player selects a new bind. Meant to be Overridden",
        "name": "OnChange",
        "parent": "DBinder",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dbinder.lua",
          "lineEnd": 90,
          "lineStart": 89
        }
      },
      {
        "arguments": [
          {
            "description": "The key code of the key to bind. See <page>Enums/KEY</page>.",
            "name": "keyCode",
            "type": "number"
          }
        ],
        "description": "Sets the current key bound by the <page>DBinder</page>, and updates the button's text as well as the <page>ConVar</page>.",
        "name": "SetSelectedNumber",
        "parent": "DBinder",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dbinder.lua",
          "lineEnd": 48,
          "lineStart": 41
        }
      },
      {
        "arguments": [
          {
            "description": "The key code of the key to bind. See <page>Enums/KEY</page>.",
            "name": "keyCode",
            "type": "number"
          }
        ],
        "description": "Alias of <page>DBinder:SetSelectedNumber</page>.",
        "name": "SetValue",
        "parent": "DBinder",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dbinder.lua",
          "lineEnd": 81,
          "lineStart": 77
        }
      },
      {
        "description": "<internal></internal> Used to set the text of the DBinder to the current key binding, or `NONE`.",
        "name": "UpdateText",
        "parent": "DBinder",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dbinder.lua",
          "lineEnd": 24,
          "lineStart": 15
        }
      }
    ],
    "name": "DBinder",
    "parent": "DButton"
  },
  {
    "description": "A transparent gray speech bubble panel made up of a rounded box and point coming from the bottom.",
    "functions": [
      {
        "description": "Returns Background Color, See <page>DBubbleContainer:SetBackgroundColor</page>",
        "name": "GetBackgroundColor",
        "parent": "DBubbleContainer",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dbubblecontainer.lua",
          "lineStart": 4
        }
      },
      {
        "arguments": [
          {
            "description": "The x position of the dialog point. If this is set to a value greater than half of the set width, the entire bubble container will be moved in addition to the dialog point.",
            "name": "x",
            "type": "number"
          },
          {
            "description": "The y position of the bubble container. Has no effect unless set to a value greater than the set height + 64 pixels.",
            "name": "y",
            "type": "number"
          },
          {
            "description": "The width of the bubble container.",
            "name": "w",
            "type": "number"
          },
          {
            "description": "The height of the bubble container.",
            "name": "h",
            "type": "number"
          }
        ],
        "description": "Sets the speech bubble position and size along with the dialog point position.",
        "name": "OpenForPos",
        "parent": "DBubbleContainer",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dbubblecontainer.lua",
          "lineEnd": 29,
          "lineStart": 14
        }
      },
      {
        "arguments": [
          {
            "description": "The New Color",
            "name": "color",
            "type": "Color"
          }
        ],
        "description": "Sets Background Color, See Also <page>DBubbleContainer:GetBackgroundColor</page>",
        "name": "SetBackgroundColor",
        "parent": "DBubbleContainer",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dbubblecontainer.lua",
          "lineStart": 4
        }
      }
    ],
    "name": "DBubbleContainer",
    "parent": "DPanel"
  },
  {
    "description": "A standard Derma button.\n\nBy default, a <page>DButton</page> is 22px tall.",
    "functions": [
      {
        "description": "<deprecated></deprecated>\nAn <page>Global.AccessorFunc</page> that returns value set by <page>DButton:SetDrawBorder</page>. See that page for more info.",
        "name": "GetDrawBorder",
        "parent": "DButton",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "value set by <page>DButton:SetDrawBorder</page>.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dbutton.lua",
          "lineStart": 4
        }
      },
      {
        "description": "Returns true if the DButton is currently depressed (a user is clicking on it).",
        "name": "IsDown",
        "parent": "DButton",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether or not the button is depressed.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dbutton.lua",
          "lineEnd": 30,
          "lineStart": 26
        }
      },
      {
        "arguments": [
          {
            "description": "The console command to be called.",
            "name": "command",
            "type": "string"
          },
          {
            "default": "nil",
            "description": "The arguments for the command.",
            "name": "args",
            "type": "string"
          }
        ],
        "description": "Sets a console command to be called when the button is clicked.\n\nThis overrides the button's `DoClick` method.",
        "name": "SetConsoleCommand",
        "parent": "DButton",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dbutton.lua",
          "lineEnd": 135,
          "lineStart": 129
        }
      },
      {
        "arguments": [
          {
            "description": "Does nothing.",
            "name": "draw",
            "type": "boolean"
          }
        ],
        "description": "<deprecated></deprecated>\n\nDoes absolutely nothing at all. Default value is automatically set to true.",
        "name": "SetDrawBorder",
        "parent": "DButton",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dbutton.lua",
          "lineStart": 4
        }
      },
      {
        "arguments": [
          {
            "default": "nil",
            "description": "The image file to use, relative to `/materials`. If this is nil, the image background is removed.",
            "name": "img",
            "type": "string"
          }
        ],
        "description": "Sets an image to be displayed as the button's background. Alias of <page>DButton:SetImage</page>",
        "name": "SetIcon",
        "parent": "DButton",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dbutton.lua",
          "lineStart": 52
        }
      },
      {
        "arguments": [
          {
            "default": "nil",
            "description": "The image file to use, relative to `/materials`. If this is nil, the image background is removed.",
            "name": "img",
            "type": "string"
          }
        ],
        "description": "Sets an image to be displayed as the button's background.\n\nSee <page>DButton:SetMaterial</page> for equivalent function that uses <page>IMaterial</page> instead.\n\nAlso see: <page>DImageButton</page>",
        "name": "SetImage",
        "parent": "DButton",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dbutton.lua",
          "lineEnd": 52,
          "lineStart": 32
        }
      },
      {
        "arguments": [
          {
            "default": "nil",
            "description": "The material to use. If this is nil, the image background is removed.",
            "name": "img",
            "type": "IMaterial"
          }
        ],
        "description": "Sets an image to be displayed as the button's background.\n\nSee <page>DButton:SetImage</page> for equivalent function that uses file paths instead. Also see <page>DImageButton</page>.",
        "name": "SetMaterial",
        "parent": "DButton",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dbutton.lua",
          "lineEnd": 73,
          "lineStart": 54
        }
      },
      {
        "arguments": [
          {
            "description": "A table supposed to contain the color values listed above.",
            "name": "skin",
            "type": "table"
          }
        ],
        "description": "A hook called from within <page>DLabel</page>'s <page>PANEL:ApplySchemeSettings</page> to determine the color of the text on display.",
        "name": "UpdateColours",
        "parent": "DButton",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dbutton.lua",
          "lineEnd": 94,
          "lineStart": 86
        }
      }
    ],
    "name": "DButton",
    "parent": "DLabel"
  },
  {
    "description": "<internal></internal>\n\nUsed by <page>DCollapsibleCategory</page>",
    "name": "DCategoryHeader",
    "parent": "DButton"
  },
  {
    "description": "A host for multiple <page>DCollapsibleCategory</page> panels.\nAs the name suggests, each one of them can be collapsed or expanded on demand by the user.",
    "functions": [
      {
        "arguments": [
          {
            "description": "The name of the category to add.",
            "name": "categoryName",
            "type": "string"
          }
        ],
        "description": "Adds a <page>DCollapsibleCategory</page> to the list.",
        "name": "Add",
        "parent": "DCategoryList",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The created <page>DCollapsibleCategory</page>",
            "type": "Panel"
          }
        ],
        "source": {
          "file": "lua/vgui/dcategorylist.lua",
          "lineEnd": 28,
          "lineStart": 18
        }
      },
      {
        "arguments": [
          {
            "description": "VGUI element to add to the list.",
            "name": "element",
            "type": "Panel"
          }
        ],
        "description": "Adds an element to the list.",
        "name": "AddItem",
        "parent": "DCategoryList",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcategorylist.lua",
          "lineEnd": 16,
          "lineStart": 10
        }
      },
      {
        "description": "Calls <page>Panel:UnselectAll</page> on all child elements, if they have it.",
        "name": "UnselectAll",
        "parent": "DCategoryList",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcategorylist.lua",
          "lineEnd": 47,
          "lineStart": 37
        }
      }
    ],
    "name": "DCategoryList",
    "parent": "DScrollPanel"
  },
  {
    "description": "The DCheckBox is a checkbox. It allows you to get a boolean value from the user (true/false - yes/no)",
    "functions": [
      {
        "description": "Calls <page>DCheckBox:Toggle</page>",
        "name": "DoClick",
        "parent": "DCheckBox",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineEnd": 43,
          "lineStart": 39
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that gets the checked state of the checkbox.",
        "name": "GetChecked",
        "parent": "DCheckBox",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether the box is checked or not.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineStart": 4
        }
      },
      {
        "description": "Returns whether the state of the checkbox is being edited. This means whether the user is currently clicking (mouse-down) on the checkbox, and applies to both the left and right mouse buttons.",
        "name": "IsEditing",
        "parent": "DCheckBox",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether the checkbox is being clicked.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineEnd": 21,
          "lineStart": 19
        }
      },
      {
        "arguments": [
          {
            "description": "Whether the CheckBox is checked or not.",
            "name": "bVal",
            "type": "boolean"
          }
        ],
        "description": "Called when the \"checked\" state is changed. This is for Overriding",
        "name": "OnChange",
        "parent": "DCheckBox",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineEnd": 55,
          "lineStart": 51
        }
      },
      {
        "arguments": [
          {
            "description": "Whether the box should be checked or not.",
            "name": "checked",
            "type": "boolean"
          }
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the checked state of the checkbox. Does not call the checkbox's <page>DCheckBox:OnChange</page> and <page>Panel:ConVarChanged</page> methods, unlike <page>DCheckBox:SetValue</page>.",
        "name": "SetChecked",
        "parent": "DCheckBox",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineStart": 4
        }
      },
      {
        "arguments": [
          {
            "description": "Whether the box should be checked or not.",
            "name": "checked",
            "type": "boolean"
          }
        ],
        "description": "Sets the checked state of the checkbox, and calls the checkbox's <page>DCheckBox:OnChange</page> and <page>Panel:ConVarChanged</page> methods.",
        "name": "SetValue",
        "parent": "DCheckBox",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineEnd": 37,
          "lineStart": 23
        }
      },
      {
        "description": "Toggles the checked state of the checkbox, and calls the checkbox's <page>DCheckBox:OnChange</page> and <page>Panel:ConVarChanged</page> methods. <page>DCheckBox:DoClick</page> is an alias of this function.",
        "name": "Toggle",
        "parent": "DCheckBox",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineEnd": 49,
          "lineStart": 45
        }
      }
    ],
    "name": "DCheckBox",
    "parent": "DButton"
  },
  {
    "description": "The **DCheckBoxLabel** is a <page>DCheckBox</page> with a <page>DLabel</page> next to it.\nIt allows you to get a boolean value from the user (true/false - yes/no)",
    "functions": [
      {
        "description": "Gets the checked state of the checkbox. This calls the checkbox's <page>DCheckBox:GetChecked</page> function.",
        "name": "GetChecked",
        "parent": "DCheckBoxLabel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether the box is checked or not.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineEnd": 116,
          "lineStart": 114
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that gets the indentation of the element on the X axis. See also <page>DCheckBoxLabel:SetIndent</page>",
        "name": "GetIndent",
        "parent": "DCheckBoxLabel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "How much the content is moved to the right in pixels",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineStart": 81
        }
      },
      {
        "arguments": [
          {
            "description": "Whether the checkbox is checked or unchecked.",
            "name": "bVal",
            "type": "boolean"
          }
        ],
        "description": "Called when the \"checked\" state is changed. This is meant to be Overriden",
        "name": "OnChange",
        "parent": "DCheckBoxLabel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineEnd": 183,
          "lineStart": 179
        }
      },
      {
        "arguments": [
          {
            "description": "true makes the text bright.",
            "name": "bright",
            "type": "boolean"
          }
        ],
        "description": "Sets the color of the <page>DCheckBoxLabel</page>'s text to the bright text color defined in the skin.",
        "name": "SetBright",
        "parent": "DCheckBoxLabel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineEnd": 100,
          "lineStart": 98
        }
      },
      {
        "arguments": [
          {
            "description": "Whether the box should be checked or not.",
            "name": "checked",
            "type": "boolean"
          }
        ],
        "description": "Sets the checked state of the checkbox. Does not call <page>DCheckBoxLabel:OnChange</page> or <page>Panel:ConVarChanged</page>, unlike <page>DCheckBoxLabel:SetValue</page>.",
        "name": "SetChecked",
        "parent": "DCheckBoxLabel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineEnd": 112,
          "lineStart": 110
        }
      },
      {
        "arguments": [
          {
            "description": "The name of the convar to set",
            "name": "convar",
            "type": "string"
          }
        ],
        "description": "Sets the console variable to be set when the checked state of the <page>DCheckBoxLabel</page> changes.",
        "name": "SetConVar",
        "parent": "DCheckBoxLabel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineEnd": 104,
          "lineStart": 102
        }
      },
      {
        "arguments": [
          {
            "description": "True to be dark, false to be default",
            "name": "darkify",
            "type": "boolean"
          }
        ],
        "description": "Sets the text of the <page>DCheckBoxLabel</page> to be dark colored in accordance with the currently active Derma skin.",
        "name": "SetDark",
        "parent": "DCheckBoxLabel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineEnd": 96,
          "lineStart": 94
        }
      },
      {
        "arguments": [
          {
            "description": "Font name",
            "name": "font",
            "type": "string"
          }
        ],
        "description": "Sets the font of the text part of the <page>DCheckBoxLabel</page>.",
        "name": "SetFont",
        "parent": "DCheckBoxLabel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineEnd": 161,
          "lineStart": 156
        }
      },
      {
        "arguments": [
          {
            "description": "How much in pixels to move the content to the right",
            "name": "ident",
            "type": "number"
          }
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the indentation of the element on the X axis.",
        "name": "SetIndent",
        "parent": "DCheckBoxLabel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineStart": 81
        }
      },
      {
        "arguments": [
          {
            "description": "The text color. Uses the <page>Color</page>.",
            "name": "color",
            "type": "table"
          }
        ],
        "description": "Sets the text color for the <page>DCheckBoxLabel</page>.",
        "name": "SetTextColor",
        "parent": "DCheckBoxLabel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineEnd": 138,
          "lineStart": 134
        }
      },
      {
        "arguments": [
          {
            "description": "Whether the box should be checked or not (1 or 0 can also be used).",
            "name": "checked",
            "type": "boolean"
          }
        ],
        "description": "Sets the checked state of the checkbox, and calls <page>DCheckBoxLabel:OnChange</page> and the checkbox's <page>Panel:ConVarChanged</page> methods.",
        "name": "SetValue",
        "parent": "DCheckBoxLabel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineEnd": 108,
          "lineStart": 106
        }
      },
      {
        "description": "Sizes the panel to the size of the internal DLabel and DButton",
        "name": "SizeToContents",
        "parent": "DCheckBoxLabel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineEnd": 147,
          "lineStart": 140
        }
      },
      {
        "description": "Toggles the checked state of the <page>DCheckBoxLabel</page>.",
        "name": "Toggle",
        "parent": "DCheckBoxLabel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineEnd": 120,
          "lineStart": 118
        }
      }
    ],
    "name": "DCheckBoxLabel",
    "parent": "DPanel"
  },
  {
    "description": "The collapsible category allows you to create numerous sections of controls, and have the ability to contract/expand them.\n\nConsider using <page>DCategoryList</page> if you plan on using more than 1 of these.",
    "functions": [
      {
        "arguments": [
          {
            "description": "The name of the button",
            "name": "name",
            "type": "string"
          }
        ],
        "description": "Adds a new text button to the collapsible category, like the tool menu in Spawnmenu.",
        "name": "Add",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The <page>DButton</page>",
            "type": "Panel"
          }
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineEnd": 122,
          "lineStart": 75
        }
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "anim",
            "type": "table"
          },
          {
            "description": "",
            "name": "delta",
            "type": "number"
          },
          {
            "description": "",
            "name": "data",
            "type": "table"
          }
        ],
        "description": "<internal></internal>\n\nInternal function that handles the open/close animations.",
        "name": "AnimSlide",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineEnd": 307,
          "lineStart": 281
        }
      },
      {
        "arguments": [
          {
            "description": "True to open, false to collapse",
            "name": "expand",
            "type": "boolean"
          }
        ],
        "description": "Forces the category to open or collapse",
        "name": "DoExpansion",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineEnd": 238,
          "lineStart": 233
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns the expand/collapse animation time set by <page>DCollapsibleCategory:SetAnimTime</page>.",
        "name": "GetAnimTime",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The animation time in seconds",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 50
        }
      },
      {
        "description": "<deprecated>You should use <page>DCollapsibleCategory:GetPaintBackground</page> instead.</deprecated>\n\nReturns whether or not the panel background is being drawn. Alias of <page>DCollapsibleCategory:GetPaintBackground</page>.",
        "name": "GetDrawBackground",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "True if the panel background is drawn, false otherwise.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 52
        }
      },
      {
        "description": "Returns whether the DCollapsibleCategory is expanded or not.",
        "name": "GetExpanded",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "If expanded it will return true.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 48
        }
      },
      {
        "description": "Returns the header height of the <page>DCollapsibleCategory</page>.\n\nSee also <page>DCollapsibleCategory:SetHeaderHeight</page>.",
        "name": "GetHeaderHeight",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The current height of the header.",
            "name": "height",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineEnd": 166,
          "lineStart": 162
        }
      },
      {
        "description": "If set, the <page>DCategoryList</page> that created this panel.\n\nSee also <page>DCollapsibleCategory:SetList</page>.",
        "name": "GetList",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The <page>DCategoryList</page> that created us.",
            "type": "Panel"
          }
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 54
        }
      },
      {
        "description": "<deprecated></deprecated>\nDoesn't actually do anything.\n\nReturns the number set by <page>DCollapsibleCategory:SetPadding</page>.",
        "name": "GetPadding",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 53
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns whether or not the background should be painted.",
        "name": "GetPaintBackground",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "If the background is painted or not",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 41
        }
      },
      {
        "description": "<deprecated></deprecated>\nReturns whatever was set by <page>DCollapsibleCategory:SetStartHeight</page>",
        "name": "GetStartHeight",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 49
        }
      },
      {
        "arguments": [
          {
            "description": "If it was expanded or not",
            "name": "expanded",
            "type": "boolean"
          }
        ],
        "description": "Called by <page>DCollapsibleCategory:Toggle</page>. This function does nothing by itself, as you're supposed to overwrite it.",
        "name": "OnToggle",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineEnd": 231,
          "lineStart": 227
        }
      },
      {
        "arguments": [
          {
            "description": "The time in seconds it takes to expand",
            "name": "time",
            "type": "number"
          }
        ],
        "description": "Sets the time in seconds it takes to expand the DCollapsibleCategory",
        "name": "SetAnimTime",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 50
        }
      },
      {
        "arguments": [
          {
            "description": "The panel, containing the contents for the DCollapsibleCategory, mostly an DScrollPanel",
            "name": "pnl",
            "type": "Panel"
          }
        ],
        "description": "Sets the contents of the DCollapsibleCategory.",
        "name": "SetContents",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineEnd": 196,
          "lineStart": 176
        }
      },
      {
        "arguments": [
          {
            "description": "True to show the panel's background, false to hide it.",
            "name": "draw",
            "type": "boolean"
          }
        ],
        "description": "<deprecated>You should use <page>DCollapsibleCategory:SetPaintBackground</page> instead.</deprecated>Sets whether or not to draw the panel background. Alias of <page>DCollapsibleCategory:SetPaintBackground</page>.",
        "name": "SetDrawBackground",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 52
        }
      },
      {
        "arguments": [
          {
            "default": "true",
            "description": "Whether it shall be expanded or not by default",
            "name": "expanded",
            "type": "boolean"
          }
        ],
        "description": "Sets whether the <page>DCollapsibleCategory</page> is expanded or not upon opening the container.\n\nYou should use <page>DCollapsibleCategory:Toggle</page> or <page>DCollapsibleCategory:DoExpansion</page> instead.",
        "name": "SetExpanded",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 48
        }
      },
      {
        "arguments": [
          {
            "description": "The new height to set. Default height is 20.",
            "name": "height",
            "type": "number"
          }
        ],
        "description": "Sets the header height of the <page>DCollapsibleCategory</page>.\n\nSee also <page>DCollapsibleCategory:GetHeaderHeight</page>.",
        "name": "SetHeaderHeight",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineEnd": 160,
          "lineStart": 156
        }
      },
      {
        "arguments": [
          {
            "description": "The label/name of the DCollapsibleCategory.",
            "name": "label",
            "type": "string"
          }
        ],
        "description": "Sets the name of the DCollapsibleCategory.",
        "name": "SetLabel",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineEnd": 154,
          "lineStart": 150
        }
      },
      {
        "arguments": [
          {
            "description": "The <page>Panel:UnselectAll</page> that is the \"parent\" of this panel.",
            "name": "pnl",
            "type": "Panel"
          }
        ],
        "description": "Used internally by <page>DCategoryList</page> when it creates a <page>DCollapsibleCategory</page> during <page>DCategoryList:Add</page>.\n\nIf set, <page>Panel:UnselectAll</page> will be called on the list, instead of calling it on the category panel itself when a category is clicked.",
        "name": "SetList",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 54
        }
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "padding",
            "type": "number"
          }
        ],
        "description": "<deprecated></deprecated>\nDoesn't actually do anything.",
        "name": "SetPadding",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 53
        }
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "paint",
            "type": "boolean"
          }
        ],
        "description": "Sets whether or not the background should be painted.",
        "name": "SetPaintBackground",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 51
        }
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "height",
            "type": "number"
          }
        ],
        "description": "<deprecated></deprecated>\nDoes nothing.",
        "name": "SetStartHeight",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 49
        }
      },
      {
        "description": "Toggles the expanded state of the <page>DCollapsibleCategory</page>.\n\nSee <page>DCollapsibleCategory:GetExpanded</page> for a function to retrieve the expanded state.",
        "name": "Toggle",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineEnd": 225,
          "lineStart": 209
        }
      },
      {
        "description": "<internal></internal>\n\nUsed internally to update the \"AltLine\" property on all \"child\" panels.",
        "name": "UpdateAltLines",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineEnd": 142,
          "lineStart": 136
        }
      }
    ],
    "name": "DCollapsibleCategory",
    "parent": "Panel"
  },
  {
    "description": "Colorful buttons. Used internally by <page>DColorPalette</page>.",
    "functions": [
      {
        "description": "An <page>Global.AccessorFunc</page> that returns the color of the button",
        "name": "GetColor",
        "parent": "DColorButton",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The <page>Color</page> of the button",
            "type": "table"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorbutton.lua",
          "lineStart": 9
        }
      },
      {
        "description": "<deprecated></deprecated>\nAn <page>Global.AccessorFunc</page> that returns value set by <page>DColorButton:SetDrawBorder</page>. See that page for more info.",
        "name": "GetDrawBorder",
        "parent": "DColorButton",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Value set by <page>DColorButton:SetDrawBorder</page>.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorbutton.lua",
          "lineStart": 6
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns the unique ID set by <page>DColorButton:SetID</page>.\n\nUsed internally by <page>DColorPalette</page>",
        "name": "GetID",
        "parent": "DColorButton",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The unique ID of the button",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorbutton.lua",
          "lineStart": 10
        }
      },
      {
        "description": "<deprecated></deprecated>\nAn <page>Global.AccessorFunc</page> that is an alias of <page>Panel:IsSelected</page>.",
        "name": "GetSelected",
        "parent": "DColorButton",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorbutton.lua",
          "lineStart": 7
        }
      },
      {
        "description": "Returns whether the <page>DColorButton</page> is currently being pressed (the user is holding it down).",
        "name": "IsDown",
        "parent": "DColorButton",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorbutton.lua",
          "lineEnd": 28,
          "lineStart": 24
        }
      },
      {
        "arguments": [
          {
            "description": "A <page>Color</page> to set the color as",
            "name": "color",
            "type": "table"
          },
          {
            "default": "false",
            "description": "If true, the tooltip will not be reset to display the selected color.",
            "name": "noTooltip",
            "type": "boolean"
          }
        ],
        "description": "Sets the color of the <page>DColorButton</page>.",
        "name": "SetColor",
        "parent": "DColorButton",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolorbutton.lua",
          "lineEnd": 41,
          "lineStart": 30
        }
      },
      {
        "arguments": [
          {
            "description": "Does nothing.",
            "name": "draw",
            "type": "boolean"
          }
        ],
        "description": "<deprecated></deprecated>\n\nAn <page>Global.AccessorFunc</page> that does absolutely nothing at all. Default value is automatically set to true.",
        "name": "SetDrawBorder",
        "parent": "DColorButton",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolorbutton.lua",
          "lineStart": 6
        }
      },
      {
        "arguments": [
          {
            "description": "A unique ID to give this button",
            "name": "id",
            "type": "number"
          }
        ],
        "description": "An <page>Global.AccessorFunc</page> that is used internally by <page>DColorPalette</page> to detect which button is which.\n\nPairs with <page>DColorButton:GetID</page>",
        "name": "SetID",
        "parent": "DColorButton",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolorbutton.lua",
          "lineStart": 10
        }
      }
    ],
    "name": "DColorButton",
    "parent": "DLabel"
  },
  {
    "description": "The **DColorCombo** allows the user to choose color, without alpha,\nusing <page>DColorMixer</page> or <page>DColorPalette</page> in a tabbed view.",
    "functions": [
      {
        "description": "<internal></internal>\n\nCalled internally to create panels necessary for this panel to work.",
        "name": "BuildControls",
        "parent": "DColorCombo",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dcolorcombo.lua",
          "lineEnd": 55,
          "lineStart": 14
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns the color of the <page>DColorCombo</page>.",
        "name": "GetColor",
        "parent": "DColorCombo",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "A <page>Color</page>",
            "type": "table"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorcombo.lua",
          "lineStart": 4
        }
      },
      {
        "description": "Returns true if the panel is currently being edited\n\nMore of a internal method, it technically should only ever work (i.e. return true) inside <page>DColorCombo:OnValueChanged</page>.",
        "name": "IsEditing",
        "parent": "DColorCombo",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorcombo.lua",
          "lineEnd": 61,
          "lineStart": 57
        }
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "newcol",
            "type": "table"
          }
        ],
        "description": "Called when the value (color) of this panel was changed. For override",
        "name": "OnValueChanged",
        "parent": "DColorCombo",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dcolorcombo.lua",
          "lineEnd": 67,
          "lineStart": 63
        }
      },
      {
        "arguments": [
          {
            "description": "A <page>Color</page>.",
            "name": "clr",
            "type": "table"
          }
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns the color of this panel. See also <page>DColorCombo:GetColor</page>",
        "name": "SetColor",
        "parent": "DColorCombo",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dcolorcombo.lua",
          "lineEnd": 75,
          "lineStart": 69
        }
      }
    ],
    "name": "DColorCombo",
    "parent": "DPropertySheet"
  },
  {
    "description": "The DColorCube allows a user to select saturation and value but not hue. Uses HSV colors",
    "functions": [
      {
        "description": "An <page>Global.AccessorFunc</page> that returns the base Color set by <page>DColorCube:SetBaseRGB</page>.",
        "name": "GetBaseRGB",
        "parent": "DColorCube",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "A <page>Color</page>",
            "type": "table"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorcube.lua",
          "lineStart": 5
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns the color cube's default color. By default, it is set to white. (255 255 255 RGB)",
        "name": "GetDefaultColor",
        "parent": "DColorCube",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The default <page>Color</page>.",
            "type": "table"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorcube.lua",
          "lineStart": 7
        }
      },
      {
        "description": "<deprecated></deprecated>\nAn <page>Global.AccessorFunc</page> that returns the value set by <page>DColorCube:SetHue</page>.",
        "name": "GetHue",
        "parent": "DColorCube",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorcube.lua",
          "lineStart": 4
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns the color cube's current set color.",
        "name": "GetRGB",
        "parent": "DColorCube",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The set color, uses <page>Color</page>.",
            "type": "table"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorcube.lua",
          "lineStart": 6
        }
      },
      {
        "arguments": [
          {
            "description": "The new color, uses <page>Color</page>.",
            "name": "color",
            "type": "table"
          }
        ],
        "description": "Function which is called when the color cube slider is moved (through user input). Meant to be overridden.",
        "name": "OnUserChanged",
        "parent": "DColorCube",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolorcube.lua",
          "lineEnd": 93,
          "lineStart": 89
        }
      },
      {
        "description": "Sets the color to whatever <page>DColorCube:GetDefaultColor</page> returns",
        "name": "ResetToDefaultValue",
        "parent": "DColorCube",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolorcube.lua",
          "lineEnd": 48,
          "lineStart": 43
        }
      },
      {
        "arguments": [
          {
            "description": "The base color to set, uses <page>Color</page>.",
            "name": "color",
            "type": "table"
          }
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the base color and the color used to draw the color cube panel itself.\n\n<note>Calling this when using a color that isn't 100% saturated and valued (<page>Global.HSVToColor</page> with saturation and value set to 1) causes the color cube to look inaccurate compared to the color that's returned by methods like <page>DColorCube:GetRGB</page> and <page>DColorCube:OnUserChanged</page>. You should use <page>DColorCube:SetColor</page> instead</note>",
        "name": "SetBaseRGB",
        "parent": "DColorCube",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolorcube.lua",
          "lineEnd": 112,
          "lineStart": 107
        }
      },
      {
        "arguments": [
          {
            "description": "The color to set, uses <page>Color</page>.",
            "name": "color",
            "type": "table"
          }
        ],
        "description": "Sets the base color of the color cube and updates the slider position.",
        "name": "SetColor",
        "parent": "DColorCube",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolorcube.lua",
          "lineEnd": 105,
          "lineStart": 95
        }
      },
      {
        "arguments": [
          {
            "description": "The new default <page>Color</page>.",
            "name": "",
            "type": "table"
          }
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the color cube's default color. This value will be used to reset to on middle mouse click of the color cube's draggable slider.",
        "name": "SetDefaultColor",
        "parent": "DColorCube",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolorcube.lua",
          "lineStart": 7
        }
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "hue",
            "type": "number"
          }
        ],
        "description": "<deprecated></deprecated>\nAn <page>Global.AccessorFunc</page> that appears to do nothing and unused.",
        "name": "SetHue",
        "parent": "DColorCube",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolorcube.lua",
          "lineStart": 4
        }
      },
      {
        "arguments": [
          {
            "description": "A <page>Color</page>",
            "name": "clr",
            "type": "table"
          }
        ],
        "description": "<internal></internal>\n\nAn <page>Global.AccessorFunc</page> that used internally to set the real \"output\" color of the panel.",
        "name": "SetRGB",
        "parent": "DColorCube",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolorcube.lua",
          "lineStart": 6
        }
      },
      {
        "arguments": [
          {
            "default": "nil",
            "description": "The x position to sample color from/the percentage of saturation to remove from the color (ranges from 0.0 to 1.0).",
            "name": "x",
            "type": "number"
          },
          {
            "default": "nil",
            "description": "The y position to sample color from/the percentage of brightness or value to remove from the color (ranges from 0.0 to 1.0).",
            "name": "y",
            "type": "number"
          }
        ],
        "description": "<internal></internal>\n\nUpdates the color cube RGB based on the given x and y position and returns its arguments. Similar to <page>DColorCube:UpdateColor</page>.",
        "name": "TranslateValues",
        "parent": "DColorCube",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The given x position.",
            "type": "number"
          },
          {
            "description": "The given y position.",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorcube.lua",
          "lineEnd": 72,
          "lineStart": 65
        }
      },
      {
        "arguments": [
          {
            "default": "nil",
            "description": "The x position to set color to/the percentage of saturation to remove from the color (ranges from 0.0 to 1.0).",
            "name": "x",
            "type": "number"
          },
          {
            "default": "nil",
            "description": "The y position to set color to/the percentage of brightness or value to remove from the color (ranges from 0.0 to 1.0).",
            "name": "y",
            "type": "number"
          }
        ],
        "description": "<internal></internal>\n\nUpdates the color cube RGB based on the given x and y position. Similar to <page>DColorCube:TranslateValues</page>.",
        "name": "UpdateColor",
        "parent": "DColorCube",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolorcube.lua",
          "lineEnd": 87,
          "lineStart": 74
        }
      }
    ],
    "name": "DColorCube",
    "parent": "DSlider"
  },
  {
    "description": "A standard Derma color mixer",
    "functions": [
      {
        "description": "<internal></internal>",
        "name": "ConVarThink",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineEnd": 360,
          "lineStart": 341
        }
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "cvar",
            "type": "string"
          }
        ],
        "description": "<internal></internal>",
        "name": "DoConVarThink",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineEnd": 374,
          "lineStart": 362
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns true if alpha bar is shown, false if not.",
        "name": "GetAlphaBar",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Return true if shown, false if not.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 10
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns the current selected color.",
        "name": "GetColor",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The current selected color as a <page>Color</page>.",
            "type": "table"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineEnd": 326,
          "lineStart": 317
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns the <page>ConVar</page> name for the alpha channel of the color.\n\nSee also:\n* <page>DColorMixer:GetConVarR</page> - For the red channel\n* <page>DColorMixer:GetConVarG</page> - For the green channel\n* <page>DColorMixer:GetConVarB</page> - For the blue channel",
        "name": "GetConVarA",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The <page>ConVar</page> name for the alpha channel of the color",
            "type": "string"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 7
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns the <page>ConVar</page> name for the blue channel of the color.\n\nSee also:\n* <page>DColorMixer:GetConVarR</page> - For the red channel\n* <page>DColorMixer:GetConVarG</page> - For the green channel\n* <page>DColorMixer:GetConVarA</page> - For the alpha channel",
        "name": "GetConVarB",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The <page>ConVar</page> name for the blue channel of the color",
            "type": "string"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 6
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns the <page>ConVar</page> name for the green channel of the color.\n\nSee also:\n* <page>DColorMixer:GetConVarR</page> - For the red channel\n* <page>DColorMixer:GetConVarB</page> - For the blue channel\n* <page>DColorMixer:GetConVarA</page> - For the alpha channel",
        "name": "GetConVarG",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The <page>ConVar</page> name for the green channel of the color",
            "type": "string"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 5
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns the <page>ConVar</page> name for the red channel of the color.\n\nSee also:\n* <page>DColorMixer:GetConVarG</page> - For the green channel\n* <page>DColorMixer:GetConVarB</page> - For the blue channel\n* <page>DColorMixer:GetConVarA</page> - For the alpha channel",
        "name": "GetConVarR",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The <page>ConVar</page> name for the red channel of the color",
            "type": "string"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 4
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns true if palette is shown, false if not.",
        "name": "GetPalette",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Return true if shown, false if not.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 9
        }
      },
      {
        "description": "Returns the color as a normalized <page>Vector</page>.",
        "name": "GetVector",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "A vector representing the color of the <page>DColorMixer</page>, each value being in range of 0 to 1. Alpha is not included.",
            "type": "Vector"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineEnd": 333,
          "lineStart": 328
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns true if the wangs are shown, false if not.",
        "name": "GetWangs",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Return true if shown, false if not.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 11
        }
      },
      {
        "arguments": [
          {
            "description": "Show / Hide the alpha bar",
            "name": "show",
            "type": "boolean"
          }
        ],
        "description": "An <page>Global.AccessorFunc</page> that show/hide the alpha bar in DColorMixer",
        "name": "SetAlphaBar",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineEnd": 173,
          "lineStart": 166
        }
      },
      {
        "arguments": [
          {
            "description": "<page>Color</page>",
            "name": "clr",
            "type": "table"
          }
        ],
        "description": "Sets the base color of the <page>DColorCube</page> part of the <page>DColorMixer</page>.\n\nSee also <page>DColorCube:SetBaseRGB</page>",
        "name": "SetBaseColor",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineEnd": 255,
          "lineStart": 252
        }
      },
      {
        "arguments": [
          {
            "description": "The color to set. See <page>Global.Color</page>",
            "name": "color",
            "type": "table"
          }
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the color of the <page>DColorMixer</page>. See also <page>DColorMixer:GetColor</page>",
        "name": "SetColor",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 13
        }
      },
      {
        "arguments": [
          {
            "description": "The <page>ConVar</page> name for the alpha channel of the color",
            "name": "convar",
            "type": "string"
          }
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the <page>ConVar</page> name for the alpha channel of the color.\n\nSee also:\n* <page>DColorMixer:SetConVarR</page> - For the red channel\n* <page>DColorMixer:SetConVarG</page> - For the green channel\n* <page>DColorMixer:SetConVarB</page> - For the blue channel",
        "name": "SetConVarA",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineEnd": 202,
          "lineStart": 198
        }
      },
      {
        "arguments": [
          {
            "description": "The <page>ConVar</page> name for the blue channel of the color",
            "name": "convar",
            "type": "string"
          }
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the <page>ConVar</page> name for the blue channel of the color.\n\nSee also:\n* <page>DColorMixer:SetConVarR</page> - For the red channel\n* <page>DColorMixer:SetConVarG</page> - For the green channel\n* <page>DColorMixer:SetConVarA</page> - For the alpha channel",
        "name": "SetConVarB",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineEnd": 196,
          "lineStart": 193
        }
      },
      {
        "arguments": [
          {
            "description": "The <page>ConVar</page> name for the green channel of the color",
            "name": "convar",
            "type": "string"
          }
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the <page>ConVar</page> name for the green channel of the color.\n\nSee also:\n* <page>DColorMixer:SetConVarR</page> - For the red channel\n* <page>DColorMixer:SetConVarB</page> - For the blue channel\n* <page>DColorMixer:SetConVarA</page> - For the alpha channel",
        "name": "SetConVarG",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineEnd": 191,
          "lineStart": 188
        }
      },
      {
        "arguments": [
          {
            "description": "The <page>ConVar</page> name for the red channel of the color",
            "name": "convar",
            "type": "string"
          }
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the <page>ConVar</page> name for the red channel of the color.\n\nSee also:\n* <page>DColorMixer:SetConVarG</page> - For the green channel\n* <page>DColorMixer:SetConVarB</page> - For the blue channel\n* <page>DColorMixer:SetConVarA</page> - For the alpha channel",
        "name": "SetConVarR",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineEnd": 186,
          "lineStart": 183
        }
      },
      {
        "arguments": [
          {
            "default": "nil",
            "description": "Set to non empty string to show the label and its text.\n\nGive it an empty string or nothing and the label will be hidden.",
            "name": "text",
            "type": "string"
          }
        ],
        "description": "Sets the label's text to show.",
        "name": "SetLabel",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineEnd": 156,
          "lineStart": 144
        }
      },
      {
        "arguments": [
          {
            "description": "Show or hide the palette panel?",
            "name": "enabled",
            "type": "boolean"
          }
        ],
        "description": "Show or hide the palette panel",
        "name": "SetPalette",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineEnd": 164,
          "lineStart": 158
        }
      },
      {
        "arguments": [
          {
            "description": "The color to set. It is expected that the vector will have values be from 0 to 1. (i.e. be normalized)",
            "name": "vec",
            "type": "Vector"
          }
        ],
        "description": "Sets the color of <page>DColorMixer</page> from a <page>Vector</page>. Alpha is not included.",
        "name": "SetVector",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineEnd": 250,
          "lineStart": 246
        }
      },
      {
        "arguments": [
          {
            "description": "Show / Hide the colors indicators",
            "name": "show",
            "type": "boolean"
          }
        ],
        "description": "Show / Hide the colors indicators in DColorMixer",
        "name": "SetWangs",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineEnd": 181,
          "lineStart": 175
        }
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "clr",
            "type": "table"
          }
        ],
        "description": "<internal></internal>\n\nUse <page>DColorMixer:SetColor</page> instead!",
        "name": "UpdateColor",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineEnd": 311,
          "lineStart": 277
        }
      },
      {
        "arguments": [
          {
            "description": "The <page>ConVar</page> name",
            "name": "cvar",
            "type": "string"
          },
          {
            "description": "The color part to set the cvar to. \"r\", \"g\", \"b\" or \"a\".",
            "name": "part",
            "type": "string"
          },
          {
            "description": "The <page>Color</page>",
            "name": "clr",
            "type": "table"
          }
        ],
        "description": "<internal></internal>",
        "name": "UpdateConVar",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineEnd": 264,
          "lineStart": 257
        }
      },
      {
        "arguments": [
          {
            "description": "The <page>Color</page>",
            "name": "clr",
            "type": "table"
          }
        ],
        "description": "<internal></internal>",
        "name": "UpdateConVars",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineEnd": 275,
          "lineStart": 266
        }
      },
      {
        "description": "sets the default color of the element to the currently selected color",
        "name": "UpdateDefaultColor",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineEnd": 222,
          "lineStart": 204
        }
      },
      {
        "arguments": [
          {
            "description": "The new color. See <page>Color</page>",
            "name": "col",
            "type": "table"
          }
        ],
        "description": "Called when the player changes the color of the <page>DColorMixer</page>. Meant to be overridden.\n\n<bug>The returned color will not have the color metatable.</bug>",
        "name": "ValueChanged",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineEnd": 315,
          "lineStart": 313
        }
      }
    ],
    "name": "DColorMixer",
    "parent": "DPanel"
  },
  {
    "description": "The **DColorPalette** allows the player to select a color from a list of given colors.\nThis panel supports saving across sessions via the panel cookie system.\nUse <page>Panel:SetCookieName</page> to change \"save files\".",
    "functions": [
      {
        "arguments": [
          {
            "description": "The new color via the <page>Color</page>",
            "name": "clr",
            "type": "table"
          },
          {
            "description": "The <page>DColorButton</page> that was pressed.",
            "name": "btn",
            "type": "Panel"
          }
        ],
        "description": "<deprecated></deprecated>\nBasically the same functionality as <page>DColorPalette:OnValueChanged</page>, you should use that instead!\n\nFor Override",
        "name": "DoClick",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineEnd": 125,
          "lineStart": 121
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns the size of each palette button. Set by <page>DColorPalette:SetButtonSize</page>.",
        "name": "GetButtonSize",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The size of each palette button",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineStart": 11
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns the <page>ConVar</page> name for the alpha channel of the color.\n\nSee also:\n* <page>DColorPalette:GetConVarR</page> - For the red channel\n* <page>DColorPalette:GetConVarG</page> - For the green channel\n* <page>DColorPalette:GetConVarB</page> - For the blue channel",
        "name": "GetConVarA",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The <page>ConVar</page> name for the alpha channel of the color",
            "type": "string"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineStart": 9
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns the <page>ConVar</page> name for the blue channel of the color.\n\nSee also:\n* <page>DColorPalette:GetConVarR</page> - For the red channel\n* <page>DColorPalette:GetConVarG</page> - For the green channel\n* <page>DColorPalette:GetConVarA</page> - For the alpha channel",
        "name": "GetConVarB",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The <page>ConVar</page> name for the blue channel of the color",
            "type": "string"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineStart": 8
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns the <page>ConVar</page> name for the green channel of the color.\n\nSee also:\n* <page>DColorPalette:GetConVarR</page> - For the red channel\n* <page>DColorPalette:GetConVarB</page> - For the blue channel\n* <page>DColorPalette:GetConVarA</page> - For the alpha channel",
        "name": "GetConVarG",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The <page>ConVar</page> name for the green channel of the color",
            "type": "string"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineStart": 7
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns the <page>ConVar</page> name for the red channel of the color.\n\nSee also:\n* <page>DColorPalette:GetConVarG</page> - For the green channel\n* <page>DColorPalette:GetConVarB</page> - For the blue channel\n* <page>DColorPalette:GetConVarA</page> - For the alpha channel",
        "name": "GetConVarR",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The <page>ConVar</page> name for the red channel of the color",
            "type": "string"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineStart": 6
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns the number of rows of the palette, provided 6 colors fill each row. This value is equal to the number of colors in the DColorPalette divided by 6.",
        "name": "GetNumRows",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Number of rows of the DColorPalette.",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineStart": 13
        }
      },
      {
        "description": "<internal></internal>\n\nUsed internally to make sure changes on one palette affect other palettes with same name.",
        "name": "NetworkColorChange",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineEnd": 119,
          "lineStart": 103
        }
      },
      {
        "arguments": [
          {
            "description": "The <page>DColorButton</page> that was pressed.",
            "name": "pnl",
            "type": "Panel"
          }
        ],
        "description": "Called when a palette button has been pressed. For Override",
        "name": "OnRightClickButton",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineEnd": 234,
          "lineStart": 232
        }
      },
      {
        "arguments": [
          {
            "description": "The new color of the <page>DColorPalette</page>",
            "name": "newcol",
            "type": "table"
          }
        ],
        "description": "Called when the color is changed after clicking a new value. For Override",
        "name": "OnValueChanged",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineEnd": 230,
          "lineStart": 228
        }
      },
      {
        "description": "Resets this entire color palette to a default preset one, without saving.\n\nSee <page>DColorPalette:ResetSavedColors</page> for version that also saves the changes.",
        "name": "Reset",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineEnd": 131,
          "lineStart": 127
        }
      },
      {
        "description": "Resets this entire color palette to a default preset one and saves the changes.\n\nSee <page>DColorPalette:Reset</page> for version that does not save the changes.",
        "name": "ResetSavedColors",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineEnd": 148,
          "lineStart": 133
        }
      },
      {
        "arguments": [
          {
            "description": "The button to save the color of. Used to get the ID of the button.",
            "name": "btn",
            "type": "Panel"
          },
          {
            "description": "The color to save to this button's index",
            "name": "clr",
            "type": "table"
          }
        ],
        "description": "Saves the color of given button across sessions.\nThe color is saved as a panel cookie, see <page>Panel:SetCookie</page> and <page>Panel:SetCookieName</page>.\nIt is expected that the amount of colors per palette (<page>Panel:SetCookieName</page>) is the same every time.",
        "name": "SaveColor",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineEnd": 222,
          "lineStart": 210
        }
      },
      {
        "arguments": [
          {
            "description": "Sets the new size",
            "name": "size",
            "type": "number"
          }
        ],
        "description": "Sets the size of each palette button.\n\nThis is best kept to such a number, where this equation would return a whole number:<br>\n`WidthOfColorPalette / ButtonSize= WholeNumber`\n\nIf not, there will be ugly whitespace on the right side of the panel.",
        "name": "SetButtonSize",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineEnd": 191,
          "lineStart": 181
        }
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "clr",
            "type": "table"
          }
        ],
        "description": "<deprecated></deprecated>\n\nCurrently does nothing. Intended to \"select\" the color.",
        "name": "SetColor",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineEnd": 226,
          "lineStart": 224
        }
      },
      {
        "arguments": [
          {
            "description": "A number indexed table where each value is a <page>Color</page>",
            "name": "tab",
            "type": "table"
          }
        ],
        "description": "Clears the palette and adds new buttons with given colors.",
        "name": "SetColorButtons",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineEnd": 179,
          "lineStart": 164
        }
      },
      {
        "arguments": [
          {
            "description": "The <page>ConVar</page> name for the alpha channel of the color",
            "name": "convar",
            "type": "string"
          }
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the <page>ConVar</page> name for the alpha channel of the color.\n\nSee also:\n* <page>DColorPalette:SetConVarR</page> - For the red channel\n* <page>DColorPalette:SetConVarG</page> - For the green channel\n* <page>DColorPalette:SetConVarB</page> - For the blue channel",
        "name": "SetConVarA",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineStart": 9
        }
      },
      {
        "arguments": [
          {
            "description": "The <page>ConVar</page> name for the blue channel of the color",
            "name": "convar",
            "type": "string"
          }
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the <page>ConVar</page> name for the blue channel of the color.\n\nSee also:\n* <page>DColorPalette:SetConVarR</page> - For the red channel\n* <page>DColorPalette:SetConVarG</page> - For the green channel\n* <page>DColorPalette:SetConVarA</page> - For the alpha channel",
        "name": "SetConVarB",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineStart": 8
        }
      },
      {
        "arguments": [
          {
            "description": "The <page>ConVar</page> name for the green channel of the color",
            "name": "convar",
            "type": "string"
          }
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the <page>ConVar</page> name for the green channel of the color.\n\nSee also:\n* <page>DColorPalette:SetConVarR</page> - For the red channel\n* <page>DColorPalette:SetConVarB</page> - For the blue channel\n* <page>DColorPalette:SetConVarA</page> - For the alpha channel",
        "name": "SetConVarG",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineStart": 7
        }
      },
      {
        "arguments": [
          {
            "description": "The <page>ConVar</page> name for the red channel of the color",
            "name": "convar",
            "type": "string"
          }
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the <page>ConVar</page> name for the red channel of the color.\n\nSee also:\n* <page>DColorPalette:SetConVarG</page> - For the green channel\n* <page>DColorPalette:SetConVarB</page> - For the blue channel\n* <page>DColorPalette:SetConVarA</page> - For the alpha channel",
        "name": "SetConVarR",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineStart": 6
        }
      },
      {
        "arguments": [
          {
            "description": "Scale for the range of colors that the user can pick. Default is 8.",
            "name": "rows",
            "type": "number"
          }
        ],
        "description": "Roughly sets the number of colors that can be picked by the user. If the DColorPalette is exactly 6 rows tall, this function will set the number of colors shown per row in the palette. This is an <page>Global.AccessorFunc</page>\n<note><page>DColorPalette:Reset</page> or <page>DColorPalette:ResetSavedColors</page> must be called after this function to apply changes.</note>",
        "name": "SetNumRows",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineStart": 13
        }
      },
      {
        "arguments": [
          {
            "description": "The name of the console variable to set",
            "name": "name",
            "type": "string"
          },
          {
            "description": "The key of the 3rd argument to set the convar to\nPossible values: \"r\", \"g\", \"b\", \"a\"",
            "name": "key",
            "type": "string"
          },
          {
            "description": "The <page>Color</page> to retrieve the info from.",
            "name": "clr",
            "type": "table"
          }
        ],
        "description": "<internal></internal>\n\nInternal helper function for <page>DColorPalette:UpdateConVars</page>.",
        "name": "UpdateConVar",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineEnd": 199,
          "lineStart": 193
        }
      },
      {
        "arguments": [
          {
            "description": "A <page>Color</page>",
            "name": "clr",
            "type": "table"
          }
        ],
        "description": "<internal></internal>\n\nUpdates all the console variables set by <page>DColorPalette:SetConVarR</page> and so on with given color.\n\nCalled internally when a palette color is clicked.",
        "name": "UpdateConVars",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineEnd": 208,
          "lineStart": 201
        }
      }
    ],
    "name": "DColorPalette",
    "parent": "DIconLayout"
  },
  {
    "description": "Similar to <page>DPropertySheet</page>, but with tabs on the left.",
    "functions": [
      {
        "arguments": [
          {
            "description": "Name of the column/tab",
            "name": "name",
            "type": "string"
          },
          {
            "description": "Panel to be used as contents of the tab. This normally would be a <page>DPanel</page>",
            "name": "pnl",
            "type": "Panel"
          },
          {
            "default": "nil",
            "description": "Icon for the tab. This will ideally be a <page text=\"silkicon\">Silkicons</page>, but any material name can be used.",
            "name": "icon",
            "type": "string"
          }
        ],
        "description": "Adds a new column/tab.",
        "name": "AddSheet",
        "parent": "DColumnSheet",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "A table containing the following keys:\n* <page>Panel</page> Tab - The created tab button that will switch to the given panel\n* <page>Panel</page> Panel - The given panel to switch to when the button is pressed",
            "type": "table"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolumnsheet.lua",
          "lineEnd": 62,
          "lineStart": 24
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns the active button of this <page>DColumnSheet</page>.",
        "name": "GetActiveButton",
        "parent": "DColumnSheet",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The active button",
            "type": "Panel"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolumnsheet.lua",
          "lineStart": 4
        }
      },
      {
        "arguments": [
          {
            "description": "The button to make active button",
            "name": "active",
            "type": "Panel"
          }
        ],
        "description": "<internal></internal>\n\nAn <page>Global.AccessorFunc</page> that makes a button an active button for this <page>DColumnSheet</page>.",
        "name": "SetActiveButton",
        "parent": "DColumnSheet",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolumnsheet.lua",
          "lineEnd": 83,
          "lineStart": 64
        }
      },
      {
        "description": "Makes the tabs/buttons show only the image and no text.",
        "name": "UseButtonOnlyStyle",
        "parent": "DColumnSheet",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcolumnsheet.lua",
          "lineEnd": 22,
          "lineStart": 20
        }
      }
    ],
    "name": "DColumnSheet",
    "parent": "Panel"
  },
  {
    "description": "A field with multiple selectable values.",
    "functions": [
      {
        "arguments": [
          {
            "description": "The text show to the user.",
            "name": "value",
            "type": "string"
          },
          {
            "default": "nil",
            "description": "The data accompanying this string. If left empty, the value argument is used instead.\n\nCan be accessed with the second argument of <page>DComboBox:GetSelected</page>, <page>DComboBox:GetOptionData</page> and as an argument of <page>DComboBox:OnSelect</page>.",
            "name": "data",
            "type": "any"
          },
          {
            "default": "false",
            "description": "Should this be the default selected text show to the user or not.",
            "name": "select",
            "type": "boolean"
          },
          {
            "default": "nil",
            "description": "Adds an icon for this choice.",
            "name": "icon",
            "type": "string"
          }
        ],
        "description": "Adds a choice to the combo box.",
        "name": "AddChoice",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The index of the new option.",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineEnd": 158,
          "lineStart": 138
        }
      },
      {
        "description": "Adds a spacer below the currently last item in the drop down. Recommended to use with <page>DComboBox:SetSortItems</page> set to `false`.",
        "name": "AddSpacer",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineEnd": 136,
          "lineStart": 132
        }
      },
      {
        "description": "<internal></internal>Ran every frame to update the value of this panel to the value of the associated convar. See <page>Panel:SetConvar</page>.",
        "name": "CheckConVarChanges",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineEnd": 258,
          "lineStart": 247
        }
      },
      {
        "arguments": [
          {
            "description": "The text to display at the top of the combo box.",
            "name": "value",
            "type": "string"
          },
          {
            "description": "The option index.",
            "name": "index",
            "type": "number"
          }
        ],
        "description": "Selects a combo box option by its index and changes the text displayed at the top of the combo box.",
        "name": "ChooseOption",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineEnd": 97,
          "lineStart": 85
        }
      },
      {
        "arguments": [
          {
            "description": "Selects the option with given index.",
            "name": "index",
            "type": "number"
          }
        ],
        "description": "Selects an option within a combo box based on its table index.",
        "name": "ChooseOptionID",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineEnd": 104,
          "lineStart": 99
        }
      },
      {
        "description": "Clears the combo box's text value, choices, and data values.",
        "name": "Clear",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineEnd": 40,
          "lineStart": 29
        }
      },
      {
        "description": "Closes the combo box menu. Called when the combo box is clicked while open.",
        "name": "CloseMenu",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineEnd": 244,
          "lineStart": 236
        }
      },
      {
        "arguments": [
          {
            "description": "The option index.",
            "name": "index",
            "type": "number"
          }
        ],
        "description": "Returns an option's data based on the given index.",
        "name": "GetOptionData",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The option's data value.",
            "type": "any"
          }
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineEnd": 52,
          "lineStart": 48
        }
      },
      {
        "arguments": [
          {
            "description": "The option index.",
            "name": "index",
            "type": "number"
          }
        ],
        "description": "Returns an option's text based on the given index.",
        "name": "GetOptionText",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The option's text value.",
            "type": "string"
          }
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineEnd": 46,
          "lineStart": 42
        }
      },
      {
        "arguments": [
          {
            "description": "The data to look up the name of.\n\nIf given a <page>number</page> and no matching data was found, the function will test given data against each <page>Global.tonumber</page>'d data entry.",
            "name": "data",
            "type": "string"
          }
        ],
        "description": "Returns an option's text based on the given data.",
        "name": "GetOptionTextByData",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The option's text value.\n\nIf no matching data was found, the data itself will be returned. If multiple identical data entries exist, the first instance will be returned.",
            "type": "string"
          }
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineEnd": 72,
          "lineStart": 54
        }
      },
      {
        "description": "Returns the currently selected option's text and data",
        "name": "GetSelected",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The option's text value.",
            "type": "string"
          },
          {
            "description": "The option's stored data.",
            "type": "any"
          }
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineEnd": 118,
          "lineStart": 112
        }
      },
      {
        "description": "Returns the index (ID) of the currently selected option.",
        "name": "GetSelectedID",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The ID of the currently selected option.",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineEnd": 110,
          "lineStart": 106
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns an whether the items in the dropdown will be alphabetically sorted or not.\n\nSee <page>DComboBox:SetSortItems</page>.",
        "name": "GetSortItems",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "True if enabled, false otherwise.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineStart": 8
        }
      },
      {
        "description": "Returns whether or not the combo box's menu is opened.",
        "name": "IsMenuOpen",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "True if the menu is open, false otherwise.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineEnd": 174,
          "lineStart": 170
        }
      },
      {
        "arguments": [
          {
            "description": "The <page>DMenu</page> menu panel.",
            "name": "menu",
            "type": "Panel"
          }
        ],
        "description": "Called when the player opens the dropdown menu. For Override",
        "name": "OnMenuOpened",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineEnd": 130,
          "lineStart": 126
        }
      },
      {
        "arguments": [
          {
            "description": "The index of the option for use with other <page>DComboBox</page> functions.",
            "name": "index",
            "type": "number"
          },
          {
            "description": "The name of the option.",
            "name": "value",
            "type": "string"
          },
          {
            "description": "The data assigned to the option.",
            "name": "data",
            "type": "any"
          }
        ],
        "description": "Called when an option in the combo box is selected. This function does nothing by itself, you're supposed to overwrite it.",
        "name": "OnSelect",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineEnd": 124,
          "lineStart": 120
        }
      },
      {
        "description": "Opens the combo box drop down menu. Called when the combo box is clicked.",
        "name": "OpenMenu",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineEnd": 234,
          "lineStart": 176
        }
      },
      {
        "arguments": [
          {
            "description": "The index of the option to remove.",
            "name": "index",
            "type": "number"
          }
        ],
        "description": "Removes a choice added with <page>DComboBox:AddChoice</page>",
        "name": "RemoveChoice",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The text of the removed option.",
            "name": "text",
            "type": "string"
          },
          {
            "description": "The data of the removed option that was provided.",
            "name": "data",
            "type": "any"
          }
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineEnd": 168,
          "lineStart": 160
        }
      },
      {
        "arguments": [
          {
            "description": "true to enable, false to disable",
            "name": "sort",
            "type": "boolean"
          }
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets whether or not the items should be sorted alphabetically in the dropdown menu of the <page>DComboBox</page>. If set to false, items will appear in the order they were added by <page>DComboBox:AddChoice</page> calls.\n\nThis is enabled by default.",
        "name": "SetSortItems",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineStart": 8
        }
      },
      {
        "arguments": [
          {
            "description": "The text in the DComboBox.",
            "name": "value",
            "type": "string"
          }
        ],
        "description": "Sets the text shown in the combo box when the menu is not collapsed.",
        "name": "SetValue",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineEnd": 270,
          "lineStart": 266
        }
      }
    ],
    "name": "DComboBox",
    "parent": "DButton"
  },
  {
    "description": "<internal></internal>\n\nA VGUI base panel providing drag/drop functionality. Used by <page>DIconLayout</page>, <page>DListLayout</page> and <page>DTileLayout</page>.",
    "functions": [
      {
        "arguments": [
          {
            "description": "",
            "name": "drops",
            "type": "table"
          },
          {
            "description": "",
            "name": "bDoDrop",
            "type": "boolean"
          },
          {
            "description": "",
            "name": "command",
            "type": "string"
          },
          {
            "description": "",
            "name": "y",
            "type": "number"
          },
          {
            "description": "",
            "name": "x",
            "type": "number"
          }
        ],
        "description": "<internal></internal>\n\nInternal function used in <page>DDragBase:MakeDroppable</page>",
        "name": "DropAction_Copy",
        "parent": "DDragBase",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/ddragbase.lua",
          "lineEnd": 51,
          "lineStart": 47
        }
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "drops",
            "type": "table"
          },
          {
            "description": "",
            "name": "bDoDrop",
            "type": "boolean"
          },
          {
            "description": "",
            "name": "command",
            "type": "string"
          },
          {
            "description": "",
            "name": "y",
            "type": "number"
          },
          {
            "description": "",
            "name": "x",
            "type": "number"
          }
        ],
        "description": "<internal></internal>\n\nInternal function used in <page>DDragBase:DropAction_Copy</page>",
        "name": "DropAction_Normal",
        "parent": "DDragBase",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/ddragbase.lua",
          "lineEnd": 137,
          "lineStart": 72
        }
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "drops",
            "type": "table"
          },
          {
            "description": "",
            "name": "bDoDrop",
            "type": "boolean"
          },
          {
            "description": "",
            "name": "command",
            "type": "string"
          },
          {
            "description": "",
            "name": "y",
            "type": "number"
          },
          {
            "description": "",
            "name": "x",
            "type": "number"
          }
        ],
        "description": "<internal></internal>\n\nInternal function used in <page>DDragBase:DropAction_Normal</page>",
        "name": "DropAction_Simple",
        "parent": "DDragBase",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/ddragbase.lua",
          "lineEnd": 70,
          "lineStart": 53
        }
      },
      {
        "description": "Returns the drag'n'drop group this panel belongs to. See <page>DDragBase:MakeDroppable</page>. An <page>Global.AccessorFunc</page>",
        "name": "GetDnD",
        "parent": "DDragBase",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Name of the DnD family.",
            "type": "string"
          }
        ],
        "source": {
          "file": "lua/vgui/ddragbase.lua",
          "lineStart": 4
        }
      },
      {
        "description": "Returns whether this panel is read only or not for drag'n'drop purposes. An <page>Global.AccessorFunc</page>",
        "name": "GetReadOnly",
        "parent": "DDragBase",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether this panel is read only or not.",
            "name": "name",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/ddragbase.lua",
          "lineStart": 6
        }
      },
      {
        "description": "Whether this panel uses live drag'n'drop previews. An <page>Global.AccessorFunc</page>",
        "name": "GetUseLiveDrag",
        "parent": "DDragBase",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/ddragbase.lua",
          "lineStart": 5
        }
      },
      {
        "arguments": [
          {
            "description": "The unique name for the receiver slot. Only droppable panels with the same DnD name as this can be dropped on the panel.",
            "name": "name",
            "type": "string"
          },
          {
            "description": "Whether or not to allow droppable panels to be copied when the <key>Ctrl</key> key is held down.",
            "name": "allowCopy",
            "type": "boolean"
          }
        ],
        "description": "Makes the panel a receiver for any droppable panel with the same DnD name. Internally calls <page>Panel:Receiver</page>.\n\nSee <page>Drag and Drop for VGUI</page>.",
        "name": "MakeDroppable",
        "parent": "DDragBase",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/ddragbase.lua",
          "lineEnd": 44,
          "lineStart": 34
        }
      },
      {
        "description": "Called when anything is dropped on or rearranged within the <page>DDragBase</page>. For Override",
        "name": "OnModified",
        "parent": "DDragBase",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/ddragbase.lua",
          "lineEnd": 141,
          "lineStart": 139
        }
      },
      {
        "arguments": [
          {
            "description": "Name of the DnD family.",
            "name": "name",
            "type": "string"
          }
        ],
        "description": "<internal></internal> Used internally by <page>DDragBase:MakeDroppable</page>.\n\nSee also <page>DDragBase:GetDnD</page>\n\nAn <page>Global.AccessorFunc</page>",
        "name": "SetDnD",
        "parent": "DDragBase",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/ddragbase.lua",
          "lineStart": 4
        }
      },
      {
        "arguments": [
          {
            "default": "5",
            "description": "Where you're allowed to drop things.",
            "name": "pos",
            "type": "string"
          }
        ],
        "description": "Determines where you can drop stuff.\n\"4\" for left\n\"5\" for center\n\"6\" for right\n\"8\" for top\n\"2\" for bottom",
        "name": "SetDropPos",
        "parent": "DDragBase",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/ddragbase.lua",
          "lineEnd": 32,
          "lineStart": 24
        }
      },
      {
        "arguments": [
          {
            "description": "Whether this panel should be read only or not.",
            "name": "name",
            "type": "boolean"
          }
        ],
        "description": "Sets whether this panel is read only or not for drag'n'drop purposes. If set to `true`, you can only copy from this panel, and cannot modify its contents. This is an <page>Global.AccessorFunc</page>",
        "name": "SetReadOnly",
        "parent": "DDragBase",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/ddragbase.lua",
          "lineStart": 6
        }
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "newState",
            "type": "boolean"
          }
        ],
        "description": "Whether to use live drag'n'drop previews. This is an <page>Global.AccessorFunc</page>",
        "name": "SetUseLiveDrag",
        "parent": "DDragBase",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/ddragbase.lua",
          "lineStart": 5
        }
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "drop",
            "type": "number"
          },
          {
            "description": "",
            "name": "pnl",
            "type": "Panel"
          }
        ],
        "description": "<internal></internal>\n\nInternal function used in <page>DDragBase:DropAction_Normal</page>",
        "name": "UpdateDropTarget",
        "parent": "DDragBase",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/ddragbase.lua",
          "lineEnd": 168,
          "lineStart": 143
        }
      }
    ],
    "name": "DDragBase",
    "parent": "DPanel"
  },
  {
    "description": "A simple Derma Drawer",
    "functions": [
      {
        "description": "Closes the <page>DDrawer</page>.",
        "name": "Close",
        "parent": "DDrawer",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/ddrawer.lua",
          "lineEnd": 76,
          "lineStart": 68
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns the Open Size of DDrawer.",
        "name": "GetOpenSize",
        "parent": "DDrawer",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Open size.",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/vgui/ddrawer.lua",
          "lineStart": 4
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns the Open Time of DDrawer.",
        "name": "GetOpenTime",
        "parent": "DDrawer",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Time in seconds.",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/vgui/ddrawer.lua",
          "lineStart": 5
        }
      },
      {
        "description": "Opens the <page>DDrawer</page>.",
        "name": "Open",
        "parent": "DDrawer",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/ddrawer.lua",
          "lineEnd": 66,
          "lineStart": 58
        }
      },
      {
        "arguments": [
          {
            "description": "Height of DDrawer. Default is `100`.",
            "name": "Value",
            "type": "number"
          }
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the height of DDrawer",
        "name": "SetOpenSize",
        "parent": "DDrawer",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/ddrawer.lua",
          "lineStart": 4
        }
      },
      {
        "arguments": [
          {
            "description": "Length in seconds. Default is 0.3",
            "name": "value",
            "type": "number"
          }
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the time (in seconds) for DDrawer to open.",
        "name": "SetOpenTime",
        "parent": "DDrawer",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/ddrawer.lua",
          "lineStart": 5
        }
      },
      {
        "description": "Toggles the <page>DDrawer</page>.",
        "name": "Toggle",
        "parent": "DDrawer",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/ddrawer.lua",
          "lineEnd": 56,
          "lineStart": 48
        }
      }
    ],
    "name": "DDrawer",
    "parent": "Panel"
  },
  {
    "description": "<internal>\nUnless you know what you are doing and you benefit from this panel, you should be using the <page>DProperties</page> instead.\n</internal>\n\nA panel used by the <page>Editable Entities</page> system.",
    "functions": [
      {
        "arguments": [
          {
            "description": "",
            "name": "varname",
            "type": "string"
          },
          {
            "description": "",
            "name": "editdata",
            "type": "table"
          }
        ],
        "description": "<internal></internal>\n\nCalled internally by <page>DEntityProperties:RebuildControls</page>.",
        "name": "EditVariable",
        "parent": "DEntityProperties",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dentityproperties.lua",
          "lineEnd": 94,
          "lineStart": 59
        }
      },
      {
        "description": "<internal></internal>\n\nCalled internally when an entity being edited became invalid.\n\nYou should use <page>DEntityProperties:OnEntityLost</page> instead.",
        "name": "EntityLost",
        "parent": "DEntityProperties",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dentityproperties.lua",
          "lineEnd": 104,
          "lineStart": 99
        }
      },
      {
        "description": "Called when we were editing an entity and then it became invalid (probably removed). For Override",
        "name": "OnEntityLost",
        "parent": "DEntityProperties",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dentityproperties.lua",
          "lineEnd": 110,
          "lineStart": 106
        }
      },
      {
        "description": "<internal></internal>\n\nCalled internally by <page>DEntityProperties:SetEntity</page> to rebuild the controls.",
        "name": "RebuildControls",
        "parent": "DEntityProperties",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dentityproperties.lua",
          "lineEnd": 54,
          "lineStart": 26
        }
      },
      {
        "arguments": [
          {
            "description": "The entity to edit",
            "name": "ent",
            "type": "Entity"
          }
        ],
        "description": "Sets the entity to be edited by this panel. The entity must support the <page>Editable Entities</page> system or nothing will happen.",
        "name": "SetEntity",
        "parent": "DEntityProperties",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dentityproperties.lua",
          "lineEnd": 21,
          "lineStart": 14
        }
      }
    ],
    "name": "DEntityProperties",
    "parent": "DProperties"
  },
  {
    "description": "<internal></internal>\nThe little \"+\" button used by <page>DProperties</page> and <page>DTree_Node</page>.",
    "functions": [
      {
        "description": "Returns whether this DExpandButton is expanded or not.",
        "name": "GetExpanded",
        "parent": "DExpandButton",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "True if expanded, false otherwise",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dexpandbutton.lua",
          "lineStart": 4
        }
      },
      {
        "arguments": [
          {
            "description": "True to expand ( visually will show a \"-\" )",
            "name": "expanded",
            "type": "boolean"
          }
        ],
        "description": "Sets whether this DExpandButton should be expanded or not. Only changes appearance.",
        "name": "SetExpanded",
        "parent": "DExpandButton",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dexpandbutton.lua",
          "lineStart": 4
        }
      }
    ],
    "name": "DExpandButton",
    "parent": "DButton"
  },
  {
    "description": "A tree and list-based file browser.\n\nIt allows filtering by folder (directory) name and file extension, and can display models as <page>SpawnIcon</page>s.",
    "functions": [
      {
        "description": "Clears the file tree and list, and resets all values.",
        "name": "Clear",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineEnd": 283,
          "lineStart": 273
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns the root directory/folder of the file tree.",
        "name": "GetBaseFolder",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The path to the root folder.",
            "type": "string"
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineStart": 7
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns the current directory/folder being displayed.",
        "name": "GetCurrentFolder",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The directory the file list is currently displaying.",
            "type": "string"
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineStart": 8
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns the current file type filter on the file list.",
        "name": "GetFileTypes",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The current filter applied to the file list.",
            "type": "string"
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineStart": 6
        }
      },
      {
        "description": "Returns the <page>DTree Node</page> that the file tree stems from.\n\nThis is a child of the root node of the <page>DTree</page>.",
        "name": "GetFolderNode",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The <page>DTree_Node</page> used for the tree.",
            "type": "Panel"
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineEnd": 271,
          "lineStart": 267
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns whether or not the model viewer mode is enabled. In this mode, files are displayed as <page>SpawnIcon</page>s instead of a list.",
        "name": "GetModels",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Whether or not files will be displayed using <page>SpawnIcon</page>s.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineStart": 10
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns the name being used for the file tree.",
        "name": "GetName",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The name used for the root of the file tree.",
            "type": "string"
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineStart": 4
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns whether or not the file tree is open.",
        "name": "GetOpen",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Whether or not the file tree is open.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineStart": 11
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns the access path of the file tree. This is `GAME` unless changed with <page>DFileBrowser:SetPath</page>.\n\nSee <page>file.Read</page> for how paths work.",
        "name": "GetPath",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The current access path i.e. \"GAME\", \"LUA\", \"DATA\" etc.",
            "type": "string"
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineStart": 5
        }
      },
      {
        "description": "An <page>Global.AccessorFunc</page> that returns the current search filter on the file tree.",
        "name": "GetSearch",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The filter in use on the file tree.",
            "type": "string"
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineStart": 9
        }
      },
      {
        "arguments": [
          {
            "description": "The panel that was double-clicked to select this file.<br><br>This will either be a <page>DListView_Line</page> or <page>SpawnIcon</page> depending on whether the model viewer mode is enabled. See <page>DFileBrowser:SetModels</page>.",
            "name": "selectedPanel",
            "type": "Panel"
          },
          {
            "description": "The path to the file that was double-clicked.",
            "name": "filePath",
            "type": "string"
          }
        ],
        "description": "Called when a file is double-clicked.\n\n<note>Double-clicking a file or icon will trigger **both** this and <page>DFileBrowser:OnSelect</page>.</note>",
        "name": "OnDoubleClick",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineEnd": 301,
          "lineStart": 297
        }
      },
      {
        "arguments": [
          {
            "description": "The path to the file that was right-clicked.",
            "name": "filePath",
            "type": "string"
          },
          {
            "description": "The panel that was right-clicked to select this file.\n\nThis will either be a <page>DListView_Line</page> or <page>SpawnIcon</page> depending on whether the model viewer mode is enabled. <br>See <page>DFileBrowser:SetModels</page>.",
            "name": "selectedPanel",
            "type": "Panel"
          }
        ],
        "description": "Called when a file is right-clicked.\n\n<note>When not in model viewer mode, <page>DFileBrowser:OnSelect</page> will also be called if the file is not already selected.</note>",
        "name": "OnRightClick",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineEnd": 307,
          "lineStart": 303
        }
      },
      {
        "arguments": [
          {
            "description": "The panel that was clicked to select this file.<br><br>This will either be a <page>DListView_Line</page> or <page>SpawnIcon</page> depending on whether the model viewer mode is enabled. See <page>DFileBrowser:SetModels</page>.",
            "name": "selectedPanel",
            "type": "Panel"
          },
          {
            "description": "The path to the file that was selected.",
            "name": "filePath",
            "type": "string"
          }
        ],
        "description": "Called when a file is selected.",
        "name": "OnSelect",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineEnd": 295,
          "lineStart": 291
        }
      },
      {
        "arguments": [
          {
            "description": "The path to the folder to use as the root.",
            "name": "baseDir",
            "type": "string"
          }
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the root directory/folder of the file tree.\n\nThis needs to be set for the file tree to be displayed.",
        "name": "SetBaseFolder",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineEnd": 57,
          "lineStart": 50
        }
      },
      {
        "arguments": [
          {
            "description": "The directory to display files from.",
            "name": "currentDir",
            "type": "string"
          }
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the directory/folder from which to display the file list.",
        "name": "SetCurrentFolder",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineEnd": 118,
          "lineStart": 104
        }
      },
      {
        "arguments": [
          {
            "default": "*.*",
            "description": "A list of file types to display, separated by spaces e.g.\n```\n\"*.lua *.txt *.mdl\"\n```",
            "name": "fileTypes",
            "type": "string"
          }
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the file type filter for the file list.\n\nThis accepts the same file extension wildcards as <page>file.Find</page>.",
        "name": "SetFileTypes",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineEnd": 90,
          "lineStart": 81
        }
      },
      {
        "arguments": [
          {
            "default": "false",
            "description": "Whether or not to display files using <page>SpawnIcon</page>s.",
            "name": "showModels",
            "type": "boolean"
          }
        ],
        "description": "Enables or disables the model viewer mode. In this mode, files are displayed as <page>SpawnIcon</page>s instead of a list.\n\n<note>This should only be used for `.mdl` files; the spawn icons will display error models for others. See <page>DFileBrowser:SetFileTypes</page></note>",
        "name": "SetModels",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineEnd": 102,
          "lineStart": 92
        }
      },
      {
        "arguments": [
          {
            "default": "`baseFolder`",
            "description": "The name for the root of the file tree. Passing no value causes this to be the base folder name. See <page>DFileBrowser:SetBaseFolder</page>.",
            "name": "treeName",
            "type": "string"
          }
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the name to use for the file tree.",
        "name": "SetName",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineEnd": 48,
          "lineStart": 36
        }
      },
      {
        "arguments": [
          {
            "default": "false",
            "description": "`true` to open the tree, `false` to close it.",
            "name": "open",
            "type": "boolean"
          },
          {
            "default": "false",
            "description": "If `true`, the <page>DTree</page>'s open/close animation is used.",
            "name": "useAnim",
            "type": "boolean"
          }
        ],
        "description": "An <page>Global.AccessorFunc</page> that opens or closes the file tree.",
        "name": "SetOpen",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineEnd": 131,
          "lineStart": 120
        }
      },
      {
        "arguments": [
          {
            "description": "The access path i.e. \"GAME\", \"LUA\", \"DATA\" etc.",
            "name": "path",
            "type": "string"
          }
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the access path for the file tree. This is set to `GAME` by default.\n\nSee <page>file.Read</page> for how paths work.",
        "name": "SetPath",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineEnd": 66,
          "lineStart": 59
        }
      },
      {
        "arguments": [
          {
            "default": "*",
            "description": "The filter to use on the file tree.",
            "name": "filter",
            "type": "string"
          }
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the search filter for the file tree.\n\nThis accepts the same wildcards as <page>file.Find</page>.",
        "name": "SetSearch",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineEnd": 79,
          "lineStart": 68
        }
      },
      {
        "description": "<internal></internal> Called to set up the <page>DTree</page> and file viewer when a base path has been set.\n\nCalls <page>DFileBrowser:SetupTree</page> and <page>DFileBrowser:SetupFiles</page>.",
        "name": "Setup",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Whether or not the variables needed to set up have been defined.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineEnd": 208,
          "lineStart": 202
        }
      },
      {
        "description": "<internal></internal> Called to set up the <page>DListView</page> or <page>DIconBrowser</page> by <page>DFileBrowser:Setup</page>.\n\nThe icon browser is used when in models mode. See <page>DFileBrowser:SetModels</page>.",
        "name": "SetupFiles",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Whether or not the files pane was set up successfully.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineEnd": 200,
          "lineStart": 169
        }
      },
      {
        "description": "<internal></internal> Called to set up the <page>DTree</page> by <page>DFileBrowser:Setup</page>.",
        "name": "SetupTree",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Whether or not the tree was set up successfully.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineEnd": 167,
          "lineStart": 143
        }
      },
      {
        "arguments": [
          {
            "description": "The directory to populate the list from.",
            "name": "currentDir",
            "type": "string"
          }
        ],
        "description": "<internal></internal>Builds the file or icon list for the current directory.\n\nYou should use <page>DFileBrowser:SetCurrentFolder</page> to change the directory.",
        "name": "ShowFolder",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineEnd": 257,
          "lineStart": 210
        }
      },
      {
        "arguments": [
          {
            "default": "false",
            "description": "The sort order. `true` for descending (z-a), `false` for ascending (a-z).",
            "name": "descending",
            "type": "boolean"
          }
        ],
        "description": "Sorts the file list.\n\n<note>This is only functional when not using the model viewer. See <page>DFileBrowser:SetModels</page></note>",
        "name": "SortFiles",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ]
      }
    ],
    "name": "DFileBrowser",
    "parent": "DPanel"
  },
  {
    "description": "An easy form with functions to quickly add form elements",
    "functions": [
      {
        "arguments": [
          {
            "description": "Left-hand element to add to the DForm.",
            "name": "left",
            "type": "Panel"
          },
          {
            "default": "nil",
            "description": "Right-hand element to add to the DForm.",
            "name": "right",
            "type": "Panel"
          }
        ],
        "description": "Adds one or two items to the DForm.\nIf this method is called with only one argument, it is added to the bottom of the form. If two arguments are passed, they are placed side-by-side at the bottom of the form.\n\nInternally, this function is used by the various DForm functions to, for example, add labels to the left of buttons.",
        "name": "AddItem",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineEnd": 73,
          "lineStart": 42
        }
      },
      {
        "arguments": [
          {
            "description": "The text on the button",
            "name": "text",
            "type": "string"
          },
          {
            "description": "The concommand to run when the button is clicked",
            "name": "concommand",
            "type": "string"
          },
          {
            "default": "nil",
            "description": "The arguments to pass on to the concommand when the button is clicked",
            "name": "args",
            "type": "vararg"
          }
        ],
        "description": "Adds a <page>DButton</page> onto the <page>DForm</page>",
        "name": "Button",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The created <page>DButton</page>",
            "type": "Panel"
          }
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineEnd": 267,
          "lineStart": 254
        }
      },
      {
        "arguments": [
          {
            "description": "The label to be set next to the check box",
            "name": "label",
            "type": "string"
          },
          {
            "description": "The console variable to change when this is changed",
            "name": "convar",
            "type": "string"
          }
        ],
        "description": "Adds a <page>DCheckBoxLabel</page> onto the <page>DForm</page>.\n<note>This will run <page>DCheckBoxLabel:OnChange</page> when being added. This is caused by <page>Panel:SetConVar</page> being used when this function is used. To avoid this, use <page>DForm:AddItem</page> with a <page>DCheckBoxLabel</page>.</note>",
        "name": "CheckBox",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The created <page>DCheckBoxLabel</page>",
            "type": "Panel"
          }
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineEnd": 203,
          "lineStart": 192
        }
      },
      {
        "arguments": [
          {
            "description": "Text to the left of the combo box",
            "name": "title",
            "type": "string"
          },
          {
            "description": "Console variable to change when the user selects something from the dropdown.",
            "name": "convar",
            "type": "string"
          }
        ],
        "description": "Adds a <page>DComboBox</page> onto the <page>DForm</page>",
        "name": "ComboBox",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The created <page>DComboBox</page>",
            "type": "Panel"
          },
          {
            "description": "The created <page>DLabel</page>",
            "type": "Panel"
          }
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineEnd": 152,
          "lineStart": 134
        }
      },
      {
        "arguments": [
          {
            "description": "The help message to be displayed.",
            "name": "help",
            "type": "string"
          }
        ],
        "description": "Adds a <page>DLabel</page> onto the <page>DForm</page>. Unlike <page>DForm:Help</page>, this is indented and is colored blue, depending on the derma skin.",
        "name": "ControlHelp",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The created <page>DLabel</page>",
            "type": "Panel"
          }
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineEnd": 247,
          "lineStart": 225
        }
      },
      {
        "description": "<deprecated></deprecated>\nAn Accessor Function in DForm that does nothing.",
        "name": "GetAutoSize",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineStart": 6
        }
      },
      {
        "description": "<deprecated></deprecated>\nAn <page>Global.AccessorFunc</page> that does nothing.",
        "name": "GetSpacing",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineStart": 7
        }
      },
      {
        "arguments": [
          {
            "description": "The help message to be displayed",
            "name": "help",
            "type": "string"
          }
        ],
        "description": "Adds a <page>DLabel</page> onto the <page>DForm</page> as a helper",
        "name": "Help",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The created <page>DLabel</page>",
            "type": "Panel"
          }
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineEnd": 223,
          "lineStart": 205
        }
      },
      {
        "arguments": [
          {
            "description": "The label to set on the DListBox",
            "name": "label",
            "type": "string"
          }
        ],
        "description": "Adds a <page>DListBox</page> onto the <page>DForm</page>\n<deprecated>Use <page>DListView</page> with <page>DForm:AddItem</page> instead.</deprecated>",
        "name": "ListBox",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The created <page>DListBox</page>",
            "type": "Panel"
          },
          {
            "description": "The created <page>DLabel</page>",
            "type": "Panel"
          }
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineEnd": 295,
          "lineStart": 277
        }
      },
      {
        "arguments": [
          {
            "description": "The label to be placed next to the DNumberWang",
            "name": "label",
            "type": "string"
          },
          {
            "description": "The console variable to change when the slider is changed",
            "name": "convar",
            "type": "string"
          },
          {
            "description": "The minimum value of the slider",
            "name": "min",
            "type": "number"
          },
          {
            "description": "The maximum value of the slider",
            "name": "max",
            "type": "number"
          },
          {
            "default": "nil",
            "description": "The number of decimals to allow in the slider (Optional)",
            "name": "decimals",
            "type": "number"
          }
        ],
        "description": "Adds a <page>DNumberWang</page> onto the <page>DForm</page>",
        "name": "NumberWang",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The created <page>DNumberWang</page>",
            "type": "Panel"
          },
          {
            "description": "The created <page>DLabel</page>",
            "type": "Panel"
          }
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineEnd": 172,
          "lineStart": 154
        }
      },
      {
        "arguments": [
          {
            "description": "The label of the DNumSlider",
            "name": "label",
            "type": "string"
          },
          {
            "description": "The console variable to change when the slider is changed",
            "name": "convar",
            "type": "string"
          },
          {
            "description": "The minimum value of the slider",
            "name": "min",
            "type": "number"
          },
          {
            "description": "The maximum value of the slider",
            "name": "max",
            "type": "number"
          },
          {
            "default": "2",
            "description": "The number of decimals to allow on the slider.",
            "name": "decimals",
            "type": "number"
          }
        ],
        "description": "Adds a <page>DNumSlider</page> onto the <page>DForm</page>",
        "name": "NumSlider",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The created <page>DNumSlider</page>",
            "type": "Panel"
          }
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineEnd": 190,
          "lineStart": 174
        }
      },
      {
        "description": "<deprecated>This is derived from the deprecated <page>DPanelSelect</page>.</deprecated>Creates a <page>DPanelSelect</page> and docks it to the top of the DForm.",
        "name": "PanelSelect",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The created DPanelSelect.",
            "type": "Panel"
          }
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineEnd": 275,
          "lineStart": 269
        }
      },
      {
        "arguments": [
          {
            "description": "The label to display above the prop select.",
            "name": "label",
            "type": "string"
          },
          {
            "description": "The convar to set the selected model to.",
            "name": "convar",
            "type": "string"
          },
          {
            "description": "A table of models to display for selection. Supports 2 formats:\n1) Key is the model and value are the <page>convar</page>s to set when that model is selected in format `convar=value`\n2) An table of tables where each table must have the following keys:\n* <page>string</page> model - The model.\n* <page>number</page> skin - Model's skin. Defaults to 0\n* <page>string</page> tooltip - Displayed when user hovers over the model. Defaults to the model path.\n* The key of the table is the value of the convar.",
            "name": "models",
            "type": "table"
          },
          {
            "default": "2",
            "description": "The height of the prop select panel, in 64px icon increments.",
            "name": "height",
            "type": "number"
          }
        ],
        "description": "Creates a <page>PropSelect</page> panel and docks it to the top of the DForm.",
        "name": "PropSelect",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The created <page>PropSelect</page> panel.",
            "type": "Panel"
          }
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineEnd": 132,
          "lineStart": 91
        }
      },
      {
        "description": "<deprecated></deprecated>\n\nDoes nothing.",
        "name": "Rebuild",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineEnd": 298,
          "lineStart": 297
        }
      },
      {
        "arguments": [
          {
            "description": "",
            "type": "boolean"
          }
        ],
        "description": "<deprecated></deprecated>\n\nan <page>Global.AccessorFunc</page> that does nothing",
        "name": "SetAutoSize",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineStart": 6
        }
      },
      {
        "arguments": [
          {
            "description": "The new header name.",
            "name": "name",
            "type": "string"
          }
        ],
        "description": "Sets the title (header) name of the DForm. This is `Label` until set.\n\n<deprecated>This is an alias of derived <page>DCollapsibleCategory:SetLabel</page></deprecated>",
        "name": "SetName",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineEnd": 28,
          "lineStart": 24
        }
      },
      {
        "arguments": [
          {
            "description": "",
            "type": "number"
          }
        ],
        "description": "<deprecated></deprecated>\n\nAn <page>Global.AccessorFunc</page> that does nothing.",
        "name": "SetSpacing",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineStart": 7
        }
      },
      {
        "arguments": [
          {
            "description": "The label to be next to the text entry",
            "name": "label",
            "type": "string"
          },
          {
            "description": "The console variable to be changed when the text entry is changed",
            "name": "convar",
            "type": "string"
          }
        ],
        "description": "Adds a <page>DTextEntry</page> to a <page>DForm</page>",
        "name": "TextEntry",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The created <page>DTextEntry</page>",
            "type": "Panel"
          },
          {
            "description": "The created <page>DLabel</page>",
            "type": "Panel"
          }
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineEnd": 89,
          "lineStart": 75
        }
      }
    ],
    "name": "DForm",
    "parent": "DCollapsibleCategory"
  },
  {
    "description": "The DFrame is the moma of basically all VGUI elements. 98% of the time you will parent your element to this.",
    "functions": [
      {
        "description": "Centers the frame relative to the whole screen and invalidates its layout. This overrides <page>Panel:Center</page>.",
        "name": "Center",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dframe.lua",
          "lineEnd": 110,
          "lineStart": 104
        }
      },
      {
        "description": "Hides or removes the DFrame, and calls <page>DFrame:OnClose</page>.\n\nTo set whether the frame is hidden or removed, use <page>DFrame:SetDeleteOnClose</page>.",
        "name": "Close",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dframe.lua",
          "lineEnd": 99,
          "lineStart": 89
        }
      },
      {
        "description": "Gets whether the background behind the frame is being blurred.",
        "name": "GetBackgroundBlur",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether or not background blur is enabled.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dframe.lua",
          "lineStart": 14
        }
      },
      {
        "description": "Determines whether or not the DFrame will be removed when it is closed. This is set with <page>DFrame:SetDeleteOnClose</page>.",
        "name": "GetDeleteOnClose",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether or not the frame will be removed on close.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dframe.lua",
          "lineStart": 8
        }
      },
      {
        "description": "Gets whether or not the frame is draggable by the user.",
        "name": "GetDraggable",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether the frame is draggable or not.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dframe.lua",
          "lineStart": 5
        }
      },
      {
        "description": "Gets whether or not the frame is part of a derma menu. This is set with <page>DFrame:SetIsMenu</page>.",
        "name": "GetIsMenu",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether or not this frame is a menu component.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dframe.lua",
          "lineStart": 4
        }
      },
      {
        "description": "Gets the minimum height the DFrame can be resized to by the user.\n\nYou must call <page>DFrame:SetSizable</page> before the user can resize the frame.",
        "name": "GetMinHeight",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The minimum height the user can resize the frame to.",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/vgui/dframe.lua",
          "lineStart": 12
        }
      },
      {
        "description": "Gets the minimum width the DFrame can be resized to by the user.\n\nYou must call <page>DFrame:SetSizable</page> before the user can resize the frame.",
        "name": "GetMinWidth",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The minimum width the user can resize the frame to.",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/vgui/dframe.lua",
          "lineStart": 11
        }
      },
      {
        "description": "Gets whether or not the shadow effect bordering the DFrame is being drawn.",
        "name": "GetPaintShadow",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether or not the shadow is being drawn.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dframe.lua",
          "lineStart": 9
        }
      },
      {
        "description": "Gets whether or not the DFrame is restricted to the boundaries of the screen resolution.",
        "name": "GetScreenLock",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether or not the frame is restricted.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dframe.lua",
          "lineStart": 7
        }
      },
      {
        "description": "Gets whether or not the DFrame can be resized by the user.\n\nThis is achieved by clicking and dragging in the bottom right corner of the frame.",
        "name": "GetSizable",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether the frame can be resized or not.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dframe.lua",
          "lineStart": 6
        }
      },
      {
        "description": "Returns the title of the frame.",
        "name": "GetTitle",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Title of the frame.",
            "type": "string"
          }
        ],
        "source": {
          "file": "lua/vgui/dframe.lua",
          "lineEnd": 81,
          "lineStart": 77
        }
      },
      {
        "description": "Determines if the frame or one of its children has the screen focus.",
        "name": "IsActive",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether or not the frame has focus.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dframe.lua",
          "lineEnd": 119,
          "lineStart": 112
        }
      },
      {
        "description": "Called when the DFrame is closed with <page>DFrame:Close</page>. This applies when the `close` button in the DFrame's control box is clicked.\n\nThis function does nothing and is safe to override.\n\nThis is **not** called when the DFrame is removed with <page>Panel:Remove</page>, see <page>PANEL:OnRemove</page> for that.",
        "name": "OnClose",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dframe.lua",
          "lineEnd": 102,
          "lineStart": 101
        }
      },
      {
        "arguments": [
          {
            "description": "Whether or not to block mouse on background panels or not.",
            "name": "blur",
            "type": "boolean"
          }
        ],
        "description": "Indicate that the background elements won't be usable.",
        "name": "SetBackgroundBlur",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether or not to delete the frame on close. This is `true` by default.",
            "name": "shouldDelete",
            "type": "boolean"
          }
        ],
        "description": "Determines whether or not the DFrame is removed when it is closed with <page>DFrame:Close</page>.",
        "name": "SetDeleteOnClose",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether to be draggable or not.",
            "name": "draggable",
            "type": "boolean"
          }
        ],
        "description": "Sets whether the frame should be draggable by the user. The DFrame can only be dragged from its title bar.",
        "name": "SetDraggable",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Set to nil to remove the icon.\n\nOtherwise, set to file path to create the icon.",
            "name": "path",
            "type": "string"
          }
        ],
        "description": "Adds or removes an icon on the left of the <page>DFrame</page>'s title.",
        "name": "SetIcon",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dframe.lua",
          "lineEnd": 135,
          "lineStart": 121
        }
      },
      {
        "arguments": [
          {
            "description": "Whether or not this frame is a menu component.",
            "name": "isMenu",
            "type": "boolean"
          }
        ],
        "description": "Sets whether the frame is part of a derma menu or not.\n\nIf this is set to `true`, <page>Global.CloseDermaMenus</page> will not be called when the frame is clicked, and thus any open menus will remain open.",
        "name": "SetIsMenu",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The minimum height the user can resize the frame to.",
            "name": "minH",
            "type": "number"
          }
        ],
        "description": "Sets the minimum height the DFrame can be resized to by the user.\n\nThis only applies to users attempting to resize the frame; <page>Panel:SetTall</page> and similar methods will not be affected. You must call <page>DFrame:SetSizable</page> before the user can resize the frame.",
        "name": "SetMinHeight",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The minimum width the user can resize the frame to.",
            "name": "minW",
            "type": "number"
          }
        ],
        "description": "Sets the minimum width the DFrame can be resized to by the user.\n\nThis only applies to users attempting to resize the frame; <page>Panel:SetWide</page> and similar methods will not be affected. You must call <page>DFrame:SetSizable</page> before the user can resize the frame.",
        "name": "SetMinWidth",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether or not to draw the shadow. This is `true` by default.",
            "name": "shouldPaint",
            "type": "boolean"
          }
        ],
        "description": "Sets whether or not the shadow effect bordering the DFrame should be drawn.",
        "name": "SetPaintShadow",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "If `true`, the frame cannot be dragged outside of the screen bounds",
            "name": "lock",
            "type": "boolean"
          }
        ],
        "description": "Sets whether the DFrame is restricted to the boundaries of the screen resolution.",
        "name": "SetScreenLock",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether the frame should be resizeable or not.",
            "name": "sizeable",
            "type": "boolean"
          }
        ],
        "description": "Sets whether or not the <page>DFrame</page> can be resized by the user.\n\nThis is achieved by clicking and dragging in the bottom right corner of the frame.\n\nYou can set the minimum size using <page>DFrame:SetMinWidth</page> and <page>DFrame:SetMinHeight</page>.",
        "name": "SetSizable",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "New title of the frame.",
            "name": "title",
            "type": "string"
          }
        ],
        "description": "Sets the title of the frame.",
        "name": "SetTitle",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dframe.lua",
          "lineEnd": 87,
          "lineStart": 83
        }
      },
      {
        "arguments": [
          {
            "description": "`false` hides the control box; this is `true` by default.",
            "name": "show",
            "type": "boolean"
          }
        ],
        "description": "Determines whether the DFrame's control box (close, minimise and maximise buttons) is displayed.",
        "name": "ShowCloseButton",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dframe.lua",
          "lineEnd": 75,
          "lineStart": 69
        }
      }
    ],
    "name": "DFrame",
    "parent": "EditablePanel"
  },
  {
    "description": "A really simple grid layout panel.\n\n<note>This panel will set its size automatically based on set column count.\nThis makes it play badly with <page>Panel:Dock</page> and cause a <page>PANEL:PerformLayout</page> call every frame.</note>",
    "functions": [
      {
        "arguments": [
          {
            "description": "The item to add. It will be forced visible and parented to the <page>DGrid</page>.",
            "name": "item",
            "type": "Panel"
          }
        ],
        "description": "Adds a new item to the grid.",
        "name": "AddItem",
        "parent": "DGrid",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Returns the number of columns of this <page>DGrid</page>. Set by <page>DGrid:SetCols</page>.",
        "name": "GetCols",
        "parent": "DGrid",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The number of columns of this <page>DGrid</page>",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the width of each column of the <page>DGrid</page>, which is set by <page>DGrid:SetColWide</page>.",
        "name": "GetColWide",
        "parent": "DGrid",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The width of each column",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns a list of panels in the grid.",
        "name": "GetItems",
        "parent": "DGrid",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "A list of <page>Panel</page>s.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns the height of each row of the <page>DGrid</page>, which is set by <page>DGrid:SetRowHeight</page>.",
        "name": "GetRowHeight",
        "parent": "DGrid",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The height of each row",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Item to remove from the grid",
            "name": "item",
            "type": "Panel"
          },
          {
            "default": "false",
            "description": "If set to true, the actual panel will not be removed via <page>Panel:Remove</page>.",
            "name": "bDontDelete",
            "type": "boolean"
          }
        ],
        "description": "Removes given panel from the <page>DGrid:GetItems</page>.",
        "name": "RemoveItem",
        "parent": "DGrid",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The desired number of columns",
            "name": "cols",
            "type": "number"
          }
        ],
        "description": "Sets the number of columns this panel should have.\n\nThe <page>DGrid</page> will resize its width to match this value.",
        "name": "SetCols",
        "parent": "DGrid",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The width of each column.",
            "name": "colWidth",
            "type": "number"
          }
        ],
        "description": "Sets the width of each column.\n\nThe cell panels (grid items) will not be resized or centered.",
        "name": "SetColWide",
        "parent": "DGrid",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The height of each row",
            "name": "rowHeight",
            "type": "number"
          }
        ],
        "description": "Sets the height of each row.\n\nThe cell panels (grid items) will not be resized or centered.",
        "name": "SetRowHeight",
        "parent": "DGrid",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "A key in the panel from <page>DGrid:GetItems</page>. The key's value must be numeric.",
            "name": "key",
            "type": "string"
          },
          {
            "default": "true",
            "description": "True for descending order, false for ascending.",
            "name": "desc",
            "type": "boolean"
          }
        ],
        "description": "Sorts the items in the grid. Does not visually update the grid, use <page>Panel:InvalidateLayout</page> for that.",
        "name": "SortByMember",
        "parent": "DGrid",
        "realms": [
          "client",
          "menu"
        ]
      }
    ],
    "name": "DGrid",
    "parent": "Panel"
  },
  {
    "description": "Creates an invisible vertical divider between two GUI elements.",
    "functions": [
      {
        "description": "Returns the width of the horizontal divider bar, set by <page>DHorizontalDivider:SetDividerWidth</page>.",
        "name": "GetDividerWidth",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The width of the horizontal divider bar",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns whether or not the player is currently dragging the middle divider bar.",
        "name": "GetDragging",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Whether or not the player is currently dragging the middle divider bar.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "<internal></internal>\n\nReturns the local X coordinate of where the player started dragging the thing",
        "name": "GetHoldPos",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the left side content of the <page>DHorizontalDivider</page>",
        "name": "GetLeft",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The content on the left side",
            "type": "Panel"
          }
        ]
      },
      {
        "description": "Returns the minimum width of the left side, set by <page>DHorizontalDivider:SetLeftMin</page>.",
        "name": "GetLeftMin",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The minimum width of the left side",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the current width of the left side, set by <page>DHorizontalDivider:SetLeftWidth</page> or by the user.",
        "name": "GetLeftWidth",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The current width of the left side",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the middle content, set by <page>DHorizontalDivider:SetMiddle</page>.",
        "name": "GetMiddle",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The middle content",
            "type": "Panel"
          }
        ]
      },
      {
        "description": "Returns the right side content",
        "name": "GetRight",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The right side content",
            "type": "Panel"
          }
        ]
      },
      {
        "description": "Returns the minimum width of the right side, set by <page>DHorizontalDivider:SetRightMin</page>.",
        "name": "GetRightMin",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The minimum width of the right side",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The width of the horizontal divider bar.",
            "name": "width",
            "type": "number"
          }
        ],
        "description": "Sets the width of the horizontal divider bar.",
        "name": "SetDividerWidth",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "dragonot",
            "type": "boolean"
          }
        ],
        "description": "<internal></internal>\n\nSets whether the player is dragging the divider or not",
        "name": "SetDragging",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "x",
            "type": "number"
          }
        ],
        "description": "<internal></internal>\n\nSets the local X coordinate of where the player started dragging the thing",
        "name": "SetHoldPos",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The panel to set as the left side",
            "name": "pnl",
            "type": "Panel"
          }
        ],
        "description": "Sets the left side content of the <page>DHorizontalDivider</page>.",
        "name": "SetLeft",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The minimum width of the left side",
            "name": "minWidth",
            "type": "number"
          }
        ],
        "description": "Sets the minimum width of the left side",
        "name": "SetLeftMin",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The current/starting width of the left side",
            "name": "width",
            "type": "number"
          }
        ],
        "description": "Sets the current/starting width of the left side.\n\nThe width of the right side is automatically calculated by subtracting this from the total width of the <page>DHorizontalDivider</page>.",
        "name": "SetLeftWidth",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The middle content",
            "name": "middle",
            "type": "Panel"
          }
        ],
        "description": "Sets the middle content, over the draggable divider bar panel.",
        "name": "SetMiddle",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The right side content",
            "name": "pnl",
            "type": "Panel"
          }
        ],
        "description": "Sets the right side content",
        "name": "SetRight",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The minimum width of the right side",
            "name": "minWidth",
            "type": "number"
          }
        ],
        "description": "Sets the minimum width of the right side",
        "name": "SetRightMin",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ]
      },
      {
        "description": "<internal></internal><validate>TODO Document me</validate>",
        "name": "StartGrab",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ]
      }
    ],
    "name": "DHorizontalDivider",
    "parent": "DPanel"
  },
  {
    "description": "A very basic horizontal scrollable panel, similar to <page>DScrollPanel</page>.\n\nUsed internally in <page>DPropertySheet</page>.",
    "functions": [
      {
        "arguments": [
          {
            "description": "The panel to add. It will be automatically parented.",
            "name": "pnl",
            "type": "Panel"
          }
        ],
        "description": "Adds a panel to the <page>DHorizontalScroller</page>.",
        "name": "AddPanel",
        "parent": "DHorizontalScroller",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Returns the internal canvas panel where the content of <page>DHorizontalScroller</page> are placed on.",
        "name": "GetCanvas",
        "parent": "DHorizontalScroller",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The <page>DDragBase</page> panel.",
            "type": "Panel"
          }
        ]
      },
      {
        "description": "Returns the overlap set by <page>DHorizontalScroller:SetOverlap</page>.",
        "name": "GetOverlap",
        "parent": "DHorizontalScroller",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The overlap.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns whether this panel should show drop targets.",
        "name": "GetShowDropTargets",
        "parent": "DHorizontalScroller",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "name",
            "type": "string"
          }
        ],
        "description": "Same as <page>DDragBase:MakeDroppable</page>.\nTODO: Transclude or whatever to here?",
        "name": "MakeDroppable",
        "parent": "DHorizontalScroller",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Called when the panel is scrolled.",
        "name": "OnDragModified",
        "parent": "DHorizontalScroller",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The target child panel. Must be a child of <page>DHorizontalScroller:GetCanvas</page>",
            "name": "target",
            "type": "Panel"
          }
        ],
        "description": "Scrolls the <page>DHorizontalScroller</page> to given child panel.",
        "name": "ScrollToChild",
        "parent": "DHorizontalScroller",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Overlap in pixels. Positive numbers will make elements `overlap` each other, negative will add spacing.",
            "name": "overlap",
            "type": "number"
          }
        ],
        "description": "Controls the spacing between elements of the horizontal scroller.",
        "name": "SetOverlap",
        "parent": "DHorizontalScroller",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new scroll amount",
            "name": "scroll",
            "type": "number"
          }
        ],
        "description": "Sets the scroll amount, automatically clamping the value.",
        "name": "SetScroll",
        "parent": "DHorizontalScroller",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "newState",
            "type": "boolean"
          }
        ],
        "description": "Sets whether this panel should show drop targets.",
        "name": "SetShowDropTargets",
        "parent": "DHorizontalScroller",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "newState",
            "type": "boolean"
          }
        ],
        "description": "Same as <page>DDragBase:SetUseLiveDrag</page>",
        "name": "SetUseLiveDrag",
        "parent": "DHorizontalScroller",
        "realms": [
          "client",
          "menu"
        ]
      }
    ],
    "name": "DHorizontalScroller",
    "parent": "Panel"
  },
  {
    "description": "A generic horizontal scrollbar. See the vertical alternative [here](DVScrollBar).\n\nThe scrollbar notably contains `DHScrollBar.btnLeft`, `DHScrollBar.btnRight`, and `DHScrollBar.btnGrip` which are the left button, right button, and grip respectively. Editing the paint functions of these allows custom scrollbar styling, although it is a better idea to use [Derma Skins](Derma_Skin_Creation).",
    "functions": [
      {
        "arguments": [
          {
            "description": "How much to scroll rightwards. Can be negative for leftwards scroll",
            "name": "add",
            "type": "number"
          }
        ],
        "description": "Adds specified amount of scroll in pixels.",
        "name": "AddScroll",
        "parent": "DHScrollBar",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "True if the scroll level was changed (i.e. if we did or did not scroll)",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The scroll level to animate to. In pixels from the left ( from 0 )",
            "name": "scroll",
            "type": "number"
          },
          {
            "description": "Length of the animation in seconds",
            "name": "length",
            "type": "number"
          },
          {
            "default": "0",
            "description": "Delay of the animation in seconds",
            "name": "delay",
            "type": "number"
          },
          {
            "default": "-1",
            "description": "See <page>Panel:NewAnimation</page> for explanation.",
            "name": "ease",
            "type": "number"
          }
        ],
        "description": "Smoothly scrolls to given level.",
        "name": "AnimateTo",
        "parent": "DHScrollBar",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Returns the scale of the scroll bar based on the difference in size between the visible \"window\" into the canvas that is being scrolled. Should be used after <page>DHScrollBar:SetUp</page>.",
        "name": "BarScale",
        "parent": "DHScrollBar",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The scale of the scrollbar.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns whether or not the manual left/right scroll buttons are visible or not. Set by <page>DHScrollBar:SetHideButtons</page>.",
        "name": "GetHideButtons",
        "parent": "DHScrollBar",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether or not the manual left/right scroll buttons are visible or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the negative of <page>DHScrollBar:GetScroll</page>.",
        "name": "GetOffset",
        "parent": "DHScrollBar",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The scroll offset.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the amount of scroll level from the left in pixels.",
        "name": "GetScroll",
        "parent": "DHScrollBar",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The amount of scroll level from the left edge.",
            "type": "number"
          }
        ]
      },
      {
        "description": "<internal></internal>\n\nCalled from within <page>DScrollBarGrip</page>",
        "name": "Grip",
        "parent": "DHScrollBar",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "True to hide",
            "name": "hide",
            "type": "boolean"
          }
        ],
        "description": "Allows hiding the left and right buttons for better visual stylisation.",
        "name": "SetHideButtons",
        "parent": "DHScrollBar",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new scroll value.",
            "name": "scroll",
            "type": "number"
          }
        ],
        "description": "Sets the scroll level in pixels.",
        "name": "SetScroll",
        "parent": "DHScrollBar",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The size of the panel that holds the canvas, basically size of \"1 page\".",
            "name": "barSize",
            "type": "number"
          },
          {
            "description": "The total size of the canvas, this typically is the bigger number.",
            "name": "canvasSize",
            "type": "number"
          }
        ],
        "description": "Sets up the scrollbar for use.\n\nThe scrollbar will automatically disable itself if the total width of the canvas is lower than the width of the panel that holds the canvas during this function call.",
        "name": "SetUp",
        "parent": "DHScrollBar",
        "realms": [
          "client",
          "menu"
        ]
      }
    ],
    "name": "DHScrollBar",
    "parent": "Panel"
  },
  {
    "description": "The DHTML control wraps the internal Awesomium framework, supports calling Javascript functions from Lua,\nas well as running Lua from within the HTML. Running Lua code is disabled by default.",
    "functions": [
      {
        "arguments": [
          {
            "description": "Library name of the JS function you are defining.",
            "name": "library",
            "type": "string"
          },
          {
            "description": "Name of the JS function you are defining.",
            "name": "name",
            "type": "string"
          },
          {
            "description": "Function called when the JS function is called. Arguments passed to the JS function will be passed here.",
            "name": "callback",
            "type": "function"
          }
        ],
        "description": "Defines a Javascript function that when called will call a Lua callback.\n<note>Must be called after the HTML document has fully loaded.</note>",
        "name": "AddFunction",
        "parent": "DHTML",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dhtml.lua",
          "lineEnd": 146,
          "lineStart": 123
        }
      },
      {
        "arguments": [
          {
            "description": "Specify JavaScript code to be executed.",
            "name": "js",
            "type": "string"
          }
        ],
        "description": "Runs/Executes a string as JavaScript code in a panel.\n<note>This function does **NOT** evaluate expression (i.e. allow you to pass variables from JavaScript (JS) to Lua context).<br>Because a return value is nil/no value (a.k.a. void).<br>If you wish to pass/return values from JS to Lua, you may want to use <page>DHTML:AddFunction</page> function to accomplish that job.</note>\n<note>This function is an alias of <page>DHTML:QueueJavascript</page> ([source](https://github.com/Facepunch/garrysmod/blob/master/garrysmod/lua/vgui/dhtml.lua#L62)).</note>",
        "name": "Call",
        "parent": "DHTML",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The message to be logged (or Lua code to be executed; see above).",
            "name": "msg",
            "type": "string"
          }
        ],
        "description": "Called when the page inside the <page>DHTML</page> window runs the `console.log` javascript function. On the x86-64 beta, it's called for all built-in `console.*` javascript functions.\n\nIf <page>DHTML:SetAllowLua</page> is set to `true` and the message begins with `RUNLUA:`, the text following `RUNLUA:` will be executed as code within the Lua environment (this is how Lua is called from DHTML windows).",
        "name": "ConsoleMessage",
        "parent": "DHTML",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dhtml.lua",
          "lineEnd": 97,
          "lineStart": 66
        }
      },
      {
        "description": "Returns if the loaded page can run Lua code, set by <page>DHTML:SetAllowLua</page>",
        "name": "GetAllowLua",
        "parent": "DHTML",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether or not Lua code can be called from the loaded page.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "<deprecated>Broken. Use the CSS `overflow` rule instead.</deprecated>\n\nReturns the value set by <page>DHTML:SetScrollbars</page>.",
        "name": "GetScrollbars",
        "parent": "DHTML",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "True if scrollbars should be visible.",
            "name": "show",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The URL of the current page.",
            "name": "url",
            "type": "string"
          }
        ],
        "description": "Called when this panel begins loading a page.",
        "name": "OnBeginLoadingDocument",
        "parent": "DHTML",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dhtml.lua",
          "lineEnd": 152,
          "lineStart": 148
        }
      },
      {
        "arguments": [
          {
            "description": "Library name of the JS function that was called.",
            "name": "library",
            "type": "string"
          },
          {
            "description": "Name of the JS function that was called.",
            "name": "name",
            "type": "string"
          },
          {
            "description": "Table containing all arguments passed to the JS function.",
            "name": "arguments",
            "type": "table"
          }
        ],
        "description": "Called by the engine when a callback function is called.",
        "name": "OnCallback",
        "parent": "DHTML",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Return `true` to suppress default engine action.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dhtml.lua",
          "lineEnd": 121,
          "lineStart": 107
        }
      },
      {
        "arguments": [
          {
            "description": "New target URL.",
            "name": "url",
            "type": "string"
          }
        ],
        "description": "Called by HTML panels when the target URL of the frame has changed, this happens when you hover over a link.",
        "name": "OnChangeTargetURL",
        "parent": "DHTML",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dhtml.lua",
          "lineEnd": 182,
          "lineStart": 178
        }
      },
      {
        "arguments": [
          {
            "description": "The new title of the page.",
            "name": "newTitle",
            "type": "string"
          }
        ],
        "description": "Called by HTML panels when the title of the loaded page has been changed.",
        "name": "OnChangeTitle",
        "parent": "DHTML",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dhtml.lua",
          "lineEnd": 176,
          "lineStart": 172
        }
      },
      {
        "arguments": [
          {
            "description": "The URL of the page requesting to create a child.",
            "name": "sourceURL",
            "type": "string"
          },
          {
            "description": "The URL of the requested child.",
            "name": "targetURL",
            "type": "string"
          },
          {
            "description": "True if the requested view is a popup.",
            "name": "isPopup",
            "type": "boolean"
          }
        ],
        "description": "Called by HTML panels when the page attempts to open a new child view (such as a popup or new tab).",
        "name": "OnChildViewCreated",
        "parent": "DHTML",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dhtml.lua",
          "lineEnd": 170,
          "lineStart": 166
        }
      },
      {
        "arguments": [
          {
            "description": "The URL of the current page.",
            "name": "url",
            "type": "string"
          }
        ],
        "description": "Called by HTML panels when the panel's DOM has been set up. You can run JavaScript in here.",
        "name": "OnDocumentReady",
        "parent": "DHTML",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dhtml.lua",
          "lineEnd": 164,
          "lineStart": 160
        }
      },
      {
        "arguments": [
          {
            "description": "The URL of the current page.",
            "name": "url",
            "type": "string"
          }
        ],
        "description": "Called when this panel successfully loads a page.",
        "name": "OnFinishLoadingDocument",
        "parent": "DHTML",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/dhtml.lua",
          "lineEnd": 158,
          "lineStart": 154
        }
      },
      {
        "arguments": [
          {
            "description": "Specify JavaScript code to be executed.",
            "name": "js",
            "type": "string"
          }
        ],
        "description": "Runs/Executes a string as JavaScript code in a panel.\n\n<note>This function does **NOT** evaluate expression (i.e. allow you to pass variables from JavaScript (JS) to Lua context).<br>Because a return value is nil/no value (a.k.a. void).<br>If you wish to pass/return values from JS to Lua, you may want to use <page>DHTML:AddFunction</page> function to accomplish that job.</note>\n<note>If <page>Panel:IsVisible</page> is `false`, <page>PANEL:Think</page> will **NOT** run, meaning the Javascript Queue will not be processed.<br><br>Consider overriding <page>PANEL:Paint</page> to stop the panel from drawing instead.</note>",
        "name": "QueueJavascript",
        "parent": "DHTML",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "default": "false",
            "description": "Whether or not to allow Lua.",
            "name": "allow",
            "type": "boolean"
          }
        ],
        "description": "Determines whether the loaded page can run Lua code or not. See <page>DHTML</page> for how to run Lua from a DHTML window.",
        "name": "SetAllowLua",
        "parent": "DHTML",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "True if scrollbars should be visible.",
            "name": "show",
            "type": "boolean"
          }
        ],
        "description": "<deprecated>Broken. Use the CSS `overflow` rule instead.</deprecated> Sets if the loaded window should display scrollbars when the webpage is larger than the viewing window. This is similar to the CSS `overflow` rule.",
        "name": "SetScrollbars",
        "parent": "DHTML",
        "realms": [
          "client",
          "menu"
        ]
      }
    ],
    "name": "DHTML",
    "parent": "Awesomium"
  },
  {
    "description": "An element providing navigation controls for a <page>DHTML</page> window.",
    "functions": [
      {
        "description": "<internal></internal>",
        "name": "FinishedLoading",
        "parent": "DHTMLControls",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "A <page>Color</page>",
            "name": "clr",
            "type": "table"
          }
        ],
        "description": "Sets the color of the navigation buttons.",
        "name": "SetButtonColor",
        "parent": "DHTMLControls",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The HTML panel",
            "name": "dhtml",
            "type": "Panel"
          }
        ],
        "description": "Sets the <page>DHTML</page> element to control with these <page>DHTMLControls</page>.",
        "name": "SetHTML",
        "parent": "DHTMLControls",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "<internal></internal>",
        "name": "StartedLoading",
        "parent": "DHTMLControls",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "url",
            "type": "string"
          }
        ],
        "description": "<internal></internal>\n\nBasically adds an URL to the history.",
        "name": "UpdateHistory",
        "parent": "DHTMLControls",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "<internal></internal>",
        "name": "UpdateNavButtonStatus",
        "parent": "DHTMLControls",
        "realms": [
          "client",
          "menu"
        ]
      }
    ],
    "name": "DHTMLControls",
    "parent": "Panel"
  },
  {
    "description": "Simply a <page>DIconLayout</page> which automatically displays all of the <page text=\"Silkicons\">silkicons</page>.\nUsed as a way to get the user to select an icon.",
    "functions": [
      {
        "description": "<internal></internal>\n\nAutomatically called to fill the browser with icons. Will not work if <page>DIconBrowser:SetManual</page> is set to true.",
        "name": "Fill",
        "parent": "DIconBrowser",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The text to search for",
            "name": "text",
            "type": "string"
          }
        ],
        "description": "A simple unused search feature, hides all icons that do not contain given text in their file path.",
        "name": "FilterByText",
        "parent": "DIconBrowser",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Returns whether or not the browser should fill itself with icons.",
        "name": "GetManual",
        "parent": "DIconBrowser",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the currently selected icon's file path.",
        "name": "GetSelectedIcon",
        "parent": "DIconBrowser",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The currently selected icon's file path.",
            "type": "string"
          }
        ]
      },
      {
        "description": "Called when the selected icon was changed. Use <page>DIconBrowser:GetSelectedIcon</page> to get the selected icon's filepath.",
        "name": "OnChange",
        "parent": "DIconBrowser",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "<internal></internal>\n\nUse <page>DIconBrowser:OnChange</page> instead",
        "name": "OnChangeInternal",
        "parent": "DIconBrowser",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Scrolls the browser to the selected icon",
        "name": "ScrollToSelected",
        "parent": "DIconBrowser",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The file path of the icon to select. Do not include the \"materials/\" part.",
            "name": "icon",
            "type": "string"
          }
        ],
        "description": "Selects an icon from file path",
        "name": "SelectIcon",
        "parent": "DIconBrowser",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "manual",
            "type": "boolean"
          }
        ],
        "description": "Sets whether or not the browser should automatically fill itself with icons.",
        "name": "SetManual",
        "parent": "DIconBrowser",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "str",
            "type": "string"
          }
        ],
        "description": "<internal></internal>\n\nSet the currently selected file path. Do not use. Use <page>DIconBrowser:SelectIcon</page> instead.",
        "name": "SetSelectedIcon",
        "parent": "DIconBrowser",
        "realms": [
          "client",
          "menu"
        ]
      }
    ],
    "name": "DIconBrowser",
    "parent": "DScrollPanel"
  },
  {
    "description": "DIconLayout is what replaced <page>DPanelList</page> in Garry's Mod 13.\nDPanelList still exists in GMod but is deprecated and does not support the new GWEN skin.\n\n<page>DIconLayout</page> is used to make a list of panels.\nUnlike DPanelList, DIconLayout does not automatically add a scroll bar - the example below shows you how you can do this.",
    "functions": [
      {
        "description": "Creates a replica of the DIconLayout it is called on.",
        "name": "Copy",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The replica.",
            "type": "Panel"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "<page>DIconLayout</page> to copy from.",
            "name": "from",
            "type": "Panel"
          }
        ],
        "description": "Copies the contents (Child elements) of another <page>DIconLayout</page> to itself.",
        "name": "CopyContents",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Returns the size of the border.",
        "name": "GetBorder",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the direction that it will be layed out, using the DOCK enumerations.",
        "name": "GetLayoutDir",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Layout direction.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the distance between two 'icons' on the X axis.",
        "name": "GetSpaceX",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Distance between two 'icons' on the X axis.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns distance between two \"Icons\" on the Y axis.",
        "name": "GetSpaceY",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "distance between two \"Icons\" on the Y axis.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns whether the icon layout will stretch its height to fit all the children.\n\nSee also <page>DIconLayout:GetStretchWidth</page>",
        "name": "GetStretchHeight",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the icon layout will stretch its width to fit all the children.\n\nSee also <page>DIconLayout:GetStretchHeight</page>",
        "name": "GetStretchWidth",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Resets layout vars before calling <page>Panel:InvalidateLayout</page>. This is called when children are added or removed, and must be called when the spacing, border or layout direction is changed.",
        "name": "Layout",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "<internal></internal>\n\nUsed internally to layout the child elements if the <page>DIconLayout:SetLayoutDir</page> is set to LEFT (See <page>Enums/DOCK</page>).",
        "name": "LayoutIcons_LEFT",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "<internal></internal>\n\nUsed internally to layout the child elements if the <page>DIconLayout:SetLayoutDir</page> is set to TOP (See <page>Enums/DOCK</page>).",
        "name": "LayoutIcons_TOP",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Called when the panel is modified.",
        "name": "OnModified",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The border (padding) inside the DIconLayout.",
            "name": "width",
            "type": "number"
          }
        ],
        "description": "Sets the internal border (padding) within the DIconLayout. This will not change its size, only the positioning of children. You must call <page>DIconLayout:Layout</page> in order for the changes to take effect.",
        "name": "SetBorder",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "<page>Enums/DOCK</page>",
            "name": "direction",
            "type": "number"
          }
        ],
        "description": "Sets the direction that it will be layed out, using the <page>Enums/DOCK</page>.\n\nCurrently only TOP and LEFT are supported.",
        "name": "SetLayoutDir",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The width of the gap between child objects.",
            "name": "xSpacing",
            "type": "number"
          }
        ],
        "description": "Sets the horizontal (x) spacing between children within the DIconLayout. You must call <page>DIconLayout:Layout</page> in order for the changes to take effect.",
        "name": "SetSpaceX",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The vertical gap between rows in the DIconLayout.",
            "name": "ySpacing",
            "type": "number"
          }
        ],
        "description": "Sets the vertical (y) spacing between children within the DIconLayout. You must call <page>DIconLayout:Layout</page> in order for the changes to take effect.",
        "name": "SetSpaceY",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "do_stretch",
            "type": "boolean"
          }
        ],
        "description": "If set to true, the icon layout will stretch its height to fit all the children.\n\nSee also <page>DIconLayout:SetStretchWidth</page>",
        "name": "SetStretchHeight",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "stretchW",
            "type": "boolean"
          }
        ],
        "description": "If set to true, the icon layout will stretch its width to fit all the children.\n\nSee also <page>DIconLayout:SetStretchHeight</page>",
        "name": "SetStretchWidth",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ]
      }
    ],
    "name": "DIconLayout",
    "parent": "DDragBase"
  },
  {
    "description": "<page>DImage</page> is an advanced, more robust version of the <page>Material</page> panel.\n\nSee <page>DImageButton</page> for a click-able version of this panel.",
    "functions": [
      {
        "description": "<internal></internal>\n\nActually loads the <page>IMaterial</page> to render it. Called from <page>DImage:LoadMaterial</page>.",
        "name": "DoLoadMaterial",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "<internal></internal>\n\n\"Fixes\" the current material of the <page>DImage</page> if it has VertexLit shader by creating a new one with the same name and a prefix of \"_DImage\" and automatically calling <page>DImage:SetMaterial</page> with the new material.\n\nThis fixes the problem where using materials using shaders that expect lighting information causing \"weird\" flickering when displayed in 2D/Unlit environment.",
        "name": "FixVertexLitMaterial",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "<internal></internal>\n\nReturns the texture path set by <page>DImage:SetFailsafeMatName</page>.",
        "name": "GetFailsafeMatName",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns the image loaded in the image panel.",
        "name": "GetImage",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The path to the image that is loaded.",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns the color override of the image panel.",
        "name": "GetImageColor",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The color override of the image. Uses the <page>Color</page>.",
            "name": "col",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns whether the <page>DImage</page> should keep the aspect ratio of its image when being resized.\n\nSee <page>DImage:SetKeepAspect</page> for more info on how it works.",
        "name": "GetKeepAspect",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether the <page>DImage</page> should keep the aspect ratio of its image when being resized.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the current <page>Global.Material</page> of the <page>DImage</page>.",
        "name": "GetMaterial",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "IMaterial"
          }
        ]
      },
      {
        "description": "<internal></internal>\n\nReturns the texture path set by <page>DImage:SetMatName</page>.",
        "name": "GetMatName",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "string"
          }
        ]
      },
      {
        "description": "<internal></internal>\n\nInitializes the loading process of the material to render if it is not loaded yet.\n\nYou do not need to call this function. It is done for you automatically.",
        "name": "LoadMaterial",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The x coordinate to draw the panel from.",
            "name": "posX",
            "type": "number"
          },
          {
            "description": "The y coordinate to draw the panel from.",
            "name": "posY",
            "type": "number"
          },
          {
            "description": "The width of the panel image to be drawn.",
            "name": "width",
            "type": "number"
          },
          {
            "description": "The height of the panel image to be drawn.",
            "name": "height",
            "type": "number"
          }
        ],
        "description": "Paints a ghost copy of the DImage panel at the given position and dimensions. This function overrides <page>Panel:PaintAt</page>.",
        "name": "PaintAt",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "backupMat",
            "type": "string"
          }
        ],
        "description": "<internal></internal>\n\nSets the backup material to be loaded when the image is first rendered. Used by <page>DImage:SetOnViewMaterial</page>.",
        "name": "SetFailsafeMatName",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The path of the image to load. When no file extension is supplied the VMT file extension is used.",
            "name": "strImage",
            "type": "string"
          },
          {
            "default": "nil",
            "description": "The path of the backup image.",
            "name": "strBackup",
            "type": "string"
          }
        ],
        "description": "Sets the image to load into the frame. If the first image can't be loaded and `strBackup` is set, that image will be loaded instead.\n\nThis eventually calls <page>DImage:SetMaterial</page>.",
        "name": "SetImage",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dimage.lua",
          "lineStart": 91
        }
      },
      {
        "arguments": [
          {
            "description": "The color override of the image. Uses the <page>Color</page>.",
            "name": "col",
            "type": "table"
          }
        ],
        "description": "Sets the image's color override.",
        "name": "SetImageColor",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "true to keep the aspect ratio, false not to",
            "name": "keep",
            "type": "boolean"
          }
        ],
        "description": "Sets whether the <page>DImage</page> should keep the aspect ratio of its image when being resized.\n\nNote that this will not try to fit the image inside the button, but instead it will fill the button with the image.",
        "name": "SetKeepAspect",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The material to set",
            "name": "mat",
            "type": "IMaterial"
          }
        ],
        "description": "Sets a <page>Global.Material</page> directly as an image.",
        "name": "SetMaterial",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "mat",
            "type": "string"
          }
        ],
        "description": "<internal></internal>\n\nSets the material to be loaded when the image is first rendered. Used by <page>DImage:SetOnViewMaterial</page>.",
        "name": "SetMatName",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "mat",
            "type": "string"
          },
          {
            "description": "",
            "name": "backupMat",
            "type": "string"
          }
        ],
        "description": "Similar to <page>DImage:SetImage</page>, but will only do the expensive part of actually loading the textures/material if the material is about to be rendered/viewed.\n\nUseful for cases like <page>DIconBrowser</page>, where there are hundreds of small icons in 1 panel in a list that do not need all to be loaded at the same time.",
        "name": "SetOnViewMaterial",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Returns true if the image is **not** yet loaded.",
        "name": "Unloaded",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      }
    ],
    "name": "DImage",
    "parent": "DPanel"
  },
  {
    "description": "An image button.\n\nThis panel inherits all methods of <page>DButton</page>, such as <page>DLabel:DoClick</page>.",
    "functions": [
      {
        "description": "<internal></internal>\n\nUsed internally to briefly scale the image when clicked.",
        "name": "DepressImage",
        "parent": "DImageButton",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Returns whether <page>DImageButton:DepressImage</page> is functional or not.",
        "name": "GetDepressImage",
        "parent": "DImageButton",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "`true` to enable image depressing when clicked.",
            "name": "enable",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the \"image\" of the <page>DImageButton</page>. Equivalent of <page>DImage:GetImage</page>.",
        "name": "GetImage",
        "parent": "DImageButton",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The path to the image that is loaded.",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns whether the image inside the button should be stretched to fit it or not\n\nSee <page>DImageButton:SetStretchToFit</page>",
        "name": "GetStretchToFit",
        "parent": "DImageButton",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page>Global.Color</page> to set",
            "name": "color",
            "type": "table"
          }
        ],
        "description": "Sets the color of the image. Equivalent of <page>DImage:SetImageColor</page>",
        "name": "SetColor",
        "parent": "DImageButton",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "`true` to enable image depressing when clicked.",
            "name": "enable",
            "type": "boolean"
          }
        ],
        "description": "Controls whether <page>DImageButton:DepressImage</page> is functional or not.",
        "name": "SetDepressImage",
        "parent": "DImageButton",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "<deprecated></deprecated>\n\nAlias of <page>DImageButton:SetImage</page>.",
        "name": "SetIcon",
        "parent": "DImageButton",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The path of the image to load. When no file extension is supplied the VMT file extension is used.",
            "name": "strImage",
            "type": "string"
          },
          {
            "default": "nil",
            "description": "The path of the backup image.",
            "name": "strBackup",
            "type": "string"
          }
        ],
        "description": "Sets the \"image\" of the <page>DImageButton</page>. Equivalent of <page>DImage:SetImage</page>.",
        "name": "SetImage",
        "parent": "DImageButton",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Set true to make it visible ( default ), or false to hide the image",
            "name": "visible",
            "type": "boolean"
          }
        ],
        "description": "Hides or shows the image of the image button. Internally this calls <page>Panel:SetVisible</page> on the internal <page>DImage</page>.",
        "name": "SetImageVisible",
        "parent": "DImageButton",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "true to keep the aspect ratio, false not to",
            "name": "keep",
            "type": "boolean"
          }
        ],
        "description": "Sets whether the <page>DImageButton</page> should keep the aspect ratio of its image. Equivalent of <page>DImage:SetKeepAspect</page>.\n\nNote that this will not try to fit the image inside the button, but instead it will fill the button with the image.",
        "name": "SetKeepAspect",
        "parent": "DImageButton",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The material to set",
            "name": "mat",
            "type": "IMaterial"
          }
        ],
        "description": "Sets a <page>Global.Material</page> directly as an image. Equivalent of <page>DImage:SetMaterial</page>.",
        "name": "SetMaterial",
        "parent": "DImageButton",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "mat",
            "type": "string"
          },
          {
            "description": "",
            "name": "backup",
            "type": "string"
          }
        ],
        "description": "See <page>DImage:SetOnViewMaterial</page>",
        "name": "SetOnViewMaterial",
        "parent": "DImageButton",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "True to stretch, false to not to stretch",
            "name": "stretch",
            "type": "boolean"
          }
        ],
        "description": "Sets whether the image inside the <page>DImageButton</page> should be stretched to fill the entire size of the button, without preserving aspect ratio.\n\nIf set to false, the image will not be resized at all.",
        "name": "SetStretchToFit",
        "parent": "DImageButton",
        "realms": [
          "client",
          "menu"
        ]
      }
    ],
    "name": "DImageButton",
    "parent": "DButton"
  },
  {
    "description": "Uses the <page>killicon</page> to persistently draw a killicon.",
    "functions": [
      {
        "description": "Gets the killicon being shown.",
        "name": "GetName",
        "parent": "DKillIcon",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The name of the killicon currently being displayed.",
            "type": "string"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the killicon to be displayed.",
            "name": "iconName",
            "type": "string"
          }
        ],
        "description": "Sets the killicon to be displayed. You should call <page>Panel:SizeToContents</page> following this.\n\nKillicons can be added with <page>killicon.Add</page> and <page>killicon.AddFont</page>.",
        "name": "SetName",
        "parent": "DKillIcon",
        "realms": [
          "client"
        ]
      }
    ],
    "name": "DKillIcon",
    "parent": "Panel"
  },
  {
    "description": "A standard Derma text label. A lot of this panels functionality is a base for button elements, such as <page>DButton</page>",
    "functions": [
      {
        "description": "Called when the label is left clicked (on key release) by the player.\n\nThis will be called after <page>DLabel:OnDepressed</page> and <page>DLabel:OnReleased</page>.\n\nThis can be overridden; by default, it calls <page>DLabel:Toggle</page>.\n\nSee also <page>DLabel:DoRightClick</page>, <page>DLabel:DoMiddleClick</page> and <page>DLabel:DoDoubleClick</page>.",
        "name": "DoClick",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Called just before <page>DLabel:DoClick</page>.\n\nIn <page>DLabel</page> does nothing and is safe to override. Used by <page>DMenuOption</page> and <page>DCollapsibleCategory</page>'s tabs.",
        "name": "DoClickInternal",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Called when the label is double clicked by the player with left clicks.\n\n<page>DLabel:SetDoubleClickingEnabled</page> must be set to true for this hook to work, which it is by default.\n\nThis will be called after <page>DLabel:OnDepressed</page> and <page>DLabel:OnReleased</page> and <page>DLabel:DoClick</page>.\n\nSee also <page>DLabel:DoRightClick</page> and <page>DLabel:DoMiddleClick</page>.",
        "name": "DoDoubleClick",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Called just before <page>DLabel:DoDoubleClick</page>. In <page>DLabel</page> does nothing and is safe to override.",
        "name": "DoDoubleClickInternal",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Called when the label is middle mouse (Mouse wheel, also known as mouse 3) clicked (on key release) by the player.\n\nThis will be called after <page>DLabel:OnDepressed</page> and <page>DLabel:OnReleased</page>.\n\nSee also <page>DLabel:DoClick</page>, <page>DLabel:DoRightClick</page> and <page>DLabel:DoDoubleClick</page>.",
        "name": "DoMiddleClick",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Called when the label is right clicked (on key release) by the player.\n\nThis will be called after <page>DLabel:OnDepressed</page> and <page>DLabel:OnReleased</page>.\n\nSee also <page>DLabel:DoClick</page>, <page>DLabel:DoMiddleClick</page> and <page>DLabel:DoDoubleClick</page>.",
        "name": "DoRightClick",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Returns whether the label stretches vertically or not.\n\nSet by <page>DLabel:SetAutoStretchVertical</page>.",
        "name": "GetAutoStretchVertical",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether the label stretches vertically or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the <page>DLabel</page> should set its text color to the current skin's bright text color.\n\nSee <page>DLabel:SetBright</page>.",
        "name": "GetBright",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the actual color of the text.\n\nSee also <page>DLabel:GetTextColor</page> and <page>DLabel:GetTextStyleColor</page>.",
        "name": "GetColor",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The the actual color of the text.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns whether the <page>DLabel</page> should set its text color to the current skin's dark text color.\n\nSee <page>DLabel:SetDark</page>.",
        "name": "GetDark",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "description": "<deprecated>Use <page>Panel:IsEnabled</page> instead.</deprecated>\n\nGets the disabled state of the <page>DLabel</page>. This is set with <page>DLabel:SetDisabled</page>.",
        "name": "GetDisabled",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The disabled state of the label.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether or not double clicking will call <page>DLabel:DoDoubleClick</page>.\n\nSee <page>DLabel:SetDoubleClickingEnabled</page>.",
        "name": "GetDoubleClickingEnabled",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "true = enabled, false means disabled",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "<deprecated>You should use <page>DLabel:GetPaintBackground</page> instead.</deprecated>\n\nReturns whether or not the panel background is being drawn. Alias of <page>DLabel:GetPaintBackground</page>.",
        "name": "GetDrawBackground",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "True if the panel background is drawn, false otherwise.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the current font of the DLabel. This is set with <page>DLabel:SetFont</page>.",
        "name": "GetFont",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The name of the font in use.",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns whether the <page>DLabel</page> should set its text color to the current skin's highlighted text color.\n\nSee <page>DLabel:SetHighlight</page>.",
        "name": "GetHighlight",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Used internally by <page>DComboBox</page>.\n\nReturns whether the frame is part of a derma menu or not.\n\nIf this is `true`, <page>Global.CloseDermaMenus</page> will not be called when the frame is clicked, and thus any open menus will remain open.",
        "name": "GetIsMenu",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether this panel is a Menu Component",
            "name": "isMenu",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the toggle functionality is enabled for a label. Set with <page>DLabel:SetIsToggle</page>.",
        "name": "GetIsToggle",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether or not toggle functionality is enabled.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether or not the background should be painted.",
        "name": "GetPaintBackground",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "If the background is painted or not",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the \"override\" text color, set by <page>DLabel:SetTextColor</page>.",
        "name": "GetTextColor",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The color of the text, or nil.",
            "type": "table"
          }
        ]
      },
      {
        "description": "<internal></internal>\n\nReturns the \"internal\" or fallback color of the text.\n\nSee also <page>DLabel:GetTextColor</page> and <page>DLabel:SetTextStyleColor</page>.",
        "name": "GetTextStyleColor",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The \"internal\" color of the text",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns the current toggle state of the label. This can be set with <page>DLabel:SetToggle</page> and toggled with <page>DLabel:Toggle</page>.\n\nIn order to use toggle functionality, you must first call <page>DLabel:SetIsToggle</page> with `true`, as it is disabled by default.",
        "name": "GetToggle",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The current toggle state.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Called when the player presses the label with any mouse button.\n\nThis works as an alternative to <page>PANEL:OnMousePressed</page> as that hook is used heavily by <page>DLabel</page> and overriding it will break functionality.\n\nSee also <page>DLabel:DoClick</page>, <page>DLabel:DoMiddleClick</page>, <page>DLabel:DoRightClick</page>, <page>DLabel:OnReleased</page> and <page>DLabel:DoDoubleClick</page>.",
        "name": "OnDepressed",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Called when the player releases any mouse button on the label. This is always called after <page>DLabel:OnDepressed</page>.\n\nThis works as an alternative to <page>PANEL:OnMouseReleased</page> as that hook is used heavily by <page>DLabel</page> and overriding it will break functionality.\n\nSee also <page>DLabel:DoClick</page>, <page>DLabel:DoMiddleClick</page>, <page>DLabel:DoRightClick</page> and <page>DLabel:DoDoubleClick</page>.",
        "name": "OnReleased",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new toggle state.",
            "name": "toggleState",
            "type": "boolean"
          }
        ],
        "description": "Called when the toggle state of the label is changed by <page>DLabel:Toggle</page>.\n\nIn order to use toggle functionality, you must first call <page>DLabel:SetIsToggle</page> with `true`, as it is disabled by default.",
        "name": "OnToggled",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whenever to stretch the label vertically or not.",
            "name": "stretch",
            "type": "boolean"
          }
        ],
        "description": "Automatically adjusts the height of the label dependent of the height of the text inside of it.",
        "name": "SetAutoStretchVertical",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whenever to set the text to bright or not.",
            "name": "bright",
            "type": "boolean"
          }
        ],
        "description": "Sets the color of the text to the bright text color defined in the skin.\n\nDisables <page>DLabel:SetDark</page>. Gets overridden by <page>DLabel:SetHighlight</page>.\n\nYou should only consider using this if you are using background elements that are not manually painted and are using the skin colors. Otherwise use <page>DLabel:SetTextColor</page>.",
        "name": "SetBright",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The color to set. Uses the Color structure.",
            "name": "color",
            "type": "table"
          }
        ],
        "description": "Changes color of label. Alias of <page>DLabel:SetTextColor</page>.",
        "name": "SetColor",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whenever to set the text to dark or not.",
            "name": "dark",
            "type": "boolean"
          }
        ],
        "description": "Sets the color of the text to the dark text color defined in the skin.\n\nDisables <page>DLabel:SetBright</page>. Gets overridden by <page>DLabel:SetHighlight</page>.\n\nYou should only consider using this if you are using background elements that are not manually painted and are using the skin colors. Otherwise use <page>DLabel:SetTextColor</page>.",
        "name": "SetDark",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "`true` to disable the DLabel, `false` to enable it.",
            "name": "disable",
            "type": "boolean"
          }
        ],
        "description": "<deprecated>Use <page>Panel:SetEnabled</page> instead.</deprecated>\n\nSets the disabled state of the <page>DLabel</page>.\n\nWhen disabled, the label does not respond to click, toggle or drag &amp; drop actions.",
        "name": "SetDisabled",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "true to enable, false to disable",
            "name": "enable",
            "type": "boolean"
          }
        ],
        "description": "Sets whether or not double clicking should call <page>DLabel:DoDoubleClick</page>.\n\nThis is enabled by default.",
        "name": "SetDoubleClickingEnabled",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "True to show the panel's background, false to hide it.",
            "name": "draw",
            "type": "boolean"
          }
        ],
        "description": "<deprecated>You should use <page>DLabel:SetPaintBackground</page> instead.</deprecated>Sets whether or not to draw the panel background. Alias of <page>DLabel:SetPaintBackground</page>.",
        "name": "SetDrawBackground",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the font.\n\nSee <page text=\"here\">Default_Fonts</page> for a list of existing fonts.\nAlternatively, use <page>surface.CreateFont</page> to create your own custom font.",
            "name": "fontName",
            "type": "string"
          }
        ],
        "description": "Sets the font of the label.",
        "name": "SetFont",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "true to set the label's color to skins's text highlight color, false otherwise.",
            "name": "highlight",
            "type": "boolean"
          }
        ],
        "description": "Sets the color of the text to the highlight text color defined in the skin.\n\nFor the default Derma skin this makes the label red.\n\nOverrides colors set by both <page>DLabel:SetBright</page> and <page>DLabel:SetDark</page> while active.\n\nYou should only consider using this if you are using background elements that are not manually painted and are using the skin colors. Otherwise use <page>DLabel:SetTextColor</page>.",
        "name": "SetHighlight",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether this pane is a Menu Component",
            "name": "isMenu",
            "type": "boolean"
          }
        ],
        "description": "Used internally by <page>DComboBox</page>.\n\n\nSets whether the frame is part of a derma menu or not.\n\nIf this is set to `true`, <page>Global.CloseDermaMenus</page> will not be called when the frame is clicked, and thus any open menus will remain open.",
        "name": "SetIsMenu",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether or not to enable toggle functionality.",
            "name": "allowToggle",
            "type": "boolean"
          }
        ],
        "description": "Enables or disables toggle functionality for a label. Retrieved with <page>DLabel:GetIsToggle</page>.\n\nYou must call this before using <page>DLabel:SetToggle</page>, <page>DLabel:GetToggle</page> or <page>DLabel:Toggle</page>.",
        "name": "SetIsToggle",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "paint",
            "type": "boolean"
          }
        ],
        "description": "Sets whether or not the background should be painted. This is mainly used by derivative classes, such as <page>DButton</page>.",
        "name": "SetPaintBackground",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The text color. Uses the <page>Color</page>.",
            "name": "color",
            "type": "table"
          }
        ],
        "description": "Sets the text color of the <page>DLabel</page>. This will take precedence over <page>DLabel:SetTextStyleColor</page>.",
        "name": "SetTextColor",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The text color. Uses the <page>Color</page>.",
            "name": "color",
            "type": "table"
          }
        ],
        "description": "<internal>Use <page>DLabel:SetTextColor</page> instead!</internal>\n\n\nUsed by <page>DLabel:SetDark</page>, <page>DLabel:SetBright</page> and <page>DLabel:SetHighlight</page> to set the text color without affecting <page>DLabel:SetTextColor</page> calls.",
        "name": "SetTextStyleColor",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The toggle state to be set.",
            "name": "toggleState",
            "type": "boolean"
          }
        ],
        "description": "Sets the toggle state of the label. This can be retrieved with <page>DLabel:GetToggle</page> and toggled with <page>DLabel:Toggle</page>.\n\nIn order to use toggle functionality, you must first call <page>DLabel:SetIsToggle</page> with `true`, as it is disabled by default.",
        "name": "SetToggle",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Toggles the label's state. This can be set and retrieved with <page>DLabel:SetToggle</page> and <page>DLabel:GetToggle</page>.\n\nIn order to use toggle functionality, you must first call <page>DLabel:SetIsToggle</page> with `true`, as it is disabled by default.",
        "name": "Toggle",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "A table supposed to contain the color values listed above.",
            "name": "skin",
            "type": "table"
          }
        ],
        "description": "A hook called from within <page>PANEL:ApplySchemeSettings</page> to determine the color of the text on display.",
        "name": "UpdateColours",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dlabel.lua",
          "lineEnd": 279,
          "lineStart": 289
        }
      },
      {
        "description": "<internal></internal>\n\nCalled internally to update the color of the text.",
        "name": "UpdateFGColor",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ]
      }
    ],
    "name": "DLabel",
    "parent": "Label"
  },
  {
    "description": "An editable <page>DLabel</page>, double click on it to edit.\n\nThis is used in the spawnmenu spawnlist headers.",
    "functions": [
      {
        "description": "Returns whether the editable label will stretch to the text entered or not.",
        "name": "GetAutoStretch",
        "parent": "DLabelEditable",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Whether the editable label will stretch to the text entered or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether this <page>DLabelEditable</page> is being edited or not. (i.e. has focus)",
        "name": "IsEditing",
        "parent": "DLabelEditable",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether this <page>DLabelEditable</page> is being edited or not",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The original user input text",
            "name": "txt",
            "type": "string"
          }
        ],
        "description": "A hook called when the player presses Enter (i.e. the finished editing the label) and the text has changed.\n\nAllows you to override/modify the text that will be set to display.",
        "name": "OnLabelTextChanged",
        "parent": "DLabelEditable",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "If provided, will override the text that will be applied to the label itself.",
            "type": "string"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether the editable label should stretch to the text entered or not.",
            "name": "stretch",
            "type": "boolean"
          }
        ],
        "description": "Sets whether the editable label should stretch to the text entered or not.",
        "name": "SetAutoStretch",
        "parent": "DLabelEditable",
        "realms": [
          "client"
        ]
      }
    ],
    "name": "DLabelEditable",
    "parent": "DLabel"
  },
  {
    "description": "Underlined link label without a DoClick function. When a valid URL is set and the label is clicked, it will open a browser window and navigate to the address.\n\nThis panel uses <page>gui.OpenURL</page> internally and its restrictions apply.",
    "functions": [
      {
        "description": "<deprecated></deprecated>\n\nDoes absolutely nothing at all.",
        "name": "GetAutoStretchVertical",
        "parent": "DLabelURL",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Does nothing.",
            "name": "draw",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Gets the current text color of the <page>DLabelURL</page>. Returns either <page>DLabelURL:GetTextColor</page> or if that is unset -  <page>DLabelURL:GetTextStyleColor</page>.",
        "name": "GetColor",
        "parent": "DLabelURL",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The current text <page>Global.Color</page>.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Gets the current text color of the <page>DLabelURL</page> set by <page>DLabelURL:SetTextColor</page>.",
        "name": "GetTextColor",
        "parent": "DLabelURL",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The current text <page>Global.Color</page>.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns the color set by <page>DLabelURL:SetTextStyleColor</page>.",
        "name": "GetTextStyleColor",
        "parent": "DLabelURL",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The <page>Color</page>",
            "type": "table"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Does nothing.",
            "name": "draw",
            "type": "boolean"
          }
        ],
        "description": "<deprecated></deprecated>\n\nDoes absolutely nothing at all.",
        "name": "SetAutoStretchVertical",
        "parent": "DLabelURL",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page>Global.Color</page> to use.",
            "name": "col",
            "type": "table"
          }
        ],
        "description": "Alias of <page>DLabelURL:SetTextColor</page>.",
        "name": "SetColor",
        "parent": "DLabelURL",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page>Global.Color</page> to use.",
            "name": "col",
            "type": "table"
          }
        ],
        "description": "Sets the text color of the <page>DLabelURL</page>. Overrides <page>DLabelURL:SetTextStyleColor</page>.\n\n\nThis should only be used immediately after it is created, and otherwise <page>Panel:SetFGColor</page>.",
        "name": "SetTextColor",
        "parent": "DLabelURL",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page>Global.Color</page> to set",
            "name": "color",
            "type": "table"
          }
        ],
        "description": "Sets the base text color of the <page>DLabelURL</page>. This is overridden by <page>DLabelURL:SetTextColor</page>.",
        "name": "SetTextStyleColor",
        "parent": "DLabelURL",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "<internal></internal>Used internally to set correct text color via <page>Panel:SetFGColor</page> and <page>DLabelURL:GetColor</page>.",
        "name": "UpdateFGColor",
        "parent": "DLabelURL",
        "realms": [
          "client",
          "menu"
        ]
      }
    ],
    "name": "DLabelURL",
    "parent": "URLLabel"
  },
  {
    "description": "<deprecated>\nDerived from the deprecated <page>DPanelList</page>.\n</deprecated>\n\nA simple list box with optional multi-select.\nAs this is deprecated, it is recommended that you use <page>DListView</page>, which contains the same functionality with multi-column options.",
    "functions": [
      {
        "description": "Returns whether the list box can select multiple items.",
        "name": "GetMultiple",
        "parent": "DListBox",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether the list box can select multiple items.",
            "name": "multiple",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns selected items.",
        "name": "GetSelectedItems",
        "parent": "DListBox",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The selected items. A list of <page>DListBoxItem</page>.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns selected item values.",
        "name": "GetSelectedValues",
        "parent": "DListBox",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The selected item values. A list of <page>Panel:GetValue</page> of each selected <page>DListBoxItem</page>.",
            "type": "table"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "<page>Panel:GetValue</page> of a <page>DListBoxItem</page> to select.",
            "name": "val",
            "type": "string"
          }
        ],
        "description": "Select a <page>DListBoxItem</page> based on its value.",
        "name": "SelectByName",
        "parent": "DListBox",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "<page>DListBox</page> to select.",
            "name": "item",
            "type": "Panel"
          },
          {
            "description": "Whether to deselect other selected items.",
            "name": "onlyme",
            "type": "boolean"
          }
        ],
        "description": "<internal></internal>\n\nUsed internally to select a specific panel.",
        "name": "SelectItem",
        "parent": "DListBox",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether the list box can select multiple items.",
            "name": "multiple",
            "type": "boolean"
          }
        ],
        "description": "Sets whether the list box can select multiple items.",
        "name": "SetMultiple",
        "parent": "DListBox",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The items to select. A list of <page>DListBoxItem</page>.",
            "name": "items",
            "type": "table"
          }
        ],
        "description": "<internal></internal>\nSets selected items.",
        "name": "SetSelectedItems",
        "parent": "DListBox",
        "realms": [
          "client",
          "menu"
        ]
      }
    ],
    "name": "DListBox",
    "parent": "DPanelList"
  },
  {
    "description": "<deprecated>\nUsed Internally by <page>DListBox</page>.\n</deprecated>",
    "functions": [
      {
        "description": "Returns the parent \"mother\" of this **DListBoxItem** set by <page>DListBoxItem:SetMother</page>.",
        "name": "GetMother",
        "parent": "DListBoxItem",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The \"mother\" <page>DListBox</page>.",
            "type": "Panel"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether to deselect other items.",
            "name": "onlyMe",
            "type": "boolean"
          }
        ],
        "description": "Selects this item.",
        "name": "Select",
        "parent": "DListBoxItem",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The \"mother\" panel to set.",
            "name": "parent",
            "type": "Panel"
          }
        ],
        "description": "<internal></internal>\n\nSets the \"mother\" (parent) panel for this item. Done internally by <page>DListBox:AddItem</page>",
        "name": "SetMother",
        "parent": "DListBoxItem",
        "realms": [
          "client"
        ]
      }
    ],
    "name": "DListBoxItem",
    "parent": "DLabel"
  },
  {
    "description": "A vertical list of panels that optionally allows child elements to be rearranged with the mouse cursor.\n\nChild panels' widths are set to the width of the DListLayout, and it resizes vertically to accommodate the heights of all children. You can place this inside a <page>DScrollPanel</page> when adding many panels.\n\nTo enable the drag &amp; drop rearrangement functionality, call <page>DDragBase:MakeDroppable</page> on the DListLayout with a unique identifier. All panels added following this will be moveable.",
    "name": "DListLayout",
    "parent": "DDragBase"
  },
  {
    "description": "A data view with rows and columns.",
    "functions": [
      {
        "arguments": [
          {
            "description": "The name of the column to add.",
            "name": "column",
            "type": "string"
          },
          {
            "default": "nil",
            "description": "At which position to insert the new column compared to the other columns. Set to 1 to add the new column before all other columns.\n\nBy default the column will be placed after all columns.",
            "name": "position",
            "type": "number"
          }
        ],
        "description": "Adds a column to the listview.",
        "name": "AddColumn",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The newly created <page>DListView_Column</page>.",
            "type": "Panel"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Values for a new row in the DListView, If several arguments are supplied, each argument will correspond to a respective column in the DListView.",
            "name": "text",
            "type": "vararg"
          }
        ],
        "description": "Adds a line to the list view.",
        "name": "AddLine",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The newly created <page>DListView_Line</page>.",
            "type": "Panel"
          }
        ]
      },
      {
        "description": "Clears the current selection in the DListView.",
        "name": "ClearSelection",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The column to get the width of.",
            "name": "column",
            "type": "number"
          }
        ],
        "description": "Gets the width of a column.",
        "name": "ColumnWidth",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Width of the column.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Creates the lines and gets the height of the contents, in a DListView.",
        "name": "DataLayout",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The height of the contents",
            "type": "number"
          }
        ]
      },
      {
        "description": "Removes the scrollbar.",
        "name": "DisableScrollbar",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The line number of the double clicked line.",
            "name": "lineID",
            "type": "number"
          },
          {
            "description": "The double clicked <page>DListView_Line</page>.",
            "name": "line",
            "type": "Panel"
          }
        ],
        "description": "Called when a line in the DListView is double clicked.",
        "name": "DoDoubleClick",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "<internal></internal>\n\nInternal helper function called from the <page>PANEL:PerformLayout</page> of <page>DListView</page>.",
        "name": "FixColumnsLayout",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Gets the canvas.",
        "name": "GetCanvas",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The canvas.",
            "type": "Panel"
          }
        ]
      },
      {
        "description": "Returns the height of the data of the <page>DListView</page>.\n\nSee also <page>DListView:SetDataHeight</page>.",
        "name": "GetDataHeight",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The height of the data of the <page>DListView</page>.",
            "type": "number"
          }
        ]
      },
      {
        "description": "<internal></internal>\n\nSee <page>DListView:SetDirty</page>.",
        "name": "GetDirty",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the height of the header of the <page>DListView</page>.\n\nSee also <page>DListView:SetHeaderHeight</page>.",
        "name": "GetHeaderHeight",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The height of the header of the <page>DListView</page>.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns whether the header line should be visible on not.",
        "name": "GetHideHeaders",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether the header line should be visible on not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the height of <page>DListView:GetCanvas</page>.\n\nIntended to represent the height of all data lines.",
        "name": "GetInnerTall",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The height of <page>DListView:GetCanvas</page>.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The index of the line to get.",
            "name": "id",
            "type": "number"
          }
        ],
        "description": "Gets the <page>DListView_Line</page> at the given index.",
        "name": "GetLine",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The <page>DListView_Line</page> at the given index.",
            "type": "Panel"
          }
        ]
      },
      {
        "description": "Gets all of the lines added to the DListView.",
        "name": "GetLines",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The lines added to the DListView.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns whether multiple lines can be selected or not.\n\nSee <page>DListView:SetMultiSelect</page>.",
        "name": "GetMultiSelect",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether multiple lines can be selected or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Gets all of the lines that are currently selected.",
        "name": "GetSelected",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "A table of <page>DListView_Line</page>s.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Gets the currently selected <page>DListView_Line</page> index.\n\nIf <page>DListView:SetMultiSelect</page> is set to true, only the first line of all selected lines will be returned. Use <page>DListView:GetSelected</page> instead to get all of the selected lines.",
        "name": "GetSelectedLine",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The index of the currently selected line.",
            "type": "number"
          },
          {
            "description": "The currently selected <page>DListView_Line</page>.",
            "type": "Panel"
          }
        ]
      },
      {
        "description": "Returns whether sorting of columns by clicking their headers is allowed or not.\n\nSee also <page>DListView:SetSortable</page>.",
        "name": "GetSortable",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether sorting of columns by clicking their headers is allowed or not",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page>DListView_Line:GetID</page> of a line to look up",
            "name": "lineId",
            "type": "number"
          }
        ],
        "description": "<internal></internal>\n\nConverts LineID to SortedID",
        "name": "GetSortedID",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The selected line.",
            "name": "line",
            "type": "Panel"
          },
          {
            "description": "Boolean indicating whether the line is selected.",
            "name": "isSelected",
            "type": "boolean"
          }
        ],
        "description": "<internal>Use <page>DListView:OnRowSelected</page> instead!</internal>\n\nCalled whenever a line is clicked.",
        "name": "OnClickLine",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The column which initialized the resize",
            "name": "column",
            "type": "Panel"
          },
          {
            "description": "",
            "name": "size",
            "type": "number"
          }
        ],
        "description": "<internal></internal>\n\nCalled from <page>DListView_Column</page>.",
        "name": "OnRequestResize",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The line ID of the right clicked line",
            "name": "lineID",
            "type": "number"
          },
          {
            "description": "The line panel itself, a <page>DListView_Line</page>.",
            "name": "line",
            "type": "Panel"
          }
        ],
        "description": "Called when a row is right-clicked",
        "name": "OnRowRightClick",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The index of the row/line that the user clicked on.",
            "name": "rowIndex",
            "type": "number"
          },
          {
            "description": "The <page>DListView_Line</page> that the user clicked on.",
            "name": "row",
            "type": "Panel"
          }
        ],
        "description": "Called internally by <page>DListView:OnClickLine</page> when a line is selected. This is the function you should override to define the behavior when a line is selected.",
        "name": "OnRowSelected",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Removes the given row, by row id (same number as <page>DListView:GetLine</page>).",
            "name": "line",
            "type": "number"
          }
        ],
        "description": "Removes a line from the list view.",
        "name": "RemoveLine",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Selects the line at the first index of the DListView if one has been added.",
        "name": "SelectFirstItem",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The line to select.",
            "name": "Line",
            "type": "Panel"
          }
        ],
        "description": "Selects a line in the listview.",
        "name": "SelectItem",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new height to set. Default value is 17.",
            "name": "height",
            "type": "number"
          }
        ],
        "description": "Sets the height of all lines of the <page>DListView</page> except for the header line.\n\nSee also <page>DListView:SetHeaderHeight</page>.",
        "name": "SetDataHeight",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "isDirty",
            "type": "boolean"
          }
        ],
        "description": "<internal></internal>\n\nUsed internally to signify if the <page>DListView</page> needs a rebuild.",
        "name": "SetDirty",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new height to set. Default value is 16.",
            "name": "height",
            "type": "number"
          }
        ],
        "description": "Sets the height of the header line of the <page>DListView</page>.\n\nSee also <page>DListView:SetDataHeight</page>.",
        "name": "SetHeaderHeight",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether the header line should be visible on not.",
            "name": "hide",
            "type": "boolean"
          }
        ],
        "description": "Sets whether the header line should be visible on not.",
        "name": "SetHideHeaders",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether multiple lines can be selected or not",
            "name": "allowMultiSelect",
            "type": "boolean"
          }
        ],
        "description": "Sets whether multiple lines can be selected by the user by using the <key>Ctrl</key> or <key>Shift</key> keys. When set to false, only one line can be selected.",
        "name": "SetMultiSelect",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether sorting columns with clicking is allowed or not.",
            "name": "isSortable",
            "type": "boolean"
          }
        ],
        "description": "Enables/disables the sorting of columns by clicking.\n<note>\nThis will only affect columns that are created after this function is called. Existing columns will be unaffected.\n</note>",
        "name": "SetSortable",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The index of the column that should be sorted.",
            "name": "columnIndex",
            "type": "number"
          },
          {
            "default": "false",
            "description": "Whether the items should be sorted in descending order or not.",
            "name": "descending",
            "type": "boolean"
          }
        ],
        "description": "Sorts the items in the specified column.",
        "name": "SortByColumn",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "default": "nil",
            "description": "",
            "name": "column1",
            "type": "number"
          },
          {
            "default": "false",
            "description": "",
            "name": "descrending1",
            "type": "boolean"
          },
          {
            "default": "nil",
            "description": "",
            "name": "column2",
            "type": "number"
          },
          {
            "default": "false",
            "description": "",
            "name": "descrending2",
            "type": "boolean"
          },
          {
            "default": "nil",
            "description": "",
            "name": "column3",
            "type": "number"
          },
          {
            "default": "false",
            "description": "",
            "name": "descrending3",
            "type": "boolean"
          },
          {
            "default": "nil",
            "description": "",
            "name": "column4",
            "type": "number"
          },
          {
            "default": "false",
            "description": "",
            "name": "descrending4",
            "type": "boolean"
          }
        ],
        "description": "Sorts the list based on given columns.\n\nAll arguments are optional",
        "name": "SortByColumns",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ]
      }
    ],
    "name": "DListView",
    "parent": "DPanel"
  },
  {
    "description": "<internal></internal>\n\nA single column, used by <page>DListView</page>.",
    "functions": [
      {
        "description": "Called when the column is left clicked (on key release) by the client.\n\nSee also <page>DListView_Column:DoRightClick</page>.",
        "name": "DoClick",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dlistview_column.lua",
          "lineEnd": 96,
          "lineStart": 91
        }
      },
      {
        "description": "Called when the column is right clicked (on key release) by the client.\n\nSee also <page>DListView_Column:DoClick</page>.",
        "name": "DoRightClick",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dlistview_column.lua",
          "lineEnd": 100,
          "lineStart": 98
        }
      },
      {
        "description": "Gets the index used for this column.",
        "name": "GetColumnID",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The column index of the <page>DListView_Column</page>.",
            "name": "index",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns whether the column is sorted in descending order or not.",
        "name": "GetDescending",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether the column is sorted in descending order or not.",
            "name": "desc",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the fixed width of this column.",
        "name": "GetFixedWidth",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The fixed width.",
            "name": "width",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the maximum width set with <page>DListView_Column:SetMaxWidth</page>.",
        "name": "GetMaxWidth",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The maximum width",
            "name": "width",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the minimum width set with <page>DListView_Column:SetMinWidth</page>.",
        "name": "GetMinWidth",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The minimum width",
            "name": "width",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the text alignment for the column",
        "name": "GetTextAlign",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The direction of the content, based on the number pad. See <page>DListView_Column:SetTextAlign</page>.",
            "name": "alignment",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The amount to add to the current column's width.\n\nPositive values will make it wider, and negative values will make it thinner.",
            "name": "size",
            "type": "number"
          }
        ],
        "description": "Resizes the column, additionally adjusting the size of the column to the right, if any.",
        "name": "ResizeColumn",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The column index of the <page>DListView_Column</page>.",
            "name": "index",
            "type": "number"
          }
        ],
        "description": "<internal></internal>Sets the index used for this column.",
        "name": "SetColumnID",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether the column is sorted in descending order or not.",
            "name": "desc",
            "type": "boolean"
          }
        ],
        "description": "Sets whether the column is sorted in descending order or not.",
        "name": "SetDescending",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The number value which will determine a fixed width.",
            "name": "width",
            "type": "number"
          }
        ],
        "description": "Sets the fixed width of the column.\n<note>\nInternally this will set <page text=\"SetMinWidth\">DListView_Column:SetMinWidth</page> and <page text=\"SetMaxWidth\">DListView_Column:SetMaxWidth</page> to the value provided\n</note>",
        "name": "SetFixedWidth",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The number value which will determine a maximum width.",
            "name": "width",
            "type": "number"
          }
        ],
        "description": "Sets the maximum width of a column.",
        "name": "SetMaxWidth",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The number value which will determine a minimum width.",
            "name": "width",
            "type": "number"
          }
        ],
        "description": "Sets the minimum width of a column.",
        "name": "SetMinWidth",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new name that the column's header will use.",
            "name": "name",
            "type": "string"
          }
        ],
        "description": "Sets the text in the column's header.",
        "name": "SetName",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The direction of the content, based on the number pad.\n\n|   |   |   |\n| --- | --- | --- |\n| <key>7</key>: **top-left** | <key>8</key>: **top-center**\t| <key>9</key>: **top-right** |\n| <key>4</key>: **middle-left** | <key>5</key>: **center** | <key>6</key>: **middle-right** |\n| <key>1</key>: **bottom-left** | <key>2</key>: **bottom-center** | <key>3</key>: **bottom-right** |",
            "name": "alignment",
            "type": "number"
          }
        ],
        "description": "Sets the text alignment for the column",
        "name": "SetTextAlign",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The number value which will determine panel width.",
            "name": "width",
            "type": "number"
          }
        ],
        "description": "Sets the width of the panel.",
        "name": "SetWidth",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ]
      }
    ],
    "name": "DListView_Column",
    "parent": "Panel"
  },
  {
    "description": "<internal>\nUsed by <page>DListView</page>.\n</internal>",
    "name": "DListView_ColumnPlain",
    "parent": "DListView_Column"
  },
  {
    "description": "<internal>Used by <page>DListView</page>.</internal>",
    "name": "DListView_DraggerBar",
    "parent": "DButton"
  },
  {
    "description": "<internal></internal>\n\nA panel used by <page>DListView</page>",
    "functions": [
      {
        "arguments": [
          {
            "description": "The list view.",
            "name": "pnl",
            "type": "DListView"
          }
        ],
        "description": "<internal></internal>\n\nCalled by <page>DListView:DataLayout</page>",
        "name": "DataLayout",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Returns whether this line is odd or even in the list. This is internally used (and set) to change the looks of every other line.",
        "name": "GetAltLine",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether this line is 'alternative'.",
            "name": "alt",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The number of the column to retrieve the text from, starts with 1.",
            "name": "column",
            "type": "number"
          }
        ],
        "description": "Gets the string held in the specified column of a <page>DListView_Line</page> panel.\n\nThis is the same thing as doing <page text=\"DListView_Line:GetValue\">Panel:GetValue</page>( column_number ).",
        "name": "GetColumnText",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The contents of the specified column.",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns the ID of this line, set automatically in <page>DListView:AddLine</page>.",
        "name": "GetID",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The ID of this line.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the parent <page>DListView</page> of this line.",
        "name": "GetListView",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The parent <page>DListView</page> of this line.",
            "name": "pnl",
            "type": "DListView"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The number of the column to write the text from, starts with 1.",
            "name": "column",
            "type": "number"
          }
        ],
        "description": "Returns the data stored on given cell of this line.\n\nUsed in the <page>DListView:SortByColumn</page> function in case you want to sort with something else than the text.",
        "name": "GetSortValue",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The data that is set for given column of this line, if any.",
            "name": "data",
            "type": "any"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The number of the column to retrieve the text from, starts with 1.",
            "name": "column",
            "type": "number"
          }
        ],
        "description": "Alias of <page>DListView_Line:GetColumnText</page>. Overrides <page>Panel:GetValue</page>.",
        "name": "GetValue",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The contents of the specified column.",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns whether this line is selected.",
        "name": "IsLineSelected",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether this line is selected.",
            "name": "selected",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Called when the player right clicks this line.",
        "name": "OnRightClick",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Called when the player selects this line.",
        "name": "OnSelect",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether this line is 'alternative'.",
            "name": "alt",
            "type": "boolean"
          }
        ],
        "description": "<internal></internal>\nSets whether this line is odd or even in the list. This is internally used (and set automatically) to change the looks of every other line.",
        "name": "SetAltLine",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The number of the column to write the text from, starts with 1.",
            "name": "column",
            "type": "number"
          },
          {
            "description": "Column text you want to set",
            "name": "value",
            "type": "string"
          }
        ],
        "description": "Sets the string held in the specified column of a <page>DListView_Line</page> panel.",
        "name": "SetColumnText",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The DLabel in which the text was set.",
            "name": "label",
            "type": "DLabel"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The ID for this line.",
            "name": "id",
            "type": "number"
          }
        ],
        "description": "<internal></internal>\nSets the ID of this line, used internally by <page>DListView:AddLine</page>.",
        "name": "SetID",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new parent <page>DListView</page> for this line.",
            "name": "pnl",
            "type": "DListView"
          }
        ],
        "description": "<internal></internal>\n\nSets the parent <page>DListView</page> for this line. Used internally by <page>DListView:AddLine</page>.",
        "name": "SetListView",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether this line is selected.",
            "name": "selected",
            "type": "boolean"
          }
        ],
        "description": "Sets whether this line is selected or not.",
        "name": "SetSelected",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The number of the column to write the text from, starts with 1.",
            "name": "column",
            "type": "number"
          },
          {
            "description": "Data for given column on the line you wish to set.",
            "name": "data",
            "type": "any"
          }
        ],
        "description": "Allows you to store data per column.\n\nUsed in the <page>DListView:SortByColumn</page> function in case you want to sort with something else than the text.",
        "name": "SetSortValue",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The number of the column to write the text from, starts with 1.",
            "name": "column",
            "type": "number"
          },
          {
            "description": "Column text you want to set",
            "name": "value",
            "type": "string"
          }
        ],
        "description": "Alias of <page>DListView_Line:SetColumnText</page>.",
        "name": "SetValue",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The DLabel in which the text was set.",
            "name": "label",
            "type": "DLabel"
          }
        ]
      }
    ],
    "name": "DListView_Line",
    "parent": "Panel"
  },
  {
    "description": "<internal>Used by <page>DListView_ColumnPlain</page>.</internal>",
    "name": "DListViewHeaderLabel",
    "parent": "DLabel"
  },
  {
    "description": "<internal>\nUsed by <page>DListView_Line</page>.\n</internal>",
    "name": "DListViewLabel",
    "parent": "DLabel"
  },
  {
    "description": "<internal>\nAlias of <page>DListView_Line</page>.\n</internal>",
    "name": "DListViewLine",
    "parent": "Panel"
  },
  {
    "description": "A simple menu with sub menu, icon and convar support.",
    "functions": [
      {
        "arguments": [
          {
            "description": "The text of the button",
            "name": "strText",
            "type": "string"
          },
          {
            "description": "The console variable to change",
            "name": "convar",
            "type": "string"
          },
          {
            "description": "The value of the console variable to set when the option is checked",
            "name": "on",
            "type": "string"
          },
          {
            "description": "The value of the console variable to set when the option is unchecked",
            "name": "off",
            "type": "string"
          },
          {
            "default": "nil",
            "description": "If set, the function will be called every time the option is pressed/clicked/selected.\n\n<callback>\n<arg type=\"Panel\" name=\"pnl\">The <page>DMenuOptionCVar</page> that was clicked.</arg>\n</callback>",
            "name": "funcFunction",
            "type": "function"
          }
        ],
        "description": "Creates a <page>DMenuOptionCVar</page> and adds it as an option into the menu. Checking and unchecking the option will alter the given console variable's value.",
        "name": "AddCVar",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The created <page>DMenuOptionCVar</page>",
            "type": "Panel"
          }
        ],
        "source": {
          "file": "lua/vgui/dmenu.lua",
          "lineEnd": 64,
          "lineStart": 49
        }
      },
      {
        "arguments": [
          {
            "description": "Name of the option.",
            "name": "name",
            "type": "string"
          },
          {
            "default": "nil",
            "description": "Function to execute when this option is clicked.\n\n<callback>\n<arg type=\"Panel\" name=\"pnl\">The <page>DMenuOption</page> that was clicked.</arg>\n</callback>",
            "name": "func",
            "type": "function"
          }
        ],
        "description": "Add an option to the DMenu",
        "name": "AddOption",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Returns the created <page>DMenuOption</page> panel.",
            "type": "Panel"
          }
        ],
        "source": {
          "file": "lua/vgui/dmenu.lua",
          "lineStart": 36
        }
      },
      {
        "arguments": [
          {
            "description": "The panel that you want to add.",
            "name": "pnl",
            "type": "Panel"
          }
        ],
        "description": "Adds a panel to the <page>DMenu</page> as if it were an option.\n\nThis invokes <page>DScrollPanel:AddItem</page> and will not create a new panel if a class name is passed, unlike <page>Panel:Add</page>.",
        "name": "AddPanel",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dmenu.lua",
          "lineStart": 29
        }
      },
      {
        "description": "Adds a horizontal line spacer.",
        "name": "AddSpacer",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Name of the sub menu.",
            "name": "Name",
            "type": "string"
          },
          {
            "default": "nil",
            "description": "Function to execute when this sub menu is clicked.\n\n<callback>\n<arg type=\"Panel\" name=\"pnl\">The <page>DMenuOption</page> that was clicked.</arg>\n</callback>",
            "name": "func",
            "type": "function"
          }
        ],
        "description": "Add a sub menu to the DMenu",
        "name": "AddSubMenu",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The created sub <page>DMenu</page>",
            "type": "Panel"
          },
          {
            "description": "The created <page>DMenuOption</page>",
            "type": "Panel"
          }
        ]
      },
      {
        "description": "Returns the number of child elements of <page>DMenu</page>'s <page>DScrollPanel:GetCanvas</page>.",
        "name": "ChildCount",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The number of child elements",
            "type": "number"
          }
        ]
      },
      {
        "description": "<deprecated></deprecated>\n\nClears all highlights made by <page>DMenu:HighlightItem</page>.\n\nDoesn't appear to be used or do anything.",
        "name": "ClearHighlights",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The menu to close",
            "name": "menu",
            "type": "Panel"
          }
        ],
        "description": "<internal></internal>\n\nUsed internally by <page>DMenu:OpenSubMenu</page>.",
        "name": "CloseSubMenu",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The index of the child to get.\n\n<note>Unlike <page>Panel:GetChild</page>, this index starts at 1.</note>",
            "name": "childIndex",
            "type": "number"
          }
        ],
        "description": "Gets a child by its index.",
        "name": "GetChild",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "<deprecated></deprecated>\n\nSet by <page>DMenu:SetDeleteSelf</page>",
        "name": "GetDeleteSelf",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "description": "<deprecated></deprecated>\n\nReturns the value set by <page>DMenu:SetDrawBorder</page>.",
        "name": "GetDrawBorder",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the <page>DMenu</page> should draw the icon column with a different color or not.\n\nSee <page>DMenu:SetDrawColumn</page>",
        "name": "GetDrawColumn",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether to draw the column or not",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the maximum height of the <page>DMenu</page>.",
        "name": "GetMaxHeight",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The maximum height in pixels",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the minimum width of the <page>DMenu</page> in pixels",
        "name": "GetMinimumWidth",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "the minimum width of the <page>DMenu</page>",
            "type": "number"
          }
        ]
      },
      {
        "description": "<internal></internal>\n\nReturns the currently opened submenu.\n\nUsed internally to store the open submenu by <page>DMenu:Hide</page>, <page>DMenu:OpenSubMenu</page>.",
        "name": "GetOpenSubMenu",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The currently opened submenu, if any.",
            "type": "Panel"
          }
        ]
      },
      {
        "description": "Used to safely hide (not remove) the menu. This will also hide any opened submenues recursively.",
        "name": "Hide",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The item to highlight.",
            "name": "item",
            "type": "Panel"
          }
        ],
        "description": "<deprecated></deprecated>\n\nHighlights selected item in the <page>DMenu</page> by setting the item's key \"Highlight\" to true.\n\nDoesn't appear to be working or used.",
        "name": "HighlightItem",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "default": "gui.MouseX()",
            "description": "Position (X coordinate) to open the menu at.",
            "name": "x",
            "type": "number"
          },
          {
            "default": "gui.MouseY()",
            "description": "Position (Y coordinate) to open the menu at.",
            "name": "y",
            "type": "number"
          },
          {
            "default": "nil",
            "description": "This argument does nothing.",
            "name": "skipanimation",
            "type": "any"
          },
          {
            "default": "nil",
            "description": "If `x` and `y` are not set manually, setting this argument will offset the `y` position of the opened menu by the height of given panel.",
            "name": "ownerpanel",
            "type": "Panel"
          }
        ],
        "description": "Opens the <page>DMenu</page> at given position.",
        "name": "Open",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page>DMenuOption</page> to open the submenu at",
            "name": "item",
            "type": "Panel"
          },
          {
            "default": "nil",
            "description": "The submenu to open. If set to nil, the function just closes existing submenus.",
            "name": "menu",
            "type": "Panel"
          }
        ],
        "description": "Closes any active sub menus, and opens a new one.",
        "name": "OpenSubMenu",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page>DMenuOption</page> that was selected",
            "name": "option",
            "type": "Panel"
          },
          {
            "description": "The options text",
            "name": "optionText",
            "type": "string"
          }
        ],
        "description": "Called when a option has been selected",
        "name": "OptionSelected",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page>DMenuOption</page> that called this function",
            "name": "option",
            "type": "Panel"
          }
        ],
        "description": "<internal></internal>\n\nCalled by <page>DMenuOption</page>. Calls <page>DMenu:OptionSelected</page>.",
        "name": "OptionSelectedInternal",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "true to delete menu on close, false to simply hide.",
            "name": "newState",
            "type": "boolean"
          }
        ],
        "description": "Set to true by default. IF set to true, the menu will be deleted when it is closed, not simply hidden.\n\nThis is used by <page>DMenuBar</page>",
        "name": "SetDeleteSelf",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "bool",
            "type": "boolean"
          }
        ],
        "description": "<deprecated></deprecated>\n\nDoes nothing.",
        "name": "SetDrawBorder",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether to draw the column or not",
            "name": "draw",
            "type": "boolean"
          }
        ],
        "description": "Sets whether the <page>DMenu</page> should draw the icon column with a different color.",
        "name": "SetDrawColumn",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The maximum height of the <page>DMenu</page> to set, in pixels",
            "name": "maxHeight",
            "type": "number"
          }
        ],
        "description": "Sets the maximum height the <page>DMenu</page> can have. If the height of all menu items exceed this value, a scroll bar will be automatically added.",
        "name": "SetMaxHeight",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The minimum width of the <page>DMenu</page> in pixels",
            "name": "minWidth",
            "type": "number"
          }
        ],
        "description": "Sets the minimum width of the <page>DMenu</page>. The menu will be stretched to match the given value.",
        "name": "SetMinimumWidth",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The menu to store",
            "name": "item",
            "type": "Panel"
          }
        ],
        "description": "<internal></internal>\n\nUsed internally to store the open submenu by <page>DMenu:Hide</page>, <page>DMenu:OpenSubMenu</page>, <page>DMenu:CloseSubMenu</page>",
        "name": "SetOpenSubMenu",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ]
      }
    ],
    "name": "DMenu",
    "parent": "DScrollPanel"
  },
  {
    "description": "A simple menu bar.",
    "functions": [
      {
        "arguments": [
          {
            "description": "The name (label) of the derma menu to create.",
            "name": "label",
            "type": "string"
          }
        ],
        "description": "Creates a new <page>DMenu</page> object tied to a <page>DButton</page> with the given label on the menu bar.\n\nThis will create a new menu regardless of whether or not one with the same label exists. To add **or** get a menu, use <page>DMenuBar:AddOrGetMenu</page>.",
        "name": "AddMenu",
        "parent": "DMenuBar",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The new <page>DMenu</page> which will be opened when the button is clicked.",
            "type": "Panel"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The name (label) of the derma menu to get or create.",
            "name": "label",
            "type": "string"
          }
        ],
        "description": "Retrieves a <page>DMenu</page> object from the menu bar. If one with the given label doesn't exist, a new one is created.\n\nTo add a DMenu without checking, use <page>DMenuBar:AddMenu</page>.",
        "name": "AddOrGetMenu",
        "parent": "DMenuBar",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The <page>DMenu</page> with the given label.",
            "type": "Panel"
          }
        ]
      },
      {
        "description": "<deprecated>Use <page>DMenuBar:GetPaintBackground</page> instead.</deprecated>\n\nReturns whether or not the background should be painted. Is the same as <page>DMenuBar:GetPaintBackground</page>",
        "name": "GetDrawBackground",
        "parent": "DMenuBar",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Should the background be painted",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether or not the panel is a menu. Used for closing menus when another panel is selected.",
        "name": "GetIsMenu",
        "parent": "DMenuBar",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Is a menu",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "If a menu is visible/opened, then the menu is returned.",
        "name": "GetOpenMenu",
        "parent": "DMenuBar",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Returns the visible/open menu or nil.",
            "type": "Panel"
          }
        ]
      },
      {
        "description": "Returns whether or not the background should be painted. Is the same as <page>DMenuBar:GetDrawBackground</page>",
        "name": "GetPaintBackground",
        "parent": "DMenuBar",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Should the background be painted",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Should the background be painted",
            "name": "shouldPaint",
            "type": "boolean"
          }
        ],
        "description": "<deprecated>Use <page>DMenuBar:SetPaintBackground</page></deprecated>\n\nSets whether or not the background should be painted. Is the same as <page>DMenuBar:SetPaintBackground</page>",
        "name": "SetDrawBackground",
        "parent": "DMenuBar",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Is this a menu",
            "name": "isMenu",
            "type": "boolean"
          }
        ],
        "description": "Sets whether or not the panel is part of a DMenu.\n\nIf this is set to `true`, <page>Global.CloseDermaMenus</page> will not be called when the panel is clicked, and thus any open menus will remain open.",
        "name": "SetIsMenu",
        "parent": "DMenuBar",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Should the background be painted",
            "name": "shouldPaint",
            "type": "boolean"
          }
        ],
        "description": "Sets whether or not the background should be painted. Is the same as <page>DMenuBar:SetDrawBackground</page>",
        "name": "SetPaintBackground",
        "parent": "DMenuBar",
        "realms": [
          "client",
          "menu"
        ]
      }
    ],
    "name": "DMenuBar",
    "parent": "DPanel"
  },
  {
    "description": "<internal></internal>\n\nInternal subpanel that represents an option used by <page>DMenu</page>.",
    "functions": [
      {
        "description": "Creates a sub <page>DMenu</page> and returns it. Has no duplicate call protection.",
        "name": "AddSubMenu",
        "parent": "DMenuOption",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The created <page>DMenu</page> to add options to.",
            "type": "Panel"
          }
        ]
      },
      {
        "description": "Returns the checked state of <page>DMenuOption</page>.",
        "name": "GetChecked",
        "parent": "DMenuOption",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Are we checked or not",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the <page>DMenuOption</page> is a checkbox option or a normal button option.",
        "name": "GetIsCheckable",
        "parent": "DMenuOption",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns which <page>DMenu</page> this option belongs.",
        "name": "GetMenu",
        "parent": "DMenuOption",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "A <page>DMenu</page> to which this panel belongs.",
            "type": "Panel"
          }
        ]
      },
      {
        "description": "Returns whether this <page>DMenuOption</page> should act like a radio button, set by <page>DMenuOption:SetRadio</page>.",
        "name": "GetRadio",
        "parent": "DMenuOption",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "`true` to set as a radio button.",
            "name": "checked",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The new checked state",
            "name": "checked",
            "type": "boolean"
          }
        ],
        "description": "Called whenever the <page>DMenuOption</page>'s checked state changes.",
        "name": "OnChecked",
        "parent": "DMenuOption",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "`true` to set as checked.",
            "name": "checked",
            "type": "boolean"
          }
        ],
        "description": "Sets the checked state of the <page>DMenuOption</page>.\n\nInvokes <page>DMenuOption:OnChecked</page>.",
        "name": "SetChecked",
        "parent": "DMenuOption",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether the menu option should allow the player to toggle itself.",
            "name": "checkable",
            "type": "boolean"
          }
        ],
        "description": "Sets whether the <page>DMenuOption</page> is a checkbox option or a normal button option.\n\nEnables automatic <page>DMenuOption:GetChecked</page> toggling with left/right clicks.",
        "name": "SetIsCheckable",
        "parent": "DMenuOption",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page>DMenu</page> for this option.",
            "name": "pnl",
            "type": "Panel"
          }
        ],
        "description": "<internal></internal>Used to set the <page>DMenu</page> for this option.",
        "name": "SetMenu",
        "parent": "DMenuOption",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "`true` to set as a radio button.",
            "name": "checked",
            "type": "boolean"
          }
        ],
        "description": "Sets whether this <page>DMenuOption</page> should act like a radio button.\n\nChecking a radio button automatically unchecks all adjacent radio buttons.",
        "name": "SetRadio",
        "parent": "DMenuOption",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The sub <page>DMenu</page> this option belongs to.",
            "name": "menu",
            "type": "Panel"
          }
        ],
        "description": "<internal></internal>\n\nUsed internally by <page>DMenuOption:AddSubMenu</page> to create the submenu arrow and assign the created submenu to be opened when this option is hovered.",
        "name": "SetSubMenu",
        "parent": "DMenuOption",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Toggles the checked state of <page>DMenuOption</page>. Does not respect <page>DMenuOption:GetIsCheckable</page>.",
        "name": "ToggleCheck",
        "parent": "DMenuOption",
        "realms": [
          "client",
          "menu"
        ]
      }
    ],
    "name": "DMenuOption",
    "parent": "DButton"
  },
  {
    "description": "<internal></internal>\n\nAn internal panel used by <page>DMenu</page>.\nIt acts as a menu option that can be checked.\nIt automatically sets and reads the given console variable.\n\nIt can be right clicked to toggle without closing the <page>DMenu</page>.\n\nUse <page>DMenu:AddCVar</page> instead.",
    "functions": [
      {
        "description": "Returns the <page text=\"console variable\">ConVars</page> used by the <page>DMenuOptionCVar</page>.",
        "name": "GetConVar",
        "parent": "DMenuOptionCVar",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The <page text=\"console variable\">ConVars</page> used",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns the value of the <page text=\"console variable\">ConVars</page> when the <page>DMenuOptionCVar</page> is not checked.",
        "name": "GetValueOff",
        "parent": "DMenuOptionCVar",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The value",
            "type": "string"
          }
        ]
      },
      {
        "description": "Return the value of the <page text=\"console variable\">ConVars</page> when the <page>DMenuOptionCVar</page> is checked.",
        "name": "GetValueOn",
        "parent": "DMenuOptionCVar",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The value",
            "type": "string"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page text=\"console variable\">ConVars</page> name to set",
            "name": "cvar",
            "type": "string"
          }
        ],
        "description": "Sets the <page text=\"console variable\">ConVars</page> to be used by <page>DMenuOptionCVar</page>.",
        "name": "SetConVar",
        "parent": "DMenuOptionCVar",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The value",
            "name": "value",
            "type": "string"
          }
        ],
        "description": "Sets the value of the <page text=\"console variable\">ConVars</page> when the <page>DMenuOptionCVar</page> is not checked.",
        "name": "SetValueOff",
        "parent": "DMenuOptionCVar",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The value",
            "name": "value",
            "type": "string"
          }
        ],
        "description": "Sets the value of the <page text=\"console variable\">ConVars</page> when the <page>DMenuOptionCVar</page> is checked.",
        "name": "SetValueOn",
        "parent": "DMenuOptionCVar",
        "realms": [
          "client"
        ]
      }
    ],
    "name": "DMenuOptionCVar",
    "parent": "DMenuOption"
  },
  {
    "description": "DModelPanel is a VGUI element that projects a 3D model onto a 2D plane. See also <page>DAdjustableModelPanel</page>",
    "functions": [
      {
        "description": "<internal></internal> Used by the DModelPanel's paint hook to draw the model and background.",
        "name": "DrawModel",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ]
      },
      {
        "description": "Returns the ambient lighting used on the rendered entity.",
        "name": "GetAmbientLight",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The color of the ambient lighting.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns whether or not the panel entity should be animated when the default <page>DModelPanel:LayoutEntity</page> function is called.",
        "name": "GetAnimated",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "True if the panel entity can be animated with <page>Entity:SetSequence</page> directly, false otherwise.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the animation speed of the panel entity, see <page>DModelPanel:SetAnimSpeed</page>.",
        "name": "GetAnimSpeed",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The animation speed.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the position of the model viewing camera.",
        "name": "GetCamPos",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The position of the camera.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Returns the color of the rendered entity.",
        "name": "GetColor",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The color of the entity, see <page>Color</page>.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns the entity being rendered by the model panel.",
        "name": "GetEntity",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The rendered entity (client-side)",
            "type": "CSEnt"
          }
        ]
      },
      {
        "description": "Returns the FOV (field of view) the camera is using.",
        "name": "GetFOV",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The FOV of the camera.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the angles of the model viewing camera. Is **nil** until changed with <page>DModelPanel:SetLookAng</page>.",
        "name": "GetLookAng",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The angles of the camera.",
            "type": "Angle"
          }
        ]
      },
      {
        "description": "Returns the position the viewing camera is pointing toward.",
        "name": "GetLookAt",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The position the camera is pointing toward.",
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Gets the model of the rendered entity.",
        "name": "GetModel",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The model of the rendered entity.",
            "type": "string"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The entity that is being rendered.",
            "name": "entity",
            "type": "Entity"
          }
        ],
        "description": "By default, this function slowly rotates and animates the entity being rendered.\n\nIf you want to change this behavior, you should override it.",
        "name": "LayoutEntity",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The clientside entity of the <page>DModelPanel</page> that has been drawn.",
            "name": "ent",
            "type": "Entity"
          }
        ],
        "description": "Called when the entity of the <page>DModelPanel</page> was drawn.\n\nThis is a rendering hook with 3d drawing context.",
        "name": "PostDrawModel",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The clientside entity of the <page>DModelPanel</page> that has been drawn.",
            "name": "ent",
            "type": "Entity"
          }
        ],
        "description": "Called **before** the entity of the <page>DModelPanel</page> is drawn.",
        "name": "PreDrawModel",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Return false to stop the entity from being drawn. This will also cause <page>DModelPanel:PostDrawModel</page> to stop being called.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "This function is used in <page>DModelPanel:LayoutEntity</page>. It will progress the animation, set using <page>Entity:SetSequence</page>. By default, it is the walking animation.",
        "name": "RunAnimation",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The color of the ambient lighting.",
            "name": "color",
            "type": "table"
          }
        ],
        "description": "Sets the ambient lighting used on the rendered entity.",
        "name": "SetAmbientLight",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "True to animate, false otherwise.",
            "name": "animated",
            "type": "boolean"
          }
        ],
        "description": "Sets whether or not to animate the entity when the default <page>DModelPanel:LayoutEntity</page> is called.",
        "name": "SetAnimated",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The animation speed.",
            "name": "animSpeed",
            "type": "number"
          }
        ],
        "description": "Sets the speed used by <page>DModelPanel:RunAnimation</page> to advance frame on an entity sequence.\n\n<note><page>Entity:FrameAdvance</page> doesn't seem to have any functioning arguments and therefore changing this will not have any affect on the panel entity's sequence speed without reimplementation. It only affects the value returned by <page>DModelPanel:GetAnimSpeed</page></note>",
        "name": "SetAnimSpeed",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The position to set the camera at.",
            "name": "pos",
            "type": "Vector"
          }
        ],
        "description": "Sets the position of the camera.",
        "name": "SetCamPos",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The render color of the entity.",
            "name": "color",
            "type": "table"
          }
        ],
        "description": "Sets the color of the rendered entity.\n\n<note>This does not work on Garry's Mod player models since they use a different color system. To modify a player model color, see Example 2 on the <page>DModelPanel</page> page</note>",
        "name": "SetColor",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The light direction, see <page>Enums/BOX</page>.",
            "name": "direction",
            "type": "number"
          },
          {
            "description": "The color of the directional lighting.",
            "name": "color",
            "type": "table"
          }
        ],
        "description": "Sets the directional lighting used on the rendered entity.",
        "name": "SetDirectionalLight",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new panel entity.",
            "name": "ent",
            "type": "Entity"
          }
        ],
        "description": "Sets the entity to be rendered by the model panel.\n\n<note>If you set `ent` to a shared entity you must set `ent` to nil before removing this panel or else a \"Trying to remove server entity on client!\" error is thrown</note>",
        "name": "SetEntity",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The field of view value.",
            "name": "fov",
            "type": "number"
          }
        ],
        "description": "Sets the panel camera's FOV (field of view).",
        "name": "SetFOV",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The angles to set the camera to.",
            "name": "ang",
            "type": "Angle"
          }
        ],
        "description": "Sets the angles of the camera.",
        "name": "SetLookAng",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The position to orient the camera toward.",
            "name": "pos",
            "type": "Vector"
          }
        ],
        "description": "Makes the panel's camera face the given position. Basically sets the camera's angles (<page>DModelPanel:SetLookAng</page>) after doing some math.",
        "name": "SetLookAt",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The model to apply to the entity.",
            "name": "model",
            "type": "string"
          }
        ],
        "description": "Sets the model of the rendered entity.\n\n<note>This function may give a different model than expected. This is not a bug, however this problem may appear with some player models which are renamed several times in a wrong way. To solve that, you can use <page>Entity:SetModel</page> and <page>Entity:SetModelName</page> on the internal panel entity. More information : https://github.com/Facepunch/garrysmod-issues/issues/4534.</note>",
        "name": "SetModel",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The path to the scene file. (.vcd)",
            "name": "path",
            "type": "string"
          }
        ],
        "description": "Runs a <page>Global.ClientsideScene</page> on the panel's entity.",
        "name": "StartScene",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ]
      }
    ],
    "name": "DModelPanel",
    "parent": "DButton"
  },
  {
    "description": "<deprecated>\nThis is derived from the deprecated <page>DPanelList</page>.\n</deprecated>\n\nA vertical list of models.",
    "functions": [
      {
        "arguments": [
          {
            "default": "2",
            "description": "Basically how many rows of 64x64 px spawnicons should fit in this DModelSelect",
            "name": "num",
            "type": "number"
          }
        ],
        "description": "Sets the height of the panel **in the amount of 64px spawnicons**.\n\nOverrides <page>Panel:SetHeight</page>.",
        "name": "SetHeight",
        "parent": "DModelSelect",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "Each key is a model path, the value is a kay-value table where they key is a convar name and value is the value to set to that convar.",
            "name": "models",
            "type": "table"
          },
          {
            "description": "<page>ConVar</page> to set when a model from this list is selected.",
            "name": "convar",
            "type": "string"
          },
          {
            "description": "Do not sort the list. (by the `Model` member)",
            "name": "dontSort",
            "type": "boolean"
          },
          {
            "description": "If set, only the `convar` from the 2nd argument will be set, not individual convars from the models list.",
            "name": "dontCallListConVars",
            "type": "boolean"
          }
        ],
        "description": "Called to set the list of models within the panel element.",
        "name": "SetModelList",
        "parent": "DModelSelect",
        "realms": [
          "client"
        ]
      }
    ],
    "name": "DModelSelect",
    "parent": "DPanelSelect"
  },
  {
    "description": "<deprecated></deprecated>\nA combination of <page>DModelSelect</page> and <page>DPropertySheet</page>.",
    "functions": [
      {
        "arguments": [
          {
            "description": "Name of the tab to add.",
            "name": "name",
            "type": "string"
          },
          {
            "description": "Models list for this tab. See <page>DModelSelect:SetModelList</page>.",
            "name": "models",
            "type": "table"
          },
          {
            "description": "<page>ConVar</page> to set when a model from this list is selected.",
            "name": "convar",
            "type": "string"
          },
          {
            "description": "Do not sort the list. (by the `Model` member)",
            "name": "dontSort",
            "type": "boolean"
          },
          {
            "description": "If set, only the `convar` from the 2nd argument will be set, not individual convars from the models list.",
            "name": "dontCallListConVars",
            "type": "boolean"
          }
        ],
        "description": "Adds a new tab of models.",
        "name": "AddModelList",
        "parent": "DModelSelectMulti",
        "realms": [
          "client",
          "menu"
        ]
      }
    ],
    "name": "DModelSelectMulti",
    "parent": "DPropertySheet"
  },
  {
    "description": "A panel that fades its contents in and out once, like a notification.",
    "functions": [
      {
        "arguments": [
          {
            "description": "The panel to add",
            "name": "pnl",
            "type": "Panel"
          },
          {
            "default": "nil",
            "description": "If set, overrides <page>DNotify:SetLife</page> for when the given panel should be removed.",
            "name": "lifeLength",
            "type": "number"
          }
        ],
        "description": "Adds a panel to the notification",
        "name": "AddItem",
        "parent": "DNotify",
        "realms": [
          "client"
        ]
      },
      {
        "description": "Returns the current alignment of this notification panel. Set by <page>DNotify:SetAlignment</page>.",
        "name": "GetAlignment",
        "parent": "DNotify",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The numpad alignment",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns all the items added with <page>DNotify:AddItem</page>.",
        "name": "GetItems",
        "parent": "DNotify",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "A table of <page>Panel</page>s.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns the display time in seconds of the DNotify. This is set with\n<page>DNotify:SetLife</page>.",
        "name": "GetLife",
        "parent": "DNotify",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The display time in seconds.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the spacing between items set by <page>DNotify:SetSpacing</page>.",
        "name": "GetSpacing",
        "parent": "DNotify",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "It's the Numpad alignment, 6 is right, 9 is top left, etc.",
            "name": "alignment",
            "type": "number"
          }
        ],
        "description": "Sets the alignment of the child panels in the notification",
        "name": "SetAlignment",
        "parent": "DNotify",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The time in seconds.",
            "name": "time",
            "type": "number"
          }
        ],
        "description": "Sets the display time in seconds for the DNotify.",
        "name": "SetLife",
        "parent": "DNotify",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "spacing",
            "type": "number"
          }
        ],
        "description": "Sets the spacing between child elements of the notification panel.",
        "name": "SetSpacing",
        "parent": "DNotify",
        "realms": [
          "client"
        ]
      },
      {
        "description": "<internal></internal>Used internally to position and fade in/out its <page>DNotify:GetItems</page>.",
        "name": "Shuffle",
        "parent": "DNotify",
        "realms": [
          "client"
        ]
      }
    ],
    "name": "DNotify",
    "parent": "Panel"
  },
  {
    "description": "Choose a number from a number line, with zooming for precision.\nZoom in by moving your mouse forward and moving back does the opposite. Looks like a blue circle until you click and hold on it",
    "functions": [
      {
        "arguments": [
          {
            "description": "",
            "name": "level",
            "type": "number"
          },
          {
            "description": "",
            "name": "x",
            "type": "number"
          },
          {
            "description": "",
            "name": "y",
            "type": "number"
          },
          {
            "description": "",
            "name": "w",
            "type": "number"
          },
          {
            "description": "",
            "name": "h",
            "type": "number"
          },
          {
            "description": "",
            "name": "range",
            "type": "number"
          },
          {
            "description": "",
            "name": "value",
            "type": "number"
          },
          {
            "description": "",
            "name": "min",
            "type": "number"
          },
          {
            "description": "",
            "name": "max",
            "type": "number"
          }
        ],
        "description": "<internal></internal>\n\nUsed by <page>DNumberScratch:DrawScreen</page>.",
        "name": "DrawNotches",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "x",
            "type": "number"
          },
          {
            "description": "",
            "name": "y",
            "type": "number"
          },
          {
            "description": "",
            "name": "w",
            "type": "number"
          },
          {
            "description": "",
            "name": "h",
            "type": "number"
          }
        ],
        "description": "<internal></internal>\n\nUsed by <page>DNumberScratch:PaintScratchWindow</page>.",
        "name": "DrawScreen",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Returns whether this panel is active or not, i.e. if the player is currently changing its value.",
        "name": "GetActive",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the desired amount of numbers after the decimal point.",
        "name": "GetDecimals",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "0 for whole numbers only, 1 for one number after the decimal point, etc.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the real value of the <page>DNumberScratch</page> as a number.\n\nSee also <page>DNumberScratch:GetTextValue</page> and <page>DNumberScratch:GetFraction</page>.",
        "name": "GetFloatValue",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The real value of the <page>DNumberScratch</page>",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the value of the <page>DNumberScratch</page> as a fraction, a value between 0 and 1 where 0 is the minimum and 1 is the maximum value of the <page>DNumberScratch</page>.\n\nSee also:\n* <page>DNumberScratch:GetTextValue</page>\n* <page>DNumberScratch:GetFloatValue</page>\n* <page>DNumberScratch:SetFraction</page>",
        "name": "GetFraction",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "A value between 0 and 1",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the maximum value that can be selected on the number scratch",
        "name": "GetMax",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The maximum value that can be selected on the number scratch",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the minimum value that can be selected on the number scratch",
        "name": "GetMin",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The minimum value that can be selected on the number scratch",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the range of the <page>DNumberScratch</page>. Basically max value - min value.",
        "name": "GetRange",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The range of the <page>DNumberScratch</page>",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns whether the scratch window should be visible or not.",
        "name": "GetShouldDrawScreen",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the real value of the <page>DNumberScratch</page> as a string.\n\nSee also <page>DNumberScratch:GetFloatValue</page> and <page>DNumberScratch:GetFraction</page>.",
        "name": "GetTextValue",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The real value of the <page>DNumberScratch</page>",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns the zoom level of the scratch window",
        "name": "GetZoom",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the ideal zoom level for the panel based on the <page>DNumberScratch:GetRange</page>.",
        "name": "IdealZoom",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The ideal zoom level for the panel based on the panels range.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns whether the player is currently editing the value of the <page>DNumberScratch</page>.",
        "name": "IsEditing",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "description": "<internal></internal>\n\nUsed to lock the cursor in place.",
        "name": "LockCursor",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new value",
            "name": "newValue",
            "type": "number"
          }
        ],
        "description": "Called when the value of the <page>DNumberScratch</page> is changed.",
        "name": "OnValueChanged",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "<internal></internal>\n\nUsed to paint the 'scratch' window.",
        "name": "PaintScratchWindow",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "true to activate, false to deactivate.",
            "name": "active",
            "type": "boolean"
          }
        ],
        "description": "<internal></internal>\n\nSets whether or not the panel is 'active'.\n\nForcing this panel to be active may not work.",
        "name": "SetActive",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "0 for whole numbers only, 1 for one number after the decimal point, etc.",
            "name": "decimals",
            "type": "number"
          }
        ],
        "description": "Sets the desired amount of numbers after the decimal point.",
        "name": "SetDecimals",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The value to set",
            "name": "val",
            "type": "number"
          }
        ],
        "description": "<internal></internal>\n\nDoes not trigger <page>DNumberScratch:OnValueChanged</page>\n\nUse <page>DNumberScratch:SetValue</page> instead.",
        "name": "SetFloatValue",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "A value between 0 and 1",
            "name": "frac",
            "type": "number"
          }
        ],
        "description": "Sets the value of the <page>DNumberScratch</page> as a fraction, a value between 0 and 1 where 0 is the minimum and 1 is the maximum value of the <page>DNumberScratch</page>",
        "name": "SetFraction",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The maximum number",
            "name": "max",
            "type": "number"
          }
        ],
        "description": "Sets the max value that can be selected on the number scratch",
        "name": "SetMax",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The minimum number",
            "name": "min",
            "type": "number"
          }
        ],
        "description": "Sets the minimum value that can be selected on the number scratch.",
        "name": "SetMin",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "shouldDraw",
            "type": "boolean"
          }
        ],
        "description": "<internal></internal>\n\nSets if the scratch window should be drawn or not. Cannot be used to force it to draw, only to hide it, which will not stop the panel from working with invisible window.",
        "name": "SetShouldDrawScreen",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The value to set.",
            "name": "val",
            "type": "number"
          }
        ],
        "description": "Sets the value of the <page>DNumberScratch</page> and triggers <page>DNumberScratch:OnValueChanged</page>",
        "name": "SetValue",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "zoom",
            "type": "number"
          }
        ],
        "description": "Sets the zoom level of the scratch panel.",
        "name": "SetZoom",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "<internal></internal>\n\nForces the assigned ConVar to be updated to the value of this <page>DNumberScratch</page>",
        "name": "UpdateConVar",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ]
      }
    ],
    "name": "DNumberScratch",
    "parent": "DImageButton"
  },
  {
    "description": "DNumberWang is a VGUI element that allows you to input a numeric value using up and down arrows or direct entry.",
    "functions": [
      {
        "description": "Returns the amount of decimal places allowed in the number selector, set by <page>DNumberWang:SetDecimals</page>",
        "name": "GetDecimals",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The amount of decimal places allowed in the number selector.",
            "type": "number"
          }
        ]
      },
      {
        "description": "<deprecated></deprecated>\n\nReturns whatever is set by <page>DNumberWang:SetFloatValue</page> or 0.",
        "name": "GetFloatValue",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The fraction numerator.",
            "name": "val",
            "type": "number"
          }
        ],
        "description": "Returns a fraction representing the current number selector value to number selector min/max range ratio. If argument `val` is supplied, that number will be computed instead.",
        "name": "GetFraction",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Returns interval at which the up and down buttons change the current value.",
        "name": "GetInterval",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The current interval.",
            "name": "min",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the maximum numeric value allowed by the number selector.",
        "name": "GetMax",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The maximum value.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the minimum numeric value allowed by the number selector.",
        "name": "GetMin",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The minimum number.",
            "type": "number"
          }
        ]
      },
      {
        "description": "<deprecated></deprecated>\n\nThis function returns the panel it is used on.",
        "name": "GetTextArea",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "self",
            "type": "Panel"
          }
        ]
      },
      {
        "description": "Returns the numeric value inside the number selector.",
        "name": "GetValue",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The numeric value.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Hides the number selector arrows.",
        "name": "HideWang",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new value of the number selector.",
            "name": "val",
            "type": "number"
          }
        ],
        "description": "Called when the number selector value is changed.",
        "name": "OnValueChanged",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The amount of decimal places.",
            "name": "num",
            "type": "number"
          }
        ],
        "description": "Sets the amount of decimal places allowed in the number selector.",
        "name": "SetDecimals",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "val",
            "type": "number"
          }
        ],
        "description": "<deprecated></deprecated>\n\nAppears to do nothing.",
        "name": "SetFloatValue",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The fraction of the number selector's range.",
            "name": "val",
            "type": "number"
          }
        ],
        "description": "Sets the value of the number selector based on the given fraction number.",
        "name": "SetFraction",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new interval.",
            "name": "min",
            "type": "number"
          }
        ],
        "description": "Sets interval at which the up and down buttons change the current value.",
        "name": "SetInterval",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The maximum value.",
            "name": "max",
            "type": "number"
          }
        ],
        "description": "Sets the maximum numeric value allowed by the number selector.",
        "name": "SetMax",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The minimum value.",
            "name": "min",
            "type": "number"
          }
        ],
        "description": "Sets the minimum numeric value allowed by the number selector.",
        "name": "SetMin",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The minimum value.",
            "name": "min",
            "type": "number"
          },
          {
            "description": "The maximum value.",
            "name": "max",
            "type": "number"
          }
        ],
        "description": "Sets the minimum and maximum value allowed by the number selector.",
        "name": "SetMinMax",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The value to set.",
            "name": "val",
            "type": "number"
          }
        ],
        "description": "Sets the value of the <page>DNumberWang</page> and triggers <page>DNumberWang:OnValueChanged</page>",
        "name": "SetValue",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ]
      }
    ],
    "name": "DNumberWang",
    "parent": "DTextEntry"
  },
  {
    "description": "<deprecated>\nYou should use <page>DBinder</page> instead.\n</deprecated>\n\nGMod 12 style \"number pad\" panel used by tools for binding keys to tool actions. Deprecated in favor of <page>DBinder</page>.",
    "name": "DNumPad",
    "parent": "DPanel"
  },
  {
    "description": "The **DNumSlider** allows you to create a slider, allowing the user to slide it to set a value, or changing the value in the box.",
    "functions": [
      {
        "description": "Returns the amount of numbers after the decimal point.",
        "name": "GetDecimals",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "0 for whole numbers only, 1 for one number after the decimal point, etc.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the default value of the slider, if one was set by <page>DNumSlider:SetDefaultValue</page>",
        "name": "GetDefaultValue",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The default value of the slider",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the maximum value of the slider",
        "name": "GetMax",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The maximum value of the slider",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the minimum value of the slider",
        "name": "GetMin",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The minimum value of the slider",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the range of the slider, basically maximum value - minimum value.",
        "name": "GetRange",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The range of the slider",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the <page>DTextEntry</page> component of the slider.",
        "name": "GetTextArea",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The <page>DTextEntry</page>.",
            "type": "Panel"
          }
        ]
      },
      {
        "description": "Returns the value of the <page>DNumSlider</page>",
        "name": "GetValue",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The value of the slider.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns true if either the <page>DTextEntry</page>, the <page>DSlider</page> or the <page>DNumberScratch</page> are being edited.",
        "name": "IsEditing",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether or not the <page>DNumSlider</page> is being edited by the player.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The new value of the DNumSlider.",
            "name": "value",
            "type": "number"
          }
        ],
        "description": "Called when the value of the slider is changed, through code or changing the slider.",
        "name": "OnValueChanged",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dnumslider.lua",
          "lineEnd": 197,
          "lineStart": 193
        }
      },
      {
        "description": "Resets the slider to the default value, if one was set by <page>DNumSlider:SetDefaultValue</page>.\n\nThis function is called by the <page>DNumSlider</page> when user middle mouse clicks on the draggable knob of the slider.",
        "name": "ResetToDefaultValue",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the <page>ConVar</page> to be updated.",
            "name": "cvar",
            "type": "string"
          }
        ],
        "description": "Sets the console variable to be updated when the value of the slider is changed.",
        "name": "SetConVar",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "dark",
            "type": "boolean"
          }
        ],
        "description": "Calls <page>DLabel:SetDark</page> on the <page>DLabel</page> part of the <page>DNumSlider</page>.",
        "name": "SetDark",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "0 for whole numbers only, 1 for one number after the decimal point, etc.",
            "name": "decimals",
            "type": "number"
          }
        ],
        "description": "Sets the desired amount of numbers after the decimal point.\n<note>\nThis doesn't affect values passed to <page>DNumSlider:OnValueChanged</page>.\n</note>\n\n<note>\nTo get right values passed to <page>DNumSlider:OnValueChanged</page> use <page>math.Round</page>.\n</note>",
        "name": "SetDecimals",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new default value of the slider to set",
            "name": "default",
            "type": "number"
          }
        ],
        "description": "Sets the default value of the slider, to be used by <page>DNumSlider:ResetToDefaultValue</page> or by middle mouse clicking the draggable knob of the slider.",
        "name": "SetDefaultValue",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The value to set as maximum for the slider.",
            "name": "max",
            "type": "number"
          }
        ],
        "description": "Sets the maximum value for the slider.",
        "name": "SetMax",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The value to set as minimum for the slider.",
            "name": "min",
            "type": "number"
          }
        ],
        "description": "Sets the minimum value for the slider",
        "name": "SetMin",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The minimum value of the slider.",
            "name": "min",
            "type": "number"
          },
          {
            "description": "The maximum value of the slider.",
            "name": "max",
            "type": "number"
          }
        ],
        "description": "Sets the minimum and the maximum value of the slider.",
        "name": "SetMinMax",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The value to set.",
            "name": "val",
            "type": "number"
          }
        ],
        "description": "Sets the value of the <page>DNumSlider</page>.",
        "name": "SetValue",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "x",
            "type": "number"
          },
          {
            "description": "",
            "name": "y",
            "type": "number"
          }
        ],
        "description": "<internal></internal>",
        "name": "TranslateSliderValues",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "number"
          },
          {
            "description": "The second passed argument.",
            "type": "number"
          }
        ]
      },
      {
        "description": "<internal></internal>Updates visual notches on the slider.",
        "name": "UpdateNotches",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The value the slider has been changed to.",
            "name": "value",
            "type": "number"
          }
        ],
        "description": "<internal></internal> Called when the value has been changed. This will also be called when the user manually changes the value through the text panel.\n\nThis is an internal function. Override <page>DNumSlider:OnValueChanged</page> instead.",
        "name": "ValueChanged",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ]
      }
    ],
    "name": "DNumSlider",
    "parent": "Panel"
  },
  {
    "description": "A simple rectangular box, commonly used for parenting other elements to. Pretty much all elements are based on this.",
    "functions": [
      {
        "description": "Returns the panel's background color.\n\n<note>By default this returns **nil** even though the default background color is white</note>",
        "name": "GetBackgroundColor",
        "parent": "DPanel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Color of the panel's background.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns whether or not the panel is disabled.",
        "name": "GetDisabled",
        "parent": "DPanel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "True if the panel is disabled (mouse input disabled and background alpha set to 75), false if its enabled (mouse input enabled and background alpha set to 255).",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "<deprecated>You should use <page>DPanel:GetPaintBackground</page> instead.</deprecated>Returns whether or not the panel background is being drawn. Alias of <page>DPanel:GetPaintBackground</page>.",
        "name": "GetDrawBackground",
        "parent": "DPanel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "True if the panel background is drawn, false otherwise.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Used internally by <page>DMenu</page>.\n\nReturns whether the frame is part of a derma menu or not.\n\nIf this is `true`, <page>Global.CloseDermaMenus</page> will not be called when the frame is clicked, and thus any open menus will remain open.",
        "name": "GetIsMenu",
        "parent": "DPanel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether this panel is a Menu Component",
            "name": "isMenu",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether or not the panel background is being drawn.",
        "name": "GetPaintBackground",
        "parent": "DPanel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "True if the panel background is drawn, false otherwise.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "<deprecated></deprecated>Does nothing. Returns value set by <page>DPanel:SetTabbingDisabled</page>.",
        "name": "GetTabbingDisabled",
        "parent": "DPanel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "name": "draw",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The background color.",
            "name": "color",
            "type": "table"
          }
        ],
        "description": "Sets the background color of the panel.",
        "name": "SetBackgroundColor",
        "parent": "DPanel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "True to disable the panel (mouse input disabled and background alpha set to 75), false to enable it (mouse input enabled and background alpha set to 255).",
            "name": "disabled",
            "type": "boolean"
          }
        ],
        "description": "Sets whether or not to disable the panel.",
        "name": "SetDisabled",
        "parent": "DPanel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "True to show the panel's background, false to hide it.",
            "name": "draw",
            "type": "boolean"
          }
        ],
        "description": "<deprecated>You should use <page>DPanel:SetPaintBackground</page> instead.</deprecated>Sets whether or not to draw the panel background. Alias of <page>DPanel:SetPaintBackground</page>.",
        "name": "SetDrawBackground",
        "parent": "DPanel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether this pane is a Menu Component",
            "name": "isMenu",
            "type": "boolean"
          }
        ],
        "description": "Used internally by <page>DMenu</page>.\n\n\nSets whether the frame is part of a derma menu or not.\n\nIf this is set to `true`, <page>Global.CloseDermaMenus</page> will not be called when the frame is clicked, and thus any open menus will remain open.",
        "name": "SetIsMenu",
        "parent": "DPanel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "True to show the panel's background, false to hide it.",
            "name": "paint",
            "type": "boolean"
          }
        ],
        "description": "Sets whether or not to paint/draw the panel background.",
        "name": "SetPaintBackground",
        "parent": "DPanel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "draw",
            "type": "boolean"
          }
        ],
        "description": "<deprecated></deprecated>Does nothing.",
        "name": "SetTabbingDisabled",
        "parent": "DPanel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "<deprecated></deprecated>\n\nDoes nothing.",
        "name": "UpdateColours",
        "parent": "DPanel",
        "realms": [
          "client",
          "menu"
        ]
      }
    ],
    "name": "DPanel",
    "parent": "Panel"
  },
  {
    "description": "Displays elements in a horizontal or vertical list. A scrollbar is automatically shown if necessary.\nYou can get its vertical bar via `DPanelList.VBar`.\n<page>DPanelList</page> was succeeded in version 13 by more specialised layout elements.\n\n<deprecated>\n<br> Use a combination of <page>DIconLayout</page>, <page>DListLayout</page> and <page>DScrollPanel</page> instead.\n</deprecated>",
    "functions": [
      {
        "arguments": [
          {
            "description": "Panel to be used as element of list",
            "name": "pnl",
            "type": "Panel"
          },
          {
            "default": "nil",
            "description": "If set to \"ownline\", the item will take its own entire line.",
            "name": "state",
            "type": "string"
          }
        ],
        "description": "Adds a existing panel to the end of <page>DPanelList</page>.",
        "name": "AddItem",
        "parent": "DPanelList",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Removes all items.",
        "name": "CleanList",
        "parent": "DPanelList",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Enables/creates the vertical scroll bar so that the panel list can be scrolled through.",
        "name": "EnableVerticalScrollbar",
        "parent": "DPanelList",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Returns all panels has added by <page>DPanelList:AddItem</page>",
        "name": "GetItems",
        "parent": "DPanelList",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "A table of panels used as items of <page>DPanelList</page>.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns offset of list items from the panel borders set by <page>DPanelList:SetPadding</page>",
        "name": "GetPadding",
        "parent": "DPanelList",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Offset from panel borders",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns distance between list items set by <page>DPanelList:SetSpacing</page>",
        "name": "GetSpacing",
        "parent": "DPanelList",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Distance between panels",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The panel to insert",
            "name": "insert",
            "type": "Panel"
          },
          {
            "description": "If set to \"ownline\", no other panels will be placed to the left or right of the panel we are inserting",
            "name": "strLineState",
            "type": "string"
          }
        ],
        "description": "Insert given panel at the top of the list.",
        "name": "InsertAtTop",
        "parent": "DPanelList",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "<internal></internal>\nUsed internally to rebuild the child panel positions.",
        "name": "Rebuild",
        "parent": "DPanelList",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether to size to the height of the <page>DPanelList</page> contents.",
            "name": "shouldSizeToContents",
            "type": "boolean"
          }
        ],
        "description": "Sets the <page>DPanelList</page> to size its height to its contents. This is set to false by default.",
        "name": "SetAutoSize",
        "parent": "DPanelList",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dpanellist.lua",
          "lineStart": 4
        }
      },
      {
        "arguments": [
          {
            "description": "Offset from panel borders",
            "name": "Offset",
            "type": "number"
          }
        ],
        "description": "Sets the offset of the lists items from the panel borders",
        "name": "SetPadding",
        "parent": "DPanelList",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Distance between panels",
            "name": "Distance",
            "type": "number"
          }
        ],
        "description": "Sets distance between list items",
        "name": "SetSpacing",
        "parent": "DPanelList",
        "realms": [
          "client",
          "menu"
        ]
      }
    ],
    "name": "DPanelList",
    "parent": "DPanel"
  },
  {
    "description": "Adds curved corners.",
    "functions": [
      {
        "description": "Returns the border color of the <page>DPanelOverlay</page> set by <page>DPanelOverlay:SetColor</page>.",
        "name": "GetColor",
        "parent": "DPanelOverlay",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The set color. Uses the <page>Color</page>.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns the type of the <page>DPanelOverlay</page> set by <page>DPanelOverlay:SetType</page>.",
        "name": "GetType",
        "parent": "DPanelOverlay",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The set type.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "cola",
            "type": "table"
          },
          {
            "description": "",
            "name": "colb",
            "type": "table"
          },
          {
            "description": "",
            "name": "colc",
            "type": "table"
          },
          {
            "description": "",
            "name": "cold",
            "type": "table"
          },
          {
            "description": "",
            "name": "size",
            "type": "number"
          }
        ],
        "description": "<internal></internal>Used internally by the panel for type 3.",
        "name": "PaintDifferentColours",
        "parent": "DPanelOverlay",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "size",
            "type": "number"
          }
        ],
        "description": "<internal></internal>Used internally by the panel for types 1 and 2.",
        "name": "PaintInnerCorners",
        "parent": "DPanelOverlay",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The color to set. Uses the <page>Color</page>.",
            "name": "color",
            "type": "table"
          }
        ],
        "description": "Sets the border color of the <page>DPanelOverlay</page>.",
        "name": "SetColor",
        "parent": "DPanelOverlay",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The type to set.\n\nPossible value are:\n* 1 - 8px corners of given color\n* 2 - 4px corners of given type\n* 3 - 2 top? corners of hardcoded color, 2 other corners of given color",
            "name": "type",
            "type": "number"
          }
        ],
        "description": "Sets the type of the <page>DPanelOverlay</page>.",
        "name": "SetType",
        "parent": "DPanelOverlay",
        "realms": [
          "client",
          "menu"
        ]
      }
    ],
    "name": "DPanelOverlay",
    "parent": "DPanel"
  },
  {
    "description": "<deprecated>\nThis is derived from the deprecated <page>DPanelList</page>.\n</deprecated>\n\nA base panel for things like <page>DModelSelect</page>.\nBasically, a list of panels that can be selected.\nSelected panel can be retrieved and has visual indication of being selected.",
    "functions": [
      {
        "arguments": [
          {
            "description": "The panel to add.",
            "name": "pnl",
            "type": "Panel"
          },
          {
            "default": "nil",
            "description": "<page>ConVar</page>s to set when this panel is selected. Keys are the cvar name, value is the value for that cvar.",
            "name": "conVars",
            "type": "table"
          }
        ],
        "description": "Adds a panel to be selectable.",
        "name": "AddPanel",
        "parent": "DPanelSelect",
        "realms": [
          "client"
        ]
      },
      {
        "description": "<internal></internal>\n\nUsed internally by <page>DPanelSelect:AddPanel</page> to select the best default selected panel based on player's convars.",
        "name": "FindBestActive",
        "parent": "DPanelSelect",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "Old selected panel.",
            "name": "oldPnl",
            "type": "Panel"
          },
          {
            "description": "New selected panel.",
            "name": "newPnl",
            "type": "Panel"
          }
        ],
        "description": "Called when the selected panel changes.",
        "name": "OnActivePanelChanged",
        "parent": "DPanelSelect",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "Panel to select. It should've been added previously via <page>DPanelSelect:AddPanel</page>.",
            "name": "pnl",
            "type": "Panel"
          }
        ],
        "description": "Selects a given panel.",
        "name": "SelectPanel",
        "parent": "DPanelSelect",
        "realms": [
          "client"
        ]
      }
    ],
    "name": "DPanelSelect",
    "parent": "DPanelList"
  },
  {
    "description": "A panel similar to <page>DScrollPanel</page>, but that allows the player to pan around, for example a zoomed in image within a small window.",
    "functions": [
      {
        "arguments": [
          {
            "description": "The panel to add.",
            "name": "pnl",
            "type": "Panel"
          }
        ],
        "description": "Parents the passed panel to the <page>DPanPanel:GetCanvas</page>.",
        "name": "AddItem",
        "parent": "DPanPanel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "The internal canvas panel.",
        "name": "GetCanvas",
        "parent": "DPanPanel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The canvas panel.",
            "type": "Panel"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "x",
            "type": "number"
          },
          {
            "description": "",
            "name": "y",
            "type": "number"
          }
        ],
        "description": "<internal></internal>\nUsed internally, called from <page>DPanPanel:ScrollToChild</page>.",
        "name": "OnScroll",
        "parent": "DPanPanel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The panel to scroll to.",
            "name": "pnl",
            "type": "Panel"
          }
        ],
        "description": "Scroll to a specific child panel.",
        "name": "ScrollToChild",
        "parent": "DPanPanel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dpanpanel.lua",
          "lineEnd": 135,
          "lineStart": 123
        }
      },
      {
        "arguments": [
          {
            "description": "The canvas panel.",
            "name": "pnl",
            "type": "Panel"
          }
        ],
        "description": "<internal></internal>\n\nUsed internally.",
        "name": "SetCanvas",
        "parent": "DPanPanel",
        "realms": [
          "client",
          "menu"
        ]
      }
    ],
    "name": "DPanPanel",
    "parent": "DPanel"
  },
  {
    "description": "A progressbar, works with a fraction between 0 and 1 where 0 is 0% and 1 is 100%.",
    "functions": [
      {
        "description": "Returns the progress bar's fraction. 0 is 0% and 1 is 100%.",
        "name": "GetFraction",
        "parent": "DProgress",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Current fraction of the progress bar.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Fraction of the progress bar. Range is 0 to 1 (0% to 100%).",
            "name": "fraction",
            "type": "number"
          }
        ],
        "description": "Sets the fraction of the progress bar. 0 is 0% and 1 is 100%.",
        "name": "SetFraction",
        "parent": "DProgress",
        "realms": [
          "client",
          "menu"
        ]
      }
    ],
    "name": "DProgress",
    "parent": "Panel"
  },
  {
    "description": "A grid for editing the properties of something using names and values. Properties can be categorized and strongly typed.\n\n<img src=\"ab571/8dc38978e7c3bbe.png\" alt=\"DProperties example\">\n##  Associated controls\n* <page>DProperty_VectorColor</page>\n* <page>DProperty_Boolean</page>\n* <page>DProperty_Generic</page>\n* <page>DProperty_Combo</page>\n* <page>DProperty_Float</page>\n* <page>DProperty_Int</page>",
    "functions": [
      {
        "description": "Returns the <page>DScrollPanel</page> all the properties panels are attached to.",
        "name": "GetCanvas",
        "parent": "DProperties",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "A <page>DScrollPanel</page> canvas",
            "type": "Panel"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Name of the category",
            "name": "name",
            "type": "string"
          },
          {
            "default": "false",
            "description": "Create a new category if it doesn't exist.",
            "name": "create",
            "type": "boolean"
          }
        ],
        "description": "<internal></internal>\n\nReturns (or creates) a category of properties.\n\nSee <page>DProperties:CreateRow</page> for adding actual properties.",
        "name": "GetCategory",
        "parent": "DProperties",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "An internal panel.",
            "type": "Panel"
          }
        ]
      }
    ],
    "name": "DProperties",
    "parent": "Panel"
  },
  {
    "description": "<internal></internal>\nCheckbox control for the <page>DProperties</page> panel.",
    "name": "DProperty_Boolean",
    "parent": "DProperty_Generic"
  },
  {
    "description": "<internal></internal>\n\n<page>DComboBox</page> control for a <page>DProperties</page> panel.",
    "functions": [
      {
        "arguments": [
          {
            "description": "Shown text.",
            "name": "Text",
            "type": "string"
          },
          {
            "description": "Stored Data.",
            "name": "data",
            "type": "any"
          },
          {
            "default": "false",
            "description": "Select this element?",
            "name": "select",
            "type": "boolean"
          }
        ],
        "description": "Add a choice to your combo control.",
        "name": "AddChoice",
        "parent": "DProperty_Combo",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new data that was selected.",
            "name": "data",
            "type": "any"
          }
        ],
        "description": "Called after the user selects a new value.",
        "name": "DataChanged",
        "parent": "DProperty_Combo",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "Id of the choice to be selected.",
            "name": "Id",
            "type": "number"
          }
        ],
        "description": "Set the selected option.",
        "name": "SetSelected",
        "parent": "DProperty_Combo",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "default": "{ text = 'Select...' }",
            "description": "Data to use to set up the combo box control. See <page>Editable Entities</page>.\n\nStructure:\n* <page>string</page> text - The default label for this combo box\n* <page>table</page> values - The values to add to the combo box. Keys are the \"nice\" text, values are the data value to send.\n* <page>table</page> icons - The icons for each value. They will be matched by key name.\n* <page>boolean</page> select - The \"nice\" name/key of the value that should be initially selected.",
            "name": "data",
            "type": "table"
          }
        ],
        "description": "<internal></internal>\nSets up a combo control.",
        "name": "Setup",
        "parent": "DProperty_Combo",
        "realms": [
          "client"
        ]
      }
    ],
    "name": "DProperty_Combo",
    "parent": "DProperty_Generic"
  },
  {
    "description": "<internal></internal>\nEntity picker control for the <page>DProperties</page> panel.",
    "name": "DProperty_Entity",
    "parent": "DProperty_Generic"
  },
  {
    "description": "<internal></internal>\nFloat control for the <page>DProperties</page> panel.",
    "functions": [
      {
        "description": "Called to poll the amount of digits after the decimal point. This is used internally for <page>DProperty_Int</page>.",
        "name": "GetDecimals",
        "parent": "DProperty_Float",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The amount of digits after the decimal point.",
            "name": "data",
            "type": "table"
          }
        ]
      }
    ],
    "name": "DProperty_Float",
    "parent": "DProperty_Generic"
  },
  {
    "description": "<internal></internal>\n\nA base for other controls for <page>DProperties</page>. Acts as a generic text input on its own.",
    "functions": [
      {
        "description": "Returns the internal row panel of a <page>DProperties</page> that this panel belongs to.",
        "name": "GetRow",
        "parent": "DProperty_Generic",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The row panel.",
            "type": "Panel"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The new row panel.",
            "name": "row",
            "type": "Panel"
          }
        ],
        "description": "<internal></internal>Called internally by <page>DProperties</page>.",
        "name": "SetRow",
        "parent": "DProperty_Generic",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "See <page>Editable Entities</page>.",
            "name": "data",
            "type": "table"
          }
        ],
        "description": "Sets up a generic control for use by <page>DProperties</page>.",
        "name": "Setup",
        "parent": "DProperty_Generic",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new value.",
            "name": "newVal",
            "type": "any"
          },
          {
            "description": "Force an update.",
            "name": "force",
            "type": "boolean"
          }
        ],
        "description": "Called by this control, or a derived control, to alert the row of the change.",
        "name": "ValueChanged",
        "parent": "DProperty_Generic",
        "realms": [
          "client"
        ]
      }
    ],
    "name": "DProperty_Generic",
    "parent": "Panel"
  },
  {
    "description": "<internal></internal>\nInteger control for the <page>DProperties</page> panel.",
    "name": "DProperty_Int",
    "parent": "DProperty_Float"
  },
  {
    "description": "<internal></internal>\nColor picker control for a DProperties panel. Opens a <page>DColorCombo</page> if the color preview is clicked.\n\nSee <page>Editable Entities</page> for how this is used ingame.",
    "functions": [
      {
        "arguments": [
          {
            "description": "A table of settings. None of the values are used for this property. See <page>Editable Entities</page>.",
            "name": "settings",
            "type": "table"
          }
        ],
        "description": "<internal></internal> Called by a property row to setup a color selection control.",
        "name": "Setup",
        "parent": "DProperty_VectorColor",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "Sets the color to use in a <page>DProperty_VectorColor</page>.",
            "name": "color",
            "type": "Vector"
          }
        ],
        "description": "Sets the color value of the property.",
        "name": "SetValue",
        "parent": "DProperty_VectorColor",
        "realms": [
          "client"
        ]
      }
    ],
    "name": "DProperty_VectorColor",
    "parent": "DProperty_Generic"
  },
  {
    "description": "A tab oriented control where you can create multiple tabs with items within. Used mainly for organization.",
    "functions": [
      {
        "arguments": [
          {
            "description": "Name of the tab",
            "name": "name",
            "type": "string"
          },
          {
            "description": "Panel to be used as contents of the tab. This normally should be a <page>DPanel</page>",
            "name": "pnl",
            "type": "Panel"
          },
          {
            "default": "nil",
            "description": "Icon for the tab. This will ideally be a <page text=\"silkicon\">Silkicons</page>, but any material name can be used.",
            "name": "icon",
            "type": "string"
          },
          {
            "default": "false",
            "description": "Should <page>DPropertySheet</page> try to fill itself with given panel horizontally.",
            "name": "noStretchX",
            "type": "boolean"
          },
          {
            "default": "false",
            "description": "Should <page>DPropertySheet</page> try to fill itself with given panel vertically.",
            "name": "noStretchY",
            "type": "boolean"
          },
          {
            "default": "nil",
            "description": "Tooltip for the tab when user hovers over it with his cursor",
            "name": "tooltip",
            "type": "string"
          }
        ],
        "description": "Adds a new tab.",
        "name": "AddSheet",
        "parent": "DPropertySheet",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "A table containing the following keys:\n* <page>Panel</page> Tab - The created <page>DTab</page>.\n* <page>string</page> Name - Name of the created tab\n* <page>Panel</page> Panel - The contents panel of the tab",
            "type": "table"
          }
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineEnd": 210,
          "lineStart": 175
        }
      },
      {
        "arguments": [
          {
            "description": "The <page>DTab</page> of the sheet from <page>DPropertySheet</page>.\n\nSee <page>DPropertySheet:GetItems</page>.",
            "name": "tab",
            "type": "Panel"
          },
          {
            "description": "Set to true to remove the associated panel object as well.",
            "name": "removePanel",
            "type": "boolean"
          }
        ],
        "description": "Removes tab and/or panel from the parent DPropertySheet.",
        "name": "CloseTab",
        "parent": "DPropertySheet",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The panel of the tab.",
            "type": "Panel"
          }
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineEnd": 441,
          "lineStart": 405
        }
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "anim",
            "type": "table"
          },
          {
            "description": "",
            "name": "delta",
            "type": "number"
          },
          {
            "description": "",
            "name": "data",
            "type": "table"
          }
        ],
        "description": "<internal></internal>\n\nInternal function that handles the cross fade animation when the player switches tabs.",
        "name": "CrossFade",
        "parent": "DPropertySheet",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineEnd": 302,
          "lineStart": 254
        }
      },
      {
        "description": "Returns the active <page>DTab</page> of this <page>DPropertySheet</page>.",
        "name": "GetActiveTab",
        "parent": "DPropertySheet",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The <page>DTab</page>",
            "type": "Panel"
          }
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineStart": 151
        }
      },
      {
        "description": "Returns the amount of time (in seconds) it takes to fade between tabs.\n\nSet by <page>DPropertySheet:SetFadeTime</page>",
        "name": "GetFadeTime",
        "parent": "DPropertySheet",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The amount of time (in seconds) it takes to fade between tabs.",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineStart": 153
        }
      },
      {
        "description": "Returns a list of all tabs of this <page>DPropertySheet</page>.",
        "name": "GetItems",
        "parent": "DPropertySheet",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "A table of tables.\nEach table contains 3 key-value pairs:\n\n* <page>string</page> Name - The name of the tab.\n* <page>Panel</page> Tab - The <page>DTab</page> associated with the tab.\n* <page>Panel</page> Panel - The <page>Panel</page> associated with the tab.",
            "type": "table"
          }
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineEnd": 252,
          "lineStart": 248
        }
      },
      {
        "description": "Gets the padding from the parent panel to child panels.",
        "name": "GetPadding",
        "parent": "DPropertySheet",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Padding",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineStart": 152
        }
      },
      {
        "description": "<deprecated></deprecated>\n\nReturns whatever value was set by <page>DPropertySheet:SetShowIcons</page>.",
        "name": "GetShowIcons",
        "parent": "DPropertySheet",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineStart": 155
        }
      },
      {
        "arguments": [
          {
            "description": "The previously active <page>DTab</page>",
            "name": "old",
            "type": "Panel"
          },
          {
            "description": "The newly active <page>DTab</page>",
            "name": "new",
            "type": "Panel"
          }
        ],
        "description": "Called when a player switches the tabs.\n\nSource code states that this is meant to be overridden.",
        "name": "OnActiveTabChanged",
        "parent": "DPropertySheet",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineEnd": 240,
          "lineStart": 238
        }
      },
      {
        "arguments": [
          {
            "description": "The <page>DTab</page> to set active.\n\nSee <page>DPropertySheet:GetItems</page>",
            "name": "tab",
            "type": "Panel"
          }
        ],
        "description": "Sets the active tab of the <page>DPropertySheet</page>.",
        "name": "SetActiveTab",
        "parent": "DPropertySheet",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineStart": 151
        }
      },
      {
        "arguments": [
          {
            "default": "0.1",
            "description": "The amount of time it takes (in seconds) to fade between tabs.",
            "name": "time",
            "type": "number"
          }
        ],
        "description": "Sets the amount of time (in seconds) it takes to fade between tabs.",
        "name": "SetFadeTime",
        "parent": "DPropertySheet",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineStart": 153
        }
      },
      {
        "arguments": [
          {
            "default": "8",
            "description": "Amount of padding",
            "name": "padding",
            "type": "number"
          }
        ],
        "description": "Sets the padding from parent panel to children panel.",
        "name": "SetPadding",
        "parent": "DPropertySheet",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineStart": 152
        }
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "show",
            "type": "boolean"
          }
        ],
        "description": "<deprecated></deprecated>\n\nDoes nothing.",
        "name": "SetShowIcons",
        "parent": "DPropertySheet",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineStart": 155
        }
      },
      {
        "arguments": [
          {
            "description": "Callback function to be called when the close button is pressed.",
            "name": "func",
            "type": "function"
          }
        ],
        "description": "Creates a close button on the right side of the <page>DPropertySheet</page> that will run the given callback function when pressed.",
        "name": "SetupCloseButton",
        "parent": "DPropertySheet",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineEnd": 403,
          "lineStart": 391
        }
      },
      {
        "description": "Sets the width of the <page>DPropertySheet</page> to fit the contents of all of the tabs.",
        "name": "SizeToContentWidth",
        "parent": "DPropertySheet",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineEnd": 374,
          "lineStart": 359
        }
      },
      {
        "arguments": [
          {
            "description": "Case sensitive name of the tab.",
            "name": "name",
            "type": "string"
          }
        ],
        "description": "Switches the active tab to a tab with given name.",
        "name": "SwitchToName",
        "parent": "DPropertySheet",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineEnd": 389,
          "lineStart": 376
        }
      }
    ],
    "name": "DPropertySheet",
    "parent": "Panel"
  },
  {
    "description": "DRGBPicker is an interactive panel which can be used to select a color hue.\n\nSee <page>DColorCube</page> for a color picker which controls brightness and saturation.\n\nSee <page>DColorMixer</page> for a color picker that allows control over hue, saturation, and brightness at once.",
    "functions": [
      {
        "arguments": [
          {
            "description": "The X coordinate on the texture to get the color from",
            "name": "x",
            "type": "number"
          },
          {
            "description": "The Y coordinate on the texture to get the color from",
            "name": "y",
            "type": "number"
          }
        ],
        "description": "<internal></internal>\n\nReturns the color at given position on the internal texture.",
        "name": "GetPosColor",
        "parent": "DRGBPicker",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "<page>Color</page>",
            "type": "table"
          },
          {
            "description": "The X-coordinate clamped to the texture's width.",
            "type": "number"
          },
          {
            "description": "The Y-coordinate clamped to the texture's height.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the color currently set on the color picker.",
        "name": "GetRGB",
        "parent": "DRGBPicker",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The color set on the color picker, see <page>Color</page>.",
            "type": "table"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The color that is selected on the color picker (<page>Color</page> form).",
            "name": "col",
            "type": "table"
          }
        ],
        "description": "Function which is called when the cursor is clicked and/or moved on the color picker. Meant to be overridden.",
        "name": "OnChange",
        "parent": "DRGBPicker",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The color to set, see <page>Color</page>.",
            "name": "color",
            "type": "table"
          }
        ],
        "description": "Sets the color stored in the color picker.\n\n<note>This function is meant to be called internally and will not update the position of the color picker line or call <page>DRGBPicker:OnChange</page></note>",
        "name": "SetRGB",
        "parent": "DRGBPicker",
        "realms": [
          "client",
          "menu"
        ]
      }
    ],
    "name": "DRGBPicker",
    "parent": "DPanel"
  },
  {
    "description": "<internal></internal>\n\nAn internal panel used by <page>DVScrollBar</page> as the grip (middle) part of the scrollbar.",
    "name": "DScrollBarGrip",
    "parent": "DPanel"
  },
  {
    "description": "DScrollPanel is a VGUI Element similar to DPanel however it has a vertical scrollbar docked to the right which can be used to put more content in a smaller area. DScrollPanels are essentially <page>DPanel</page>s with the Scroll Bar.\n\nThis can be used to replace the <page>DPanelList</page> with <page>DPanelList:EnableVerticalScrollbar</page> and get similar functionality as well as using a non-deprecated element.\n\nIf you would like to paint or edit the elements of the scrollbar use <page>DScrollPanel:GetVBar</page>. If you want to see if the scrollbar is visible then use the VBar.Enabled variable on the scrollbar's VBar.\n\n<note><page>Panel:DockPadding</page> will not have an effect on children of this panel. Use the function on <page>DScrollPanel:GetCanvas</page> instead.</note>",
    "functions": [
      {
        "arguments": [
          {
            "description": "The panel to add.",
            "name": "pnl",
            "type": "Panel"
          }
        ],
        "description": "Parents the passed panel to the DScrollPanel's canvas.",
        "name": "AddItem",
        "parent": "DScrollPanel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dscrollpanel.lua",
          "lineEnd": 37,
          "lineStart": 33
        }
      },
      {
        "description": "Returns the canvas ( The panel all child panels are parented to ) of the DScrollPanel.",
        "name": "GetCanvas",
        "parent": "DScrollPanel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The canvas",
            "type": "Panel"
          }
        ],
        "source": {
          "file": "lua/vgui/dscrollpanel.lua",
          "lineEnd": 61,
          "lineStart": 57
        }
      },
      {
        "description": "<deprecated></deprecated>\nGets the <page>DScrollPanel</page>s padding, set by <page>DScrollPanel:SetPadding</page>.",
        "name": "GetPadding",
        "parent": "DScrollPanel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "DScrollPanels padding",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the vertical scroll bar of the panel.",
        "name": "GetVBar",
        "parent": "DScrollPanel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The <page>DVScrollBar</page>.",
            "type": "Panel{DVScrollBar}"
          }
        ],
        "source": {
          "file": "lua/vgui/dscrollpanel.lua",
          "lineEnd": 55,
          "lineStart": 51
        }
      },
      {
        "description": "Return the width of the DScrollPanel's canvas.",
        "name": "InnerWidth",
        "parent": "DScrollPanel",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The width of the DScrollPanel's canvas",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/vgui/dscrollpanel.lua",
          "lineEnd": 67,
          "lineStart": 63
        }
      },
      {
        "description": "<internal></internal>\n\nUsed internally to rebuild the panel's children positioning. You should use <page>Panel:InvalidateLayout</page> instead.",
        "name": "PerformLayoutInternal",
        "parent": "DScrollPanel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "<internal></internal>\n\nUsed internally to rebuild the panel's children positioning. You should use <page>Panel:InvalidateLayout</page> instead.",
        "name": "Rebuild",
        "parent": "DScrollPanel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dscrollpanel.lua",
          "lineEnd": 80,
          "lineStart": 69
        }
      },
      {
        "arguments": [
          {
            "description": "The panel to scroll to, must be a child of the DScrollPanel.",
            "name": "panel",
            "type": "Panel"
          }
        ],
        "description": "Scrolls to the given child",
        "name": "ScrollToChild",
        "parent": "DScrollPanel",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dscrollpanel.lua",
          "lineEnd": 106,
          "lineStart": 94
        }
      },
      {
        "arguments": [
          {
            "description": "The new canvas",
            "name": "canvas",
            "type": "Panel"
          }
        ],
        "description": "<internal></internal>\nSets the canvas of the DScrollPanel.",
        "name": "SetCanvas",
        "parent": "DScrollPanel",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The padding of the DScrollPanel.",
            "name": "padding",
            "type": "number"
          }
        ],
        "description": "<deprecated></deprecated>\n\nSets the DScrollPanel's padding. This function appears to be unused.",
        "name": "SetPadding",
        "parent": "DScrollPanel",
        "realms": [
          "client",
          "menu"
        ]
      }
    ],
    "name": "DScrollPanel",
    "parent": "DPanel"
  },
  {
    "description": "Draw a shape on a derma panel. Only one kind of shape, a rectangle, is available for use.",
    "functions": [
      {
        "description": "Returns the current type of shape this panel is set to display.\n\nSee <page>DShape:SetBorderColor</page>.",
        "name": "GetBorderColor",
        "parent": "DShape",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The border <page>Color</page>",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns the color set to display the shape with.",
        "name": "GetColor",
        "parent": "DShape",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The shape <page>Color</page>",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns the current type of shape this panel is set to display.\n\nSee <page>DShape:SetType</page>.",
        "name": "GetType",
        "parent": "DShape",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Current shape type.",
            "type": "string"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The desired border color.\n\nSee <page>Color</page>",
            "name": "clr",
            "type": "table"
          }
        ],
        "description": "Sets the border color of the shape.\n\nCurrently does nothing.",
        "name": "SetBorderColor",
        "parent": "DShape",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page>Color</page>",
            "name": "clr",
            "type": "table"
          }
        ],
        "description": "Sets the color to display the shape with.",
        "name": "SetColor",
        "parent": "DShape",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The render type of the DShape. Only rectangles (`Rect`) work currently. If you don't define a type immediately, the <page>PANEL:Paint</page> method will generate errors until you do.",
            "name": "type",
            "type": "string"
          }
        ],
        "description": "Sets the shape to be drawn.",
        "name": "SetType",
        "parent": "DShape",
        "realms": [
          "client"
        ]
      }
    ],
    "name": "DShape",
    "parent": "DPanel"
  },
  {
    "description": "A helper panel that will automatically resize itself to fit all its children using <page>Panel:SizeToChildren</page>.",
    "functions": [
      {
        "description": "Returns whether the <page>DSizeToContents</page> panel should size to contents horizontally.",
        "name": "GetSizeX",
        "parent": "DSizeToContents",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether the panel should size to contents horizontally.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the <page>DSizeToContents</page> panel should size to contents vertically.",
        "name": "GetSizeY",
        "parent": "DSizeToContents",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether the panel should size to contents vertically.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether the panel should size to contents horizontally.",
            "name": "sizeX",
            "type": "boolean"
          }
        ],
        "description": "Sets whether the <page>DSizeToContents</page> panel should size to contents horizontally. This is `true` by default.",
        "name": "SetSizeX",
        "parent": "DSizeToContents",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether the panel should size to contents vertically.",
            "name": "sizeY",
            "type": "boolean"
          }
        ],
        "description": "Sets whether the <page>DSizeToContents</page> panel should size to contents vertically. This is `true` by default.",
        "name": "SetSizeY",
        "parent": "DSizeToContents",
        "realms": [
          "client",
          "menu"
        ]
      }
    ],
    "name": "DSizeToContents",
    "parent": "Panel"
  },
  {
    "description": "Creates a slider that can be moved along the X and/or Y axis",
    "functions": [
      {
        "description": "<internal></internal>\n\nUsed internally to set the X axis convar.",
        "name": "ConVarXNumberThink",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "<internal></internal>\n\nUsed internally to set the Y axis convar.",
        "name": "ConVarYNumberThink",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Identical to <page>DSlider:IsEditing</page>",
        "name": "GetDragging",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the draggable panel's lock on the X axis.\n\nSee <page>DSlider:SetLockX</page> for more info.",
        "name": "GetLockX",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the draggable panel's lock on the Y axis.\n\nSee <page>DSlider:SetLockY</page> for more info.",
        "name": "GetLockY",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "number"
          }
        ]
      },
      {
        "description": "<deprecated>Does not affect anything by default.</deprecated>\nReturns the current notch color, set by <page>DSlider:SetNotchColor</page>",
        "name": "GetNotchColor",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The current color",
            "name": "clr",
            "type": "Color"
          }
        ]
      },
      {
        "description": "<deprecated></deprecated>\n\nAppears to be non functioning, however is still used by panels such as <page>DNumSlider</page>.",
        "name": "GetNotches",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "number"
          }
        ]
      },
      {
        "description": "<deprecated></deprecated>\n\nDoes nothing.",
        "name": "GetNumSlider",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "any"
          }
        ]
      },
      {
        "description": "Returns the target position of the draggable \"knob\" panel of the slider on the X axis.\n\nSet by <page>DSlider:SetSlideX</page>.",
        "name": "GetSlideX",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The value range seems to be from 0 to 1",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the target position of the draggable \"knob\" panel of the slider on the Y axis.\n\nSet by <page>DSlider:SetSlideY</page>.",
        "name": "GetSlideY",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The value range seems to be from 0 to 1",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the value set by <page>DSlider:SetTrapInside</page>.",
        "name": "GetTrapInside",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns true if this element is being edited by the player.",
        "name": "IsEditing",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The X axis position of the slider in range 0-1",
            "name": "x",
            "type": "number"
          },
          {
            "description": "The Y axis position of the slider in range 0-1",
            "name": "y",
            "type": "number"
          }
        ],
        "description": "Called when the values of this slider panel were changed.",
        "name": "OnValueChanged",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "<internal></internal>\n\nUsed internally to fire <page>DSlider:OnValueChanged</page>",
        "name": "OnValuesChangedInternal",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "This function is called by the <page>DSlider</page> when user middle mouse clicks on the draggable knob of the slider.\n\nYou are meant to override this function to do reset the slider to desired defaults on both axes.\n\nBy default, will reset the slider to `0.5` on both axes.",
        "name": "ResetToDefaultValue",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Path to the image.",
            "name": "path",
            "type": "string"
          }
        ],
        "description": "Sets the background for the slider.",
        "name": "SetBackground",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Name of the convar to set.",
            "name": "convar",
            "type": "string"
          }
        ],
        "description": "Sets the <page>ConVar</page> to be set when the slider changes on the X axis.",
        "name": "SetConVarX",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Name of the convar to set.",
            "name": "convar",
            "type": "string"
          }
        ],
        "description": "Sets the <page>ConVar</page> to be set when the slider changes on the Y axis.",
        "name": "SetConVarY",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "dragging",
            "type": "boolean"
          }
        ],
        "description": "<internal></internal>\n\nSets whether or not the slider is being dragged.",
        "name": "SetDragging",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "<deprecated></deprecated>\n\nDoes nothing.",
        "name": "SetImage",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "<deprecated></deprecated>\n\nDoes nothing.",
        "name": "SetImageColor",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "default": "nil",
            "description": "Set to nil to reset lock.\n\nThe value range is from 0 to 1.",
            "name": "lockX",
            "type": "number"
          }
        ],
        "description": "Sets the lock on the X axis.\n\nFor example the value 0.5 will lock the draggable panel to half the width of the slider's panel.",
        "name": "SetLockX",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "default": "nil",
            "description": "Set to nil to reset lock.\n\nThe value range is from 0 to 1.",
            "name": "lockY",
            "type": "number"
          }
        ],
        "description": "Sets the lock on the Y axis.\n\nFor example the value 0.5 will lock the draggable panel to half the height of the slider's panel.",
        "name": "SetLockY",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new color to set",
            "name": "clr",
            "type": "Color"
          }
        ],
        "description": "<deprecated>Does not affect anything by default.</deprecated>\nSets the current notch color, overriding the color set by the derma skin.",
        "name": "SetNotchColor",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "notches",
            "type": "number"
          }
        ],
        "description": "<deprecated></deprecated>\n\nAppears to be non functioning, however is still used by panels such as <page>DNumSlider</page>.",
        "name": "SetNotches",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "slider",
            "type": "any"
          }
        ],
        "description": "<deprecated></deprecated>\n\nDoes nothing.",
        "name": "SetNumSlider",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The value range seems to be from 0 to 1",
            "name": "x",
            "type": "number"
          }
        ],
        "description": "Used to position the draggable panel of the slider on the X axis.",
        "name": "SetSlideX",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The value range seems to be from 0 to 1",
            "name": "y",
            "type": "number"
          }
        ],
        "description": "Used to position the draggable panel of the slider on the Y axis.",
        "name": "SetSlideY",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "trap",
            "type": "boolean"
          }
        ],
        "description": "Makes the slider itself, the \"knob\", trapped within the bounds of the slider panel. Example:\n\n<upload src=\"70c/8dafb0260022da3.png\" size=\"6257\" name=\"image.png\">\n</upload>",
        "name": "SetTrapInside",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The input X coordinate, in range of 0-1.",
            "name": "x",
            "type": "number"
          },
          {
            "description": "The input Y coordinate, in range of 0-1.",
            "name": "y",
            "type": "number"
          }
        ],
        "description": "For override by child panels, such as <page>DNumSlider</page>. Allows changing the output values of the slider.",
        "name": "TranslateValues",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The output X coordinate, in range of 0-1.",
            "type": "number"
          },
          {
            "description": "The output X coordinate, in range of 0-1.",
            "type": "number"
          }
        ]
      }
    ],
    "name": "DSlider",
    "parent": "Panel"
  },
  {
    "description": "A panel that draws a sprite on the player's HUD with the given <page>IMaterial</page>, <page>Global.Color</page> and rotation.\n\nA shortcut for this is <page>Global.CreateSprite</page>().",
    "functions": [
      {
        "description": "Gets the color the sprite is using as a modifier.",
        "name": "GetColor",
        "parent": "DSprite",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The <page>Global.Color</page> being used.",
            "type": "table"
          }
        ]
      },
      {
        "description": "<deprecated></deprecated>\nReturns the value set by <page>DSprite:SetHandle</page>",
        "name": "GetHandle",
        "parent": "DSprite",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "type": "Vector"
          }
        ]
      },
      {
        "description": "Gets the material the sprite is using.",
        "name": "GetMaterial",
        "parent": "DSprite",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The material in use.",
            "type": "IMaterial"
          }
        ]
      },
      {
        "description": "Gets the 2D rotation angle of the sprite, in the plane of the screen.",
        "name": "GetRotation",
        "parent": "DSprite",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The anti-clockwise rotation in degrees.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page>Global.Color</page> to use.",
            "name": "color",
            "type": "table"
          }
        ],
        "description": "Sets the color modifier for the sprite.",
        "name": "SetColor",
        "parent": "DSprite",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "vec",
            "type": "Vector"
          }
        ],
        "description": "<deprecated></deprecated>\nSeems to be an unused feature. Does nothing.",
        "name": "SetHandle",
        "parent": "DSprite",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The material to use. This will ideally be an [UnlitGeneric](https://developer.valvesoftware.com/wiki/UnlitGeneric).",
            "name": "material",
            "type": "IMaterial"
          }
        ],
        "description": "Sets the source material for the sprite.",
        "name": "SetMaterial",
        "parent": "DSprite",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The anti-clockwise rotation in degrees.",
            "name": "ang",
            "type": "number"
          }
        ],
        "description": "Sets the 2D rotation angle of the sprite, in the plane of the screen.",
        "name": "SetRotation",
        "parent": "DSprite",
        "realms": [
          "client"
        ]
      }
    ],
    "name": "DSprite",
    "parent": "DPanel"
  },
  {
    "description": "<internal></internal>\nThis element is created within and only used in the <page>DPropertySheet</page> file. These can be elements are stored items are stored in the `Items` subtable of the <page>DPropertySheet</page>",
    "functions": [
      {
        "description": "Returns the panel that the tab represents.",
        "name": "GetPanel",
        "parent": "DTab",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Panel added to the sheet using <page>DPropertySheet:AddSheet</page>.",
            "type": "Panel"
          }
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineStart": 5
        }
      },
      {
        "description": "The <page>DPropertySheet</page> this tab belongs to.",
        "name": "GetPropertySheet",
        "parent": "DTab",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The <page>DPropertySheet</page> this tab belongs to.",
            "name": "pnl",
            "type": "Panel"
          }
        ]
      },
      {
        "description": "<internal></internal>\n\nReturns the target height of this tab. Used internally by <page>DTab</page>'s <page>PANEL:ApplySchemeSettings</page>.",
        "name": "GetTabHeight",
        "parent": "DTab",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Either 20, or 28 if <page>DTab:IsActive</page>.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns whether the tab is the currently selected tab of the associated <page>DPropertySheet</page>.",
        "name": "IsActive",
        "parent": "DTab",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Currently selected tab.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineStart": 34
        }
      },
      {
        "arguments": [
          {
            "description": "The contents of this tab.",
            "name": "pnl",
            "type": "Panel"
          }
        ],
        "description": "<internal></internal> Used internally by <page>DTab:Setup</page>.",
        "name": "SetPanel",
        "parent": "DTab",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page>DPropertySheet</page> to set for this tab.",
            "name": "pnl",
            "type": "Panel"
          }
        ],
        "description": "<internal></internal> Used internally by <page>DTab:Setup</page>.",
        "name": "SetPropertySheet",
        "parent": "DTab",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Label of the tab",
            "name": "label",
            "type": "string"
          },
          {
            "description": "The <page>DPropertySheet</page> this tab belongs to.",
            "name": "sheet",
            "type": "Panel"
          },
          {
            "description": "Panel to be used as contents of the tab. This normally should be a <page>DPanel</page>.",
            "name": "pnl",
            "type": "Panel"
          },
          {
            "default": "nil",
            "description": "Icon for the tab. This will typically be a <page text=\"silkicon\">Silkicons</page>, but any material name can be used.",
            "name": "icon",
            "type": "string"
          }
        ],
        "description": "<internal></internal> Used internally by <page>DPropertySheet:AddSheet</page>.",
        "name": "Setup",
        "parent": "DTab",
        "realms": [
          "client",
          "menu"
        ]
      }
    ],
    "name": "DTab",
    "parent": "DButton"
  },
  {
    "description": "A form which may be used to display text the player is meant to select and copy or alternately allow them to enter some text of their own.\n\n<note>At least one of your `DTextEntry`'s parents must either be an <page>EditablePanel</page> or derived from it (like a <page>DFrame</page>, for example), else it won't be able to focus and thus be unselectable.\n\nYou must also call <page>Panel:MakePopup</page> on said panel or the `DTextEntry` will not work.</note>",
    "functions": [
      {
        "arguments": [
          {
            "description": "Text to add to the text entry's history.",
            "name": "text",
            "type": "string"
          }
        ],
        "description": "Adds an entry to <page>DTextEntry</page>'s history.\n\nSee <page>DTextEntry:SetHistoryEnabled</page>.",
        "name": "AddHistory",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dtextentry.lua",
          "lineEnd": 373,
          "lineStart": 366
        }
      },
      {
        "arguments": [
          {
            "description": "The last character entered into the panel.",
            "name": "char",
            "type": "string"
          }
        ],
        "description": "Called whenever the value of the panel has been updated (whether by user input or otherwise).\n\nIt allows you to determine whether a user can modify the <page>TextEntry</page>'s text.\n\nBy default, this only checks whether the panel disallows numeric characters, preventing it from being edited if the value contains any.\n\nThis is actually an engine hook that only works on <page>TextEntry</page> derived elements.\n\nIf you are looking for a way to modify character limits, see <page>Panel:SetMaximumCharCount</page>",
        "name": "AllowInput",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Return `true` to prevent the value from changing, `false` to allow it.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dtextentry.lua",
          "lineEnd": 327,
          "lineStart": 321
        }
      },
      {
        "arguments": [
          {
            "description": "The string to check.",
            "name": "strValue",
            "type": "string"
          }
        ],
        "description": "Returns whether a string is numeric or not.\nAlways returns false if the <page>DTextEntry:SetNumeric</page> is set to false.",
        "name": "CheckNumeric",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether the string is numeric or not.",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dtextentry.lua",
          "lineEnd": 311,
          "lineStart": 296
        }
      },
      {
        "arguments": [
          {
            "description": "Player's current input.",
            "name": "inputText",
            "type": "string"
          }
        ],
        "description": "Called by the DTextEntry when a list of autocompletion options is requested. Meant to be overridden.",
        "name": "GetAutoComplete",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "If a table is returned, the values of the table will show up as autocomplete suggestions for the user.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns the cursor color of a DTextEntry.",
        "name": "GetCursorColor",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The color of the cursor as a <page>Color</page>.",
            "type": "table"
          }
        ]
      },
      {
        "description": "<deprecated>Use <page>Panel:IsEnabled</page> instead.</deprecated>\n\nReturns whether the textbox is disabled. Use <page>Panel:IsEnabled</page> instead.",
        "name": "GetDisabled",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether the textbox is disabled.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "<deprecated></deprecated> Alias of <page>DTextEntry:GetPaintBackground</page>. Use that instead.\n\nWhether the background is displayed or not.",
        "name": "GetDrawBackground",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "description": "<deprecated></deprecated>\n\nReturns the value set by <page>DTextEntry:SetDrawBorder</page>.",
        "name": "GetDrawBorder",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether pressing Enter can cause the panel to lose focus. Note that a multiline DTextEntry cannot be escaped using the Enter key even when this function returns true.",
        "name": "GetEnterAllowed",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether pressing the Enter key can cause the panel to lose focus.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the contents of the DTextEntry as a number.",
        "name": "GetFloat",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Text of the DTextEntry as a float, or nil if it cannot be converted to a number using <page>Global.tonumber</page>.",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/vgui/dtextentry.lua",
          "lineEnd": 392,
          "lineStart": 388
        }
      },
      {
        "description": "Returns the highlight/text selection color of the text entry. If it was not overwritten, it will return the derma skin value. (`colTextEntryTextHighlight`)",
        "name": "GetHighlightColor",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The highlight <page>Global.Color</page>.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns whether the history functionality of  <page>DTextEntry</page> is enabled. See <page>DTextEntry:AddHistory</page>.",
        "name": "GetHistoryEnabled",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether the history is enabled or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Similar to <page>DTextEntry:GetFloat</page>, but rounds the value to the nearest integer.",
        "name": "GetInt",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Text of the DTextEntry as a round number, or nil if it cannot be converted to a number.",
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/vgui/dtextentry.lua",
          "lineEnd": 386,
          "lineStart": 379
        }
      },
      {
        "description": "Returns whether only numeric characters (`123456789.-`) can be entered into the DTextEntry.",
        "name": "GetNumeric",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether the DTextEntry is numeric or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Whether the background is displayed or not",
        "name": "GetPaintBackground",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "`false` hides the background; this is `true` by default.",
            "name": "show",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Return current color of panel placeholder",
        "name": "GetPlaceholderColor",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Current placeholder color",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns the placeholder text set with <page>DTextEntry:SetPlaceholderText</page>.",
        "name": "GetPlaceholderText",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns whether or not the panel accepts <key>tab</key> key.",
        "name": "GetTabbingDisabled",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether the <page>DTextEntry</page> should ignore <key>tab</key>.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the text color of a DTextEntry.",
        "name": "GetTextColor",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The color of the text as a <page>Color</page>.",
            "type": "table"
          }
        ]
      },
      {
        "description": "Returns whether the <page>DTextEntry</page> is set to run <page>DTextEntry:OnValueChange</page> every time a character is typed or deleted or only when Enter is pressed.",
        "name": "GetUpdateOnType",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether this DTextEntry is being edited or not. (i.e. has focus)",
        "name": "IsEditing",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether this DTextEntry is being edited or not",
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dtextentry.lua",
          "lineEnd": 66,
          "lineStart": 64
        }
      },
      {
        "description": "Called by <page>DTextEntry:OnTextChanged</page> when the user modifies the text in the <page>DTextEntry</page>.\n\nYou should override this function to define custom behavior when the <page>DTextEntry</page> text changes.",
        "name": "OnChange",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The current text of the <page>DTextEntry</page>",
            "name": "value",
            "type": "string"
          }
        ],
        "description": "Called whenever enter is pressed on a <page>DTextEntry</page>.\n\n<note><page>DTextEntry:IsEditing</page> will still return true in this callback!</note>",
        "name": "OnEnter",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Called whenever the <page>DTextEntry</page> gains focus.",
        "name": "OnGetFocus",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dtextentry.lua",
          "lineEnd": 348,
          "lineStart": 336
        }
      },
      {
        "arguments": [
          {
            "description": "They key code of the key pressed, see <page>Enums/KEY</page>.",
            "name": "keyCode",
            "type": "number"
          }
        ],
        "description": "Called from <page>DTextEntry</page>'s <page>TextEntry:OnKeyCodeTyped</page> override whenever a valid character is typed while the text entry is focused.",
        "name": "OnKeyCode",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Called whenever the <page>DTextEntry</page> lose focus.",
        "name": "OnLoseFocus",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Determines whether to remove the autocomplete menu (false) or not (true).",
            "name": "noMenuRemoval",
            "type": "boolean"
          }
        ],
        "description": "<internal></internal>\nCalled internally when the text inside the <page>DTextEntry</page> changes. This is an implementation of <page>TextEntry:OnTextChanged</page>\n\nYou should not override this function. Use <page>DTextEntry:OnValueChange</page> instead.",
        "name": "OnTextChanged",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dtextentry.lua",
          "lineEnd": 208,
          "lineStart": 188
        }
      },
      {
        "arguments": [
          {
            "description": "The DTextEntry text.",
            "name": "value",
            "type": "string"
          }
        ],
        "description": "Called when the text changes of the <page>DTextEntry</page> are applied. (And set to the attached console variable, if one is given)\n\nSee also <page>DTextEntry:OnChange</page> for a function that is called on every text change, even if the console variable is not updated.\n\nYou should override this function to define custom behavior when the text changes.\n\nThis method is called:\n* When Enter is pressed after typing\n* When <page>DTextEntry:SetValue</page> is used\n* For every key typed - only if <page>DTextEntry:SetUpdateOnType</page> was set to true (default is false)",
        "name": "OnValueChange",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Table containing results from <page>DTextEntry:GetAutoComplete</page>.",
            "name": "tab",
            "type": "table"
          }
        ],
        "description": "<internal>You really should be using <page>DTextEntry:GetAutoComplete</page> instead.</internal>\nBuilds a <page>DMenu</page> for the DTextEntry based on the input table.",
        "name": "OpenAutoComplete",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dtextentry.lua",
          "lineEnd": 232,
          "lineStart": 213
        }
      },
      {
        "arguments": [
          {
            "description": "The color to set the cursor to.",
            "name": "color",
            "type": "table"
          }
        ],
        "description": "Sets the cursor's color in  DTextEntry (the blinking line).",
        "name": "SetCursorColor",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether the textbox should be disabled",
            "name": "disabled",
            "type": "boolean"
          }
        ],
        "description": "<deprecated>Use <page>Panel:SetEnabled</page> instead.</deprecated>\n\nDisables input on a DTextEntry and greys it out visually. This differs from <page>DTextEntry:SetEditable</page> which doesn't visually change the textbox.",
        "name": "SetDisabled",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dtextentry.lua",
          "lineEnd": 315,
          "lineStart": 313
        }
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "show",
            "type": "boolean"
          }
        ],
        "description": "<deprecated></deprecated> Alias of <page>DTextEntry:SetPaintBackground</page>. Use that instead.",
        "name": "SetDrawBackground",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "bool",
            "type": "boolean"
          }
        ],
        "description": "<deprecated></deprecated>\n\nDoes nothing.",
        "name": "SetDrawBorder",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether the DTextEntry should be editable",
            "name": "enabled",
            "type": "boolean"
          }
        ],
        "description": "Disables Input on a DTextEntry. This differs from <page>DTextEntry:SetDisabled</page> - SetEditable will not affect the appearance of the textbox.",
        "name": "SetEditable",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dtextentry.lua",
          "lineEnd": 334,
          "lineStart": 329
        }
      },
      {
        "arguments": [
          {
            "description": "If set to false, pressing Enter will not cause the panel to lose focus and will never call <page>DTextEntry:OnEnter</page>.",
            "name": "allowEnter",
            "type": "boolean"
          }
        ],
        "description": "Sets whether pressing the Enter key will cause the DTextEntry to lose focus or not, provided it is not multiline. This is true by default.",
        "name": "SetEnterAllowed",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The name of the font to be changed to.",
            "name": "font",
            "type": "string"
          }
        ],
        "description": "Changes the font of the DTextEntry.",
        "name": "SetFont",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new highlight <page>Global.Color</page>.",
            "name": "color",
            "type": "table"
          }
        ],
        "description": "Sets/overrides the default highlight/text selection color of the text entry.",
        "name": "SetHighlightColor",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether to enable history or not.",
            "name": "enable",
            "type": "boolean"
          }
        ],
        "description": "Enables or disables the history functionality of  <page>DTextEntry</page>. This allows the player to scroll through history elements using up and down arrow keys.\n\nSee <page>DTextEntry:AddHistory</page>.",
        "name": "SetHistoryEnabled",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether to accept only numeric characters.",
            "name": "numericOnly",
            "type": "boolean"
          }
        ],
        "description": "Sets whether or not to decline non-numeric characters as input.\n\nNumeric characters are `1234567890.-`",
        "name": "SetNumeric",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "`false` hides the background; this is `true` by default.",
            "name": "show",
            "type": "boolean"
          }
        ],
        "description": "Sets whether to show the default background of the DTextEntry.",
        "name": "SetPaintBackground",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "default": "Color(128, 128, 128)",
            "description": "The color of the placeholder.",
            "name": "color",
            "type": "table"
          }
        ],
        "description": "Allow you to set placeholder color.",
        "name": "SetPlaceholderColor",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "default": "nil",
            "description": "",
            "name": "text",
            "type": "string"
          }
        ],
        "description": "Sets the placeholder text that will be shown while the text entry has no user text. The player will not need to delete the placeholder text if they decide to start typing.",
        "name": "SetPlaceholderText",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether the <page>DTextEntry</page> should ignore <key>tab</key>.",
            "name": "enabled",
            "type": "boolean"
          }
        ],
        "description": "Sets whether or not the panel accepts <key>tab</key> key.\n<note>Disabling tab key prevents the panel from unfocusing by mouse, however, still works for focusing to other keyboard focus.</note>",
        "name": "SetTabbingDisabled",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The text color. Uses the <page>Color</page>.",
            "name": "color",
            "type": "table"
          }
        ],
        "description": "Sets the text color of the <page>DTextEntry</page>.",
        "name": "SetTextColor",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "updateOnType",
            "type": "boolean"
          }
        ],
        "description": "Sets whether we should fire <page>DTextEntry:OnValueChange</page> every time we type or delete a character or only when Enter is pressed.",
        "name": "SetUpdateOnType",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The value to set.",
            "name": "text",
            "type": "string"
          }
        ],
        "description": "Sets the text of the <page>DTextEntry</page> and calls <page>DTextEntry:OnValueChange</page>.\n\n<note>The text of the <page>DTextEntry</page> only changes if it's not currently being typed in. If you would rather set the text regardless, use <page>Panel:SetText</page>.</note>",
        "name": "SetValue",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dtextentry.lua",
          "lineEnd": 290,
          "lineStart": 277
        }
      },
      {
        "description": "<internal>Used by <page>DTextEntry:OnTextChanged</page>, <page>DTextEntry:OnEnter</page> and <page>DTextEntry:OnLoseFocus</page></internal>\n\nUpdates the ConVar associated with the TextEntry to its new value.",
        "name": "UpdateConvarValue",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "source": {
          "file": "lua/vgui/dtextentry.lua",
          "lineEnd": 262,
          "lineStart": 256
        }
      },
      {
        "description": "<internal></internal>\nUsed internally to set text from the history.",
        "name": "UpdateFromHistory",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "<internal></internal>\nUsed internally to set text from the autocomplete menu.",
        "name": "UpdateFromMenu",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ]
      }
    ],
    "name": "DTextEntry",
    "parent": "TextEntry"
  },
  {
    "description": "Similarly to <page>DIconLayout</page>, this lays out panels in two dimensions as tiles.\n\nThe difference between this and <page>DIconLayout</page> is that <page>DIconLayout</page> items all have the same height while\n<page>DTileLayout</page> items do not have this enforcement.\n<page>DTileLayout</page> will find the best way to \"pack\" its children.\nFor example, in a two column layout, a item of height 2 units will be placed in one column while\ntwo items of height 1 unit will be placed in the other column.\n\nIt is worth noting however that because this panel iterates through its children in an undefined order and lays out while\nit is iterating, there is no guarantee that this packing will lead to the lowest possible height.\n\nThis is used by the spawnmenu to arrange spawnicons.\n\nThe base size defines the smallest a tile can be, and it will resize vertically to accommodate all child panels.\nThe number of elements in each row is determined by the base size and width.\n\nIt also optionally permits the rearrangement of these tiles.\nTo enable this functionality, call <page>DDragBase:MakeDroppable</page> on the DTileLayout with a unique identifier.\nAll panels added following this will be moveable.",
    "functions": [
      {
        "description": "<internal></internal> Clears the panel's tile table. Used by <page>DTileLayout:LayoutTiles</page>.",
        "name": "ClearTiles",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The x coordinate of the top-left corner of the panel.",
            "name": "x",
            "type": "number"
          },
          {
            "description": "The y coordinate of the top-left corner of the panel.",
            "name": "y",
            "type": "number"
          },
          {
            "description": "The panel's width.",
            "name": "w",
            "type": "number"
          },
          {
            "description": "The panel's height.",
            "name": "h",
            "type": "number"
          }
        ],
        "description": "<internal></internal> Called to designate a range of tiles as occupied by a panel.",
        "name": "ConsumeTiles",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ]
      },
      {
        "description": "Creates and returns an exact copy of the DTileLayout.",
        "name": "Copy",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The created copy.",
            "type": "Panel"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The source panel from which to copy all children.",
            "name": "source",
            "type": "Panel"
          }
        ],
        "description": "Creates copies of all the children from the given panel object and parents them to this one.",
        "name": "CopyContents",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The x coordinate to start looking from.",
            "name": "x",
            "type": "number"
          },
          {
            "description": "The y coordinate to start looking from.",
            "name": "y",
            "type": "number"
          },
          {
            "description": "The needed width.",
            "name": "w",
            "type": "number"
          },
          {
            "description": "The needed height.",
            "name": "h",
            "type": "number"
          }
        ],
        "description": "<internal></internal> Finds the coordinates of the first group of free tiles that fit the given size.",
        "name": "FindFreeTile",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The x coordinate of the found available space.",
            "type": "number"
          },
          {
            "description": "The y coordinate of the found available space.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The x coordinate of the first tile.",
            "name": "x",
            "type": "number"
          },
          {
            "description": "The y coordinate of the first tile.",
            "name": "y",
            "type": "number"
          },
          {
            "description": "The width needed.",
            "name": "w",
            "type": "number"
          },
          {
            "description": "The height needed.",
            "name": "h",
            "type": "number"
          }
        ],
        "description": "<internal></internal> Determines if a group of tiles is vacant.",
        "name": "FitsInTile",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Whether or not this group is available for occupation.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the size of each single tile, set with <page>DTileLayout:SetBaseSize</page>.",
        "name": "GetBaseSize",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Base tile size.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the border spacing set by <page>DTileLayout:SetBorder</page>.",
        "name": "GetBorder",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The border spacing",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the minimum height the DTileLayout can resize to.",
        "name": "GetMinHeight",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The minimum height the panel can shrink to.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the X axis spacing between 2 elements set by <page>DTileLayout:SetSpaceX</page>.",
        "name": "GetSpaceX",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the Y axis spacing between 2 elements set by <page>DTileLayout:SetSpaceY</page>.",
        "name": "GetSpaceY",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The x coordinate of the tile.",
            "name": "x",
            "type": "number"
          },
          {
            "description": "The y coordinate of the tile.",
            "name": "y",
            "type": "number"
          }
        ],
        "description": "<internal></internal> Gets the occupied state of a tile.",
        "name": "GetTile",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The occupied state of the tile, normally `1` or `nil`.",
            "type": "any"
          }
        ]
      },
      {
        "description": "Resets the last width/height info, and invalidates the panel's layout, causing it to recalculate all child positions. It is called whenever a child is added or removed, and can be called to refresh the panel.",
        "name": "Layout",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ]
      },
      {
        "description": "<internal></internal> Called by <page>PANEL:PerformLayout</page> to arrange and lay out the child panels, if it has changed in size.",
        "name": "LayoutTiles",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ]
      },
      {
        "description": "Called when anything is dropped on or rearranged within the DTileLayout.",
        "name": "OnModified",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The size of each tile. It is recommended you use `2ⁿ` (`16, 32, 64...`) numbers, and those above `4`, as numbers lower than this will result in many tiles being processed and therefore slow operation.",
            "name": "size",
            "type": "number"
          }
        ],
        "description": "Sets the size of a single tile. If a child panel is larger than this size, it will occupy several tiles.\n\nIf you are setting the size of the children properly then you probably don't need to change this.",
        "name": "SetBaseSize",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "border",
            "type": "number"
          }
        ],
        "description": "Sets the spacing between the border/edge of the <page>DTileLayout</page> and all the elements inside.",
        "name": "SetBorder",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The minimum height the panel can shrink to.",
            "name": "minH",
            "type": "number"
          }
        ],
        "description": "Determines the minimum height the DTileLayout will resize to. This is useful if child panels will be added/removed often.",
        "name": "SetMinHeight",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "New X axis spacing.",
            "name": "spacingX",
            "type": "number"
          }
        ],
        "description": "Sets the spacing between 2 elements in the <page>DTileLayout</page> on the X axis.",
        "name": "SetSpaceX",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "New Y axis spacing.",
            "name": "spaceY",
            "type": "number"
          }
        ],
        "description": "Sets the spacing between 2 elements in the <page>DTileLayout</page> on the Y axis.",
        "name": "SetSpaceY",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The x coordinate of the tile.",
            "name": "x",
            "type": "number"
          },
          {
            "description": "The y coordinate of the tile.",
            "name": "y",
            "type": "number"
          },
          {
            "description": "The new state of the tile, normally `1` or `nil`.",
            "name": "state",
            "type": "any"
          }
        ],
        "description": "<internal></internal> Called to set the occupied state of a tile.",
        "name": "SetTile",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ]
      }
    ],
    "name": "DTileLayout",
    "parent": "DDragBase"
  },
  {
    "description": "<internal></internal>\n\nThe panel used internally for tool tips. See <page>Panel:SetTooltip</page>.",
    "functions": [
      {
        "description": "Forces the tooltip to close. This will remove the panel.",
        "name": "Close",
        "parent": "DTooltip",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "arrow location on the x axis",
            "name": "x",
            "type": "number"
          },
          {
            "description": "arrow location on the y axis",
            "name": "y",
            "type": "number"
          }
        ],
        "description": "Used to draw a triangle beneath the <page>DTooltip</page>\n<note>Requires <page>DTooltip:SetContents</page>, without this it will error</note>",
        "name": "DrawArrow",
        "parent": "DTooltip",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The panel to open the tooltip for.",
            "name": "pnl",
            "type": "Panel"
          }
        ],
        "description": "<internal></internal>\n\nSets up the tooltip for display for given panel and starts the timer.\n\nNormally you wouldn't call this and you'd use <page>Panel:SetTooltip</page>, <page>Panel:SetTooltipPanel</page> or <page>Panel:SetTooltipPanelOverride</page>.",
        "name": "OpenForPanel",
        "parent": "DTooltip",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "<internal></internal>\n\nPositions the <page>DTooltip</page> so it doesn't stay in the same draw position.",
        "name": "PositionTooltip",
        "parent": "DTooltip",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Contents",
            "name": "panel",
            "type": "Panel"
          },
          {
            "default": "false",
            "description": "If set to true, the panel in the first argument will be automatically removed when <page>DTooltip</page> is closed via <page>DTooltip:Close</page>.",
            "name": "delete",
            "type": "boolean"
          }
        ],
        "description": "What Panel you want put inside of the <page>DTooltip</page>\n\n<note>You can only have one Panel at a time; use Parenting to add more</note>",
        "name": "SetContents",
        "parent": "DTooltip",
        "realms": [
          "client",
          "menu"
        ]
      }
    ],
    "name": "DTooltip",
    "parent": "DLabel"
  },
  {
    "description": "A tree view element for Derma.\n\nSee also <page>DTree_Node</page>.",
    "functions": [
      {
        "arguments": [
          {
            "description": "Name of the option.",
            "name": "name",
            "type": "string"
          },
          {
            "default": "icon16/folder.png",
            "description": "The icon that will show nexto the node in the DTree.",
            "name": "icon",
            "type": "string"
          }
        ],
        "description": "Add a node to the DTree",
        "name": "AddNode",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Returns the created <page>DTree_Node</page> panel.",
            "type": "Panel"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "bExpand",
            "type": "boolean"
          }
        ],
        "description": "<internal></internal>\n\nCalls directly to <page>Panel:InvalidateLayout</page>.\nCalled by <page>DTree_Node</page>s when a sub element has been expanded or collapsed.\n\nUsed as a placeholder function alongside <page>DTree:ExpandTo</page>, <page>DTree:SetExpanded</page> and <page>DTree:MoveChildTo</page>.\n\nThe <page>DTree</page> acts a root node and methods with the same name in <page>DTree_Node</page> call to the parent.",
        "name": "ChildExpanded",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The right clicked node.",
            "name": "node",
            "type": "DTree_Node"
          }
        ],
        "description": "Called when the any node is clicked. Called by <page>DTree_Node:DoClick</page>.",
        "name": "DoClick",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "name": "suppress",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The right clicked node.",
            "name": "node",
            "type": "DTree_Node"
          }
        ],
        "description": "Called when the any node is right clicked. Called by <page>DTree_Node:DoRightClick</page>.",
        "name": "DoRightClick",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "name": "suppress",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "bExpand",
            "type": "boolean"
          }
        ],
        "description": "<internal></internal>\n\nDoes nothing. Used as a placeholder empty function alongside <page>DTree:MoveChildTo</page>, <page>DTree:SetExpanded</page> and <page>DTree:ChildExpanded</page>.\n\nThe <page>DTree</page> acts a root node and methods with the same name in <page>DTree_Node</page> call to the parent.",
        "name": "ExpandTo",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Returns the status of <page>DTree:SetClickOnDragHover</page>. See that for more info.",
        "name": "GetClickOnDragHover",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the indentation size of the <page>DTree</page>, the distance between each \"level\" of the tree is offset on the left from the previous level.\n\nCurrently this feature has no effect on the <page>DTree</page> element.",
        "name": "GetIndentSize",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The indentation size.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the height of each <page>DTree_Node</page> in the tree.",
        "name": "GetLineHeight",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The height of each <page>DTree_Node</page> in the tree.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the currently selected node.",
        "name": "GetSelectedItem",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Curently selected <page>DTree_Node</page>.",
            "type": "Panel"
          }
        ]
      },
      {
        "description": "Returns whether or not the <page>Silkicons</page> next to each node of the DTree will be displayed.\n\nIndividual icons can be set with <page>DTree_Node:SetIcon</page> or passed as the second argument in <page>DTree:AddNode</page>.",
        "name": "GetShowIcons",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether or not the silkicons next to each node will be displayed.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "<deprecated></deprecated>\n\nDoes nothing.",
        "name": "LayoutTree",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The node to move",
            "name": "child",
            "type": "Panel"
          },
          {
            "description": "<deprecated></deprecated> Unused, does nothing.",
            "name": "pos",
            "type": "number"
          }
        ],
        "description": "Moves given node to the top of <page>DTree</page>s children. (Makes it the topmost mode)\n\nUsed as a placeholder function alongside <page>DTree:ExpandTo</page>, <page>DTree:SetExpanded</page> and <page>DTree:ChildExpanded</page>.\n\nThe <page>DTree</page> acts a root node and methods with the same name in <page>DTree_Node</page> call to the parent.",
        "name": "MoveChildTo",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The node that was selected.",
            "name": "node",
            "type": "Panel"
          }
        ],
        "description": "This function is called when a node within a tree is selected.",
        "name": "OnNodeSelected",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Returns the root <page>DTree_Node</page>, the node that is the parent to all other nodes of the DTree.",
        "name": "Root",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Root node.",
            "type": "Panel"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "enable",
            "type": "boolean"
          }
        ],
        "description": "Enables the \"click when drag-hovering\" functionality.\n\nIf enabled, when hovering over any <page>DTree_Node</page> of this <page>DTree</page> while dragging a panel, the node will be automatically clicked on (and subsequently <page>DTree:OnNodeSelected</page> will be called) to open any attached panels, such as spawnlists in spawnmenu.\n\nSee also: <page>PANEL:DragHoverClick</page>.",
        "name": "SetClickOnDragHover",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "bExpand",
            "type": "boolean"
          }
        ],
        "description": "<internal></internal>\n\nDoes nothing. Is not called by the <page>DTree</page> itself.\n\nUsed as a placeholder empty function alongside <page>DTree:ExpandTo</page>, <page>DTree:MoveChildTo</page> and <page>DTree:ChildExpanded</page> to prevent errors when <page>DTree_Node:SetExpanded</page> is incorrectly used on a <page>DTree</page>.",
        "name": "SetExpanded",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new indentation size.",
            "name": "size",
            "type": "number"
          }
        ],
        "description": "Sets the indentation size of the <page>DTree</page>, the distance between each \"level\" of the tree is offset on the left from the previous level.\n\nCurrently this feature has no effect on the <page>DTree</page> element.",
        "name": "SetIndentSize",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The height to set.",
            "name": "h",
            "type": "number"
          }
        ],
        "description": "Sets the height of each <page>DTree_Node</page> in the tree.\n\nThe default value is 17.",
        "name": "SetLineHeight",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "<page>DTree_Node</page> to select.",
            "name": "node",
            "type": "Panel"
          }
        ],
        "description": "Set the currently selected top-level node.",
        "name": "SetSelectedItem",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether or not to show icons.",
            "name": "show",
            "type": "boolean"
          }
        ],
        "description": "Sets whether or not the <page>Silkicons</page> next to each node of the DTree will be displayed.\n\nIndividual icons can be set with <page>DTree_Node:SetIcon</page> or passed as the second argument in <page>DTree:AddNode</page>.",
        "name": "SetShowIcons",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Returns whether or not the <page>Silkicons</page> next to each node of the DTree will be displayed.\n\nAlias of <page>DTree:GetShowIcons</page>.",
        "name": "ShowIcons",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether or not the silkicons next to each node will be displayed.",
            "type": "boolean"
          }
        ]
      }
    ],
    "name": "DTree",
    "parent": "DScrollPanel"
  },
  {
    "description": "<internal></internal>\n\nThis panel is created whenever you add a node to a <page>DTree</page>.\nThe root node of a <page>DTree</page> is also a <page>DTree_Node</page> and controls much of its action. it can be accessed with <page>DTree:Root</page>.",
    "functions": [
      {
        "arguments": [
          {
            "description": "The name of the new node",
            "name": "name",
            "type": "string"
          },
          {
            "description": "The folder in the filesystem to use, relative to the garrysmod/ folder.",
            "name": "folder",
            "type": "string"
          },
          {
            "description": "The path to search in. See <page>File Search Paths</page>",
            "name": "path",
            "type": "string"
          },
          {
            "default": "false",
            "description": "Should files be added as nodes (true) or folders only (false)",
            "name": "showFiles",
            "type": "boolean"
          },
          {
            "default": "*",
            "description": "The wildcard to use when searching for files.",
            "name": "wildcard",
            "type": "string"
          },
          {
            "default": "false",
            "description": "",
            "name": "bDontForceExpandable",
            "type": "boolean"
          }
        ],
        "description": "A helper function that adds a new node and calls to <page>DTree_Node:MakeFolder</page> on it.",
        "name": "AddFolder",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The created <page>DTree_Node</page>",
            "type": "Panel"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Name of the node.",
            "name": "name",
            "type": "string"
          },
          {
            "default": "icon16/folder.png",
            "description": "The icon that will show next to the node in the DTree.",
            "name": "icon",
            "type": "string"
          }
        ],
        "description": "Add a child node to the DTree_Node",
        "name": "AddNode",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Returns the created <page>DTree_Node</page> panel.",
            "type": "Panel"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The panel to add.",
            "name": "pnl",
            "type": "Panel"
          }
        ],
        "description": "<internal></internal>\n\nAdds the given panel to the child nodes list, a <page>DListLayout</page>.",
        "name": "AddPanel",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "anim",
            "type": "table"
          },
          {
            "description": "",
            "name": "delta",
            "type": "number"
          },
          {
            "description": "",
            "name": "data",
            "type": "table"
          }
        ],
        "description": "<internal></internal>\n\nInternal function that handles the expand/collapse animations.",
        "name": "AnimSlide",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "expanded",
            "type": "boolean"
          }
        ],
        "description": "<internal></internal>\n\nCalled when a child node is expanded or collapsed to propagate this event to parent nodes to update layout.",
        "name": "ChildExpanded",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Cleans up the internal table of items (sub-nodes) of this node from invalid panels or sub-nodes that were moved from this node to another.\n\nAppears the be completely unused by the game on its own.",
        "name": "CleanList",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Create and returns a copy of this node, including all the sub-nodes.",
        "name": "Copy",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The copied <page>DTree_Node</page>.",
            "type": "Panel"
          }
        ]
      },
      {
        "description": "<internal></internal>\n\nCreates the container <page>DListLayout</page> for the <page>DTree_Node</page>s.\n\nThis is called automatically so you don't have to.",
        "name": "CreateChildNodes",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "<internal></internal>\n\nCalled automatically to update the status of <page>DTree_Node:GetLastChild</page> on children of this node.",
        "name": "DoChildrenOrder",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Called when the node is clicked.\n\nSee also <page>DTree_Node:DoRightClick</page>.",
        "name": "DoClick",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Return true to prevent DoClick from being called on parent nodes or the <page>DTree</page> itself.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Called when the node is right clicked.\n\nSee also <page>DTree_Node:DoClick</page>.",
        "name": "DoRightClick",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Return true to prevent DoRightClick from being called on parent nodes or the <page>DTree</page> itself.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether to expand (true) or collapse (false)",
            "name": "expand",
            "type": "boolean"
          }
        ],
        "description": "Expands or collapses this node, as well as ALL child nodes of this node.\n\nWorks opposite of <page>DTree_Node:ExpandTo</page>.",
        "name": "ExpandRecurse",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether to expand (true) or collapse (false)",
            "name": "expand",
            "type": "boolean"
          }
        ],
        "description": "Collapses or expands all nodes from the topmost-level node to this one.\n\nWorks opposite of <page>DTree_Node:ExpandRecurse</page>.",
        "name": "ExpandTo",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Does nothing. Set to true if called from <page>DTree_Node:PopulateChildren</page>.",
            "name": "bAndChildren",
            "type": "boolean"
          },
          {
            "description": "Expand self once population process is finished.",
            "name": "bExpand",
            "type": "boolean"
          }
        ],
        "description": "<internal></internal>\n\nCalled automatically from <page>DTree_Node:PopulateChildrenAndSelf</page> and <page>DTree_Node:PopulateChildren</page> to populate this node with child nodes of files and folders.",
        "name": "FilePopulate",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "A list of files in this folder",
            "name": "files",
            "type": "table"
          },
          {
            "description": "A list of folder in this folder.",
            "name": "folders",
            "type": "table"
          },
          {
            "description": "The folder name/path this node represents",
            "name": "foldername",
            "type": "string"
          },
          {
            "description": "The Path ID search was performed with. See <page>File Search Paths</page>",
            "name": "path",
            "type": "string"
          },
          {
            "description": "Inherited from the **FilePopulate** call. Does nothing",
            "name": "bAndChildren",
            "type": "boolean"
          },
          {
            "description": "The wildcard that was given",
            "name": "wildcard",
            "type": "string"
          }
        ],
        "description": "<internal></internal>\n\nCalled automatically from <page>DTree_Node:FilePopulate</page> to actually fill the node with sub-nodes based on set preferences like should files be added, etc.",
        "name": "FilePopulateCallback",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The number of the child to get, starting with 0",
            "name": "num",
            "type": "number"
          }
        ],
        "description": "Returns n-th child node.\n\nBasically an alias of <page>Panel:GetChild</page>.",
        "name": "GetChildNode",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The child panel, if valid ID is given",
            "type": "Panel"
          }
        ]
      },
      {
        "description": "Returns the number of child nodes this node has. For use with <page>DTree_Node:GetChildNode</page>",
        "name": "GetChildNodeCount",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Number of child nodes.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns a table containing all child nodes of this node.",
        "name": "GetChildNodes",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "A list of all child nodes.",
            "type": "table"
          }
        ]
      },
      {
        "description": "<deprecated></deprecated>\n\nReturns value set by <page>DTree_Node:SetDirty</page>.",
        "name": "GetDirty",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the double clock to collapse/expand functionality is enabled on this node.",
        "name": "GetDoubleClickToOpen",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "description": "<internal></internal>\n\nReturns what is set by <page>DTree_Node:SetDraggableName</page>.",
        "name": "GetDraggableName",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "string"
          }
        ]
      },
      {
        "description": "<internal></internal>\n\nReturns whether or not this node is drawing lines",
        "name": "GetDrawLines",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the node is expanded or not.",
        "name": "GetExpanded",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Expanded or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the filepath of the file attached to this node.",
        "name": "GetFileName",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns the folder path to search in, set by <page>DTree_Node:MakeFolder</page>.",
        "name": "GetFolder",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The folder path.",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns whether the expand/collapse button is shown on this node regardless of whether or not it has sub-nodes.\n\nSee also <page>DTree_Node:SetForceShowExpander</page>.",
        "name": "GetForceShowExpander",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns whether the expand button (little + button) should be shown or hidden.",
        "name": "GetHideExpander",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Цhether the expand button should be shown or hidden.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the image path to the icon of this node.",
        "name": "GetIcon",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The path to the image",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns the indentation level of the <page>DTree</page> this node belongs to.\n\nAlias of <page>DTree:GetIndentSize</page>, see it for more info.",
        "name": "GetIndentSize",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The indentation level.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns whether this node is the last child on this level or not.",
        "name": "GetLastChild",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether this node is the last child on this level or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "The height of a single <page>DTree_Node</page> of the <page>DTree</page> this node belongs to.\n\nAlias of <page>DTree:GetLineHeight</page>.",
        "name": "GetLineHeight",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The height of a single <page>DTree_Node</page>.",
            "type": "number"
          }
        ]
      },
      {
        "description": "<internal></internal><deprecated>Seems to be unused entirely.</deprecated>Returns whether the node still needs a filesystem search for sub-nodes.",
        "name": "GetNeedsChildSearch",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether the node still needs a filesystem search.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "<internal></internal>\n\nReturns whether or not the node is set to be populated from the filesystem.",
        "name": "GetNeedsPopulating",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the parent <page>DTree_Node</page>. Note that <page>Panel:GetParent</page> will not be the same!",
        "name": "GetParentNode",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The parent node.",
            "type": "Panel"
          }
        ]
      },
      {
        "description": "Returns the path ID (<page>File Search Paths</page>) used in populating the <page>DTree</page> from the filesystem.\n\nSee <page>DTree_Node:SetPathID</page> and <page>DTree_Node:MakeFolder</page>.",
        "name": "GetPathID",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The Path ID",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns the root node, the <page>DTree</page> this node is under.\n\nSee also <page>DTree_Node:GetParentNode</page>.",
        "name": "GetRoot",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The root node",
            "type": "Panel"
          }
        ]
      },
      {
        "description": "Returns whether or not nodes for files should/will be added when populating the node from filesystem.",
        "name": "GetShowFiles",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the wildcard set by <page>DTree_Node:MakeFolder</page>.",
        "name": "GetWildCard",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The search wildcard",
            "type": "string"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page>DTree_Node</page> to insert.",
            "name": "node",
            "type": "Panel"
          },
          {
            "description": "The node to insert the node above before or after.",
            "name": "nodeNextTo",
            "type": "Panel"
          },
          {
            "description": "true to insert before, false to insert after.",
            "name": "before",
            "type": "boolean"
          }
        ],
        "description": "Inserts a sub-node into this node before or after the given node.",
        "name": "Insert",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Has to be <page>DTree_Node</page>",
            "name": "node",
            "type": "Panel"
          }
        ],
        "description": "<internal></internal>\n\nInserts an existing node as a \"child\" or a sub-node of this node.\nUsed internally by the drag'n'drop functionality.",
        "name": "InsertNode",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page>DTree_Node</page>.",
            "name": "node",
            "type": "Panel"
          }
        ],
        "description": "<internal></internal>\n\nCalled automatically internally.\n\nMakes the target node compatible with this node's drag'n'drop.",
        "name": "InstallDraggable",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "<internal></internal>\n\nSee <page>DTree_Node:DoClick</page>",
        "name": "InternalDoClick",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "<internal></internal>\n\nSee <page>DTree_Node:DoRightClick</page>.",
        "name": "InternalDoRightClick",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Returns true if <page>DTree_Node:GetRoot</page> is the same as <page>DTree_Node:GetParentNode</page> of this node.",
        "name": "IsRootNode",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "If this is a root node.",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The node to remove",
            "name": "pnl",
            "type": "Panel"
          }
        ],
        "description": "Removes given node as a sub-node of this node.\n\nIt doesn't actually remove or unparent the panel, just removes it from the internal <page>DListView</page>.",
        "name": "LeaveTree",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The folder in the filesystem to use, relative to the garrysmod/ folder.",
            "name": "folder",
            "type": "string"
          },
          {
            "description": "The path to search in. See <page>File Search Paths</page>",
            "name": "path",
            "type": "string"
          },
          {
            "default": "false",
            "description": "Should files be added as nodes (true) or folders only (false)",
            "name": "showFiles",
            "type": "boolean"
          },
          {
            "default": "*",
            "description": "The wildcard to use when searching for files.",
            "name": "wildcard",
            "type": "string"
          },
          {
            "default": "false",
            "description": "If set to true, don't show the expand buttons on empty nodes.",
            "name": "dontForceExpandable",
            "type": "boolean"
          }
        ],
        "description": "Makes this node a folder in the filesystem. This will make it automatically populated.\n\nSee also <page>DTree_Node:AddFolder</page>.",
        "name": "MakeFolder",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The node to move.",
            "name": "node",
            "type": "Panel"
          }
        ],
        "description": "Moves given panel to the top of the children of this node.\n\nDespite name of this function, it cannot move the children to any position but the topmost.",
        "name": "MoveChildTo",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Moves this node to the top of the level.",
        "name": "MoveToTop",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Called when sub-nodes of this <page>DTree_Node</page> were changed, such as being rearranged if that functionality is enabled.",
        "name": "OnModified",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The newly added sub node.",
            "name": "newNode",
            "type": "DTree_Node"
          }
        ],
        "description": "Called when a new sub-node is added this node.",
        "name": "OnNodeAdded",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "node",
            "type": "Panel"
          }
        ],
        "description": "<internal></internal>\n\nCalled when this or a sub node is selected. Do not use this, it is not for override.\n\nUse <page>DTree:OnNodeSelected</page> or <page>DTree_Node:DoClick</page> instead.",
        "name": "OnNodeSelected",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "<internal></internal>\n\nCalled automatically to perform layout on this node if this node <page>DTree_Node:IsRootNode</page>.",
        "name": "PerformRootNodeLayout",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "<internal></internal>\n\nCalled automatically from <page>DTree_Node:PopulateChildrenAndSelf</page>.",
        "name": "PopulateChildren",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Expand self once population process is finished.",
            "name": "expand",
            "type": "boolean"
          }
        ],
        "description": "<internal></internal>\n\nCalled automatically from <page>DTree_Node:SetExpanded</page> (or when user manually expands the node) to populate the node with sub-nodes from the filesystem if this was enabled via <page>DTree_Node:MakeFolder</page>.",
        "name": "PopulateChildrenAndSelf",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "dirty",
            "type": "boolean"
          }
        ],
        "description": "<deprecated></deprecated>\n\nAppears to have no effect on the <page>DTree_Node</page>.",
        "name": "SetDirty",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "true to enable, false to disable this functionality.",
            "name": "enable",
            "type": "boolean"
          }
        ],
        "description": "Sets whether double clicking the node should expand/collapse it or not.",
        "name": "SetDoubleClickToOpen",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "name",
            "type": "string"
          }
        ],
        "description": "<internal></internal>\n\nUsed to store name for sub elements for a <page>Panel:Droppable</page> call.",
        "name": "SetDraggableName",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "draw",
            "type": "boolean"
          }
        ],
        "description": "<internal></internal>\n\nSets whether or not this node should draw visual lines.",
        "name": "SetDrawLines",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether to expand (true) or collapse (false)",
            "name": "expand",
            "type": "boolean"
          },
          {
            "default": "false",
            "description": "Whether to play animation (false) or not (true)",
            "name": "surpressAnimation",
            "type": "boolean"
          }
        ],
        "description": "Expands or collapses this node.",
        "name": "SetExpanded",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "filename",
            "type": "string"
          }
        ],
        "description": "<internal></internal>\n\nSets the file full filepath to the file attached to this node",
        "name": "SetFileName",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "folder",
            "type": "string"
          }
        ],
        "description": "<internal></internal>\n\nSets the folder to search files and folders in.\n\nUse <page>DTree_Node:MakeFolder</page> instead.",
        "name": "SetFolder",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "forceShow",
            "type": "boolean"
          }
        ],
        "description": "Sets whether or not the expand/collapse button (+/- button) should be shown on this node regardless of whether it has sub-elements or not.",
        "name": "SetForceShowExpander",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "hide",
            "type": "boolean"
          }
        ],
        "description": "<internal></internal>\n\nSets whether the expand button (little + button) should be shown or hidden.",
        "name": "SetHideExpander",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The path to the material to be used. Do not include \"materials/\". .pngs are supported.",
            "name": "path",
            "type": "string"
          }
        ],
        "description": "Sets the material for the icon of the <page>DTree_Node</page>.",
        "name": "SetIcon",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "last",
            "type": "boolean"
          }
        ],
        "description": "<internal></internal>\n\nCalled automatically to set whether this node is the last child on this level or not.",
        "name": "SetLastChild",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "New state.",
            "name": "newState",
            "type": "boolean"
          }
        ],
        "description": "<internal></internal>\n<deprecated>Seems to be unused entirely.</deprecated>\n\nSets whether the node still needs a filesystem search for sub-nodes.",
        "name": "SetNeedsChildSearch",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether or not the node needs populating",
            "name": "needs",
            "type": "boolean"
          }
        ],
        "description": "<internal></internal>\n\nSets whether or not the node needs populating from the filesystem.",
        "name": "SetNeedsPopulating",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The panel to set as a parent node for this node",
            "name": "parent",
            "type": "Panel"
          }
        ],
        "description": "<internal></internal>\n\nSets the parent node of this node. Not the same as <page>Panel:SetParent</page>.\n\nThis is set automatically, you shouldn't use this.",
        "name": "SetParentNode",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The path ID to set.",
            "name": "path",
            "type": "string"
          }
        ],
        "description": "<internal></internal>\n\nSets the path ID (<page>File Search Paths</page>) for populating the tree from the filesystem.\n\nUse <page>DTree_Node:MakeFolder</page> instead.",
        "name": "SetPathID",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The panel to set as root node.",
            "name": "root",
            "type": "Panel"
          }
        ],
        "description": "<internal></internal>\n\nSets the root node (the <page>DTree</page>) of this node.\n\nThis is set automatically, you shouldn't use this.",
        "name": "SetRoot",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "Whether this node is currently selected or not.",
            "name": "selected",
            "type": "boolean"
          }
        ],
        "description": "<internal></internal>\n\nCalled automatically to update the \"selected\" status of this node.",
        "name": "SetSelected",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "",
            "name": "showFiles",
            "type": "boolean"
          }
        ],
        "description": "<internal></internal>\n\nSets whether or not nodes for files should be added when populating the node from filesystem.",
        "name": "SetShowFiles",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "<deprecated></deprecated>\n\nCurrently does nothing, not implemented.",
        "name": "SetupCopy",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The wildcard to set",
            "name": "wildcard",
            "type": "string"
          }
        ],
        "description": "<internal></internal>\n\nSets the search wildcard.\n\nUse <page>DTree_Node:MakeFolder</page> instead",
        "name": "SetWildCard",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Returns whether or not the <page>DTree</page> this node is in has icons enabled.\n\nSee <page>DTree:ShowIcons</page> for more info.",
        "name": "ShowIcons",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether the icons are shown or not",
            "type": "number"
          }
        ]
      }
    ],
    "name": "DTree_Node",
    "parent": "DPanel"
  },
  {
    "description": "<internal></internal>\n\nUsed by <page>DTree_Node</page>.",
    "name": "DTree_Node_Button",
    "parent": "DButton"
  },
  {
    "description": "Vertical version of <page>DHorizontalDivider</page>.",
    "functions": [
      {
        "description": "<internal></internal>Used internally to clamp the vertical divider to <page>DVerticalDivider:GetTopMin</page> and <page>DVerticalDivider:GetBottomMin</page>.",
        "name": "DoConstraints",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ]
      },
      {
        "description": "Returns the bottom content panel of the <page>DVerticalDivider</page>.",
        "name": "GetBottom",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The bottom content panel.",
            "type": "Panel"
          }
        ]
      },
      {
        "description": "Returns the minimum height of the bottom content panel.",
        "name": "GetBottomMin",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The minimum height of the bottom content panel.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the height of the divider bar between the top and bottom content panels of the <page>DVerticalDivider</page>.",
        "name": "GetDividerHeight",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The height of the divider bar.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns whether the divider is being dragged or not.",
        "name": "GetDragging",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "If true, mouse movement will alter the size of the divider.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "<internal></internal>\nReturns the local Y position of where the user starts dragging the divider.",
        "name": "GetHoldPos",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The local Y position where divider dragging has started.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the middle content panel of the <page>DVerticalDivider</page>.",
        "name": "GetMiddle",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The middle content panel.",
            "type": "Panel"
          }
        ]
      },
      {
        "description": "Returns the top content panel of the <page>DVerticalDivider</page>.",
        "name": "GetTop",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The top content panel.",
            "type": "Panel"
          }
        ]
      },
      {
        "description": "Returns the current height of the top content panel set by <page>DVerticalDivider:SetTopHeight</page> or by the user.",
        "name": "GetTopHeight",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The current height of the <page>DVerticalDivider</page>.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the maximum height of the top content panel. See <page>DVerticalDivider:SetTopMax</page> for more information.",
        "name": "GetTopMax",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The maximum height of the top content panel.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the minimum height of the top content panel.",
        "name": "GetTopMin",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The minimum height of the top content panel.",
            "type": "number"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The panel to set as the bottom content.",
            "name": "pnl",
            "type": "Panel"
          }
        ],
        "description": "Sets the passed panel as the bottom content of the <page>DVerticalDivider</page>.",
        "name": "SetBottom",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The minimum height of the bottom content panel. Default is 50.",
            "name": "height",
            "type": "number"
          }
        ],
        "description": "Sets the minimum height of the bottom content panel.",
        "name": "SetBottomMin",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The height of the divider bar.",
            "name": "height",
            "type": "number"
          }
        ],
        "description": "Sets the height of the divider bar between the top and bottom content panels of the <page>DVerticalDivider</page>.",
        "name": "SetDividerHeight",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "Setting this to true causes cursor movement to alter the position of the divider.",
            "name": "isDragging",
            "type": "boolean"
          }
        ],
        "description": "<internal></internal>\nSets whether the divider is being dragged or not.",
        "name": "SetDragging",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The local Y position where divider dragging has started.",
            "name": "y",
            "type": "number"
          }
        ],
        "description": "<internal></internal>\nSets the local Y position of where the user starts dragging the divider.",
        "name": "SetHoldPos",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The panel to set as the middle content.",
            "name": "pnl",
            "type": "Panel"
          }
        ],
        "description": "Places the passed panel in between the top and bottom content panels of the <page>DVerticalDivider</page>.",
        "name": "SetMiddle",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The panel to set as the top content.",
            "name": "pnl",
            "type": "Panel"
          }
        ],
        "description": "Sets the passed panel as the top content of the <page>DVerticalDivider</page>.",
        "name": "SetTop",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The height of the top content panel.",
            "name": "height",
            "type": "number"
          }
        ],
        "description": "Sets the height of the top content panel.\n\nThe height of the bottom content panel is automatically calculated by taking the total height of the <page>DVerticalDivider</page> and subtracting it with the height of the top content panel and the divider bar.",
        "name": "SetTopHeight",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The maximum height of the top content panel. Default is 4096.",
            "name": "height",
            "type": "number"
          }
        ],
        "description": "Sets the maximum height of the top content panel. This is ignored if the panel would exceed the minimum bottom content panel height set from <page>DVerticalDivider:SetBottomMin</page>.",
        "name": "SetTopMax",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The minimum height of the top content panel. Default is 50.",
            "name": "height",
            "type": "number"
          }
        ],
        "description": "Sets the minimum height of the top content panel.",
        "name": "SetTopMin",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ]
      },
      {
        "description": "<internal></internal>\nCauses the user to start dragging the divider.",
        "name": "StartGrab",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ]
      }
    ],
    "name": "DVerticalDivider",
    "parent": "DPanel"
  },
  {
    "description": "A generic vertical scrollbar, used in <page>DScrollPanel</page>. See the horizontal alternative [here](DHScrollBar).\n\nThe scrollbar notably contains `DVScrollBar.btnUp`, `DVScrollBar.btnDown`, and `DVScrollBar.btnGrip` which are the up button, down button, and grip respectively. Editing the paint functions of these allows custom scrollbar styling (See <page>DScrollPanel:GetVBar</page> for an example), although it is a better idea to use [Derma Skins](Derma_Skin_Creation).",
    "functions": [
      {
        "arguments": [
          {
            "description": "How much to scroll downwards. Can be negative for upwards scroll",
            "name": "add",
            "type": "number"
          }
        ],
        "description": "Adds specified amount of scroll in pixels.",
        "name": "AddScroll",
        "parent": "DVScrollBar",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "True if the scroll level was changed (i.e. if we did or did not scroll)",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The scroll level to animate to. In pixels from the top ( from 0 )",
            "name": "scroll",
            "type": "number"
          },
          {
            "description": "Length of the animation in seconds",
            "name": "length",
            "type": "number"
          },
          {
            "default": "0",
            "description": "Delay of the animation in seconds",
            "name": "delay",
            "type": "number"
          },
          {
            "default": "-1",
            "description": "See <page>Panel:NewAnimation</page> for explanation.",
            "name": "ease",
            "type": "number"
          }
        ],
        "description": "Smoothly scrolls to given level.",
        "name": "AnimateTo",
        "parent": "DVScrollBar",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "description": "Returns the scale of the scroll bar based on the difference in size between the visible \"window\" into the canvas that is being scrolled. Should be used after <page>DVScrollBar:SetUp</page>.",
        "name": "BarScale",
        "parent": "DVScrollBar",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The scale of the scrollbar.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns whether or not the manual up/down scroll buttons are visible or not. Set by <page>DVScrollBar:SetHideButtons</page>.",
        "name": "GetHideButtons",
        "parent": "DVScrollBar",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether or not the manual up/down scroll buttons are visible or not.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Returns the negative of <page>DVScrollBar:GetScroll</page>.",
        "name": "GetOffset",
        "parent": "DVScrollBar",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The scroll offset.",
            "type": "number"
          }
        ]
      },
      {
        "description": "Returns the amount of scroll level from the top in pixels",
        "name": "GetScroll",
        "parent": "DVScrollBar",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "The amount of scroll level from the top",
            "type": "number"
          }
        ]
      },
      {
        "description": "<internal></internal>\n\nCalled from within <page>DScrollBarGrip</page>",
        "name": "Grip",
        "parent": "DVScrollBar",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "True to hide",
            "name": "hide",
            "type": "boolean"
          }
        ],
        "description": "Allows hiding the up and down buttons for better visual stylisation.",
        "name": "SetHideButtons",
        "parent": "DVScrollBar",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The new scroll value.",
            "name": "scroll",
            "type": "number"
          }
        ],
        "description": "Sets the scroll level in pixels.",
        "name": "SetScroll",
        "parent": "DVScrollBar",
        "realms": [
          "client",
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The size of the panel that holds the canvas, basically size of \"1 page\".",
            "name": "barSize",
            "type": "number"
          },
          {
            "description": "The total size of the canvas, this typically is the bigger number.",
            "name": "canvasSize",
            "type": "number"
          }
        ],
        "description": "Sets up the scrollbar for use.\n\nThe scrollbar will automatically disable itself if the total height of the canvas is lower than the height of the panel that holds the canvas during this function call.",
        "name": "SetUp",
        "parent": "DVScrollBar",
        "realms": [
          "client",
          "menu"
        ]
      }
    ],
    "name": "DVScrollBar",
    "parent": "Panel"
  },
  {
    "description": "Base panel used by <page>DFrame</page>, this panel is needed so that elements such as the <page>TextEntry</page> can obtain focus.",
    "name": "EditablePanel",
    "parent": "Panel"
  },
  {
    "description": "<internal></internal>\nA panel used by Sandbox's Finger Poser tool.",
    "name": "fingerposer",
    "parent": "ContextBase"
  },
  {
    "description": "<internal>\nUsed by the <page>fingerposer</page> panel.\n</internal>\n\nA panel used by Sandbox's Finger Poser tool.",
    "name": "FingerVar",
    "parent": "Panel"
  },
  {
    "description": "<deprecated>You should use <page>DFrame</page> instead.</deprecated>\n\nA window that in which you can place just about every other component and even another frame.",
    "name": "Frame",
    "parent": "Panel"
  },
  {
    "description": "The HTML control can be used to display HTML code just like an internet browser. Unlike <page>DHTML</page>, this control cannot accept user input or complex interaction, such as retrieving image data.\n\n**Blocked URL Extentions**\n\n`This means your url cannot end in any of these extensions, e.g.: (http://yourdomain.com/garry.exe)`\n* .exe\n* .bat\n* .dll\n* .zip\n* .mp3\n* .swf",
    "name": "HTML",
    "parent": "Panel"
  },
  {
    "description": "An icon editor that permits a user to modify a <page>SpawnIcon</page> and re-render it. This is used by the spawn menu and is what is shown when you right-click an icon and select `Edit Icon`.\n\nThis makes use of the <page>DAdjustableModelPanel</page> element.\n\n<note>This panel is only available in Sandbox and Sandbox derived gamemodes!</note>\n<img src=\"IconEditor.jpg\">",
    "functions": [
      {
        "description": "Applies the top-down view camera settings for the model in the <page>DAdjustableModelPanel</page>.\n\nCalled when a user clicks the `Above` (third) button (See <page>IconEditor</page>).",
        "name": "AboveLayout",
        "parent": "IconEditor",
        "realms": [
          "client"
        ]
      },
      {
        "description": "Applies the best camera settings for the model in the <page>DAdjustableModelPanel</page>, using the values returned by <page>Global.PositionSpawnIcon</page>.\n\nCalled when a user clicks the `wand` button (See the ) and when <page>IconEditor:Refresh</page> is called.",
        "name": "BestGuessLayout",
        "parent": "IconEditor",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The entity being rendered within the model panel.",
            "name": "ent",
            "type": "Entity"
          }
        ],
        "description": "<internal></internal> Fills the <page>DListView</page> on the left of the editor with the model entity's animation list. Called by <page>IconEditor:Refresh</page>.",
        "name": "FillAnimations",
        "parent": "IconEditor",
        "realms": [
          "client"
        ]
      },
      {
        "description": "Applies the front view camera settings for the model in the <page>DAdjustableModelPanel</page>.\n\nCalled when a user clicks the `Front` (second) button (See the ).",
        "name": "FullFrontalLayout",
        "parent": "IconEditor",
        "realms": [
          "client"
        ]
      },
      {
        "description": "Places the camera at the origin (0,0,0), relative to the entity, in the <page>DAdjustableModelPanel</page>.\n\nCalled when a user clicks the `Center` (fifth) button (See the ).",
        "name": "OriginLayout",
        "parent": "IconEditor",
        "realms": [
          "client"
        ]
      },
      {
        "description": "Updates the internal <page>DAdjustableModelPanel</page> and <page>SpawnIcon</page>.\n\nThis should be called immediately after setting the SpawnIcon with <page>IconEditor:SetIcon</page>.",
        "name": "Refresh",
        "parent": "IconEditor",
        "realms": [
          "client"
        ]
      },
      {
        "description": "Re-renders the <page>SpawnIcon</page>.\n\nCalled when a user clicks the `RENDER` button, this retrieves the render data from the internal <page>DAdjustableModelPanel</page> and passes it as a table to <page>Panel:RebuildSpawnIconEx</page>.",
        "name": "RenderIcon",
        "parent": "IconEditor",
        "realms": [
          "client"
        ]
      },
      {
        "description": "Applies the right side view camera settings for the model in the <page>DAdjustableModelPanel</page>.\n\nCalled when a user clicks the `Right` (fourth) button (See the ). (Note: The icon for this points left.)",
        "name": "RightLayout",
        "parent": "IconEditor",
        "realms": [
          "client"
        ]
      },
      {
        "description": "<internal></internal> Sets up the default ambient and directional lighting for the <page>DAdjustableModelPanel</page>. Called by <page>IconEditor:Refresh</page>.",
        "name": "SetDefaultLighting",
        "parent": "IconEditor",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The entity to retrieve the model and skin from.",
            "name": "ent",
            "type": "Entity"
          }
        ],
        "description": "Sets the editor's model and icon from an entity. Alternative to <page>IconEditor:SetIcon</page>, with uses a <page>SpawnIcon</page>.\n\nYou do not need to call <page>IconEditor:Refresh</page> after this.",
        "name": "SetFromEntity",
        "parent": "IconEditor",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page>SpawnIcon</page> object to be modified.",
            "name": "icon",
            "type": "Panel"
          }
        ],
        "description": "Sets the <page>SpawnIcon</page> to modify. You should call <page>Panel:Refresh</page> immediately after this, as the user will not be able to make changes to the icon beforehand.",
        "name": "SetIcon",
        "parent": "IconEditor",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The entity being rendered within the model panel.",
            "name": "ent",
            "type": "Entity"
          }
        ],
        "description": "<internal></internal> Updates the entity being rendered in the internal <page>DAdjustableModelPanel</page>. Called by the model panel's <page>DModelPanel:LayoutEntity</page> method.",
        "name": "UpdateEntity",
        "parent": "IconEditor",
        "realms": [
          "client"
        ]
      }
    ],
    "name": "IconEditor",
    "parent": "DFrame"
  },
  {
    "description": "A checkbox panel similar to <page>DCheckBox</page> and <page>DImageButton</page> with customizable checked state image.\n\nUses the <page>Material</page> panel internally. Can't have a label.\n\n<note>Will error if no material was set.</note>",
    "functions": [
      {
        "description": "Returns the checked state of the <page>ImageCheckBox</page>",
        "name": "GetChecked",
        "parent": "ImageCheckBox",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "true for checked, false otherwise",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "true for checked, false otherwise",
            "name": "OnOff",
            "type": "boolean"
          }
        ],
        "description": "Sets the checked state of the checkbox.\n\nChecked state can be obtained by <page>ImageCheckBox</page>.State.",
        "name": "Set",
        "parent": "ImageCheckBox",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/imagecheckbox.lua",
          "lineEnd": 36,
          "lineStart": 32
        }
      },
      {
        "arguments": [
          {
            "description": "true for checked, false otherwise",
            "name": "bOn",
            "type": "boolean"
          }
        ],
        "description": "Sets the checked state of the checkbox.\n\nChecked state can be obtained via <page>ImageCheckBox:GetChecked</page>",
        "name": "SetChecked",
        "parent": "ImageCheckBox",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/imagecheckbox.lua",
          "lineEnd": 24,
          "lineStart": 18
        }
      },
      {
        "arguments": [
          {
            "description": "The file path of the material to set (relative to \"garrysmod/materials/\").",
            "name": "mat",
            "type": "string"
          }
        ],
        "description": "Sets the material that will be visible when the <page>ImageCheckBox</page> is checked.\n\nInternally calls <page>Material:SetMaterial</page>.\n\n<note>Will error if no material was set.</note>",
        "name": "SetMaterial",
        "parent": "ImageCheckBox",
        "realms": [
          "client"
        ],
        "source": {
          "file": "lua/vgui/imagecheckbox.lua",
          "lineEnd": 16,
          "lineStart": 4
        }
      }
    ],
    "name": "ImageCheckBox",
    "parent": "Button"
  },
  {
    "description": "A basic label or \"single line text area\" that is non-editable. You might be looking for <page>DLabel</page>, which uses this panel internally.",
    "name": "Label",
    "parent": "Panel"
  },
  {
    "description": "Material is a VGUI element that renders a VMT material.",
    "functions": [
      {
        "arguments": [
          {
            "description": "The alpha value, from 0 to 255.",
            "name": "alpha",
            "type": "number"
          }
        ],
        "description": "Sets the alpha value of the Material panel.",
        "name": "SetAlpha",
        "parent": "Material",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The file path of the material to set (relative to \"garrysmod/materials/\").",
            "name": "matname",
            "type": "string"
          }
        ],
        "description": "Sets the material used by the panel.\n\n<note>If the material is not showing up as the correct size, try setting the Material panel's `AutoSize` variable to **false**</note>",
        "name": "SetMaterial",
        "parent": "Material",
        "realms": [
          "client"
        ]
      }
    ],
    "name": "Material",
    "parent": "Button"
  },
  {
    "description": "The panel used by Material &amp; Lamp Sandbox tools for texture selection. Despite being only used in Sandbox, it is **not** exclusive to that gamemode.\n\nSee also <page>PropSelect</page> for the prop selecting alternative.",
    "functions": [
      {
        "arguments": [
          {
            "description": "Tooltip for the material, for when the player hovers over the material.",
            "name": "label",
            "type": "string"
          },
          {
            "description": "Path to the material. Relative to `materials/` folder (do not include it), and do not include the `.vmt` extension.",
            "name": "path",
            "type": "string"
          }
        ],
        "description": "Adds a new material to the selection list.",
        "name": "AddMaterial",
        "parent": "MatSelect",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "Tooltip for the material, for when the player hovers over the material.",
            "name": "label",
            "type": "string"
          },
          {
            "description": "Path to the material. Relative to `materials/` folder (do not include it), and do not include the `.vmt` extension.",
            "name": "path",
            "type": "string"
          },
          {
            "description": "Overrides the \"value\" of the material. This will be what <page>MatSelect:OnSelect</page> receives in the first argument. It also affects <page>MatSelect:FindMaterialByValue</page>.",
            "name": "value",
            "type": "any"
          },
          {
            "description": "A list of convar names (as keys) and their values to set when the user selects this material. <page>ContextBase:SetConVar</page> will be ignored.",
            "name": "convars",
            "type": "table"
          }
        ],
        "description": "Adds a new material to the selection list, with some extra options.",
        "name": "AddMaterialEx",
        "parent": "MatSelect",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The material to find and select within this <page>MatSelect</page>.",
            "name": "mat",
            "type": "string"
          }
        ],
        "description": "Find a material and selects it, if it exists in this panel.",
        "name": "FindAndSelectMaterial",
        "parent": "MatSelect",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The material to find within this <page>MatSelect</page>.",
            "name": "mat",
            "type": "string"
          }
        ],
        "description": "Find a <page>DImageButton</page> panel based on the input material path.",
        "name": "FindMaterialByValue",
        "parent": "MatSelect",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The found material, or nil.",
            "type": "DImageButton"
          }
        ]
      },
      {
        "description": "Returns whether the panel would set its own height to fit all materials within its height.",
        "name": "GetAutoHeight",
        "parent": "MatSelect",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "`true` = auto size itself.",
            "name": "autoSize",
            "type": "boolean"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page>DImageButton</page> that was clicked.",
            "name": "pnl",
            "type": "Panel"
          }
        ],
        "description": "Called when the player right clicks a material.\n\nBy default, this opens a menu that lets the player copy the material path.",
        "name": "OnRightClick",
        "parent": "MatSelect",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "Material path of the selected material, not including any file extension.",
            "name": "material",
            "type": "string"
          },
          {
            "description": "The <page>DImageButton</page> that was clicked.",
            "name": "pnl",
            "type": "Panel"
          }
        ],
        "description": "Called when the player selects a material.",
        "name": "OnSelect",
        "parent": "MatSelect",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "Width of the <page>DImageButton</page> panel.",
            "name": "w",
            "type": "number"
          },
          {
            "description": "Height of the <page>DImageButton</page> panel.",
            "name": "h",
            "type": "number"
          }
        ],
        "description": "Defines a paint over function for a <page>DImageButton</page> when it is selected.\n\n<warning>`self` in the context of this function is the <page>DImageButton</page>!</warning>",
        "name": "SelectedItemPaintOver",
        "parent": "MatSelect",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The material to select, found by <page>MatSelect:FindMaterialByValue</page>",
            "name": "mat",
            "type": "DImageButton"
          }
        ],
        "description": "<internal>Use <page>MatSelect:FindAndSelectMaterial</page> instead.</internal>\n\nSelects a given material panel.",
        "name": "SelectMaterial",
        "parent": "MatSelect",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "If `true`, auto size itself.",
            "name": "autoSize",
            "type": "boolean"
          }
        ],
        "description": "Sets whether the panel should set its own height to fit all materials within its height.",
        "name": "SetAutoHeight",
        "parent": "MatSelect",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The height of the material, in pixels. Default is `128`.",
            "name": "height ",
            "type": "number"
          }
        ],
        "description": "Sets the height of a single material in pixels.",
        "name": "SetItemHeight",
        "parent": "MatSelect",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The width of the material, in pixels. Default is `128`.",
            "name": "width",
            "type": "number"
          }
        ],
        "description": "Sets the width of a single material in pixels.",
        "name": "SetItemWidth",
        "parent": "MatSelect",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "Amount of rows to target the height to. Default is `2`.",
            "name": "rows",
            "type": "number"
          }
        ],
        "description": "Sets the target height of the panel, in number of rows.",
        "name": "SetNumRows",
        "parent": "MatSelect",
        "realms": [
          "client"
        ]
      }
    ],
    "name": "MatSelect",
    "parent": "ContextBase"
  },
  {
    "description": "<internal></internal>\nPanel used to display models, used by <page>SpawnIcon</page>.",
    "name": "ModelImage",
    "parent": ""
  },
  {
    "description": "A panel list with a custom vertical scroll bar that doesn't have up/down buttons and has a momentum to scrolling.\n\n<deprecated>You should use <page>DScrollPanel</page> instead</deprecated>",
    "name": "PanelList",
    "parent": "Panel"
  },
  {
    "description": "<internal></internal>\nA preset editor, which can be opened by <page>ControlPresets</page>.\nThis control only exists in Sandbox derived gamemodes.",
    "name": "PresetEditor",
    "parent": "DFrame"
  },
  {
    "description": "Used in Sandbox tools to allow the player to select models out of a list. Despite being only used in Sandbox, it is **not** exclusive to that gamemode.\n\nSee also <page>MatSelect</page> for the material selecting alternative.",
    "functions": [
      {
        "arguments": [
          {
            "description": "Model path, **including** `models/` and `.mdl`.",
            "name": "model",
            "type": "string"
          },
          {
            "description": "A list of convar names (as keys) and their values to set when the user selects this model.",
            "name": "convars",
            "type": "table"
          }
        ],
        "description": "Adds a new model to the selection list.",
        "name": "AddModel",
        "parent": "PropSelect",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The \"value\" for this model, which is used to set the <page>ContextBase:SetConVar</page>.",
            "name": "value",
            "type": "string"
          },
          {
            "description": "Model path, **including** `models/` and `.mdl`.",
            "name": "model",
            "type": "string"
          },
          {
            "description": "The skin number for this model. It will **not** be set to the convar, use the value argument to track skin-model combos.",
            "name": "skin",
            "type": "number"
          }
        ],
        "description": "Adds a new model to the selection list.",
        "name": "AddModelEx",
        "parent": "PropSelect",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The model to find and select within this <page>PropSelect</page>.",
            "name": "mdl",
            "type": "string"
          }
        ],
        "description": "Find and select a <page>SpawnIcon</page> panel based on the input model path.",
        "name": "FindAndSelectButton",
        "parent": "PropSelect",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The model to find within this <page>PropSelect</page>.",
            "name": "mdl",
            "type": "string"
          }
        ],
        "description": "Find a <page>SpawnIcon</page> panel based on the input model path.",
        "name": "FindModelByValue",
        "parent": "PropSelect",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The found spawnicon, or `nil`.",
            "type": "SpawnIcon"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page>Spawnicon</page> that was clicked.",
            "name": "pnl",
            "type": "Panel"
          }
        ],
        "description": "Called when the player right clicks a model.\n\nBy default, this opens a menu that lets the player copy the model path.",
        "name": "OnRightClick",
        "parent": "PropSelect",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The <page>Spawnicon</page> that was clicked.",
            "name": "pnl",
            "type": "Panel"
          },
          {
            "description": "Path of the selected model, or its \"value\".",
            "name": "model",
            "type": "String"
          }
        ],
        "description": "Called when the player selects a model.",
        "name": "OnSelect",
        "parent": "PropSelect",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The spawnicon to select, retrieved via <page>PropSelect:FindModelByValue</page>.",
            "name": "icon",
            "type": "SpawnIcon"
          }
        ],
        "description": "<internal>Use <page>PropSelect:FindAndSelectButton</page> instead.</internal>\n\nSelects a given spawnicon panel.",
        "name": "SelectModel",
        "parent": "PropSelect",
        "realms": [
          "client"
        ]
      }
    ],
    "name": "PropSelect",
    "parent": "ContextBase"
  },
  {
    "description": "<internal></internal>\n<deprecated></deprecated>\nCurrently there are no functions to retrieve checked state of a Radio Button, and their visuals are seemingly broken.",
    "name": "RadioButton",
    "parent": "Panel"
  },
  {
    "description": "A very versatile text display element that's used to power the default chat and console.\n\nRich Text panels allows multicolored, highlight-able, and interactive text using individual text segment markup (segments are defined by the <page>Panel:AppendText</page> method).\n\nThe **RichText** element has a `64000` character limit.",
    "name": "RichText",
    "parent": "Panel"
  },
  {
    "description": "Used as scroll bar for <page>PanelList</page>\n<deprecated>\nUsed in deprecated  <page>PanelList</page>. Use <page>DVScrollBar</page> (Used in <page>DScrollPanel</page>).\n</deprecated>",
    "name": "SlideBar",
    "parent": "Panel"
  },
  {
    "description": "<deprecated>\nOnly exists for backwards compatibility with <page>Panel:SetActionFunction</page> and <page>Panel:PostMessage</page>.\nUse <page>DNumSlider</page> instead.\n</deprecated>\n\nA simple slider featuring an numeric display.",
    "name": "Slider",
    "parent": "Panel"
  },
  {
    "description": "A \"spawn icon\" displays an image for the given model path.\nIt is mostly used in the Spawn Menu (<key>Q</key>).\nIt uses <page>ModelImage</page> internally.",
    "functions": [
      {
        "description": "Returns the currently active <page text=\"Sub Model IDs\">Structures/BodyGroupData#submodels</page> for each Body Group of the spawn icon.\n\nThis is set by <page>SpawnIcon:SetBodyGroup</page>.",
        "name": "GetBodyGroup",
        "parent": "SpawnIcon",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The Body Groups of the spawnicon",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns the currently set model name. This is set by <page>SpawnIcon:SetModelName</page>.",
        "name": "GetModelName",
        "parent": "SpawnIcon",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "The model name",
            "type": "string"
          }
        ]
      },
      {
        "description": "Returns the currently set skin of the spawnicon. This is set by <page>SpawnIcon:SetSkinID</page>.",
        "name": "GetSkinID",
        "parent": "SpawnIcon",
        "realms": [
          "client"
        ],
        "returnValues": [
          {
            "description": "Current skin ID",
            "type": "number"
          }
        ]
      },
      {
        "description": "Called when right clicked on the SpawnIcon. It will not be called if there is a selection (<page>Panel:GetSelectionCanvas</page>), in which case <page>SANDBOX:SpawnlistOpenGenericMenu</page> is called.",
        "name": "OpenMenu",
        "parent": "SpawnIcon",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The Body Group ID to set the active Sub Model ID for.\nBody Group IDs start at `0`.",
            "name": "bodyGroupId",
            "type": "number"
          },
          {
            "description": "The Sub Model ID to set as active.\nSub Model IDs start at `0`.",
            "name": "activeSubModelId",
            "type": "number"
          }
        ],
        "description": "<internal>This is done automatically by SpawnIcon. You do not need to call this. Doing so may cause unforeseen consequences.</internal>\n\nSets the active <page text=\"Sub Model ID\">Structures/BodyGroupData#submodels</page> for the given <page text=\"Body Group \t\tID\">Structures/BodyGroupData#id</page>, so it can be retrieved with <page>SpawnIcon:GetBodyGroup</page>.\n\nUse <page>Panel:SetModel</page> instead.",
        "name": "SetBodyGroup",
        "parent": "SpawnIcon",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "The model name to set",
            "name": "mdl",
            "type": "string"
          }
        ],
        "description": "<internal>This is done automatically by SpawnIcon. You do not need to call this. Doing so may cause unforeseen consequences.</internal>\n\nSets the model name, so it can be retrieved with <page>SpawnIcon:GetModelName</page>. Use <page>Panel:SetModel</page> instead.",
        "name": "SetModelName",
        "parent": "SpawnIcon",
        "realms": [
          "client"
        ]
      },
      {
        "arguments": [
          {
            "description": "Skin ID to set",
            "name": "skin",
            "type": "number"
          }
        ],
        "description": "<internal>This is done automatically by SpawnIcon. You do not need to call this. Doing so may cause unforeseen consequences.</internal>\n\nSets the skin id of the spawn icon, so it can be retrieved with <page>SpawnIcon:GetSkinID</page>. Use <page>Panel:SetModel</page> instead.",
        "name": "SetSkinID",
        "parent": "SpawnIcon",
        "realms": [
          "client"
        ]
      }
    ],
    "name": "SpawnIcon",
    "parent": "DButton"
  },
  {
    "description": "The default SpawnmenuContentPanel\n<internal></internal>",
    "functions": [
      {
        "arguments": [
          {
            "description": "The Hook name",
            "name": "hookname",
            "type": "string"
          }
        ],
        "description": "Changes the Spawnmenu category to search in",
        "name": "CallPopulateHook",
        "parent": "SpawnmenuContentPanel",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/content.lua",
          "lineEnd": 56,
          "lineStart": 52
        }
      },
      {
        "description": "Allows the modification of the ContentSidebar",
        "name": "EnableModify",
        "parent": "SpawnmenuContentPanel",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/content.lua",
          "lineEnd": 46,
          "lineStart": 44
        }
      },
      {
        "arguments": [
          {
            "description": "The category",
            "name": "category",
            "type": "string"
          },
          {
            "description": "The Hook name",
            "name": "hookname",
            "type": "string"
          }
        ],
        "description": "Changes the Spawnmenu category to search in",
        "name": "EnableSearch",
        "parent": "SpawnmenuContentPanel",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/content.lua",
          "lineEnd": 50,
          "lineStart": 48
        }
      },
      {
        "arguments": [
          {
            "description": "Panel to switch to",
            "name": "panel",
            "type": "Panel"
          }
        ],
        "description": "Switches the current panel with the given panel",
        "name": "SwitchPanel",
        "parent": "SpawnmenuContentPanel",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/content.lua",
          "lineEnd": 75,
          "lineStart": 58
        }
      }
    ],
    "name": "SpawnmenuContentPanel",
    "parent": "DPanel"
  },
  {
    "description": "Basic text input field. See <page>DTextEntry</page> for a more advanced version.",
    "functions": [
      {
        "arguments": [
          {
            "description": "They key code of the key pressed, see <page>Enums/KEY</page>.",
            "name": "keyCode",
            "type": "number"
          }
        ],
        "description": "Called from engine whenever a valid character is typed while the text entry is focused.\n\nUsed internally for functionality of <page>DTextEntry</page>",
        "name": "OnKeyCodeTyped",
        "parent": "TextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "returnValues": [
          {
            "description": "Whether you've handled the key press. Returning true prevents the default text entry behavior from occurring.",
            "type": "boolean"
          }
        ]
      },
      {
        "description": "Called when the text inside the <page>TextEntry</page> changes.\n\nYou may be looking for <page>DTextEntry:OnValueChange</page> instead.",
        "name": "OnTextChanged",
        "parent": "TextEntry",
        "realms": [
          "client",
          "menu"
        ]
      }
    ],
    "name": "TextEntry",
    "parent": "Panel"
  },
  {
    "description": "A panel capable of loading `.tga` images.",
    "name": "TGAImage",
    "parent": "Panel"
  },
  {
    "description": "A window that is used to publish dupes and saves\n<img src=\"b04e5/8dc6d3d77422fbe.png\" size=\"94866\" name=\"image.png\">",
    "functions": [
      {
        "description": "Checks if the Tags and Title are valid and if so it enables the publish button.",
        "name": "CheckInput",
        "parent": "UGCPublishWindow",
        "realms": [
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The error message.",
            "name": "err",
            "type": "string"
          }
        ],
        "description": "Displays the given error message.",
        "name": "DisplayError",
        "parent": "UGCPublishWindow",
        "realms": [
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The workshop id",
            "name": "wsid",
            "type": "string"
          },
          {
            "description": "If wsid is nil, this will be the error message",
            "name": "err",
            "type": "string"
          }
        ],
        "description": "Publishes the Item or throws an error if the Title or Tags are invalid",
        "name": "DoPublish",
        "parent": "UGCPublishWindow",
        "realms": [
          "menu"
        ]
      },
      {
        "description": "Rezises the panel to nicely fit all children",
        "name": "FitContents",
        "parent": "UGCPublishWindow",
        "realms": [
          "menu"
        ]
      },
      {
        "description": "Returns the name of the current selected tag.",
        "name": "GetChosenTag",
        "parent": "UGCPublishWindow",
        "realms": [
          "menu"
        ],
        "returnValues": [
          {
            "description": "The choosen tag, or nil if none is selected.",
            "name": "tag",
            "type": "string"
          }
        ]
      },
      {
        "arguments": [
          {
            "description": "The workshop id",
            "name": "wsid",
            "type": "string"
          },
          {
            "description": "If wsid is nil, this will be the error message",
            "name": "err",
            "type": "string"
          }
        ],
        "description": "Called when the Item was published or if any error occurred while publishing",
        "name": "OnPublishFinished",
        "parent": "UGCPublishWindow",
        "realms": [
          "menu"
        ]
      },
      {
        "arguments": [
          {
            "description": "The type / namespace of the <page>WorkshopFileBase</page> that created this panel",
            "name": "ugcType",
            "type": "string"
          },
          {
            "description": "The File to publish",
            "name": "file",
            "type": "string"
          },
          {
            "description": "The Image",
            "name": "imageFile",
            "type": "string"
          },
          {
            "description": "The <page>WorkshopFileBase</page> that created this panel",
            "name": "handler",
            "type": "WorkshopFileBase"
          }
        ],
        "description": "updated the Workshop items list.",
        "name": "Setup",
        "parent": "UGCPublishWindow",
        "realms": [
          "menu"
        ]
      },
      {
        "description": "updated the Workshop items list.",
        "name": "UpdateWorkshopItems",
        "parent": "UGCPublishWindow",
        "realms": [
          "menu"
        ]
      }
    ],
    "name": "UGCPublishWindow",
    "parent": "DFrame"
  },
  {
    "description": "A panel similar to <page>Label</page>, but can be clicked to open a URL in the Steam Overlay, and appears with an underline. This is used by <page>DLabelURL</page>.",
    "name": "URLLabel",
    "parent": ""
  }
]
