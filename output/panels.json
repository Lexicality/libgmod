[
  {
    "name": "AchievementIcon",
    "parent": "Panel",
    "description": "Used to show an icon for any of the [Garry's Mod Steam achievements](http://steamcommunity.com/stats/GarrysMod/achievements).\n\nIf the viewer has not unlocked the achievement on Steam, the icon will be grayed out."
  },
  {
    "name": "AvatarImage",
    "parent": "Panel",
    "description": "Used to show a player's Steam avatar. You are recommended but not limited to pick one of the following sizes: 16, 32, 64, 84, 128, 184."
  },
  {
    "name": "Awesomium",
    "parent": "Panel",
    "description": "<deprecated>You should be using <page>HTML</page> panel, which this is an alias of.</deprecated>\n\nBase panel for elements using the [Awesomium](http://www.awesomium.com) UI engine.\n\n<note>On the `x86-64` beta this panel isn't actually Awesomium, its the same as `HTML` (`HtmlPanel`)</note>"
  },
  {
    "name": "Button",
    "parent": "DButton",
    "description": "<deprecated>\nOnly exists for backwards compatibility with <page>Panel:SetActionFunction</page>. Use <page>DButton</page> instead.\n</deprecated>\nCreates a button that players can click on.\n[Cant seem to figure out why the source link wont do line highlighting on this one so here is github permalink](https://github.com/Facepunch/garrysmod/blob/fff01df0cfaf6152336f5026d0bedf5225052bbe/garrysmod/lua/vgui/dbutton.lua#L154C1-L166C76)"
  },
  {
    "name": "CheckButton",
    "parent": "",
    "description": "<internal>Use <page>DCheckBoxLabel</page> instead.</internal>\nEngine checkbox"
  },
  {
    "name": "ContentHeader",
    "parent": "DLabelEditable",
    "description": "<internal></internal>\n\nThe ContentHeader is used internally by the Spawnmenu and only use this if you know\nwhat you're doing because you can break a few things with it.",
    "functions": [
      {
        "name": "OpenMenu",
        "parent": "ContentHeader",
        "realms": [
          "client"
        ],
        "description": "Creates a <page>Global.DermaMenu</page> and adds a delete option before opening the menu",
        "arguments": [
          {
            "name": "style",
            "type": "string",
            "description": ""
          },
          {
            "name": "hookname",
            "type": "string",
            "default": "PopulateContent",
            "description": "A Populate Hook like PopulateEntities"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contentheader.lua",
          "lineStart": 96,
          "lineEnd": 105
        }
      },
      {
        "name": "ToTable",
        "parent": "ContentHeader",
        "realms": [
          "client"
        ],
        "description": "",
        "arguments": [
          {
            "name": "bigtable",
            "type": "table",
            "description": ""
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contentheader.lua",
          "lineStart": 44,
          "lineEnd": 53
        }
      }
    ]
  },
  {
    "name": "ContentIcon",
    "parent": "DButton",
    "description": "The spawn icon used for SWEPs and other SENTs, commonly featured as part of the spawn menu.\nDo note that at least one of your ContentIcon's parents must either be an <page>EditablePanel</page> or derived from it\n(like a <page>DFrame</page>, for example), else it won't be able to focus and thus be unclickable.\n\nThis control only exists in Sandbox derived gamemodes.",
    "functions": [
      {
        "name": "GetColor",
        "parent": "ContentIcon",
        "realms": [
          "client"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns the color set by <page>ContentIcon:SetColor</page>",
        "returnValues": [
          {
            "type": "table",
            "description": "See <page>Color</page>"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contenticon.lua",
          "lineStart": 13
        }
      },
      {
        "name": "GetContentType",
        "parent": "ContentIcon",
        "realms": [
          "client"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns the content type used to save and restore the content icon in a spawnlist.",
        "returnValues": [
          {
            "type": "string",
            "description": "The content type, for example \"entity\" or \"weapon\"."
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contenticon.lua",
          "lineStart": 14
        }
      },
      {
        "name": "GetNPCWeapon",
        "parent": "ContentIcon",
        "realms": [
          "client"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns a table of weapon classes for the content icon with \"NPC\" content type to be randomly chosen from when user tries to spawn the NPC.",
        "returnValues": [
          {
            "type": "table",
            "description": "A table of weapon classes to be chosen from when user tries to spawn the NPC."
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contenticon.lua",
          "lineStart": 16
        }
      },
      {
        "name": "GetSpawnName",
        "parent": "ContentIcon",
        "realms": [
          "client"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns the internal \"name\" for the content icon, usually a class name for an entity.",
        "returnValues": [
          {
            "type": "string",
            "description": "Internal \"name\" to be used when user left clicks the icon."
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contenticon.lua",
          "lineStart": 15
        }
      },
      {
        "name": "OpenMenu",
        "parent": "ContentIcon",
        "realms": [
          "client"
        ],
        "description": "A hook for override, by default does nothing. Called when user right clicks on the content icon, you are supposed to open a <page>Global.DermaMenu</page> here with additional options.",
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contenticon.lua",
          "lineStart": 104,
          "lineEnd": 105
        }
      },
      {
        "name": "SetAdminOnly",
        "parent": "ContentIcon",
        "realms": [
          "client"
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets whether the content item is admin only. This makes the icon to display a admin icon in the top left corner of the icon.",
        "arguments": [
          {
            "name": "adminOnly",
            "type": "boolean",
            "description": "Whether this content should be admin only or not"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contenticon.lua",
          "lineStart": 17
        }
      },
      {
        "name": "SetColor",
        "parent": "ContentIcon",
        "realms": [
          "client"
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the color for the content icon. Currently is not used by the content icon panel.",
        "arguments": [
          {
            "name": "clr",
            "type": "table",
            "description": "The color to set. See <page>Color</page>"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contenticon.lua",
          "lineStart": 13
        }
      },
      {
        "name": "SetContentType",
        "parent": "ContentIcon",
        "realms": [
          "client"
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the content type used to save and restore the content icon in a spawnlist.",
        "arguments": [
          {
            "name": "type",
            "type": "string",
            "description": "The content type, for example \"entity\" or \"weapon\""
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contenticon.lua",
          "lineStart": 14
        }
      },
      {
        "name": "SetMaterial",
        "parent": "ContentIcon",
        "realms": [
          "client"
        ],
        "description": "Sets the material to be displayed as the content icon.",
        "arguments": [
          {
            "name": "path",
            "type": "string",
            "description": "Path to the icon to use."
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contenticon.lua",
          "lineStart": 66,
          "lineEnd": 88
        }
      },
      {
        "name": "SetName",
        "parent": "ContentIcon",
        "realms": [
          "client"
        ],
        "description": "Sets the tool tip and the \"nice\" name to be displayed by the content icon.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "\"Nice\" name to display."
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contenticon.lua",
          "lineStart": 58,
          "lineEnd": 64
        }
      },
      {
        "name": "SetNPCWeapon",
        "parent": "ContentIcon",
        "realms": [
          "client"
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets a table of weapon classes for the content icon with \"NPC\" content type to be randomly chosen from when user tries to spawn the NPC.",
        "arguments": [
          {
            "name": "weapons",
            "type": "table",
            "description": "A table of weapon classes to be chosen from when user tries to spawn the NPC."
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contenticon.lua",
          "lineStart": 16
        }
      },
      {
        "name": "SetSpawnName",
        "parent": "ContentIcon",
        "realms": [
          "client"
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the internal \"name\" for the content icon, usually a class name for an entity.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "Internal \"name\" to be used when user left clicks the icon."
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contenticon.lua",
          "lineStart": 15
        }
      }
    ]
  },
  {
    "name": "ContentSidebar",
    "parent": "DPanel",
    "description": "<internal></internal>\n\nThe ContentSidebar is internally used by the spawnmenu and manages things like the Spawnmenu Toolbar.\nIt internally uses a DTree which is accessible with ContentSidebar .Tree.\nWhen <page>ContentSidebar:EnableModify</page> has been called ContentSidebar.Toolbox will return a <page>ContentSidebarToolbox</page>",
    "functions": [
      {
        "name": "CreateSaveNotification",
        "parent": "ContentSidebar",
        "realms": [
          "client"
        ],
        "description": "Creates a Save Notification which will be shown when <page>SANDBOX:SpawnlistContentChanged</page> has been called.",
        "arguments": [
          {
            "name": "style",
            "type": "string",
            "description": ""
          },
          {
            "name": "hookname",
            "type": "string",
            "default": "PopulateContent",
            "description": "A Populate Hook like PopulateEntities"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contentsidebar.lua",
          "lineStart": 42,
          "lineEnd": 84
        }
      },
      {
        "name": "EnableModify",
        "parent": "ContentSidebar",
        "realms": [
          "client"
        ],
        "description": "Internally calls <page>ContentSidebar:EnableSearch</page>, <page>ContentSidebar:CreateSaveNotification</page> and creates a ContentSidebarToolbox which is accessible under ContentSidebar.Toolbox. Call the Hook <page>SANDBOX:OpenToolbox</page> to open the created Toolbox",
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contentsidebar.lua",
          "lineStart": 25,
          "lineEnd": 40
        }
      },
      {
        "name": "EnableSearch",
        "parent": "ContentSidebar",
        "realms": [
          "client"
        ],
        "description": "Creates a search bar which will be displayed over the Nodes.",
        "arguments": [
          {
            "name": "style",
            "type": "string",
            "description": ""
          },
          {
            "name": "hookname",
            "type": "string",
            "default": "PopulateContent",
            "description": "A Populate Hook like PopulateEntities"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contentsidebar.lua",
          "lineStart": 20,
          "lineEnd": 23
        }
      }
    ]
  },
  {
    "name": "ContentSidebarToolbox",
    "parent": "DDrawer",
    "description": "<internal></internal>\nThe ContentSidebarToolbox is internally used by the <page>ContentSidebar</page> and is used to change the icon of a category.\nIt internally consists of a <page>DTextEntry</page>, <page>DPanel</page>, <page>DImageButton</page>, <page>Panel</page>, <page>ContentHeader</page> and a <page>DIconBrowser</page>"
  },
  {
    "name": "ContextBase",
    "parent": "Panel",
    "description": "A base for all context menu panels ( The ones used for tool options in sandbox )",
    "functions": [
      {
        "name": "ControlValues",
        "parent": "ContextBase",
        "realms": [
          "client"
        ],
        "description": "Called by spawnmenu functions (when creating a context menu) to fill this control with data.",
        "arguments": [
          {
            "name": "contextData",
            "type": "table",
            "description": "A two-membered table:\n* <page>string</page> convar - The console variable to use. Calls <page>ContextBase:SetConVar</page>.\n* <page>string</page> label - The text to display inside the control's label."
          }
        ],
        "source": {
          "file": "lua/vgui/contextbase.lua",
          "lineStart": 20,
          "lineEnd": 25
        }
      },
      {
        "name": "ConVar",
        "parent": "ContextBase",
        "realms": [
          "client"
        ],
        "description": "Returns the <page>ConVar</page> for the panel to change/handle, set by <page>ContextBase:SetConVar</page>",
        "returnValues": [
          {
            "type": "string",
            "description": "The <page>ConVar</page> for the panel to change."
          }
        ],
        "source": {
          "file": "lua/vgui/contextbase.lua",
          "lineStart": 16,
          "lineEnd": 18
        }
      },
      {
        "name": "SetConVar",
        "parent": "ContextBase",
        "realms": [
          "client"
        ],
        "description": "Sets the <page>ConVar</page> for the panel to change/handle.",
        "arguments": [
          {
            "name": "cvar",
            "type": "string",
            "description": "The <page>ConVar</page> for the panel to change."
          }
        ],
        "source": {
          "file": "lua/vgui/contextbase.lua",
          "lineStart": 12,
          "lineEnd": 14
        }
      },
      {
        "name": "TestForChanges",
        "parent": "ContextBase",
        "realms": [
          "client"
        ],
        "description": "You should override this function and use it to check whether your convar value changed.",
        "source": {
          "file": "lua/vgui/contextbase.lua",
          "lineStart": 40,
          "lineEnd": 45
        }
      }
    ]
  },
  {
    "name": "ControlPanel",
    "parent": "DForm",
    "description": "Used by the context menu in sandbox.",
    "functions": [
      {
        "name": "AddControl",
        "parent": "ControlPanel",
        "realms": [
          "client"
        ],
        "description": "<deprecated>It is recommended to use <page>DForm</page>'s members instead.</deprecated>\n\nAdds a control to the control panel.",
        "arguments": [
          {
            "name": "type",
            "type": "string",
            "description": "The control type to add. The complete list is:\n* header\n* textbox\n* label\n* checkbox/toggle\n* slider\n* propselect\n* matselect\n* ropematerial\n* button\n* numpad\n* color\n* combobox\n* listbox\n* materialgallery"
          },
          {
            "name": "controlinfo",
            "type": "table",
            "description": "Each control takes their own table structure. You may search \"AddControl\" on GitHub for examples.\n\nHere is a full list of each type and the table members it requires:\n\n* header\n* description\n\n* textbox:\n* label (def: \"Untitled\")\n* command\n\n* label:\n* text\n\n* checkbox, toggle (same thing):\n* label (def: \"Untitled\")\n* command\n* help (boolean, if true assumes label is a language string (`#tool.toolname.stuff`) and adds `.help` at the end)\n\n* slider: (<page>DForm:NumSlider</page>)\n* type (optional string, if equals `float` then 2 digits after the decimal will be used, otherwise 0)\n* label (def: `Untitled`)\n* command\n* min (def: `0`)\n* max (def: `100`)\n* help (boolean, see above)\n\n* propselect:\n* (data goes directly to PropSelect's :ControlValues(data))\n\n* matselect:\n* (data goes directly to MatSelect's :ControlValues(data))\n\n* ropematerial:\n* convar (notice: NOT called command this time!)\n\n* button:\n* label / text (if label is missing will use text. Def: `No Label`)\n* command\n\n* numpad:\n* command\n* command2\n* label\n* label2\n\n* color:\n* label\n* red (convar)\n* green (convar)\n* blue (convar)\n* alpha (convar)\n\n* combobox:\n* menubutton (if doesn't equal \"1\", becomes a listbox)\n* folder\n* options (optional, ha)\n* cvars (optional)\n\n* listbox:\n* height (if set, becomes <page>DListView</page>, otherwise is <page>CtrlListBox</page>)\n* label (def: `unknown`)\n* options (optional)\n\n* materialgallery:\n* width (def: `32`)\n* height (def: `32`)\n* rows (def: `4`)\n* convar\n* options"
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "Returns created control"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controlpanel.lua",
          "lineStart": 148,
          "lineEnd": 431
        }
      },
      {
        "name": "AddPanel",
        "parent": "ControlPanel",
        "realms": [
          "client"
        ],
        "description": "Adds an item by calling <page>DForm:AddItem</page>.",
        "arguments": [
          {
            "name": "panel",
            "type": "Panel",
            "description": "Panel to add as an item to the control panel."
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controlpanel.lua",
          "lineStart": 29,
          "lineEnd": 34
        }
      },
      {
        "name": "ClearControls",
        "parent": "ControlPanel",
        "realms": [
          "client"
        ],
        "description": "<deprecated></deprecated>\n\nAlias of <page>Panel:Clear</page>.",
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controlpanel.lua",
          "lineStart": 19,
          "lineEnd": 21
        }
      },
      {
        "name": "ColorPicker",
        "parent": "ControlPanel",
        "realms": [
          "client"
        ],
        "description": "Creates a <page>CtrlColor</page> (a color picker) panel and adds it as an <page text=\"item\">ControlPanel:AddPanel</page>.",
        "arguments": [
          {
            "name": "label",
            "type": "string",
            "description": "The label for this color picker."
          },
          {
            "name": "convarR",
            "type": "string",
            "description": "Name of the <page>convar</page> that will store the R component of the selected color."
          },
          {
            "name": "convarG",
            "type": "string",
            "description": "Name of the <page>convar</page> that will store the G component of the selected color."
          },
          {
            "name": "convarB",
            "type": "string",
            "description": "Name of the <page>convar</page> that will store the B component of the selected color."
          },
          {
            "name": "convarA",
            "type": "string",
            "description": "Name of the <page>convar</page> that will store the A component of the selected color."
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "The created <page>CtrlColor</page> panel."
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controlpanel.lua",
          "lineStart": 94,
          "lineEnd": 113
        }
      },
      {
        "name": "ControlValues",
        "parent": "ControlPanel",
        "realms": [
          "client"
        ],
        "description": "Sets control values of the control panel.",
        "arguments": [
          {
            "name": "data",
            "type": "table",
            "description": "A two-membered table:\n* <page>boolean</page> closed - Sets if the control panel should be unexpanded.\n* <page>string</page> label - The text to display inside the control's label."
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controlpanel.lua",
          "lineStart": 138,
          "lineEnd": 145
        }
      },
      {
        "name": "FillViaFunction",
        "parent": "ControlPanel",
        "realms": [
          "client"
        ],
        "description": "Calls the given function with this panel as the only argument. Used by the spawnmenu to populate the control panel.\n\n<deprecated>This is dumb. Just call the builder function directly.</deprecated>",
        "arguments": [
          {
            "name": "func",
            "type": "function",
            "description": "The builder function.\n\n<callback>\n<arg type=\"ControlPanel\" name=\"panelToPopulate\"></arg>\n</callback>"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controlpanel.lua",
          "lineStart": 132,
          "lineEnd": 136
        }
      },
      {
        "name": "GetEmbeddedPanel",
        "parent": "ControlPanel",
        "realms": [
          "client"
        ],
        "description": "Returns this control panel.",
        "returnValues": [
          {
            "type": "ControlPanel",
            "description": "The same control panel the function is being called on."
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controlpanel.lua",
          "lineStart": 23,
          "lineEnd": 27
        }
      },
      {
        "name": "KeyBinder",
        "parent": "ControlPanel",
        "realms": [
          "client"
        ],
        "description": "Creates a <page>CtrlNumPad</page> (a Sandbox key binder) panel and adds it as an <page text=\"item\">ControlPanel:AddPanel</page>.",
        "arguments": [
          {
            "name": "label1",
            "type": "string",
            "description": "The label for the left key binder."
          },
          {
            "name": "convar1",
            "type": "string",
            "description": "The name of the <page>convar</page> that will store the key code for player selected key of the left key binder."
          },
          {
            "name": "label2",
            "type": "string",
            "default": "nil",
            "description": "If set and `convar2` is set, the label for the right key binder."
          },
          {
            "name": "convar2",
            "type": "string",
            "default": "nil",
            "description": "If set and `label2` is set, the name of the <page>convar</page> that will store the key code for player selected key of the right key binder."
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "The created <page>CtrlNumPad</page> panel."
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controlpanel.lua",
          "lineStart": 76,
          "lineEnd": 92
        }
      },
      {
        "name": "MatSelect",
        "parent": "ControlPanel",
        "realms": [
          "client"
        ],
        "description": "Creates a <page>MatSelect</page> panel and adds it as an <page text=\"item\">ControlPanel:AddPanel</page>.",
        "arguments": [
          {
            "name": "convar",
            "type": "string",
            "description": "Calls <page>MatSelect</page>:<page text=\"SetConVar\">ContextBase:SetConVar</page> with this value."
          },
          {
            "name": "options",
            "type": "table",
            "default": "nil",
            "description": "If specified, calls <page>MatSelect:AddMaterial</page>(key, value) for each table entry. If the table key is a number, the function will instead be called with the value as both arguments."
          },
          {
            "name": "autostretch",
            "type": "boolean",
            "default": "nil",
            "description": "If specified, calls <page>MatSelect:SetAutoHeight</page> with this value."
          },
          {
            "name": "width",
            "type": "number",
            "default": "nil",
            "description": "If specified, calls <page>MatSelect:SetItemWidth</page> with this value."
          },
          {
            "name": "height",
            "type": "number",
            "default": "nil",
            "description": "If specified, calls <page>MatSelect:SetItemHeight</page> with this value."
          }
        ],
        "returnValues": [
          {
            "type": "MatSelect",
            "description": "The created MatSelect panel."
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controlpanel.lua",
          "lineStart": 36,
          "lineEnd": 57
        }
      },
      {
        "name": "ToolPresets",
        "parent": "ControlPanel",
        "realms": [
          "client"
        ],
        "description": "Creates a <page>ControlPresets</page> panel and adds it as an <page text=\"item\">ControlPanel:AddPanel</page>.",
        "arguments": [
          {
            "name": "group",
            "type": "string",
            "description": "The <page text=\"preset\">presets</page> group. Must be unique."
          },
          {
            "name": "cvarList",
            "type": "table",
            "description": "A table of <page>convar</page> names as keys and their defaults as the values. Typically the output of <page>Tool:BuildConVarList</page>."
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "The created <page>ControlPresets</page> panel."
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controlpanel.lua",
          "lineStart": 59,
          "lineEnd": 74
        }
      }
    ]
  },
  {
    "name": "ControlPresets",
    "parent": "Panel",
    "description": "A preset manager, found at the top of almost every default tool's C-menu.\n\nThis control only exists in Sandbox derived gamemodes.",
    "functions": [
      {
        "name": "AddConVar",
        "parent": "ControlPresets",
        "realms": [
          "client"
        ],
        "description": "Adds a convar to be managed by this control.",
        "arguments": [
          {
            "name": "convar",
            "type": "string",
            "description": "The convar to add."
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controls/control_presets.lua",
          "lineStart": 110,
          "lineEnd": 114
        }
      },
      {
        "name": "AddOption",
        "parent": "ControlPresets",
        "realms": [
          "client"
        ],
        "description": "Adds option to the <page>DComboBox</page> subelement with <page>DComboBox:AddChoice</page> then adds it to the `options` subtable",
        "arguments": [
          {
            "name": "strName",
            "type": "string",
            "description": "Name"
          },
          {
            "name": "data",
            "type": "any",
            "description": "data"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controls/control_presets.lua",
          "lineStart": 48,
          "lineEnd": 54
        }
      },
      {
        "name": "Clear",
        "parent": "ControlPresets",
        "realms": [
          "client"
        ],
        "description": "Runs <page>Panel:Clear</page> on the Internal <page>DComboBox</page>",
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controls/control_presets.lua",
          "lineStart": 48,
          "lineEnd": 54
        }
      },
      {
        "name": "GetConVars",
        "parent": "ControlPresets",
        "realms": [
          "client"
        ],
        "description": "Get a list of all Console Variables being managed by this panel.",
        "returnValues": [
          {
            "type": "table",
            "description": "numbered table of convars"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controls/control_presets.lua",
          "lineStart": 116,
          "lineEnd": 120
        }
      },
      {
        "name": "OnSelect",
        "parent": "ControlPresets",
        "realms": [
          "client"
        ],
        "description": "Checks if Data is valid then uses <page>Global.pairs</page> to iterate over the data parameter and run each entry using <page>Global.RunConsoleCommand</page>\n<validate>Index and Value parameters appear to not be used. Further testing should be done to confirm </validate>",
        "arguments": [
          {
            "name": "index",
            "type": "number",
            "description": "Name"
          },
          {
            "name": "value",
            "type": "any",
            "description": ""
          },
          {
            "name": "data",
            "type": "table",
            "description": ""
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controls/control_presets.lua",
          "lineStart": 62,
          "lineEnd": 70
        }
      },
      {
        "name": "OpenPresetEditor",
        "parent": "ControlPresets",
        "realms": [
          "client"
        ],
        "description": "Creates and opens <page>PresetEditor</page>",
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controls/control_presets.lua",
          "lineStart": 97,
          "lineEnd": 108
        }
      },
      {
        "name": "QuickSaveInternal",
        "parent": "ControlPresets",
        "realms": [
          "client"
        ],
        "arguments": [
          {
            "name": "text",
            "type": "string",
            "description": ""
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controls/control_presets.lua",
          "lineStart": 72,
          "lineEnd": 80
        }
      },
      {
        "name": "QuickSavePreset",
        "parent": "ControlPresets",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controls/control_presets.lua",
          "lineStart": 82,
          "lineEnd": 95
        }
      },
      {
        "name": "ReloadPresets",
        "parent": "ControlPresets",
        "realms": [
          "client"
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controls/control_presets.lua",
          "lineStart": 129,
          "lineEnd": 149
        }
      },
      {
        "name": "SetLabel",
        "parent": "ControlPresets",
        "realms": [
          "client"
        ],
        "description": "Set the name label text.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "The text to put in the label"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controls/control_presets.lua",
          "lineStart": 42,
          "lineEnd": 46
        }
      },
      {
        "name": "SetOptions",
        "parent": "ControlPresets",
        "realms": [
          "client"
        ],
        "description": "Uses <page>table.Merge</page> to combine the provided table into the `Options` subtable",
        "arguments": [
          {
            "name": "Options",
            "type": "table",
            "description": "Options"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controls/control_presets.lua",
          "lineStart": 56,
          "lineEnd": 60
        }
      },
      {
        "name": "SetPreset",
        "parent": "ControlPresets",
        "realms": [
          "client"
        ],
        "arguments": [
          {
            "name": "strName",
            "type": "string",
            "description": "Name of preset to set"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controls/control_presets.lua",
          "lineStart": 122,
          "lineEnd": 127
        }
      },
      {
        "name": "Update",
        "parent": "ControlPresets",
        "realms": [
          "client"
        ],
        "description": "Alias of <page>ControlPresets:ReloadPresets</page>",
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/controls/control_presets.lua",
          "lineStart": 48,
          "lineEnd": 54
        }
      }
    ]
  },
  {
    "name": "CtrlListBox",
    "parent": "DComboBox",
    "description": "A <page>DComboBox</page> based dropdown menu with build in easy <page>ConVar</page> support.\n\nThis control only exists in Sandbox derived gamemodes."
  },
  {
    "name": "DAdjustableModelPanel",
    "parent": "DModelPanel",
    "description": "A derivative of the DModelPanel in which the user may modify the perspective of the model with their mouse and keyboard by clicking and dragging.\n\nThe keyboard keys <key>W</key> <key>S</key> <key>A</key> <key>D</key> <key>Up</key> <key>Down</key> <key>Left</key> <key>Right</key> <key>Space</key> and <key>Ctrl</key> can be used when the right mouse is held down, with <key>Shift</key> acting as a speed multiplier. When the left mouse is used, the Shift key holds the current `y` angle steady.\n\nThis is used by <page>IconEditor</page> for modifying spawn icons.",
    "functions": [
      {
        "name": "CaptureMouse",
        "parent": "DAdjustableModelPanel",
        "realms": [
          "client"
        ],
        "description": "<internal></internal> Used by the panel to perform mouse capture operations when adjusting the model.",
        "source": {
          "file": "lua/vgui/dadjustablemodelpanel.lua",
          "lineStart": 61,
          "lineEnd": 75
        }
      },
      {
        "name": "FirstPersonControls",
        "parent": "DAdjustableModelPanel",
        "realms": [
          "client"
        ],
        "description": "<internal></internal> Used to adjust the perspective in the model panel via the keyboard, when the right mouse button is used.",
        "source": {
          "file": "lua/vgui/dadjustablemodelpanel.lua",
          "lineStart": 92,
          "lineEnd": 146
        }
      },
      {
        "name": "GetFirstPerson",
        "parent": "DAdjustableModelPanel",
        "realms": [
          "client"
        ],
        "description": "Gets whether mouse and keyboard-based adjustment of the perspective has been enabled. See <page>DAdjustableModelPanel:SetFirstPerson</page> for more information.\n\nThis is an <page>Global.AccessorFunc</page>",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether first person controls are enabled. See <page>DAdjustableModelPanel:FirstPersonControls</page>."
          }
        ],
        "source": {
          "file": "lua/vgui/dadjustablemodelpanel.lua",
          "lineStart": 4
        }
      },
      {
        "name": "GetMovementScale",
        "parent": "DAdjustableModelPanel",
        "realms": [
          "client"
        ],
        "description": "Returns the movement speed multiplier set by <page>DAdjustableModelPanel:SetMovementScale</page>.\n\nAn <page>Global.AccessorFunc</page>",
        "returnValues": [
          {
            "type": "number",
            "description": "The movement scale, where `1` is normal, `2` is double, etc."
          }
        ],
        "source": {
          "file": "lua/vgui/dadjustablemodelpanel.lua",
          "lineStart": 5
        }
      },
      {
        "name": "SetFirstPerson",
        "parent": "DAdjustableModelPanel",
        "realms": [
          "client"
        ],
        "description": "Enables mouse and keyboard-based adjustment of the perspective.\n\nThis is set to `true` automatically each time mouse capture is enabled, and hence doesn't serve as a usable setting, other than to disable this functionality after the <page>PANEL:OnMousePressed</page> event.\n\nAn <page>Global.AccessorFunc</page>",
        "arguments": [
          {
            "name": "enable",
            "type": "boolean",
            "description": "Whether to enable/disable first person controls. See <page>DAdjustableModelPanel:FirstPersonControls</page>."
          }
        ],
        "source": {
          "file": "lua/vgui/dadjustablemodelpanel.lua",
          "lineStart": 4
        }
      },
      {
        "name": "SetMovementScale",
        "parent": "DAdjustableModelPanel",
        "realms": [
          "client"
        ],
        "description": "Sets the movement speed multiplier. Currently this only affects first person camera controls.",
        "arguments": [
          {
            "name": "",
            "type": "number",
            "description": "The movement scale, where `1` is normal, `2` is double, etc."
          }
        ],
        "source": {
          "file": "lua/vgui/dadjustablemodelpanel.lua",
          "lineStart": 5
        }
      }
    ]
  },
  {
    "name": "DAlphaBar",
    "parent": "DPanel",
    "description": "A bar to select the opacity (alpha level) of a color.",
    "functions": [
      {
        "name": "GetBarColor",
        "parent": "DAlphaBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the base color of the alpha bar. This is the color for which the alpha channel is being modified. An <page>Global.AccessorFunc</page>",
        "returnValues": [
          {
            "type": "table",
            "description": "The current base color."
          }
        ],
        "source": {
          "file": "lua/vgui/dalphabar.lua",
          "lineStart": 8
        }
      },
      {
        "name": "GetValue",
        "parent": "DAlphaBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the alpha value of the alpha bar. An <page>Global.AccessorFunc</page>",
        "returnValues": [
          {
            "type": "number",
            "description": "The current alpha value."
          }
        ],
        "source": {
          "file": "lua/vgui/dalphabar.lua",
          "lineStart": 7
        }
      },
      {
        "name": "OnChange",
        "parent": "DAlphaBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when user changes the desired alpha value with the control. This function is meant to be overridden",
        "arguments": [
          {
            "name": "alpha",
            "type": "number",
            "description": "The new alpha value"
          }
        ],
        "source": {
          "file": "lua/vgui/dalphabar.lua",
          "lineStart": 45,
          "lineEnd": 46
        }
      },
      {
        "name": "SetBarColor",
        "parent": "DAlphaBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the base color of the alpha bar. This is the color for which the alpha channel is being modified. An <page>Global.AccessorFunc</page>",
        "arguments": [
          {
            "name": "clr",
            "type": "table",
            "description": "The new <page>Color</page> to set. See <page>Global.Color</page>."
          }
        ],
        "source": {
          "file": "lua/vgui/dalphabar.lua",
          "lineStart": 8
        }
      },
      {
        "name": "SetValue",
        "parent": "DAlphaBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the alpha value or the alpha bar. An <page>Global.AccessorFunc</page>",
        "arguments": [
          {
            "name": "alpha",
            "type": "number",
            "description": "The new alpha value to set"
          }
        ],
        "source": {
          "file": "lua/vgui/dalphabar.lua",
          "lineStart": 7
        }
      }
    ]
  },
  {
    "name": "DBinder",
    "parent": "DButton",
    "description": "Input which can bind a command to a key. Used for binding inputs and outputs of TOOLs.",
    "functions": [
      {
        "name": "GetSelectedNumber",
        "parent": "DBinder",
        "realms": [
          "client"
        ],
        "description": "Gets the code of the key currently bound by the DBinder. Same as <page>DBinder:GetValue</page>. An <page>Global.AccessorFunc</page>",
        "returnValues": [
          {
            "type": "number",
            "description": "The key code of the bound key. See <page>Enums/KEY</page>."
          }
        ],
        "source": {
          "file": "lua/vgui/dbinder.lua",
          "lineStart": 4
        }
      },
      {
        "name": "GetValue",
        "parent": "DBinder",
        "realms": [
          "client"
        ],
        "description": "Gets the code of the key currently bound by the DBinder. Same as <page>DBinder:GetSelectedNumber</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The key code of the bound key. See <page>Enums/KEY</page>."
          }
        ],
        "source": {
          "file": "lua/vgui/dbinder.lua",
          "lineStart": 83,
          "lineEnd": 87
        }
      },
      {
        "name": "OnChange",
        "parent": "DBinder",
        "realms": [
          "client"
        ],
        "description": "Called when the player selects a new bind. Meant to be Overridden",
        "arguments": [
          {
            "name": "iNum",
            "type": "number",
            "description": "The new bound key. See <page>input.GetKeyName</page>."
          }
        ],
        "source": {
          "file": "lua/vgui/dbinder.lua",
          "lineStart": 89,
          "lineEnd": 90
        }
      },
      {
        "name": "SetSelectedNumber",
        "parent": "DBinder",
        "realms": [
          "client"
        ],
        "description": "Sets the current key bound by the <page>DBinder</page>, and updates the button's text as well as the <page>ConVar</page>.",
        "arguments": [
          {
            "name": "keyCode",
            "type": "number",
            "description": "The key code of the key to bind. See <page>Enums/KEY</page>."
          }
        ],
        "source": {
          "file": "lua/vgui/dbinder.lua",
          "lineStart": 41,
          "lineEnd": 48
        }
      },
      {
        "name": "SetValue",
        "parent": "DBinder",
        "realms": [
          "client"
        ],
        "description": "Alias of <page>DBinder:SetSelectedNumber</page>.",
        "arguments": [
          {
            "name": "keyCode",
            "type": "number",
            "description": "The key code of the key to bind. See <page>Enums/KEY</page>."
          }
        ],
        "source": {
          "file": "lua/vgui/dbinder.lua",
          "lineStart": 77,
          "lineEnd": 81
        }
      },
      {
        "name": "UpdateText",
        "parent": "DBinder",
        "realms": [
          "client"
        ],
        "description": "<internal></internal> Used to set the text of the DBinder to the current key binding, or `NONE`.",
        "source": {
          "file": "lua/vgui/dbinder.lua",
          "lineStart": 15,
          "lineEnd": 24
        }
      }
    ]
  },
  {
    "name": "DBubbleContainer",
    "parent": "DPanel",
    "description": "A transparent gray speech bubble panel made up of a rounded box and point coming from the bottom.",
    "functions": [
      {
        "name": "GetBackgroundColor",
        "parent": "DBubbleContainer",
        "realms": [
          "client"
        ],
        "description": "Returns Background Color, See <page>DBubbleContainer:SetBackgroundColor</page>",
        "source": {
          "file": "lua/vgui/dbubblecontainer.lua",
          "lineStart": 4
        }
      },
      {
        "name": "OpenForPos",
        "parent": "DBubbleContainer",
        "realms": [
          "client"
        ],
        "description": "Sets the speech bubble position and size along with the dialog point position.",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "description": "The x position of the dialog point. If this is set to a value greater than half of the set width, the entire bubble container will be moved in addition to the dialog point."
          },
          {
            "name": "y",
            "type": "number",
            "description": "The y position of the bubble container. Has no effect unless set to a value greater than the set height + 64 pixels."
          },
          {
            "name": "w",
            "type": "number",
            "description": "The width of the bubble container."
          },
          {
            "name": "h",
            "type": "number",
            "description": "The height of the bubble container."
          }
        ],
        "source": {
          "file": "lua/vgui/dbubblecontainer.lua",
          "lineStart": 14,
          "lineEnd": 29
        }
      },
      {
        "name": "SetBackgroundColor",
        "parent": "DBubbleContainer",
        "realms": [
          "client"
        ],
        "description": "Sets Background Color, See Also <page>DBubbleContainer:GetBackgroundColor</page>",
        "arguments": [
          {
            "name": "color",
            "type": "Color",
            "description": "The New Color"
          }
        ],
        "source": {
          "file": "lua/vgui/dbubblecontainer.lua",
          "lineStart": 4
        }
      }
    ]
  },
  {
    "name": "DButton",
    "parent": "DLabel",
    "description": "A standard Derma button.\n\nBy default, a <page>DButton</page> is 22px tall.",
    "functions": [
      {
        "name": "GetDrawBorder",
        "parent": "DButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\nAn <page>Global.AccessorFunc</page> that returns value set by <page>DButton:SetDrawBorder</page>. See that page for more info.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "value set by <page>DButton:SetDrawBorder</page>."
          }
        ],
        "source": {
          "file": "lua/vgui/dbutton.lua",
          "lineStart": 4
        }
      },
      {
        "name": "IsDown",
        "parent": "DButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns true if the DButton is currently depressed (a user is clicking on it).",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether or not the button is depressed."
          }
        ],
        "source": {
          "file": "lua/vgui/dbutton.lua",
          "lineStart": 26,
          "lineEnd": 30
        }
      },
      {
        "name": "SetConsoleCommand",
        "parent": "DButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets a console command to be called when the button is clicked.\n\nThis overrides the button's `DoClick` method.",
        "arguments": [
          {
            "name": "command",
            "type": "string",
            "description": "The console command to be called."
          },
          {
            "name": "args",
            "type": "string",
            "default": "nil",
            "description": "The arguments for the command."
          }
        ],
        "source": {
          "file": "lua/vgui/dbutton.lua",
          "lineStart": 129,
          "lineEnd": 135
        }
      },
      {
        "name": "SetDrawBorder",
        "parent": "DButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nDoes absolutely nothing at all. Default value is automatically set to true.",
        "arguments": [
          {
            "name": "draw",
            "type": "boolean",
            "description": "Does nothing."
          }
        ],
        "source": {
          "file": "lua/vgui/dbutton.lua",
          "lineStart": 4
        }
      },
      {
        "name": "SetIcon",
        "parent": "DButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets an image to be displayed as the button's background. Alias of <page>DButton:SetImage</page>",
        "arguments": [
          {
            "name": "img",
            "type": "string",
            "default": "nil",
            "description": "The image file to use, relative to `/materials`. If this is nil, the image background is removed."
          }
        ],
        "source": {
          "file": "lua/vgui/dbutton.lua",
          "lineStart": 52
        }
      },
      {
        "name": "SetImage",
        "parent": "DButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets an image to be displayed as the button's background.\n\nSee <page>DButton:SetMaterial</page> for equivalent function that uses <page>IMaterial</page> instead.\n\nAlso see: <page>DImageButton</page>",
        "arguments": [
          {
            "name": "img",
            "type": "string",
            "default": "nil",
            "description": "The image file to use, relative to `/materials`. If this is nil, the image background is removed."
          }
        ],
        "source": {
          "file": "lua/vgui/dbutton.lua",
          "lineStart": 32,
          "lineEnd": 52
        }
      },
      {
        "name": "SetMaterial",
        "parent": "DButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets an image to be displayed as the button's background.\n\nSee <page>DButton:SetImage</page> for equivalent function that uses file paths instead. Also see <page>DImageButton</page>.",
        "arguments": [
          {
            "name": "img",
            "type": "IMaterial",
            "default": "nil",
            "description": "The material to use. If this is nil, the image background is removed."
          }
        ],
        "source": {
          "file": "lua/vgui/dbutton.lua",
          "lineStart": 54,
          "lineEnd": 73
        }
      },
      {
        "name": "UpdateColours",
        "parent": "DButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "A hook called from within <page>DLabel</page>'s <page>PANEL:ApplySchemeSettings</page> to determine the color of the text on display.",
        "arguments": [
          {
            "name": "skin",
            "type": "table",
            "description": "A table supposed to contain the color values listed above."
          }
        ],
        "source": {
          "file": "lua/vgui/dbutton.lua",
          "lineStart": 86,
          "lineEnd": 94
        }
      }
    ]
  },
  {
    "name": "DCategoryHeader",
    "parent": "DButton",
    "description": "<internal></internal>\n\nUsed by <page>DCollapsibleCategory</page>"
  },
  {
    "name": "DCategoryList",
    "parent": "DScrollPanel",
    "description": "A host for multiple <page>DCollapsibleCategory</page> panels.\nAs the name suggests, each one of them can be collapsed or expanded on demand by the user.",
    "functions": [
      {
        "name": "Add",
        "parent": "DCategoryList",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Adds a <page>DCollapsibleCategory</page> to the list.",
        "arguments": [
          {
            "name": "categoryName",
            "type": "string",
            "description": "The name of the category to add."
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "The created <page>DCollapsibleCategory</page>"
          }
        ],
        "source": {
          "file": "lua/vgui/dcategorylist.lua",
          "lineStart": 18,
          "lineEnd": 28
        }
      },
      {
        "name": "AddItem",
        "parent": "DCategoryList",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Adds an element to the list.",
        "arguments": [
          {
            "name": "element",
            "type": "Panel",
            "description": "VGUI element to add to the list."
          }
        ],
        "source": {
          "file": "lua/vgui/dcategorylist.lua",
          "lineStart": 10,
          "lineEnd": 16
        }
      },
      {
        "name": "UnselectAll",
        "parent": "DCategoryList",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Calls <page>Panel:UnselectAll</page> on all child elements, if they have it.",
        "source": {
          "file": "lua/vgui/dcategorylist.lua",
          "lineStart": 37,
          "lineEnd": 47
        }
      }
    ]
  },
  {
    "name": "DCheckBox",
    "parent": "DButton",
    "description": "The DCheckBox is a checkbox. It allows you to get a boolean value from the user (true/false - yes/no)",
    "functions": [
      {
        "name": "DoClick",
        "parent": "DCheckBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Calls <page>DCheckBox:Toggle</page>",
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineStart": 39,
          "lineEnd": 43
        }
      },
      {
        "name": "GetChecked",
        "parent": "DCheckBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that gets the checked state of the checkbox.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the box is checked or not."
          }
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineStart": 4
        }
      },
      {
        "name": "IsEditing",
        "parent": "DCheckBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether the state of the checkbox is being edited. This means whether the user is currently clicking (mouse-down) on the checkbox, and applies to both the left and right mouse buttons.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the checkbox is being clicked."
          }
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineStart": 19,
          "lineEnd": 21
        }
      },
      {
        "name": "OnChange",
        "parent": "DCheckBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the \"checked\" state is changed. This is for Overriding",
        "arguments": [
          {
            "name": "bVal",
            "type": "boolean",
            "description": "Whether the CheckBox is checked or not."
          }
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineStart": 51,
          "lineEnd": 55
        }
      },
      {
        "name": "SetChecked",
        "parent": "DCheckBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the checked state of the checkbox. Does not call the checkbox's <page>DCheckBox:OnChange</page> and <page>Panel:ConVarChanged</page> methods, unlike <page>DCheckBox:SetValue</page>.",
        "arguments": [
          {
            "name": "checked",
            "type": "boolean",
            "description": "Whether the box should be checked or not."
          }
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineStart": 4
        }
      },
      {
        "name": "SetValue",
        "parent": "DCheckBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the checked state of the checkbox, and calls the checkbox's <page>DCheckBox:OnChange</page> and <page>Panel:ConVarChanged</page> methods.",
        "arguments": [
          {
            "name": "checked",
            "type": "boolean",
            "description": "Whether the box should be checked or not."
          }
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineStart": 23,
          "lineEnd": 37
        }
      },
      {
        "name": "Toggle",
        "parent": "DCheckBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Toggles the checked state of the checkbox, and calls the checkbox's <page>DCheckBox:OnChange</page> and <page>Panel:ConVarChanged</page> methods. <page>DCheckBox:DoClick</page> is an alias of this function.",
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineStart": 45,
          "lineEnd": 49
        }
      }
    ]
  },
  {
    "name": "DCheckBoxLabel",
    "parent": "DPanel",
    "description": "The **DCheckBoxLabel** is a <page>DCheckBox</page> with a <page>DLabel</page> next to it.\nIt allows you to get a boolean value from the user (true/false - yes/no)",
    "functions": [
      {
        "name": "GetChecked",
        "parent": "DCheckBoxLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Gets the checked state of the checkbox. This calls the checkbox's <page>DCheckBox:GetChecked</page> function.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the box is checked or not."
          }
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineStart": 114,
          "lineEnd": 116
        }
      },
      {
        "name": "GetIndent",
        "parent": "DCheckBoxLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that gets the indentation of the element on the X axis. See also <page>DCheckBoxLabel:SetIndent</page>",
        "returnValues": [
          {
            "type": "number",
            "description": "How much the content is moved to the right in pixels"
          }
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineStart": 81
        }
      },
      {
        "name": "OnChange",
        "parent": "DCheckBoxLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the \"checked\" state is changed. This is meant to be Overriden",
        "arguments": [
          {
            "name": "bVal",
            "type": "boolean",
            "description": "Whether the checkbox is checked or unchecked."
          }
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineStart": 179,
          "lineEnd": 183
        }
      },
      {
        "name": "SetBright",
        "parent": "DCheckBoxLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the color of the <page>DCheckBoxLabel</page>'s text to the bright text color defined in the skin.",
        "arguments": [
          {
            "name": "bright",
            "type": "boolean",
            "description": "true makes the text bright."
          }
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineStart": 98,
          "lineEnd": 100
        }
      },
      {
        "name": "SetChecked",
        "parent": "DCheckBoxLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the checked state of the checkbox. Does not call <page>DCheckBoxLabel:OnChange</page> or <page>Panel:ConVarChanged</page>, unlike <page>DCheckBoxLabel:SetValue</page>.",
        "arguments": [
          {
            "name": "checked",
            "type": "boolean",
            "description": "Whether the box should be checked or not."
          }
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineStart": 110,
          "lineEnd": 112
        }
      },
      {
        "name": "SetConVar",
        "parent": "DCheckBoxLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the console variable to be set when the checked state of the <page>DCheckBoxLabel</page> changes.",
        "arguments": [
          {
            "name": "convar",
            "type": "string",
            "description": "The name of the convar to set"
          }
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineStart": 102,
          "lineEnd": 104
        }
      },
      {
        "name": "SetDark",
        "parent": "DCheckBoxLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the text of the <page>DCheckBoxLabel</page> to be dark colored in accordance with the currently active Derma skin.",
        "arguments": [
          {
            "name": "darkify",
            "type": "boolean",
            "description": "True to be dark, false to be default"
          }
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineStart": 94,
          "lineEnd": 96
        }
      },
      {
        "name": "SetFont",
        "parent": "DCheckBoxLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the font of the text part of the <page>DCheckBoxLabel</page>.",
        "arguments": [
          {
            "name": "font",
            "type": "string",
            "description": "Font name"
          }
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineStart": 156,
          "lineEnd": 161
        }
      },
      {
        "name": "SetIndent",
        "parent": "DCheckBoxLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the indentation of the element on the X axis.",
        "arguments": [
          {
            "name": "ident",
            "type": "number",
            "description": "How much in pixels to move the content to the right"
          }
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineStart": 81
        }
      },
      {
        "name": "SetTextColor",
        "parent": "DCheckBoxLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the text color for the <page>DCheckBoxLabel</page>.",
        "arguments": [
          {
            "name": "color",
            "type": "table",
            "description": "The text color. Uses the <page>Color</page>."
          }
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineStart": 134,
          "lineEnd": 138
        }
      },
      {
        "name": "SetValue",
        "parent": "DCheckBoxLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the checked state of the checkbox, and calls <page>DCheckBoxLabel:OnChange</page> and the checkbox's <page>Panel:ConVarChanged</page> methods.",
        "arguments": [
          {
            "name": "checked",
            "type": "boolean",
            "description": "Whether the box should be checked or not (1 or 0 can also be used)."
          }
        ],
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineStart": 106,
          "lineEnd": 108
        }
      },
      {
        "name": "SizeToContents",
        "parent": "DCheckBoxLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sizes the panel to the size of the internal DLabel and DButton",
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineStart": 140,
          "lineEnd": 147
        }
      },
      {
        "name": "Toggle",
        "parent": "DCheckBoxLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Toggles the checked state of the <page>DCheckBoxLabel</page>.",
        "source": {
          "file": "lua/vgui/dcheckbox.lua",
          "lineStart": 118,
          "lineEnd": 120
        }
      }
    ]
  },
  {
    "name": "DCollapsibleCategory",
    "parent": "Panel",
    "description": "The collapsible category allows you to create numerous sections of controls, and have the ability to contract/expand them.\n\nConsider using <page>DCategoryList</page> if you plan on using more than 1 of these.",
    "functions": [
      {
        "name": "Add",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Adds a new text button to the collapsible category, like the tool menu in Spawnmenu.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "The name of the button"
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "The <page>DButton</page>"
          }
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 75,
          "lineEnd": 122
        }
      },
      {
        "name": "AnimSlide",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nInternal function that handles the open/close animations.",
        "arguments": [
          {
            "name": "anim",
            "type": "table",
            "description": ""
          },
          {
            "name": "delta",
            "type": "number",
            "description": ""
          },
          {
            "name": "data",
            "type": "table",
            "description": ""
          }
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 281,
          "lineEnd": 307
        }
      },
      {
        "name": "DoExpansion",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Forces the category to open or collapse",
        "arguments": [
          {
            "name": "expand",
            "type": "boolean",
            "description": "True to open, false to collapse"
          }
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 233,
          "lineEnd": 238
        }
      },
      {
        "name": "GetAnimTime",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns the expand/collapse animation time set by <page>DCollapsibleCategory:SetAnimTime</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The animation time in seconds"
          }
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 50
        }
      },
      {
        "name": "GetDrawBackground",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated>You should use <page>DCollapsibleCategory:GetPaintBackground</page> instead.</deprecated>\n\nReturns whether or not the panel background is being drawn. Alias of <page>DCollapsibleCategory:GetPaintBackground</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "True if the panel background is drawn, false otherwise."
          }
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 52
        }
      },
      {
        "name": "GetExpanded",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether the DCollapsibleCategory is expanded or not.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "If expanded it will return true."
          }
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 48
        }
      },
      {
        "name": "GetHeaderHeight",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the header height of the <page>DCollapsibleCategory</page>.\n\nSee also <page>DCollapsibleCategory:SetHeaderHeight</page>.",
        "returnValues": [
          {
            "type": "number",
            "name": "height",
            "description": "The current height of the header."
          }
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 162,
          "lineEnd": 166
        }
      },
      {
        "name": "GetList",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "description": "If set, the <page>DCategoryList</page> that created this panel.\n\nSee also <page>DCollapsibleCategory:SetList</page>.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "The <page>DCategoryList</page> that created us."
          }
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 54
        }
      },
      {
        "name": "GetPadding",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\nDoesn't actually do anything.\n\nReturns the number set by <page>DCollapsibleCategory:SetPadding</page>.",
        "returnValues": [
          {
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 53
        }
      },
      {
        "name": "GetPaintBackground",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns whether or not the background should be painted.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "If the background is painted or not"
          }
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 41
        }
      },
      {
        "name": "GetStartHeight",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\nReturns whatever was set by <page>DCollapsibleCategory:SetStartHeight</page>",
        "returnValues": [
          {
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 49
        }
      },
      {
        "name": "OnToggle",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called by <page>DCollapsibleCategory:Toggle</page>. This function does nothing by itself, as you're supposed to overwrite it.",
        "arguments": [
          {
            "name": "expanded",
            "type": "boolean",
            "description": "If it was expanded or not"
          }
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 227,
          "lineEnd": 231
        }
      },
      {
        "name": "SetAnimTime",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the time in seconds it takes to expand the DCollapsibleCategory",
        "arguments": [
          {
            "name": "time",
            "type": "number",
            "description": "The time in seconds it takes to expand"
          }
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 50
        }
      },
      {
        "name": "SetContents",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the contents of the DCollapsibleCategory.",
        "arguments": [
          {
            "name": "pnl",
            "type": "Panel",
            "description": "The panel, containing the contents for the DCollapsibleCategory, mostly an DScrollPanel"
          }
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 176,
          "lineEnd": 196
        }
      },
      {
        "name": "SetDrawBackground",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated>You should use <page>DCollapsibleCategory:SetPaintBackground</page> instead.</deprecated>Sets whether or not to draw the panel background. Alias of <page>DCollapsibleCategory:SetPaintBackground</page>.",
        "arguments": [
          {
            "name": "draw",
            "type": "boolean",
            "description": "True to show the panel's background, false to hide it."
          }
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 52
        }
      },
      {
        "name": "SetExpanded",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether the <page>DCollapsibleCategory</page> is expanded or not upon opening the container.\n\nYou should use <page>DCollapsibleCategory:Toggle</page> or <page>DCollapsibleCategory:DoExpansion</page> instead.",
        "arguments": [
          {
            "name": "expanded",
            "type": "boolean",
            "default": "true",
            "description": "Whether it shall be expanded or not by default"
          }
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 48
        }
      },
      {
        "name": "SetHeaderHeight",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the header height of the <page>DCollapsibleCategory</page>.\n\nSee also <page>DCollapsibleCategory:GetHeaderHeight</page>.",
        "arguments": [
          {
            "name": "height",
            "type": "number",
            "description": "The new height to set. Default height is 20."
          }
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 156,
          "lineEnd": 160
        }
      },
      {
        "name": "SetLabel",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the name of the DCollapsibleCategory.",
        "arguments": [
          {
            "name": "label",
            "type": "string",
            "description": "The label/name of the DCollapsibleCategory."
          }
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 150,
          "lineEnd": 154
        }
      },
      {
        "name": "SetList",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Used internally by <page>DCategoryList</page> when it creates a <page>DCollapsibleCategory</page> during <page>DCategoryList:Add</page>.\n\nIf set, <page>Panel:UnselectAll</page> will be called on the list, instead of calling it on the category panel itself when a category is clicked.",
        "arguments": [
          {
            "name": "pnl",
            "type": "Panel",
            "description": "The <page>Panel:UnselectAll</page> that is the \"parent\" of this panel."
          }
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 54
        }
      },
      {
        "name": "SetPadding",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\nDoesn't actually do anything.",
        "arguments": [
          {
            "name": "padding",
            "type": "number",
            "description": ""
          }
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 53
        }
      },
      {
        "name": "SetPaintBackground",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether or not the background should be painted.",
        "arguments": [
          {
            "name": "paint",
            "type": "boolean",
            "description": ""
          }
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 51
        }
      },
      {
        "name": "SetStartHeight",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\nDoes nothing.",
        "arguments": [
          {
            "name": "height",
            "type": "number",
            "description": ""
          }
        ],
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 49
        }
      },
      {
        "name": "Toggle",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Toggles the expanded state of the <page>DCollapsibleCategory</page>.\n\nSee <page>DCollapsibleCategory:GetExpanded</page> for a function to retrieve the expanded state.",
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 209,
          "lineEnd": 225
        }
      },
      {
        "name": "UpdateAltLines",
        "parent": "DCollapsibleCategory",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nUsed internally to update the \"AltLine\" property on all \"child\" panels.",
        "source": {
          "file": "lua/vgui/dcategorycollapse.lua",
          "lineStart": 136,
          "lineEnd": 142
        }
      }
    ]
  },
  {
    "name": "DColorButton",
    "parent": "DLabel",
    "description": "Colorful buttons. Used internally by <page>DColorPalette</page>.",
    "functions": [
      {
        "name": "GetColor",
        "parent": "DColorButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns the color of the button",
        "returnValues": [
          {
            "type": "table",
            "description": "The <page>Color</page> of the button"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorbutton.lua",
          "lineStart": 9
        }
      },
      {
        "name": "GetDrawBorder",
        "parent": "DColorButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\nAn <page>Global.AccessorFunc</page> that returns value set by <page>DColorButton:SetDrawBorder</page>. See that page for more info.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Value set by <page>DColorButton:SetDrawBorder</page>."
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorbutton.lua",
          "lineStart": 6
        }
      },
      {
        "name": "GetID",
        "parent": "DColorButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns the unique ID set by <page>DColorButton:SetID</page>.\n\nUsed internally by <page>DColorPalette</page>",
        "returnValues": [
          {
            "type": "number",
            "description": "The unique ID of the button"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorbutton.lua",
          "lineStart": 10
        }
      },
      {
        "name": "GetSelected",
        "parent": "DColorButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\nAn <page>Global.AccessorFunc</page> that is an alias of <page>Panel:IsSelected</page>.",
        "returnValues": [
          {
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorbutton.lua",
          "lineStart": 7
        }
      },
      {
        "name": "IsDown",
        "parent": "DColorButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether the <page>DColorButton</page> is currently being pressed (the user is holding it down).",
        "returnValues": [
          {
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorbutton.lua",
          "lineStart": 24,
          "lineEnd": 28
        }
      },
      {
        "name": "SetColor",
        "parent": "DColorButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the color of the <page>DColorButton</page>.",
        "arguments": [
          {
            "name": "color",
            "type": "table",
            "description": "A <page>Color</page> to set the color as"
          },
          {
            "name": "noTooltip",
            "type": "boolean",
            "default": "false",
            "description": "If true, the tooltip will not be reset to display the selected color."
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorbutton.lua",
          "lineStart": 30,
          "lineEnd": 41
        }
      },
      {
        "name": "SetDrawBorder",
        "parent": "DColorButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nAn <page>Global.AccessorFunc</page> that does absolutely nothing at all. Default value is automatically set to true.",
        "arguments": [
          {
            "name": "draw",
            "type": "boolean",
            "description": "Does nothing."
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorbutton.lua",
          "lineStart": 6
        }
      },
      {
        "name": "SetID",
        "parent": "DColorButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that is used internally by <page>DColorPalette</page> to detect which button is which.\n\nPairs with <page>DColorButton:GetID</page>",
        "arguments": [
          {
            "name": "id",
            "type": "number",
            "description": "A unique ID to give this button"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorbutton.lua",
          "lineStart": 10
        }
      }
    ]
  },
  {
    "name": "DColorCombo",
    "parent": "DPropertySheet",
    "description": "The **DColorCombo** allows the user to choose color, without alpha,\nusing <page>DColorMixer</page> or <page>DColorPalette</page> in a tabbed view.",
    "functions": [
      {
        "name": "BuildControls",
        "parent": "DColorCombo",
        "realms": [
          "client"
        ],
        "description": "<internal></internal>\n\nCalled internally to create panels necessary for this panel to work.",
        "source": {
          "file": "lua/vgui/dcolorcombo.lua",
          "lineStart": 14,
          "lineEnd": 55
        }
      },
      {
        "name": "GetColor",
        "parent": "DColorCombo",
        "realms": [
          "client"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns the color of the <page>DColorCombo</page>.",
        "returnValues": [
          {
            "type": "table",
            "description": "A <page>Color</page>"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorcombo.lua",
          "lineStart": 4
        }
      },
      {
        "name": "IsEditing",
        "parent": "DColorCombo",
        "realms": [
          "client"
        ],
        "description": "Returns true if the panel is currently being edited\n\nMore of a internal method, it technically should only ever work (i.e. return true) inside <page>DColorCombo:OnValueChanged</page>.",
        "returnValues": [
          {
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorcombo.lua",
          "lineStart": 57,
          "lineEnd": 61
        }
      },
      {
        "name": "OnValueChanged",
        "parent": "DColorCombo",
        "realms": [
          "client"
        ],
        "description": "Called when the value (color) of this panel was changed. For override",
        "arguments": [
          {
            "name": "newcol",
            "type": "table",
            "description": ""
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorcombo.lua",
          "lineStart": 63,
          "lineEnd": 67
        }
      },
      {
        "name": "SetColor",
        "parent": "DColorCombo",
        "realms": [
          "client"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns the color of this panel. See also <page>DColorCombo:GetColor</page>",
        "arguments": [
          {
            "name": "clr",
            "type": "table",
            "description": "A <page>Color</page>."
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorcombo.lua",
          "lineStart": 69,
          "lineEnd": 75
        }
      }
    ]
  },
  {
    "name": "DColorCube",
    "parent": "DSlider",
    "description": "The DColorCube allows a user to select saturation and value but not hue. Uses HSV colors",
    "functions": [
      {
        "name": "GetBaseRGB",
        "parent": "DColorCube",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns the base Color set by <page>DColorCube:SetBaseRGB</page>.",
        "returnValues": [
          {
            "type": "table",
            "description": "A <page>Color</page>"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorcube.lua",
          "lineStart": 5
        }
      },
      {
        "name": "GetDefaultColor",
        "parent": "DColorCube",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns the color cube's default color. By default, it is set to white. (255 255 255 RGB)",
        "returnValues": [
          {
            "type": "table",
            "description": "The default <page>Color</page>."
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorcube.lua",
          "lineStart": 7
        }
      },
      {
        "name": "GetHue",
        "parent": "DColorCube",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\nAn <page>Global.AccessorFunc</page> that returns the value set by <page>DColorCube:SetHue</page>.",
        "returnValues": [
          {
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorcube.lua",
          "lineStart": 4
        }
      },
      {
        "name": "GetRGB",
        "parent": "DColorCube",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns the color cube's current set color.",
        "returnValues": [
          {
            "type": "table",
            "description": "The set color, uses <page>Color</page>."
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorcube.lua",
          "lineStart": 6
        }
      },
      {
        "name": "OnUserChanged",
        "parent": "DColorCube",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Function which is called when the color cube slider is moved (through user input). Meant to be overridden.",
        "arguments": [
          {
            "name": "color",
            "type": "table",
            "description": "The new color, uses <page>Color</page>."
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorcube.lua",
          "lineStart": 89,
          "lineEnd": 93
        }
      },
      {
        "name": "ResetToDefaultValue",
        "parent": "DColorCube",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the color to whatever <page>DColorCube:GetDefaultColor</page> returns",
        "source": {
          "file": "lua/vgui/dcolorcube.lua",
          "lineStart": 43,
          "lineEnd": 48
        }
      },
      {
        "name": "SetBaseRGB",
        "parent": "DColorCube",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the base color and the color used to draw the color cube panel itself.\n\n<note>Calling this when using a color that isn't 100% saturated and valued (<page>Global.HSVToColor</page> with saturation and value set to 1) causes the color cube to look inaccurate compared to the color that's returned by methods like <page>DColorCube:GetRGB</page> and <page>DColorCube:OnUserChanged</page>. You should use <page>DColorCube:SetColor</page> instead</note>",
        "arguments": [
          {
            "name": "color",
            "type": "table",
            "description": "The base color to set, uses <page>Color</page>."
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorcube.lua",
          "lineStart": 107,
          "lineEnd": 112
        }
      },
      {
        "name": "SetColor",
        "parent": "DColorCube",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the base color of the color cube and updates the slider position.",
        "arguments": [
          {
            "name": "color",
            "type": "table",
            "description": "The color to set, uses <page>Color</page>."
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorcube.lua",
          "lineStart": 95,
          "lineEnd": 105
        }
      },
      {
        "name": "SetDefaultColor",
        "parent": "DColorCube",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the color cube's default color. This value will be used to reset to on middle mouse click of the color cube's draggable slider.",
        "arguments": [
          {
            "name": "",
            "type": "table",
            "description": "The new default <page>Color</page>."
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorcube.lua",
          "lineStart": 7
        }
      },
      {
        "name": "SetHue",
        "parent": "DColorCube",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\nAn <page>Global.AccessorFunc</page> that appears to do nothing and unused.",
        "arguments": [
          {
            "name": "hue",
            "type": "number",
            "description": ""
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorcube.lua",
          "lineStart": 4
        }
      },
      {
        "name": "SetRGB",
        "parent": "DColorCube",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nAn <page>Global.AccessorFunc</page> that used internally to set the real \"output\" color of the panel.",
        "arguments": [
          {
            "name": "clr",
            "type": "table",
            "description": "A <page>Color</page>"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorcube.lua",
          "lineStart": 6
        }
      },
      {
        "name": "TranslateValues",
        "parent": "DColorCube",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nUpdates the color cube RGB based on the given x and y position and returns its arguments. Similar to <page>DColorCube:UpdateColor</page>.",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "default": "nil",
            "description": "The x position to sample color from/the percentage of saturation to remove from the color (ranges from 0.0 to 1.0)."
          },
          {
            "name": "y",
            "type": "number",
            "default": "nil",
            "description": "The y position to sample color from/the percentage of brightness or value to remove from the color (ranges from 0.0 to 1.0)."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The given x position."
          },
          {
            "type": "number",
            "description": "The given y position."
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorcube.lua",
          "lineStart": 65,
          "lineEnd": 72
        }
      },
      {
        "name": "UpdateColor",
        "parent": "DColorCube",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nUpdates the color cube RGB based on the given x and y position. Similar to <page>DColorCube:TranslateValues</page>.",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "default": "nil",
            "description": "The x position to set color to/the percentage of saturation to remove from the color (ranges from 0.0 to 1.0)."
          },
          {
            "name": "y",
            "type": "number",
            "default": "nil",
            "description": "The y position to set color to/the percentage of brightness or value to remove from the color (ranges from 0.0 to 1.0)."
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorcube.lua",
          "lineStart": 74,
          "lineEnd": 87
        }
      }
    ]
  },
  {
    "name": "DColorMixer",
    "parent": "DPanel",
    "description": "A standard Derma color mixer",
    "functions": [
      {
        "name": "ConVarThink",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>",
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 341,
          "lineEnd": 360
        }
      },
      {
        "name": "DoConVarThink",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>",
        "arguments": [
          {
            "name": "cvar",
            "type": "string",
            "description": ""
          }
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 362,
          "lineEnd": 374
        }
      },
      {
        "name": "GetAlphaBar",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns true if alpha bar is shown, false if not.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true if shown, false if not."
          }
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 10
        }
      },
      {
        "name": "GetColor",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns the current selected color.",
        "returnValues": [
          {
            "type": "table",
            "description": "The current selected color as a <page>Color</page>."
          }
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 317,
          "lineEnd": 326
        }
      },
      {
        "name": "GetConVarA",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns the <page>ConVar</page> name for the alpha channel of the color.\n\nSee also:\n* <page>DColorMixer:GetConVarR</page> - For the red channel\n* <page>DColorMixer:GetConVarG</page> - For the green channel\n* <page>DColorMixer:GetConVarB</page> - For the blue channel",
        "returnValues": [
          {
            "type": "string",
            "description": "The <page>ConVar</page> name for the alpha channel of the color"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 7
        }
      },
      {
        "name": "GetConVarB",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns the <page>ConVar</page> name for the blue channel of the color.\n\nSee also:\n* <page>DColorMixer:GetConVarR</page> - For the red channel\n* <page>DColorMixer:GetConVarG</page> - For the green channel\n* <page>DColorMixer:GetConVarA</page> - For the alpha channel",
        "returnValues": [
          {
            "type": "string",
            "description": "The <page>ConVar</page> name for the blue channel of the color"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 6
        }
      },
      {
        "name": "GetConVarG",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns the <page>ConVar</page> name for the green channel of the color.\n\nSee also:\n* <page>DColorMixer:GetConVarR</page> - For the red channel\n* <page>DColorMixer:GetConVarB</page> - For the blue channel\n* <page>DColorMixer:GetConVarA</page> - For the alpha channel",
        "returnValues": [
          {
            "type": "string",
            "description": "The <page>ConVar</page> name for the green channel of the color"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 5
        }
      },
      {
        "name": "GetConVarR",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns the <page>ConVar</page> name for the red channel of the color.\n\nSee also:\n* <page>DColorMixer:GetConVarG</page> - For the green channel\n* <page>DColorMixer:GetConVarB</page> - For the blue channel\n* <page>DColorMixer:GetConVarA</page> - For the alpha channel",
        "returnValues": [
          {
            "type": "string",
            "description": "The <page>ConVar</page> name for the red channel of the color"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 4
        }
      },
      {
        "name": "GetPalette",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns true if palette is shown, false if not.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true if shown, false if not."
          }
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 9
        }
      },
      {
        "name": "GetVector",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the color as a normalized <page>Vector</page>.",
        "returnValues": [
          {
            "type": "Vector",
            "description": "A vector representing the color of the <page>DColorMixer</page>, each value being in range of 0 to 1. Alpha is not included."
          }
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 328,
          "lineEnd": 333
        }
      },
      {
        "name": "GetWangs",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns true if the wangs are shown, false if not.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true if shown, false if not."
          }
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 11
        }
      },
      {
        "name": "SetAlphaBar",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that show/hide the alpha bar in DColorMixer",
        "arguments": [
          {
            "name": "show",
            "type": "boolean",
            "description": "Show / Hide the alpha bar"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 166,
          "lineEnd": 173
        }
      },
      {
        "name": "SetBaseColor",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the base color of the <page>DColorCube</page> part of the <page>DColorMixer</page>.\n\nSee also <page>DColorCube:SetBaseRGB</page>",
        "arguments": [
          {
            "name": "clr",
            "type": "table",
            "description": "<page>Color</page>"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 252,
          "lineEnd": 255
        }
      },
      {
        "name": "SetColor",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the color of the <page>DColorMixer</page>. See also <page>DColorMixer:GetColor</page>",
        "arguments": [
          {
            "name": "color",
            "type": "table",
            "description": "The color to set. See <page>Global.Color</page>"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 13
        }
      },
      {
        "name": "SetConVarA",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the <page>ConVar</page> name for the alpha channel of the color.\n\nSee also:\n* <page>DColorMixer:SetConVarR</page> - For the red channel\n* <page>DColorMixer:SetConVarG</page> - For the green channel\n* <page>DColorMixer:SetConVarB</page> - For the blue channel",
        "arguments": [
          {
            "name": "convar",
            "type": "string",
            "description": "The <page>ConVar</page> name for the alpha channel of the color"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 198,
          "lineEnd": 202
        }
      },
      {
        "name": "SetConVarB",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the <page>ConVar</page> name for the blue channel of the color.\n\nSee also:\n* <page>DColorMixer:SetConVarR</page> - For the red channel\n* <page>DColorMixer:SetConVarG</page> - For the green channel\n* <page>DColorMixer:SetConVarA</page> - For the alpha channel",
        "arguments": [
          {
            "name": "convar",
            "type": "string",
            "description": "The <page>ConVar</page> name for the blue channel of the color"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 193,
          "lineEnd": 196
        }
      },
      {
        "name": "SetConVarG",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the <page>ConVar</page> name for the green channel of the color.\n\nSee also:\n* <page>DColorMixer:SetConVarR</page> - For the red channel\n* <page>DColorMixer:SetConVarB</page> - For the blue channel\n* <page>DColorMixer:SetConVarA</page> - For the alpha channel",
        "arguments": [
          {
            "name": "convar",
            "type": "string",
            "description": "The <page>ConVar</page> name for the green channel of the color"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 188,
          "lineEnd": 191
        }
      },
      {
        "name": "SetConVarR",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the <page>ConVar</page> name for the red channel of the color.\n\nSee also:\n* <page>DColorMixer:SetConVarG</page> - For the green channel\n* <page>DColorMixer:SetConVarB</page> - For the blue channel\n* <page>DColorMixer:SetConVarA</page> - For the alpha channel",
        "arguments": [
          {
            "name": "convar",
            "type": "string",
            "description": "The <page>ConVar</page> name for the red channel of the color"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 183,
          "lineEnd": 186
        }
      },
      {
        "name": "SetLabel",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the label's text to show.",
        "arguments": [
          {
            "name": "text",
            "type": "string",
            "default": "nil",
            "description": "Set to non empty string to show the label and its text.\n\nGive it an empty string or nothing and the label will be hidden."
          }
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 144,
          "lineEnd": 156
        }
      },
      {
        "name": "SetPalette",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Show or hide the palette panel",
        "arguments": [
          {
            "name": "enabled",
            "type": "boolean",
            "description": "Show or hide the palette panel?"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 158,
          "lineEnd": 164
        }
      },
      {
        "name": "SetVector",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the color of <page>DColorMixer</page> from a <page>Vector</page>. Alpha is not included.",
        "arguments": [
          {
            "name": "vec",
            "type": "Vector",
            "description": "The color to set. It is expected that the vector will have values be from 0 to 1. (i.e. be normalized)"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 246,
          "lineEnd": 250
        }
      },
      {
        "name": "SetWangs",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Show / Hide the colors indicators in DColorMixer",
        "arguments": [
          {
            "name": "show",
            "type": "boolean",
            "description": "Show / Hide the colors indicators"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 175,
          "lineEnd": 181
        }
      },
      {
        "name": "UpdateColor",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nUse <page>DColorMixer:SetColor</page> instead!",
        "arguments": [
          {
            "name": "clr",
            "type": "table",
            "description": ""
          }
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 277,
          "lineEnd": 311
        }
      },
      {
        "name": "UpdateConVar",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>",
        "arguments": [
          {
            "name": "cvar",
            "type": "string",
            "description": "The <page>ConVar</page> name"
          },
          {
            "name": "part",
            "type": "string",
            "description": "The color part to set the cvar to. \"r\", \"g\", \"b\" or \"a\"."
          },
          {
            "name": "clr",
            "type": "table",
            "description": "The <page>Color</page>"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 257,
          "lineEnd": 264
        }
      },
      {
        "name": "UpdateConVars",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>",
        "arguments": [
          {
            "name": "clr",
            "type": "table",
            "description": "The <page>Color</page>"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 266,
          "lineEnd": 275
        }
      },
      {
        "name": "UpdateDefaultColor",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "sets the default color of the element to the currently selected color",
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 204,
          "lineEnd": 222
        }
      },
      {
        "name": "ValueChanged",
        "parent": "DColorMixer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the player changes the color of the <page>DColorMixer</page>. Meant to be overridden.\n\n<bug>The returned color will not have the color metatable.</bug>",
        "arguments": [
          {
            "name": "col",
            "type": "table",
            "description": "The new color. See <page>Color</page>"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolormixer.lua",
          "lineStart": 313,
          "lineEnd": 315
        }
      }
    ]
  },
  {
    "name": "DColorPalette",
    "parent": "DIconLayout",
    "description": "The **DColorPalette** allows the player to select a color from a list of given colors.\nThis panel supports saving across sessions via the panel cookie system.\nUse <page>Panel:SetCookieName</page> to change \"save files\".",
    "functions": [
      {
        "name": "DoClick",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\nBasically the same functionality as <page>DColorPalette:OnValueChanged</page>, you should use that instead!\n\nFor Override",
        "arguments": [
          {
            "name": "clr",
            "type": "table",
            "description": "The new color via the <page>Color</page>"
          },
          {
            "name": "btn",
            "type": "Panel",
            "description": "The <page>DColorButton</page> that was pressed."
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineStart": 121,
          "lineEnd": 125
        }
      },
      {
        "name": "GetButtonSize",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns the size of each palette button. Set by <page>DColorPalette:SetButtonSize</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The size of each palette button"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineStart": 11
        }
      },
      {
        "name": "GetConVarA",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns the <page>ConVar</page> name for the alpha channel of the color.\n\nSee also:\n* <page>DColorPalette:GetConVarR</page> - For the red channel\n* <page>DColorPalette:GetConVarG</page> - For the green channel\n* <page>DColorPalette:GetConVarB</page> - For the blue channel",
        "returnValues": [
          {
            "type": "string",
            "description": "The <page>ConVar</page> name for the alpha channel of the color"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineStart": 9
        }
      },
      {
        "name": "GetConVarB",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns the <page>ConVar</page> name for the blue channel of the color.\n\nSee also:\n* <page>DColorPalette:GetConVarR</page> - For the red channel\n* <page>DColorPalette:GetConVarG</page> - For the green channel\n* <page>DColorPalette:GetConVarA</page> - For the alpha channel",
        "returnValues": [
          {
            "type": "string",
            "description": "The <page>ConVar</page> name for the blue channel of the color"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineStart": 8
        }
      },
      {
        "name": "GetConVarG",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns the <page>ConVar</page> name for the green channel of the color.\n\nSee also:\n* <page>DColorPalette:GetConVarR</page> - For the red channel\n* <page>DColorPalette:GetConVarB</page> - For the blue channel\n* <page>DColorPalette:GetConVarA</page> - For the alpha channel",
        "returnValues": [
          {
            "type": "string",
            "description": "The <page>ConVar</page> name for the green channel of the color"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineStart": 7
        }
      },
      {
        "name": "GetConVarR",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns the <page>ConVar</page> name for the red channel of the color.\n\nSee also:\n* <page>DColorPalette:GetConVarG</page> - For the green channel\n* <page>DColorPalette:GetConVarB</page> - For the blue channel\n* <page>DColorPalette:GetConVarA</page> - For the alpha channel",
        "returnValues": [
          {
            "type": "string",
            "description": "The <page>ConVar</page> name for the red channel of the color"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineStart": 6
        }
      },
      {
        "name": "GetNumRows",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns the number of rows of the palette, provided 6 colors fill each row. This value is equal to the number of colors in the DColorPalette divided by 6.",
        "returnValues": [
          {
            "type": "number",
            "description": "Number of rows of the DColorPalette."
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineStart": 13
        }
      },
      {
        "name": "NetworkColorChange",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nUsed internally to make sure changes on one palette affect other palettes with same name.",
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineStart": 103,
          "lineEnd": 119
        }
      },
      {
        "name": "OnRightClickButton",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when a palette button has been pressed. For Override",
        "arguments": [
          {
            "name": "pnl",
            "type": "Panel",
            "description": "The <page>DColorButton</page> that was pressed."
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineStart": 232,
          "lineEnd": 234
        }
      },
      {
        "name": "OnValueChanged",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the color is changed after clicking a new value. For Override",
        "arguments": [
          {
            "name": "newcol",
            "type": "table",
            "description": "The new color of the <page>DColorPalette</page>"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineStart": 228,
          "lineEnd": 230
        }
      },
      {
        "name": "Reset",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Resets this entire color palette to a default preset one, without saving.\n\nSee <page>DColorPalette:ResetSavedColors</page> for version that also saves the changes.",
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineStart": 127,
          "lineEnd": 131
        }
      },
      {
        "name": "ResetSavedColors",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Resets this entire color palette to a default preset one and saves the changes.\n\nSee <page>DColorPalette:Reset</page> for version that does not save the changes.",
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineStart": 133,
          "lineEnd": 148
        }
      },
      {
        "name": "SaveColor",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Saves the color of given button across sessions.\nThe color is saved as a panel cookie, see <page>Panel:SetCookie</page> and <page>Panel:SetCookieName</page>.\nIt is expected that the amount of colors per palette (<page>Panel:SetCookieName</page>) is the same every time.",
        "arguments": [
          {
            "name": "btn",
            "type": "Panel",
            "description": "The button to save the color of. Used to get the ID of the button."
          },
          {
            "name": "clr",
            "type": "table",
            "description": "The color to save to this button's index"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineStart": 210,
          "lineEnd": 222
        }
      },
      {
        "name": "SetButtonSize",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the size of each palette button.\n\nThis is best kept to such a number, where this equation would return a whole number:<br>\n`WidthOfColorPalette / ButtonSize= WholeNumber`\n\nIf not, there will be ugly whitespace on the right side of the panel.",
        "arguments": [
          {
            "name": "size",
            "type": "number",
            "description": "Sets the new size"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineStart": 181,
          "lineEnd": 191
        }
      },
      {
        "name": "SetColor",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nCurrently does nothing. Intended to \"select\" the color.",
        "arguments": [
          {
            "name": "clr",
            "type": "table",
            "description": ""
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineStart": 224,
          "lineEnd": 226
        }
      },
      {
        "name": "SetColorButtons",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Clears the palette and adds new buttons with given colors.",
        "arguments": [
          {
            "name": "tab",
            "type": "table",
            "description": "A number indexed table where each value is a <page>Color</page>"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineStart": 164,
          "lineEnd": 179
        }
      },
      {
        "name": "SetConVarA",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the <page>ConVar</page> name for the alpha channel of the color.\n\nSee also:\n* <page>DColorPalette:SetConVarR</page> - For the red channel\n* <page>DColorPalette:SetConVarG</page> - For the green channel\n* <page>DColorPalette:SetConVarB</page> - For the blue channel",
        "arguments": [
          {
            "name": "convar",
            "type": "string",
            "description": "The <page>ConVar</page> name for the alpha channel of the color"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineStart": 9
        }
      },
      {
        "name": "SetConVarB",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the <page>ConVar</page> name for the blue channel of the color.\n\nSee also:\n* <page>DColorPalette:SetConVarR</page> - For the red channel\n* <page>DColorPalette:SetConVarG</page> - For the green channel\n* <page>DColorPalette:SetConVarA</page> - For the alpha channel",
        "arguments": [
          {
            "name": "convar",
            "type": "string",
            "description": "The <page>ConVar</page> name for the blue channel of the color"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineStart": 8
        }
      },
      {
        "name": "SetConVarG",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the <page>ConVar</page> name for the green channel of the color.\n\nSee also:\n* <page>DColorPalette:SetConVarR</page> - For the red channel\n* <page>DColorPalette:SetConVarB</page> - For the blue channel\n* <page>DColorPalette:SetConVarA</page> - For the alpha channel",
        "arguments": [
          {
            "name": "convar",
            "type": "string",
            "description": "The <page>ConVar</page> name for the green channel of the color"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineStart": 7
        }
      },
      {
        "name": "SetConVarR",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the <page>ConVar</page> name for the red channel of the color.\n\nSee also:\n* <page>DColorPalette:SetConVarG</page> - For the green channel\n* <page>DColorPalette:SetConVarB</page> - For the blue channel\n* <page>DColorPalette:SetConVarA</page> - For the alpha channel",
        "arguments": [
          {
            "name": "convar",
            "type": "string",
            "description": "The <page>ConVar</page> name for the red channel of the color"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineStart": 6
        }
      },
      {
        "name": "SetNumRows",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Roughly sets the number of colors that can be picked by the user. If the DColorPalette is exactly 6 rows tall, this function will set the number of colors shown per row in the palette. This is an <page>Global.AccessorFunc</page>\n<note><page>DColorPalette:Reset</page> or <page>DColorPalette:ResetSavedColors</page> must be called after this function to apply changes.</note>",
        "arguments": [
          {
            "name": "rows",
            "type": "number",
            "description": "Scale for the range of colors that the user can pick. Default is 8."
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineStart": 13
        }
      },
      {
        "name": "UpdateConVar",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nInternal helper function for <page>DColorPalette:UpdateConVars</page>.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "The name of the console variable to set"
          },
          {
            "name": "key",
            "type": "string",
            "description": "The key of the 3rd argument to set the convar to\nPossible values: \"r\", \"g\", \"b\", \"a\""
          },
          {
            "name": "clr",
            "type": "table",
            "description": "The <page>Color</page> to retrieve the info from."
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineStart": 193,
          "lineEnd": 199
        }
      },
      {
        "name": "UpdateConVars",
        "parent": "DColorPalette",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nUpdates all the console variables set by <page>DColorPalette:SetConVarR</page> and so on with given color.\n\nCalled internally when a palette color is clicked.",
        "arguments": [
          {
            "name": "clr",
            "type": "table",
            "description": "A <page>Color</page>"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolorpalette.lua",
          "lineStart": 201,
          "lineEnd": 208
        }
      }
    ]
  },
  {
    "name": "DColumnSheet",
    "parent": "Panel",
    "description": "Similar to <page>DPropertySheet</page>, but with tabs on the left.",
    "functions": [
      {
        "name": "AddSheet",
        "parent": "DColumnSheet",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Adds a new column/tab.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "Name of the column/tab"
          },
          {
            "name": "pnl",
            "type": "Panel",
            "description": "Panel to be used as contents of the tab. This normally would be a <page>DPanel</page>"
          },
          {
            "name": "icon",
            "type": "string",
            "default": "nil",
            "description": "Icon for the tab. This will ideally be a <page text=\"silkicon\">Silkicons</page>, but any material name can be used."
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "A table containing the following keys:\n* <page>Panel</page> Tab - The created tab button that will switch to the given panel\n* <page>Panel</page> Panel - The given panel to switch to when the button is pressed"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolumnsheet.lua",
          "lineStart": 24,
          "lineEnd": 62
        }
      },
      {
        "name": "GetActiveButton",
        "parent": "DColumnSheet",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns the active button of this <page>DColumnSheet</page>.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "The active button"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolumnsheet.lua",
          "lineStart": 4
        }
      },
      {
        "name": "SetActiveButton",
        "parent": "DColumnSheet",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nAn <page>Global.AccessorFunc</page> that makes a button an active button for this <page>DColumnSheet</page>.",
        "arguments": [
          {
            "name": "active",
            "type": "Panel",
            "description": "The button to make active button"
          }
        ],
        "source": {
          "file": "lua/vgui/dcolumnsheet.lua",
          "lineStart": 64,
          "lineEnd": 83
        }
      },
      {
        "name": "UseButtonOnlyStyle",
        "parent": "DColumnSheet",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Makes the tabs/buttons show only the image and no text.",
        "source": {
          "file": "lua/vgui/dcolumnsheet.lua",
          "lineStart": 20,
          "lineEnd": 22
        }
      }
    ]
  },
  {
    "name": "DComboBox",
    "parent": "DButton",
    "description": "A field with multiple selectable values.",
    "functions": [
      {
        "name": "AddChoice",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Adds a choice to the combo box.",
        "arguments": [
          {
            "name": "value",
            "type": "string",
            "description": "The text show to the user."
          },
          {
            "name": "data",
            "type": "any",
            "default": "nil",
            "description": "The data accompanying this string. If left empty, the value argument is used instead.\n\nCan be accessed with the second argument of <page>DComboBox:GetSelected</page>, <page>DComboBox:GetOptionData</page> and as an argument of <page>DComboBox:OnSelect</page>."
          },
          {
            "name": "select",
            "type": "boolean",
            "default": "false",
            "description": "Should this be the default selected text show to the user or not."
          },
          {
            "name": "icon",
            "type": "string",
            "default": "nil",
            "description": "Adds an icon for this choice."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The index of the new option."
          }
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineStart": 138,
          "lineEnd": 158
        }
      },
      {
        "name": "AddSpacer",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Adds a spacer below the currently last item in the drop down. Recommended to use with <page>DComboBox:SetSortItems</page> set to `false`.",
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineStart": 132,
          "lineEnd": 136
        }
      },
      {
        "name": "CheckConVarChanges",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>Ran every frame to update the value of this panel to the value of the associated convar. See <page>Panel:SetConvar</page>.",
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineStart": 247,
          "lineEnd": 258
        }
      },
      {
        "name": "ChooseOption",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Selects a combo box option by its index and changes the text displayed at the top of the combo box.",
        "arguments": [
          {
            "name": "value",
            "type": "string",
            "description": "The text to display at the top of the combo box."
          },
          {
            "name": "index",
            "type": "number",
            "description": "The option index."
          }
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineStart": 85,
          "lineEnd": 97
        }
      },
      {
        "name": "ChooseOptionID",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Selects an option within a combo box based on its table index.",
        "arguments": [
          {
            "name": "index",
            "type": "number",
            "description": "Selects the option with given index."
          }
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineStart": 99,
          "lineEnd": 104
        }
      },
      {
        "name": "Clear",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Clears the combo box's text value, choices, and data values.",
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineStart": 29,
          "lineEnd": 40
        }
      },
      {
        "name": "CloseMenu",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Closes the combo box menu. Called when the combo box is clicked while open.",
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineStart": 236,
          "lineEnd": 244
        }
      },
      {
        "name": "GetOptionData",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns an option's data based on the given index.",
        "arguments": [
          {
            "name": "index",
            "type": "number",
            "description": "The option index."
          }
        ],
        "returnValues": [
          {
            "type": "any",
            "description": "The option's data value."
          }
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineStart": 48,
          "lineEnd": 52
        }
      },
      {
        "name": "GetOptionText",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns an option's text based on the given index.",
        "arguments": [
          {
            "name": "index",
            "type": "number",
            "description": "The option index."
          }
        ],
        "returnValues": [
          {
            "type": "string",
            "description": "The option's text value."
          }
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineStart": 42,
          "lineEnd": 46
        }
      },
      {
        "name": "GetOptionTextByData",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns an option's text based on the given data.",
        "arguments": [
          {
            "name": "data",
            "type": "string",
            "description": "The data to look up the name of.\n\nIf given a <page>number</page> and no matching data was found, the function will test given data against each <page>Global.tonumber</page>'d data entry."
          }
        ],
        "returnValues": [
          {
            "type": "string",
            "description": "The option's text value.\n\nIf no matching data was found, the data itself will be returned. If multiple identical data entries exist, the first instance will be returned."
          }
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineStart": 54,
          "lineEnd": 72
        }
      },
      {
        "name": "GetSelected",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the currently selected option's text and data",
        "returnValues": [
          {
            "type": "string",
            "description": "The option's text value."
          },
          {
            "type": "any",
            "description": "The option's stored data."
          }
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineStart": 112,
          "lineEnd": 118
        }
      },
      {
        "name": "GetSelectedID",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the index (ID) of the currently selected option.",
        "returnValues": [
          {
            "type": "number",
            "description": "The ID of the currently selected option."
          }
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineStart": 106,
          "lineEnd": 110
        }
      },
      {
        "name": "GetSortItems",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns an whether the items in the dropdown will be alphabetically sorted or not.\n\nSee <page>DComboBox:SetSortItems</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "True if enabled, false otherwise."
          }
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineStart": 8
        }
      },
      {
        "name": "IsMenuOpen",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether or not the combo box's menu is opened.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "True if the menu is open, false otherwise."
          }
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineStart": 170,
          "lineEnd": 174
        }
      },
      {
        "name": "OnMenuOpened",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the player opens the dropdown menu. For Override",
        "arguments": [
          {
            "name": "menu",
            "type": "Panel",
            "description": "The <page>DMenu</page> menu panel."
          }
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineStart": 126,
          "lineEnd": 130
        }
      },
      {
        "name": "OnSelect",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when an option in the combo box is selected. This function does nothing by itself, you're supposed to overwrite it.",
        "arguments": [
          {
            "name": "index",
            "type": "number",
            "description": "The index of the option for use with other <page>DComboBox</page> functions."
          },
          {
            "name": "value",
            "type": "string",
            "description": "The name of the option."
          },
          {
            "name": "data",
            "type": "any",
            "description": "The data assigned to the option."
          }
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineStart": 120,
          "lineEnd": 124
        }
      },
      {
        "name": "OpenMenu",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Opens the combo box drop down menu. Called when the combo box is clicked.",
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineStart": 176,
          "lineEnd": 234
        }
      },
      {
        "name": "RemoveChoice",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Removes a choice added with <page>DComboBox:AddChoice</page>",
        "arguments": [
          {
            "name": "index",
            "type": "number",
            "description": "The index of the option to remove."
          }
        ],
        "returnValues": [
          {
            "type": "string",
            "name": "text",
            "description": "The text of the removed option."
          },
          {
            "type": "any",
            "name": "data",
            "description": "The data of the removed option that was provided."
          }
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineStart": 160,
          "lineEnd": 168
        }
      },
      {
        "name": "SetSortItems",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets whether or not the items should be sorted alphabetically in the dropdown menu of the <page>DComboBox</page>. If set to false, items will appear in the order they were added by <page>DComboBox:AddChoice</page> calls.\n\nThis is enabled by default.",
        "arguments": [
          {
            "name": "sort",
            "type": "boolean",
            "description": "true to enable, false to disable"
          }
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineStart": 8
        }
      },
      {
        "name": "SetValue",
        "parent": "DComboBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the text shown in the combo box when the menu is not collapsed.",
        "arguments": [
          {
            "name": "value",
            "type": "string",
            "description": "The text in the DComboBox."
          }
        ],
        "source": {
          "file": "lua/vgui/dcombobox.lua",
          "lineStart": 266,
          "lineEnd": 270
        }
      }
    ]
  },
  {
    "name": "DDragBase",
    "parent": "DPanel",
    "description": "<internal></internal>\n\nA VGUI base panel providing drag/drop functionality. Used by <page>DIconLayout</page>, <page>DListLayout</page> and <page>DTileLayout</page>.",
    "functions": [
      {
        "name": "DropAction_Copy",
        "parent": "DDragBase",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nInternal function used in <page>DDragBase:MakeDroppable</page>",
        "arguments": [
          {
            "name": "drops",
            "type": "table",
            "description": ""
          },
          {
            "name": "bDoDrop",
            "type": "boolean",
            "description": ""
          },
          {
            "name": "command",
            "type": "string",
            "description": ""
          },
          {
            "name": "y",
            "type": "number",
            "description": ""
          },
          {
            "name": "x",
            "type": "number",
            "description": ""
          }
        ],
        "source": {
          "file": "lua/vgui/ddragbase.lua",
          "lineStart": 47,
          "lineEnd": 51
        }
      },
      {
        "name": "DropAction_Normal",
        "parent": "DDragBase",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nInternal function used in <page>DDragBase:DropAction_Copy</page>",
        "arguments": [
          {
            "name": "drops",
            "type": "table",
            "description": ""
          },
          {
            "name": "bDoDrop",
            "type": "boolean",
            "description": ""
          },
          {
            "name": "command",
            "type": "string",
            "description": ""
          },
          {
            "name": "y",
            "type": "number",
            "description": ""
          },
          {
            "name": "x",
            "type": "number",
            "description": ""
          }
        ],
        "source": {
          "file": "lua/vgui/ddragbase.lua",
          "lineStart": 72,
          "lineEnd": 137
        }
      },
      {
        "name": "DropAction_Simple",
        "parent": "DDragBase",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nInternal function used in <page>DDragBase:DropAction_Normal</page>",
        "arguments": [
          {
            "name": "drops",
            "type": "table",
            "description": ""
          },
          {
            "name": "bDoDrop",
            "type": "boolean",
            "description": ""
          },
          {
            "name": "command",
            "type": "string",
            "description": ""
          },
          {
            "name": "y",
            "type": "number",
            "description": ""
          },
          {
            "name": "x",
            "type": "number",
            "description": ""
          }
        ],
        "source": {
          "file": "lua/vgui/ddragbase.lua",
          "lineStart": 53,
          "lineEnd": 70
        }
      },
      {
        "name": "GetDnD",
        "parent": "DDragBase",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the drag'n'drop group this panel belongs to. See <page>DDragBase:MakeDroppable</page>. An <page>Global.AccessorFunc</page>",
        "returnValues": [
          {
            "type": "string",
            "description": "Name of the DnD family."
          }
        ],
        "source": {
          "file": "lua/vgui/ddragbase.lua",
          "lineStart": 4
        }
      },
      {
        "name": "GetReadOnly",
        "parent": "DDragBase",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether this panel is read only or not for drag'n'drop purposes. An <page>Global.AccessorFunc</page>",
        "returnValues": [
          {
            "type": "boolean",
            "name": "name",
            "description": "Whether this panel is read only or not."
          }
        ],
        "source": {
          "file": "lua/vgui/ddragbase.lua",
          "lineStart": 6
        }
      },
      {
        "name": "GetUseLiveDrag",
        "parent": "DDragBase",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Whether this panel uses live drag'n'drop previews. An <page>Global.AccessorFunc</page>",
        "returnValues": [
          {
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/ddragbase.lua",
          "lineStart": 5
        }
      },
      {
        "name": "MakeDroppable",
        "parent": "DDragBase",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Makes the panel a receiver for any droppable panel with the same DnD name. Internally calls <page>Panel:Receiver</page>.\n\nSee <page>Drag and Drop for VGUI</page>.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "The unique name for the receiver slot. Only droppable panels with the same DnD name as this can be dropped on the panel."
          },
          {
            "name": "allowCopy",
            "type": "boolean",
            "description": "Whether or not to allow droppable panels to be copied when the <key>Ctrl</key> key is held down."
          }
        ],
        "source": {
          "file": "lua/vgui/ddragbase.lua",
          "lineStart": 34,
          "lineEnd": 44
        }
      },
      {
        "name": "OnModified",
        "parent": "DDragBase",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when anything is dropped on or rearranged within the <page>DDragBase</page>. For Override",
        "source": {
          "file": "lua/vgui/ddragbase.lua",
          "lineStart": 139,
          "lineEnd": 141
        }
      },
      {
        "name": "SetDnD",
        "parent": "DDragBase",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal> Used internally by <page>DDragBase:MakeDroppable</page>.\n\nSee also <page>DDragBase:GetDnD</page>\n\nAn <page>Global.AccessorFunc</page>",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "Name of the DnD family."
          }
        ],
        "source": {
          "file": "lua/vgui/ddragbase.lua",
          "lineStart": 4
        }
      },
      {
        "name": "SetDropPos",
        "parent": "DDragBase",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Determines where you can drop stuff.\n\"4\" for left\n\"5\" for center\n\"6\" for right\n\"8\" for top\n\"2\" for bottom",
        "arguments": [
          {
            "name": "pos",
            "type": "string",
            "default": "5",
            "description": "Where you're allowed to drop things."
          }
        ],
        "source": {
          "file": "lua/vgui/ddragbase.lua",
          "lineStart": 24,
          "lineEnd": 32
        }
      },
      {
        "name": "SetReadOnly",
        "parent": "DDragBase",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether this panel is read only or not for drag'n'drop purposes. If set to `true`, you can only copy from this panel, and cannot modify its contents. This is an <page>Global.AccessorFunc</page>",
        "arguments": [
          {
            "name": "name",
            "type": "boolean",
            "description": "Whether this panel should be read only or not."
          }
        ],
        "source": {
          "file": "lua/vgui/ddragbase.lua",
          "lineStart": 6
        }
      },
      {
        "name": "SetUseLiveDrag",
        "parent": "DDragBase",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Whether to use live drag'n'drop previews. This is an <page>Global.AccessorFunc</page>",
        "arguments": [
          {
            "name": "newState",
            "type": "boolean",
            "description": ""
          }
        ],
        "source": {
          "file": "lua/vgui/ddragbase.lua",
          "lineStart": 5
        }
      },
      {
        "name": "UpdateDropTarget",
        "parent": "DDragBase",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nInternal function used in <page>DDragBase:DropAction_Normal</page>",
        "arguments": [
          {
            "name": "drop",
            "type": "number",
            "description": ""
          },
          {
            "name": "pnl",
            "type": "Panel",
            "description": ""
          }
        ],
        "source": {
          "file": "lua/vgui/ddragbase.lua",
          "lineStart": 143,
          "lineEnd": 168
        }
      }
    ]
  },
  {
    "name": "DDrawer",
    "parent": "Panel",
    "description": "A simple Derma Drawer",
    "functions": [
      {
        "name": "Close",
        "parent": "DDrawer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Closes the <page>DDrawer</page>.",
        "source": {
          "file": "lua/vgui/ddrawer.lua",
          "lineStart": 68,
          "lineEnd": 76
        }
      },
      {
        "name": "GetOpenSize",
        "parent": "DDrawer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns the Open Size of DDrawer.",
        "returnValues": [
          {
            "type": "number",
            "description": "Open size."
          }
        ],
        "source": {
          "file": "lua/vgui/ddrawer.lua",
          "lineStart": 4
        }
      },
      {
        "name": "GetOpenTime",
        "parent": "DDrawer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns the Open Time of DDrawer.",
        "returnValues": [
          {
            "type": "number",
            "description": "Time in seconds."
          }
        ],
        "source": {
          "file": "lua/vgui/ddrawer.lua",
          "lineStart": 5
        }
      },
      {
        "name": "Open",
        "parent": "DDrawer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Opens the <page>DDrawer</page>.",
        "source": {
          "file": "lua/vgui/ddrawer.lua",
          "lineStart": 58,
          "lineEnd": 66
        }
      },
      {
        "name": "SetOpenSize",
        "parent": "DDrawer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the height of DDrawer",
        "arguments": [
          {
            "name": "Value",
            "type": "number",
            "description": "Height of DDrawer. Default is `100`."
          }
        ],
        "source": {
          "file": "lua/vgui/ddrawer.lua",
          "lineStart": 4
        }
      },
      {
        "name": "SetOpenTime",
        "parent": "DDrawer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the time (in seconds) for DDrawer to open.",
        "arguments": [
          {
            "name": "value",
            "type": "number",
            "description": "Length in seconds. Default is 0.3"
          }
        ],
        "source": {
          "file": "lua/vgui/ddrawer.lua",
          "lineStart": 5
        }
      },
      {
        "name": "Toggle",
        "parent": "DDrawer",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Toggles the <page>DDrawer</page>.",
        "source": {
          "file": "lua/vgui/ddrawer.lua",
          "lineStart": 48,
          "lineEnd": 56
        }
      }
    ]
  },
  {
    "name": "DEntityProperties",
    "parent": "DProperties",
    "description": "<internal>\nUnless you know what you are doing and you benefit from this panel, you should be using the <page>DProperties</page> instead.\n</internal>\n\nA panel used by the <page>Editable Entities</page> system.",
    "functions": [
      {
        "name": "EditVariable",
        "parent": "DEntityProperties",
        "realms": [
          "client"
        ],
        "description": "<internal></internal>\n\nCalled internally by <page>DEntityProperties:RebuildControls</page>.",
        "arguments": [
          {
            "name": "varname",
            "type": "string",
            "description": ""
          },
          {
            "name": "editdata",
            "type": "table",
            "description": ""
          }
        ],
        "source": {
          "file": "lua/vgui/dentityproperties.lua",
          "lineStart": 59,
          "lineEnd": 94
        }
      },
      {
        "name": "EntityLost",
        "parent": "DEntityProperties",
        "realms": [
          "client"
        ],
        "description": "<internal></internal>\n\nCalled internally when an entity being edited became invalid.\n\nYou should use <page>DEntityProperties:OnEntityLost</page> instead.",
        "source": {
          "file": "lua/vgui/dentityproperties.lua",
          "lineStart": 99,
          "lineEnd": 104
        }
      },
      {
        "name": "OnEntityLost",
        "parent": "DEntityProperties",
        "realms": [
          "client"
        ],
        "description": "Called when we were editing an entity and then it became invalid (probably removed). For Override",
        "source": {
          "file": "lua/vgui/dentityproperties.lua",
          "lineStart": 106,
          "lineEnd": 110
        }
      },
      {
        "name": "RebuildControls",
        "parent": "DEntityProperties",
        "realms": [
          "client"
        ],
        "description": "<internal></internal>\n\nCalled internally by <page>DEntityProperties:SetEntity</page> to rebuild the controls.",
        "source": {
          "file": "lua/vgui/dentityproperties.lua",
          "lineStart": 26,
          "lineEnd": 54
        }
      },
      {
        "name": "SetEntity",
        "parent": "DEntityProperties",
        "realms": [
          "client"
        ],
        "description": "Sets the entity to be edited by this panel. The entity must support the <page>Editable Entities</page> system or nothing will happen.",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity to edit"
          }
        ],
        "source": {
          "file": "lua/vgui/dentityproperties.lua",
          "lineStart": 14,
          "lineEnd": 21
        }
      }
    ]
  },
  {
    "name": "DExpandButton",
    "parent": "DButton",
    "description": "<internal></internal>\nThe little \"+\" button used by <page>DProperties</page> and <page>DTree_Node</page>.",
    "functions": [
      {
        "name": "GetExpanded",
        "parent": "DExpandButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether this DExpandButton is expanded or not.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "True if expanded, false otherwise"
          }
        ],
        "source": {
          "file": "lua/vgui/dexpandbutton.lua",
          "lineStart": 4
        }
      },
      {
        "name": "SetExpanded",
        "parent": "DExpandButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether this DExpandButton should be expanded or not. Only changes appearance.",
        "arguments": [
          {
            "name": "expanded",
            "type": "boolean",
            "description": "True to expand ( visually will show a \"-\" )"
          }
        ],
        "source": {
          "file": "lua/vgui/dexpandbutton.lua",
          "lineStart": 4
        }
      }
    ]
  },
  {
    "name": "DFileBrowser",
    "parent": "DPanel",
    "description": "A tree and list-based file browser.\n\nIt allows filtering by folder (directory) name and file extension, and can display models as <page>SpawnIcon</page>s.",
    "functions": [
      {
        "name": "Clear",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "description": "Clears the file tree and list, and resets all values.",
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineStart": 273,
          "lineEnd": 283
        }
      },
      {
        "name": "GetBaseFolder",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns the root directory/folder of the file tree.",
        "returnValues": [
          {
            "type": "string",
            "description": "The path to the root folder."
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineStart": 7
        }
      },
      {
        "name": "GetCurrentFolder",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns the current directory/folder being displayed.",
        "returnValues": [
          {
            "type": "string",
            "description": "The directory the file list is currently displaying."
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineStart": 8
        }
      },
      {
        "name": "GetFileTypes",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns the current file type filter on the file list.",
        "returnValues": [
          {
            "type": "string",
            "description": "The current filter applied to the file list."
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineStart": 6
        }
      },
      {
        "name": "GetFolderNode",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "description": "Returns the <page>DTree Node</page> that the file tree stems from.\n\nThis is a child of the root node of the <page>DTree</page>.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "The <page>DTree_Node</page> used for the tree."
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineStart": 267,
          "lineEnd": 271
        }
      },
      {
        "name": "GetModels",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns whether or not the model viewer mode is enabled. In this mode, files are displayed as <page>SpawnIcon</page>s instead of a list.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether or not files will be displayed using <page>SpawnIcon</page>s."
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineStart": 10
        }
      },
      {
        "name": "GetName",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns the name being used for the file tree.",
        "returnValues": [
          {
            "type": "string",
            "description": "The name used for the root of the file tree."
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineStart": 4
        }
      },
      {
        "name": "GetOpen",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns whether or not the file tree is open.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether or not the file tree is open."
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineStart": 11
        }
      },
      {
        "name": "GetPath",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns the access path of the file tree. This is `GAME` unless changed with <page>DFileBrowser:SetPath</page>.\n\nSee <page>file.Read</page> for how paths work.",
        "returnValues": [
          {
            "type": "string",
            "description": "The current access path i.e. \"GAME\", \"LUA\", \"DATA\" etc."
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineStart": 5
        }
      },
      {
        "name": "GetSearch",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "description": "An <page>Global.AccessorFunc</page> that returns the current search filter on the file tree.",
        "returnValues": [
          {
            "type": "string",
            "description": "The filter in use on the file tree."
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineStart": 9
        }
      },
      {
        "name": "OnDoubleClick",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "description": "Called when a file is double-clicked.\n\n<note>Double-clicking a file or icon will trigger **both** this and <page>DFileBrowser:OnSelect</page>.</note>",
        "arguments": [
          {
            "name": "selectedPanel",
            "type": "Panel",
            "description": "The panel that was double-clicked to select this file.<br><br>This will either be a <page>DListView_Line</page> or <page>SpawnIcon</page> depending on whether the model viewer mode is enabled. See <page>DFileBrowser:SetModels</page>."
          },
          {
            "name": "filePath",
            "type": "string",
            "description": "The path to the file that was double-clicked."
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineStart": 297,
          "lineEnd": 301
        }
      },
      {
        "name": "OnRightClick",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "description": "Called when a file is right-clicked.\n\n<note>When not in model viewer mode, <page>DFileBrowser:OnSelect</page> will also be called if the file is not already selected.</note>",
        "arguments": [
          {
            "name": "filePath",
            "type": "string",
            "description": "The path to the file that was right-clicked."
          },
          {
            "name": "selectedPanel",
            "type": "Panel",
            "description": "The panel that was right-clicked to select this file.\n\nThis will either be a <page>DListView_Line</page> or <page>SpawnIcon</page> depending on whether the model viewer mode is enabled. <br>See <page>DFileBrowser:SetModels</page>."
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineStart": 303,
          "lineEnd": 307
        }
      },
      {
        "name": "OnSelect",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "description": "Called when a file is selected.",
        "arguments": [
          {
            "name": "selectedPanel",
            "type": "Panel",
            "description": "The panel that was clicked to select this file.<br><br>This will either be a <page>DListView_Line</page> or <page>SpawnIcon</page> depending on whether the model viewer mode is enabled. See <page>DFileBrowser:SetModels</page>."
          },
          {
            "name": "filePath",
            "type": "string",
            "description": "The path to the file that was selected."
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineStart": 291,
          "lineEnd": 295
        }
      },
      {
        "name": "SetBaseFolder",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the root directory/folder of the file tree.\n\nThis needs to be set for the file tree to be displayed.",
        "arguments": [
          {
            "name": "baseDir",
            "type": "string",
            "description": "The path to the folder to use as the root."
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineStart": 50,
          "lineEnd": 57
        }
      },
      {
        "name": "SetCurrentFolder",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the directory/folder from which to display the file list.",
        "arguments": [
          {
            "name": "currentDir",
            "type": "string",
            "description": "The directory to display files from."
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineStart": 104,
          "lineEnd": 118
        }
      },
      {
        "name": "SetFileTypes",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the file type filter for the file list.\n\nThis accepts the same file extension wildcards as <page>file.Find</page>.",
        "arguments": [
          {
            "name": "fileTypes",
            "type": "string",
            "default": "*.*",
            "description": "A list of file types to display, separated by spaces e.g.\n```\n\"*.lua *.txt *.mdl\"\n```"
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineStart": 81,
          "lineEnd": 90
        }
      },
      {
        "name": "SetModels",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "description": "Enables or disables the model viewer mode. In this mode, files are displayed as <page>SpawnIcon</page>s instead of a list.\n\n<note>This should only be used for `.mdl` files; the spawn icons will display error models for others. See <page>DFileBrowser:SetFileTypes</page></note>",
        "arguments": [
          {
            "name": "showModels",
            "type": "boolean",
            "default": "false",
            "description": "Whether or not to display files using <page>SpawnIcon</page>s."
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineStart": 92,
          "lineEnd": 102
        }
      },
      {
        "name": "SetName",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the name to use for the file tree.",
        "arguments": [
          {
            "name": "treeName",
            "type": "string",
            "default": "`baseFolder`",
            "description": "The name for the root of the file tree. Passing no value causes this to be the base folder name. See <page>DFileBrowser:SetBaseFolder</page>."
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineStart": 36,
          "lineEnd": 48
        }
      },
      {
        "name": "SetOpen",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "description": "An <page>Global.AccessorFunc</page> that opens or closes the file tree.",
        "arguments": [
          {
            "name": "open",
            "type": "boolean",
            "default": "false",
            "description": "`true` to open the tree, `false` to close it."
          },
          {
            "name": "useAnim",
            "type": "boolean",
            "default": "false",
            "description": "If `true`, the <page>DTree</page>'s open/close animation is used."
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineStart": 120,
          "lineEnd": 131
        }
      },
      {
        "name": "SetPath",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the access path for the file tree. This is set to `GAME` by default.\n\nSee <page>file.Read</page> for how paths work.",
        "arguments": [
          {
            "name": "path",
            "type": "string",
            "description": "The access path i.e. \"GAME\", \"LUA\", \"DATA\" etc."
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineStart": 59,
          "lineEnd": 66
        }
      },
      {
        "name": "SetSearch",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "description": "An <page>Global.AccessorFunc</page> that sets the search filter for the file tree.\n\nThis accepts the same wildcards as <page>file.Find</page>.",
        "arguments": [
          {
            "name": "filter",
            "type": "string",
            "default": "*",
            "description": "The filter to use on the file tree."
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineStart": 68,
          "lineEnd": 79
        }
      },
      {
        "name": "Setup",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "description": "<internal></internal> Called to set up the <page>DTree</page> and file viewer when a base path has been set.\n\nCalls <page>DFileBrowser:SetupTree</page> and <page>DFileBrowser:SetupFiles</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether or not the variables needed to set up have been defined."
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineStart": 202,
          "lineEnd": 208
        }
      },
      {
        "name": "SetupFiles",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "description": "<internal></internal> Called to set up the <page>DListView</page> or <page>DIconBrowser</page> by <page>DFileBrowser:Setup</page>.\n\nThe icon browser is used when in models mode. See <page>DFileBrowser:SetModels</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether or not the files pane was set up successfully."
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineStart": 169,
          "lineEnd": 200
        }
      },
      {
        "name": "SetupTree",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "description": "<internal></internal> Called to set up the <page>DTree</page> by <page>DFileBrowser:Setup</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether or not the tree was set up successfully."
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineStart": 143,
          "lineEnd": 167
        }
      },
      {
        "name": "ShowFolder",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "description": "<internal></internal>Builds the file or icon list for the current directory.\n\nYou should use <page>DFileBrowser:SetCurrentFolder</page> to change the directory.",
        "arguments": [
          {
            "name": "currentDir",
            "type": "string",
            "description": "The directory to populate the list from."
          }
        ],
        "source": {
          "file": "lua/vgui/dfilebrowser.lua",
          "lineStart": 210,
          "lineEnd": 257
        }
      },
      {
        "name": "SortFiles",
        "parent": "DFileBrowser",
        "realms": [
          "client"
        ],
        "description": "Sorts the file list.\n\n<note>This is only functional when not using the model viewer. See <page>DFileBrowser:SetModels</page></note>",
        "arguments": [
          {
            "name": "descending",
            "type": "boolean",
            "default": "false",
            "description": "The sort order. `true` for descending (z-a), `false` for ascending (a-z)."
          }
        ]
      }
    ]
  },
  {
    "name": "DForm",
    "parent": "DCollapsibleCategory",
    "description": "An easy form with functions to quickly add form elements",
    "functions": [
      {
        "name": "AddItem",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Adds one or two items to the DForm.\nIf this method is called with only one argument, it is added to the bottom of the form. If two arguments are passed, they are placed side-by-side at the bottom of the form.\n\nInternally, this function is used by the various DForm functions to, for example, add labels to the left of buttons.",
        "arguments": [
          {
            "name": "left",
            "type": "Panel",
            "description": "Left-hand element to add to the DForm."
          },
          {
            "name": "right",
            "type": "Panel",
            "default": "nil",
            "description": "Right-hand element to add to the DForm."
          }
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineStart": 42,
          "lineEnd": 73
        }
      },
      {
        "name": "Button",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Adds a <page>DButton</page> onto the <page>DForm</page>",
        "arguments": [
          {
            "name": "text",
            "type": "string",
            "description": "The text on the button"
          },
          {
            "name": "concommand",
            "type": "string",
            "description": "The concommand to run when the button is clicked"
          },
          {
            "name": "args",
            "type": "vararg",
            "default": "nil",
            "description": "The arguments to pass on to the concommand when the button is clicked"
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "The created <page>DButton</page>"
          }
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineStart": 254,
          "lineEnd": 267
        }
      },
      {
        "name": "CheckBox",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Adds a <page>DCheckBoxLabel</page> onto the <page>DForm</page>.\n<note>This will run <page>DCheckBoxLabel:OnChange</page> when being added. This is caused by <page>Panel:SetConVar</page> being used when this function is used. To avoid this, use <page>DForm:AddItem</page> with a <page>DCheckBoxLabel</page>.</note>",
        "arguments": [
          {
            "name": "label",
            "type": "string",
            "description": "The label to be set next to the check box"
          },
          {
            "name": "convar",
            "type": "string",
            "description": "The console variable to change when this is changed"
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "The created <page>DCheckBoxLabel</page>"
          }
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineStart": 192,
          "lineEnd": 203
        }
      },
      {
        "name": "ComboBox",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Adds a <page>DComboBox</page> onto the <page>DForm</page>",
        "arguments": [
          {
            "name": "title",
            "type": "string",
            "description": "Text to the left of the combo box"
          },
          {
            "name": "convar",
            "type": "string",
            "description": "Console variable to change when the user selects something from the dropdown."
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "The created <page>DComboBox</page>"
          },
          {
            "type": "Panel",
            "description": "The created <page>DLabel</page>"
          }
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineStart": 134,
          "lineEnd": 152
        }
      },
      {
        "name": "ControlHelp",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Adds a <page>DLabel</page> onto the <page>DForm</page>. Unlike <page>DForm:Help</page>, this is indented and is colored blue, depending on the derma skin.",
        "arguments": [
          {
            "name": "help",
            "type": "string",
            "description": "The help message to be displayed."
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "The created <page>DLabel</page>"
          }
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineStart": 225,
          "lineEnd": 247
        }
      },
      {
        "name": "GetAutoSize",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\nAn Accessor Function in DForm that does nothing.",
        "returnValues": [
          {
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineStart": 6
        }
      },
      {
        "name": "GetSpacing",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\nAn <page>Global.AccessorFunc</page> that does nothing.",
        "returnValues": [
          {
            "type": "number"
          }
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineStart": 7
        }
      },
      {
        "name": "Help",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Adds a <page>DLabel</page> onto the <page>DForm</page> as a helper",
        "arguments": [
          {
            "name": "help",
            "type": "string",
            "description": "The help message to be displayed"
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "The created <page>DLabel</page>"
          }
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineStart": 205,
          "lineEnd": 223
        }
      },
      {
        "name": "ListBox",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Adds a <page>DListBox</page> onto the <page>DForm</page>\n<deprecated>Use <page>DListView</page> with <page>DForm:AddItem</page> instead.</deprecated>",
        "arguments": [
          {
            "name": "label",
            "type": "string",
            "description": "The label to set on the DListBox"
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "The created <page>DListBox</page>"
          },
          {
            "type": "Panel",
            "description": "The created <page>DLabel</page>"
          }
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineStart": 277,
          "lineEnd": 295
        }
      },
      {
        "name": "NumberWang",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Adds a <page>DNumberWang</page> onto the <page>DForm</page>",
        "arguments": [
          {
            "name": "label",
            "type": "string",
            "description": "The label to be placed next to the DNumberWang"
          },
          {
            "name": "convar",
            "type": "string",
            "description": "The console variable to change when the slider is changed"
          },
          {
            "name": "min",
            "type": "number",
            "description": "The minimum value of the slider"
          },
          {
            "name": "max",
            "type": "number",
            "description": "The maximum value of the slider"
          },
          {
            "name": "decimals",
            "type": "number",
            "default": "nil",
            "description": "The number of decimals to allow in the slider (Optional)"
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "The created <page>DNumberWang</page>"
          },
          {
            "type": "Panel",
            "description": "The created <page>DLabel</page>"
          }
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineStart": 154,
          "lineEnd": 172
        }
      },
      {
        "name": "NumSlider",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Adds a <page>DNumSlider</page> onto the <page>DForm</page>",
        "arguments": [
          {
            "name": "label",
            "type": "string",
            "description": "The label of the DNumSlider"
          },
          {
            "name": "convar",
            "type": "string",
            "description": "The console variable to change when the slider is changed"
          },
          {
            "name": "min",
            "type": "number",
            "description": "The minimum value of the slider"
          },
          {
            "name": "max",
            "type": "number",
            "description": "The maximum value of the slider"
          },
          {
            "name": "decimals",
            "type": "number",
            "default": "2",
            "description": "The number of decimals to allow on the slider."
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "The created <page>DNumSlider</page>"
          }
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineStart": 174,
          "lineEnd": 190
        }
      },
      {
        "name": "PanelSelect",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated>This is derived from the deprecated <page>DPanelSelect</page>.</deprecated>Creates a <page>DPanelSelect</page> and docks it to the top of the DForm.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "The created DPanelSelect."
          }
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineStart": 269,
          "lineEnd": 275
        }
      },
      {
        "name": "PropSelect",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Creates a <page>PropSelect</page> panel and docks it to the top of the DForm.",
        "arguments": [
          {
            "name": "label",
            "type": "string",
            "description": "The label to display above the prop select."
          },
          {
            "name": "convar",
            "type": "string",
            "description": "The convar to set the selected model to."
          },
          {
            "name": "models",
            "type": "table",
            "description": "A table of models to display for selection. Supports 2 formats:\n1) Key is the model and value are the <page>convar</page>s to set when that model is selected in format `convar=value`\n2) An table of tables where each table must have the following keys:\n* <page>string</page> model - The model.\n* <page>number</page> skin - Model's skin. Defaults to 0\n* <page>string</page> tooltip - Displayed when user hovers over the model. Defaults to the model path.\n* The key of the table is the value of the convar."
          },
          {
            "name": "height",
            "type": "number",
            "default": "2",
            "description": "The height of the prop select panel, in 64px icon increments."
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "The created <page>PropSelect</page> panel."
          }
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineStart": 91,
          "lineEnd": 132
        }
      },
      {
        "name": "Rebuild",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nDoes nothing.",
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineStart": 297,
          "lineEnd": 298
        }
      },
      {
        "name": "SetAutoSize",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nan <page>Global.AccessorFunc</page> that does nothing",
        "arguments": [
          {
            "type": "boolean",
            "description": ""
          }
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineStart": 6
        }
      },
      {
        "name": "SetName",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the title (header) name of the DForm. This is `Label` until set.\n\n<deprecated>This is an alias of derived <page>DCollapsibleCategory:SetLabel</page></deprecated>",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "The new header name."
          }
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineStart": 24,
          "lineEnd": 28
        }
      },
      {
        "name": "SetSpacing",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nAn <page>Global.AccessorFunc</page> that does nothing.",
        "arguments": [
          {
            "type": "number",
            "description": ""
          }
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineStart": 7
        }
      },
      {
        "name": "TextEntry",
        "parent": "DForm",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Adds a <page>DTextEntry</page> to a <page>DForm</page>",
        "arguments": [
          {
            "name": "label",
            "type": "string",
            "description": "The label to be next to the text entry"
          },
          {
            "name": "convar",
            "type": "string",
            "description": "The console variable to be changed when the text entry is changed"
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "The created <page>DTextEntry</page>"
          },
          {
            "type": "Panel",
            "description": "The created <page>DLabel</page>"
          }
        ],
        "source": {
          "file": "lua/vgui/dform.lua",
          "lineStart": 75,
          "lineEnd": 89
        }
      }
    ]
  },
  {
    "name": "DFrame",
    "parent": "EditablePanel",
    "description": "The DFrame is the moma of basically all VGUI elements. 98% of the time you will parent your element to this.",
    "functions": [
      {
        "name": "Center",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Centers the frame relative to the whole screen and invalidates its layout. This overrides <page>Panel:Center</page>.",
        "source": {
          "file": "lua/vgui/dframe.lua",
          "lineStart": 104,
          "lineEnd": 110
        }
      },
      {
        "name": "Close",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Hides or removes the DFrame, and calls <page>DFrame:OnClose</page>.\n\nTo set whether the frame is hidden or removed, use <page>DFrame:SetDeleteOnClose</page>.",
        "source": {
          "file": "lua/vgui/dframe.lua",
          "lineStart": 89,
          "lineEnd": 99
        }
      },
      {
        "name": "GetBackgroundBlur",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Gets whether the background behind the frame is being blurred.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether or not background blur is enabled."
          }
        ],
        "source": {
          "file": "lua/vgui/dframe.lua",
          "lineStart": 14
        }
      },
      {
        "name": "GetDeleteOnClose",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Determines whether or not the DFrame will be removed when it is closed. This is set with <page>DFrame:SetDeleteOnClose</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether or not the frame will be removed on close."
          }
        ],
        "source": {
          "file": "lua/vgui/dframe.lua",
          "lineStart": 8
        }
      },
      {
        "name": "GetDraggable",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Gets whether or not the frame is draggable by the user.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the frame is draggable or not."
          }
        ],
        "source": {
          "file": "lua/vgui/dframe.lua",
          "lineStart": 5
        }
      },
      {
        "name": "GetIsMenu",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Gets whether or not the frame is part of a derma menu. This is set with <page>DFrame:SetIsMenu</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether or not this frame is a menu component."
          }
        ],
        "source": {
          "file": "lua/vgui/dframe.lua",
          "lineStart": 4
        }
      },
      {
        "name": "GetMinHeight",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Gets the minimum height the DFrame can be resized to by the user.\n\nYou must call <page>DFrame:SetSizable</page> before the user can resize the frame.",
        "returnValues": [
          {
            "type": "number",
            "description": "The minimum height the user can resize the frame to."
          }
        ],
        "source": {
          "file": "lua/vgui/dframe.lua",
          "lineStart": 12
        }
      },
      {
        "name": "GetMinWidth",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Gets the minimum width the DFrame can be resized to by the user.\n\nYou must call <page>DFrame:SetSizable</page> before the user can resize the frame.",
        "returnValues": [
          {
            "type": "number",
            "description": "The minimum width the user can resize the frame to."
          }
        ],
        "source": {
          "file": "lua/vgui/dframe.lua",
          "lineStart": 11
        }
      },
      {
        "name": "GetPaintShadow",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Gets whether or not the shadow effect bordering the DFrame is being drawn.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether or not the shadow is being drawn."
          }
        ],
        "source": {
          "file": "lua/vgui/dframe.lua",
          "lineStart": 9
        }
      },
      {
        "name": "GetScreenLock",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Gets whether or not the DFrame is restricted to the boundaries of the screen resolution.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether or not the frame is restricted."
          }
        ],
        "source": {
          "file": "lua/vgui/dframe.lua",
          "lineStart": 7
        }
      },
      {
        "name": "GetSizable",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Gets whether or not the DFrame can be resized by the user.\n\nThis is achieved by clicking and dragging in the bottom right corner of the frame.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the frame can be resized or not."
          }
        ],
        "source": {
          "file": "lua/vgui/dframe.lua",
          "lineStart": 6
        }
      },
      {
        "name": "GetTitle",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the title of the frame.",
        "returnValues": [
          {
            "type": "string",
            "description": "Title of the frame."
          }
        ],
        "source": {
          "file": "lua/vgui/dframe.lua",
          "lineStart": 77,
          "lineEnd": 81
        }
      },
      {
        "name": "IsActive",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Determines if the frame or one of its children has the screen focus.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether or not the frame has focus."
          }
        ],
        "source": {
          "file": "lua/vgui/dframe.lua",
          "lineStart": 112,
          "lineEnd": 119
        }
      },
      {
        "name": "OnClose",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the DFrame is closed with <page>DFrame:Close</page>. This applies when the `close` button in the DFrame's control box is clicked.\n\nThis function does nothing and is safe to override.\n\nThis is **not** called when the DFrame is removed with <page>Panel:Remove</page>, see <page>PANEL:OnRemove</page> for that.",
        "source": {
          "file": "lua/vgui/dframe.lua",
          "lineStart": 101,
          "lineEnd": 102
        }
      },
      {
        "name": "SetBackgroundBlur",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Indicate that the background elements won't be usable.",
        "arguments": [
          {
            "name": "blur",
            "type": "boolean",
            "description": "Whether or not to block mouse on background panels or not."
          }
        ]
      },
      {
        "name": "SetDeleteOnClose",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Determines whether or not the DFrame is removed when it is closed with <page>DFrame:Close</page>.",
        "arguments": [
          {
            "name": "shouldDelete",
            "type": "boolean",
            "description": "Whether or not to delete the frame on close. This is `true` by default."
          }
        ]
      },
      {
        "name": "SetDraggable",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether the frame should be draggable by the user. The DFrame can only be dragged from its title bar.",
        "arguments": [
          {
            "name": "draggable",
            "type": "boolean",
            "description": "Whether to be draggable or not."
          }
        ]
      },
      {
        "name": "SetIcon",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Adds or removes an icon on the left of the <page>DFrame</page>'s title.",
        "arguments": [
          {
            "name": "path",
            "type": "string",
            "description": "Set to nil to remove the icon.\n\nOtherwise, set to file path to create the icon."
          }
        ],
        "source": {
          "file": "lua/vgui/dframe.lua",
          "lineStart": 121,
          "lineEnd": 135
        }
      },
      {
        "name": "SetIsMenu",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether the frame is part of a derma menu or not.\n\nIf this is set to `true`, <page>Global.CloseDermaMenus</page> will not be called when the frame is clicked, and thus any open menus will remain open.",
        "arguments": [
          {
            "name": "isMenu",
            "type": "boolean",
            "description": "Whether or not this frame is a menu component."
          }
        ]
      },
      {
        "name": "SetMinHeight",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the minimum height the DFrame can be resized to by the user.\n\nThis only applies to users attempting to resize the frame; <page>Panel:SetTall</page> and similar methods will not be affected. You must call <page>DFrame:SetSizable</page> before the user can resize the frame.",
        "arguments": [
          {
            "name": "minH",
            "type": "number",
            "description": "The minimum height the user can resize the frame to."
          }
        ]
      },
      {
        "name": "SetMinWidth",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the minimum width the DFrame can be resized to by the user.\n\nThis only applies to users attempting to resize the frame; <page>Panel:SetWide</page> and similar methods will not be affected. You must call <page>DFrame:SetSizable</page> before the user can resize the frame.",
        "arguments": [
          {
            "name": "minW",
            "type": "number",
            "description": "The minimum width the user can resize the frame to."
          }
        ]
      },
      {
        "name": "SetPaintShadow",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether or not the shadow effect bordering the DFrame should be drawn.",
        "arguments": [
          {
            "name": "shouldPaint",
            "type": "boolean",
            "description": "Whether or not to draw the shadow. This is `true` by default."
          }
        ]
      },
      {
        "name": "SetScreenLock",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether the DFrame is restricted to the boundaries of the screen resolution.",
        "arguments": [
          {
            "name": "lock",
            "type": "boolean",
            "description": "If `true`, the frame cannot be dragged outside of the screen bounds"
          }
        ]
      },
      {
        "name": "SetSizable",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether or not the <page>DFrame</page> can be resized by the user.\n\nThis is achieved by clicking and dragging in the bottom right corner of the frame.\n\nYou can set the minimum size using <page>DFrame:SetMinWidth</page> and <page>DFrame:SetMinHeight</page>.",
        "arguments": [
          {
            "name": "sizeable",
            "type": "boolean",
            "description": "Whether the frame should be resizeable or not."
          }
        ]
      },
      {
        "name": "SetTitle",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the title of the frame.",
        "arguments": [
          {
            "name": "title",
            "type": "string",
            "description": "New title of the frame."
          }
        ],
        "source": {
          "file": "lua/vgui/dframe.lua",
          "lineStart": 83,
          "lineEnd": 87
        }
      },
      {
        "name": "ShowCloseButton",
        "parent": "DFrame",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Determines whether the DFrame's control box (close, minimise and maximise buttons) is displayed.",
        "arguments": [
          {
            "name": "show",
            "type": "boolean",
            "description": "`false` hides the control box; this is `true` by default."
          }
        ],
        "source": {
          "file": "lua/vgui/dframe.lua",
          "lineStart": 69,
          "lineEnd": 75
        }
      }
    ]
  },
  {
    "name": "DGrid",
    "parent": "Panel",
    "description": "A really simple grid layout panel.\n\n<note>This panel will set its size automatically based on set column count.\nThis makes it play badly with <page>Panel:Dock</page> and cause a <page>PANEL:PerformLayout</page> call every frame.</note>",
    "functions": [
      {
        "name": "AddItem",
        "parent": "DGrid",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Adds a new item to the grid.",
        "arguments": [
          {
            "name": "item",
            "type": "Panel",
            "description": "The item to add. It will be forced visible and parented to the <page>DGrid</page>."
          }
        ]
      },
      {
        "name": "GetCols",
        "parent": "DGrid",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the number of columns of this <page>DGrid</page>. Set by <page>DGrid:SetCols</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The number of columns of this <page>DGrid</page>"
          }
        ]
      },
      {
        "name": "GetColWide",
        "parent": "DGrid",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the width of each column of the <page>DGrid</page>, which is set by <page>DGrid:SetColWide</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The width of each column"
          }
        ]
      },
      {
        "name": "GetItems",
        "parent": "DGrid",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns a list of panels in the grid.",
        "returnValues": [
          {
            "type": "table",
            "description": "A list of <page>Panel</page>s."
          }
        ]
      },
      {
        "name": "GetRowHeight",
        "parent": "DGrid",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the height of each row of the <page>DGrid</page>, which is set by <page>DGrid:SetRowHeight</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The height of each row"
          }
        ]
      },
      {
        "name": "RemoveItem",
        "parent": "DGrid",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Removes given panel from the <page>DGrid:GetItems</page>.",
        "arguments": [
          {
            "name": "item",
            "type": "Panel",
            "description": "Item to remove from the grid"
          },
          {
            "name": "bDontDelete",
            "type": "boolean",
            "default": "false",
            "description": "If set to true, the actual panel will not be removed via <page>Panel:Remove</page>."
          }
        ]
      },
      {
        "name": "SetCols",
        "parent": "DGrid",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the number of columns this panel should have.\n\nThe <page>DGrid</page> will resize its width to match this value.",
        "arguments": [
          {
            "name": "cols",
            "type": "number",
            "description": "The desired number of columns"
          }
        ]
      },
      {
        "name": "SetColWide",
        "parent": "DGrid",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the width of each column.\n\nThe cell panels (grid items) will not be resized or centered.",
        "arguments": [
          {
            "name": "colWidth",
            "type": "number",
            "description": "The width of each column."
          }
        ]
      },
      {
        "name": "SetRowHeight",
        "parent": "DGrid",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the height of each row.\n\nThe cell panels (grid items) will not be resized or centered.",
        "arguments": [
          {
            "name": "rowHeight",
            "type": "number",
            "description": "The height of each row"
          }
        ]
      },
      {
        "name": "SortByMember",
        "parent": "DGrid",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sorts the items in the grid. Does not visually update the grid, use <page>Panel:InvalidateLayout</page> for that.",
        "arguments": [
          {
            "name": "key",
            "type": "string",
            "description": "A key in the panel from <page>DGrid:GetItems</page>. The key's value must be numeric."
          },
          {
            "name": "desc",
            "type": "boolean",
            "default": "true",
            "description": "True for descending order, false for ascending."
          }
        ]
      }
    ]
  },
  {
    "name": "DHorizontalDivider",
    "parent": "DPanel",
    "description": "Creates an invisible vertical divider between two GUI elements.",
    "functions": [
      {
        "name": "GetDividerWidth",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ],
        "description": "Returns the width of the horizontal divider bar, set by <page>DHorizontalDivider:SetDividerWidth</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The width of the horizontal divider bar"
          }
        ]
      },
      {
        "name": "GetDragging",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ],
        "description": "Returns whether or not the player is currently dragging the middle divider bar.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether or not the player is currently dragging the middle divider bar."
          }
        ]
      },
      {
        "name": "GetHoldPos",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ],
        "description": "<internal></internal>\n\nReturns the local X coordinate of where the player started dragging the thing",
        "returnValues": [
          {
            "type": "number"
          }
        ]
      },
      {
        "name": "GetLeft",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ],
        "description": "Returns the left side content of the <page>DHorizontalDivider</page>",
        "returnValues": [
          {
            "type": "Panel",
            "description": "The content on the left side"
          }
        ]
      },
      {
        "name": "GetLeftMin",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ],
        "description": "Returns the minimum width of the left side, set by <page>DHorizontalDivider:SetLeftMin</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The minimum width of the left side"
          }
        ]
      },
      {
        "name": "GetLeftWidth",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ],
        "description": "Returns the current width of the left side, set by <page>DHorizontalDivider:SetLeftWidth</page> or by the user.",
        "returnValues": [
          {
            "type": "number",
            "description": "The current width of the left side"
          }
        ]
      },
      {
        "name": "GetMiddle",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ],
        "description": "Returns the middle content, set by <page>DHorizontalDivider:SetMiddle</page>.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "The middle content"
          }
        ]
      },
      {
        "name": "GetRight",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ],
        "description": "Returns the right side content",
        "returnValues": [
          {
            "type": "Panel",
            "description": "The right side content"
          }
        ]
      },
      {
        "name": "GetRightMin",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ],
        "description": "Returns the minimum width of the right side, set by <page>DHorizontalDivider:SetRightMin</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The minimum width of the right side"
          }
        ]
      },
      {
        "name": "SetDividerWidth",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ],
        "description": "Sets the width of the horizontal divider bar.",
        "arguments": [
          {
            "name": "width",
            "type": "number",
            "description": "The width of the horizontal divider bar."
          }
        ]
      },
      {
        "name": "SetDragging",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ],
        "description": "<internal></internal>\n\nSets whether the player is dragging the divider or not",
        "arguments": [
          {
            "name": "dragonot",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      {
        "name": "SetHoldPos",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ],
        "description": "<internal></internal>\n\nSets the local X coordinate of where the player started dragging the thing",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "description": ""
          }
        ]
      },
      {
        "name": "SetLeft",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ],
        "description": "Sets the left side content of the <page>DHorizontalDivider</page>.",
        "arguments": [
          {
            "name": "pnl",
            "type": "Panel",
            "description": "The panel to set as the left side"
          }
        ]
      },
      {
        "name": "SetLeftMin",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ],
        "description": "Sets the minimum width of the left side",
        "arguments": [
          {
            "name": "minWidth",
            "type": "number",
            "description": "The minimum width of the left side"
          }
        ]
      },
      {
        "name": "SetLeftWidth",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ],
        "description": "Sets the current/starting width of the left side.\n\nThe width of the right side is automatically calculated by subtracting this from the total width of the <page>DHorizontalDivider</page>.",
        "arguments": [
          {
            "name": "width",
            "type": "number",
            "description": "The current/starting width of the left side"
          }
        ]
      },
      {
        "name": "SetMiddle",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ],
        "description": "Sets the middle content, over the draggable divider bar panel.",
        "arguments": [
          {
            "name": "middle",
            "type": "Panel",
            "description": "The middle content"
          }
        ]
      },
      {
        "name": "SetRight",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ],
        "description": "Sets the right side content",
        "arguments": [
          {
            "name": "pnl",
            "type": "Panel",
            "description": "The right side content"
          }
        ]
      },
      {
        "name": "SetRightMin",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ],
        "description": "Sets the minimum width of the right side",
        "arguments": [
          {
            "name": "minWidth",
            "type": "number",
            "description": "The minimum width of the right side"
          }
        ]
      },
      {
        "name": "StartGrab",
        "parent": "DHorizontalDivider",
        "realms": [
          "client"
        ],
        "description": "<internal></internal><validate>TODO Document me</validate>"
      }
    ]
  },
  {
    "name": "DHorizontalScroller",
    "parent": "Panel",
    "description": "A very basic horizontal scrollable panel, similar to <page>DScrollPanel</page>.\n\nUsed internally in <page>DPropertySheet</page>.",
    "functions": [
      {
        "name": "AddPanel",
        "parent": "DHorizontalScroller",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Adds a panel to the <page>DHorizontalScroller</page>.",
        "arguments": [
          {
            "name": "pnl",
            "type": "Panel",
            "description": "The panel to add. It will be automatically parented."
          }
        ]
      },
      {
        "name": "GetCanvas",
        "parent": "DHorizontalScroller",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the internal canvas panel where the content of <page>DHorizontalScroller</page> are placed on.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "The <page>DDragBase</page> panel."
          }
        ]
      },
      {
        "name": "GetOverlap",
        "parent": "DHorizontalScroller",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the overlap set by <page>DHorizontalScroller:SetOverlap</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The overlap."
          }
        ]
      },
      {
        "name": "GetShowDropTargets",
        "parent": "DHorizontalScroller",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether this panel should show drop targets.",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "MakeDroppable",
        "parent": "DHorizontalScroller",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Same as <page>DDragBase:MakeDroppable</page>.\nTODO: Transclude or whatever to here?",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": ""
          }
        ]
      },
      {
        "name": "OnDragModified",
        "parent": "DHorizontalScroller",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the panel is scrolled."
      },
      {
        "name": "ScrollToChild",
        "parent": "DHorizontalScroller",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Scrolls the <page>DHorizontalScroller</page> to given child panel.",
        "arguments": [
          {
            "name": "target",
            "type": "Panel",
            "description": "The target child panel. Must be a child of <page>DHorizontalScroller:GetCanvas</page>"
          }
        ]
      },
      {
        "name": "SetOverlap",
        "parent": "DHorizontalScroller",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Controls the spacing between elements of the horizontal scroller.",
        "arguments": [
          {
            "name": "overlap",
            "type": "number",
            "description": "Overlap in pixels. Positive numbers will make elements `overlap` each other, negative will add spacing."
          }
        ]
      },
      {
        "name": "SetScroll",
        "parent": "DHorizontalScroller",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the scroll amount, automatically clamping the value.",
        "arguments": [
          {
            "name": "scroll",
            "type": "number",
            "description": "The new scroll amount"
          }
        ]
      },
      {
        "name": "SetShowDropTargets",
        "parent": "DHorizontalScroller",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether this panel should show drop targets.",
        "arguments": [
          {
            "name": "newState",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      {
        "name": "SetUseLiveDrag",
        "parent": "DHorizontalScroller",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Same as <page>DDragBase:SetUseLiveDrag</page>",
        "arguments": [
          {
            "name": "newState",
            "type": "boolean",
            "description": ""
          }
        ]
      }
    ]
  },
  {
    "name": "DHScrollBar",
    "parent": "Panel",
    "description": "A generic horizontal scrollbar. See the vertical alternative [here](DVScrollBar).\n\nThe scrollbar notably contains `DHScrollBar.btnLeft`, `DHScrollBar.btnRight`, and `DHScrollBar.btnGrip` which are the left button, right button, and grip respectively. Editing the paint functions of these allows custom scrollbar styling, although it is a better idea to use [Derma Skins](Derma_Skin_Creation).",
    "functions": [
      {
        "name": "AddScroll",
        "parent": "DHScrollBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Adds specified amount of scroll in pixels.",
        "arguments": [
          {
            "name": "add",
            "type": "number",
            "description": "How much to scroll rightwards. Can be negative for leftwards scroll"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "True if the scroll level was changed (i.e. if we did or did not scroll)"
          }
        ]
      },
      {
        "name": "AnimateTo",
        "parent": "DHScrollBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Smoothly scrolls to given level.",
        "arguments": [
          {
            "name": "scroll",
            "type": "number",
            "description": "The scroll level to animate to. In pixels from the left ( from 0 )"
          },
          {
            "name": "length",
            "type": "number",
            "description": "Length of the animation in seconds"
          },
          {
            "name": "delay",
            "type": "number",
            "default": "0",
            "description": "Delay of the animation in seconds"
          },
          {
            "name": "ease",
            "type": "number",
            "default": "-1",
            "description": "See <page>Panel:NewAnimation</page> for explanation."
          }
        ]
      },
      {
        "name": "BarScale",
        "parent": "DHScrollBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the scale of the scroll bar based on the difference in size between the visible \"window\" into the canvas that is being scrolled. Should be used after <page>DHScrollBar:SetUp</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The scale of the scrollbar."
          }
        ]
      },
      {
        "name": "GetHideButtons",
        "parent": "DHScrollBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether or not the manual left/right scroll buttons are visible or not. Set by <page>DHScrollBar:SetHideButtons</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether or not the manual left/right scroll buttons are visible or not."
          }
        ]
      },
      {
        "name": "GetOffset",
        "parent": "DHScrollBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the negative of <page>DHScrollBar:GetScroll</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The scroll offset."
          }
        ]
      },
      {
        "name": "GetScroll",
        "parent": "DHScrollBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the amount of scroll level from the left in pixels.",
        "returnValues": [
          {
            "type": "number",
            "description": "The amount of scroll level from the left edge."
          }
        ]
      },
      {
        "name": "Grip",
        "parent": "DHScrollBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nCalled from within <page>DScrollBarGrip</page>"
      },
      {
        "name": "SetHideButtons",
        "parent": "DHScrollBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Allows hiding the left and right buttons for better visual stylisation.",
        "arguments": [
          {
            "name": "hide",
            "type": "boolean",
            "description": "True to hide"
          }
        ]
      },
      {
        "name": "SetScroll",
        "parent": "DHScrollBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the scroll level in pixels.",
        "arguments": [
          {
            "name": "scroll",
            "type": "number",
            "description": "The new scroll value."
          }
        ]
      },
      {
        "name": "SetUp",
        "parent": "DHScrollBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets up the scrollbar for use.\n\nThe scrollbar will automatically disable itself if the total width of the canvas is lower than the width of the panel that holds the canvas during this function call.",
        "arguments": [
          {
            "name": "barSize",
            "type": "number",
            "description": "The size of the panel that holds the canvas, basically size of \"1 page\"."
          },
          {
            "name": "canvasSize",
            "type": "number",
            "description": "The total size of the canvas, this typically is the bigger number."
          }
        ]
      }
    ]
  },
  {
    "name": "DHTML",
    "parent": "Awesomium",
    "description": "The DHTML control wraps the internal Awesomium framework, supports calling Javascript functions from Lua,\nas well as running Lua from within the HTML. Running Lua code is disabled by default.",
    "functions": [
      {
        "name": "AddFunction",
        "parent": "DHTML",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Defines a Javascript function that when called will call a Lua callback.\n<note>Must be called after the HTML document has fully loaded.</note>",
        "arguments": [
          {
            "name": "library",
            "type": "string",
            "description": "Library name of the JS function you are defining."
          },
          {
            "name": "name",
            "type": "string",
            "description": "Name of the JS function you are defining."
          },
          {
            "name": "callback",
            "type": "function",
            "description": "Function called when the JS function is called. Arguments passed to the JS function will be passed here."
          }
        ],
        "source": {
          "file": "lua/vgui/dhtml.lua",
          "lineStart": 123,
          "lineEnd": 146
        }
      },
      {
        "name": "Call",
        "parent": "DHTML",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Runs/Executes a string as JavaScript code in a panel.\n<note>This function does **NOT** evaluate expression (i.e. allow you to pass variables from JavaScript (JS) to Lua context).<br>Because a return value is nil/no value (a.k.a. void).<br>If you wish to pass/return values from JS to Lua, you may want to use <page>DHTML:AddFunction</page> function to accomplish that job.</note>\n<note>This function is an alias of <page>DHTML:QueueJavascript</page> ([source](https://github.com/Facepunch/garrysmod/blob/master/garrysmod/lua/vgui/dhtml.lua#L62)).</note>",
        "arguments": [
          {
            "name": "js",
            "type": "string",
            "description": "Specify JavaScript code to be executed."
          }
        ]
      },
      {
        "name": "ConsoleMessage",
        "parent": "DHTML",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the page inside the <page>DHTML</page> window runs the `console.log` javascript function. On the x86-64 beta, it's called for all built-in `console.*` javascript functions.\n\nIf <page>DHTML:SetAllowLua</page> is set to `true` and the message begins with `RUNLUA:`, the text following `RUNLUA:` will be executed as code within the Lua environment (this is how Lua is called from DHTML windows).",
        "arguments": [
          {
            "name": "msg",
            "type": "string",
            "description": "The message to be logged (or Lua code to be executed; see above)."
          }
        ],
        "source": {
          "file": "lua/vgui/dhtml.lua",
          "lineStart": 66,
          "lineEnd": 97
        }
      },
      {
        "name": "GetAllowLua",
        "parent": "DHTML",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns if the loaded page can run Lua code, set by <page>DHTML:SetAllowLua</page>",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether or not Lua code can be called from the loaded page."
          }
        ]
      },
      {
        "name": "GetScrollbars",
        "parent": "DHTML",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated>Broken. Use the CSS `overflow` rule instead.</deprecated>\n\nReturns the value set by <page>DHTML:SetScrollbars</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "name": "show",
            "description": "True if scrollbars should be visible."
          }
        ]
      },
      {
        "name": "OnBeginLoadingDocument",
        "parent": "DHTML",
        "realms": [
          "client"
        ],
        "description": "Called when this panel begins loading a page.",
        "arguments": [
          {
            "name": "url",
            "type": "string",
            "description": "The URL of the current page."
          }
        ],
        "source": {
          "file": "lua/vgui/dhtml.lua",
          "lineStart": 148,
          "lineEnd": 152
        }
      },
      {
        "name": "OnCallback",
        "parent": "DHTML",
        "realms": [
          "client"
        ],
        "description": "Called by the engine when a callback function is called.",
        "arguments": [
          {
            "name": "library",
            "type": "string",
            "description": "Library name of the JS function that was called."
          },
          {
            "name": "name",
            "type": "string",
            "description": "Name of the JS function that was called."
          },
          {
            "name": "arguments",
            "type": "table",
            "description": "Table containing all arguments passed to the JS function."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return `true` to suppress default engine action."
          }
        ],
        "source": {
          "file": "lua/vgui/dhtml.lua",
          "lineStart": 107,
          "lineEnd": 121
        }
      },
      {
        "name": "OnChangeTargetURL",
        "parent": "DHTML",
        "realms": [
          "client"
        ],
        "description": "Called by HTML panels when the target URL of the frame has changed, this happens when you hover over a link.",
        "arguments": [
          {
            "name": "url",
            "type": "string",
            "description": "New target URL."
          }
        ],
        "source": {
          "file": "lua/vgui/dhtml.lua",
          "lineStart": 178,
          "lineEnd": 182
        }
      },
      {
        "name": "OnChangeTitle",
        "parent": "DHTML",
        "realms": [
          "client"
        ],
        "description": "Called by HTML panels when the title of the loaded page has been changed.",
        "arguments": [
          {
            "name": "newTitle",
            "type": "string",
            "description": "The new title of the page."
          }
        ],
        "source": {
          "file": "lua/vgui/dhtml.lua",
          "lineStart": 172,
          "lineEnd": 176
        }
      },
      {
        "name": "OnChildViewCreated",
        "parent": "DHTML",
        "realms": [
          "client"
        ],
        "description": "Called by HTML panels when the page attempts to open a new child view (such as a popup or new tab).",
        "arguments": [
          {
            "name": "sourceURL",
            "type": "string",
            "description": "The URL of the page requesting to create a child."
          },
          {
            "name": "targetURL",
            "type": "string",
            "description": "The URL of the requested child."
          },
          {
            "name": "isPopup",
            "type": "boolean",
            "description": "True if the requested view is a popup."
          }
        ],
        "source": {
          "file": "lua/vgui/dhtml.lua",
          "lineStart": 166,
          "lineEnd": 170
        }
      },
      {
        "name": "OnDocumentReady",
        "parent": "DHTML",
        "realms": [
          "client"
        ],
        "description": "Called by HTML panels when the panel's DOM has been set up. You can run JavaScript in here.",
        "arguments": [
          {
            "name": "url",
            "type": "string",
            "description": "The URL of the current page."
          }
        ],
        "source": {
          "file": "lua/vgui/dhtml.lua",
          "lineStart": 160,
          "lineEnd": 164
        }
      },
      {
        "name": "OnFinishLoadingDocument",
        "parent": "DHTML",
        "realms": [
          "client"
        ],
        "description": "Called when this panel successfully loads a page.",
        "arguments": [
          {
            "name": "url",
            "type": "string",
            "description": "The URL of the current page."
          }
        ],
        "source": {
          "file": "lua/vgui/dhtml.lua",
          "lineStart": 154,
          "lineEnd": 158
        }
      },
      {
        "name": "QueueJavascript",
        "parent": "DHTML",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Runs/Executes a string as JavaScript code in a panel.\n\n<note>This function does **NOT** evaluate expression (i.e. allow you to pass variables from JavaScript (JS) to Lua context).<br>Because a return value is nil/no value (a.k.a. void).<br>If you wish to pass/return values from JS to Lua, you may want to use <page>DHTML:AddFunction</page> function to accomplish that job.</note>\n<note>If <page>Panel:IsVisible</page> is `false`, <page>PANEL:Think</page> will **NOT** run, meaning the Javascript Queue will not be processed.<br><br>Consider overriding <page>PANEL:Paint</page> to stop the panel from drawing instead.</note>",
        "arguments": [
          {
            "name": "js",
            "type": "string",
            "description": "Specify JavaScript code to be executed."
          }
        ]
      },
      {
        "name": "SetAllowLua",
        "parent": "DHTML",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Determines whether the loaded page can run Lua code or not. See <page>DHTML</page> for how to run Lua from a DHTML window.",
        "arguments": [
          {
            "name": "allow",
            "type": "boolean",
            "default": "false",
            "description": "Whether or not to allow Lua."
          }
        ]
      },
      {
        "name": "SetScrollbars",
        "parent": "DHTML",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated>Broken. Use the CSS `overflow` rule instead.</deprecated> Sets if the loaded window should display scrollbars when the webpage is larger than the viewing window. This is similar to the CSS `overflow` rule.",
        "arguments": [
          {
            "name": "show",
            "type": "boolean",
            "description": "True if scrollbars should be visible."
          }
        ]
      }
    ]
  },
  {
    "name": "DHTMLControls",
    "parent": "Panel",
    "description": "An element providing navigation controls for a <page>DHTML</page> window.",
    "functions": [
      {
        "name": "FinishedLoading",
        "parent": "DHTMLControls",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>"
      },
      {
        "name": "SetButtonColor",
        "parent": "DHTMLControls",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the color of the navigation buttons.",
        "arguments": [
          {
            "name": "clr",
            "type": "table",
            "description": "A <page>Color</page>"
          }
        ]
      },
      {
        "name": "SetHTML",
        "parent": "DHTMLControls",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the <page>DHTML</page> element to control with these <page>DHTMLControls</page>.",
        "arguments": [
          {
            "name": "dhtml",
            "type": "Panel",
            "description": "The HTML panel"
          }
        ]
      },
      {
        "name": "StartedLoading",
        "parent": "DHTMLControls",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>"
      },
      {
        "name": "UpdateHistory",
        "parent": "DHTMLControls",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nBasically adds an URL to the history.",
        "arguments": [
          {
            "name": "url",
            "type": "string",
            "description": ""
          }
        ]
      },
      {
        "name": "UpdateNavButtonStatus",
        "parent": "DHTMLControls",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>"
      }
    ]
  },
  {
    "name": "DIconBrowser",
    "parent": "DScrollPanel",
    "description": "Simply a <page>DIconLayout</page> which automatically displays all of the <page text=\"Silkicons\">silkicons</page>.\nUsed as a way to get the user to select an icon.",
    "functions": [
      {
        "name": "Fill",
        "parent": "DIconBrowser",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nAutomatically called to fill the browser with icons. Will not work if <page>DIconBrowser:SetManual</page> is set to true."
      },
      {
        "name": "FilterByText",
        "parent": "DIconBrowser",
        "realms": [
          "client",
          "menu"
        ],
        "description": "A simple unused search feature, hides all icons that do not contain given text in their file path.",
        "arguments": [
          {
            "name": "text",
            "type": "string",
            "description": "The text to search for"
          }
        ]
      },
      {
        "name": "GetManual",
        "parent": "DIconBrowser",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether or not the browser should fill itself with icons.",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "GetSelectedIcon",
        "parent": "DIconBrowser",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the currently selected icon's file path.",
        "returnValues": [
          {
            "type": "string",
            "description": "The currently selected icon's file path."
          }
        ]
      },
      {
        "name": "OnChange",
        "parent": "DIconBrowser",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the selected icon was changed. Use <page>DIconBrowser:GetSelectedIcon</page> to get the selected icon's filepath."
      },
      {
        "name": "OnChangeInternal",
        "parent": "DIconBrowser",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nUse <page>DIconBrowser:OnChange</page> instead"
      },
      {
        "name": "ScrollToSelected",
        "parent": "DIconBrowser",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Scrolls the browser to the selected icon"
      },
      {
        "name": "SelectIcon",
        "parent": "DIconBrowser",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Selects an icon from file path",
        "arguments": [
          {
            "name": "icon",
            "type": "string",
            "description": "The file path of the icon to select. Do not include the \"materials/\" part."
          }
        ]
      },
      {
        "name": "SetManual",
        "parent": "DIconBrowser",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether or not the browser should automatically fill itself with icons.",
        "arguments": [
          {
            "name": "manual",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      {
        "name": "SetSelectedIcon",
        "parent": "DIconBrowser",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nSet the currently selected file path. Do not use. Use <page>DIconBrowser:SelectIcon</page> instead.",
        "arguments": [
          {
            "name": "str",
            "type": "string",
            "description": ""
          }
        ]
      }
    ]
  },
  {
    "name": "DIconLayout",
    "parent": "DDragBase",
    "description": "DIconLayout is what replaced <page>DPanelList</page> in Garry's Mod 13.\nDPanelList still exists in GMod but is deprecated and does not support the new GWEN skin.\n\n<page>DIconLayout</page> is used to make a list of panels.\nUnlike DPanelList, DIconLayout does not automatically add a scroll bar - the example below shows you how you can do this.",
    "functions": [
      {
        "name": "Copy",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Creates a replica of the DIconLayout it is called on.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "The replica."
          }
        ]
      },
      {
        "name": "CopyContents",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Copies the contents (Child elements) of another <page>DIconLayout</page> to itself.",
        "arguments": [
          {
            "name": "from",
            "type": "Panel",
            "description": "<page>DIconLayout</page> to copy from."
          }
        ]
      },
      {
        "name": "GetBorder",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the size of the border.",
        "returnValues": [
          {
            "type": "number"
          }
        ]
      },
      {
        "name": "GetLayoutDir",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the direction that it will be layed out, using the DOCK enumerations.",
        "returnValues": [
          {
            "type": "number",
            "description": "Layout direction."
          }
        ]
      },
      {
        "name": "GetSpaceX",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the distance between two 'icons' on the X axis.",
        "returnValues": [
          {
            "type": "number",
            "description": "Distance between two 'icons' on the X axis."
          }
        ]
      },
      {
        "name": "GetSpaceY",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns distance between two \"Icons\" on the Y axis.",
        "returnValues": [
          {
            "type": "number",
            "description": "distance between two \"Icons\" on the Y axis."
          }
        ]
      },
      {
        "name": "GetStretchHeight",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether the icon layout will stretch its height to fit all the children.\n\nSee also <page>DIconLayout:GetStretchWidth</page>",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "GetStretchWidth",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether the icon layout will stretch its width to fit all the children.\n\nSee also <page>DIconLayout:GetStretchHeight</page>",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "Layout",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Resets layout vars before calling <page>Panel:InvalidateLayout</page>. This is called when children are added or removed, and must be called when the spacing, border or layout direction is changed."
      },
      {
        "name": "LayoutIcons_LEFT",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nUsed internally to layout the child elements if the <page>DIconLayout:SetLayoutDir</page> is set to LEFT (See <page>Enums/DOCK</page>)."
      },
      {
        "name": "LayoutIcons_TOP",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nUsed internally to layout the child elements if the <page>DIconLayout:SetLayoutDir</page> is set to TOP (See <page>Enums/DOCK</page>)."
      },
      {
        "name": "OnModified",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the panel is modified."
      },
      {
        "name": "SetBorder",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the internal border (padding) within the DIconLayout. This will not change its size, only the positioning of children. You must call <page>DIconLayout:Layout</page> in order for the changes to take effect.",
        "arguments": [
          {
            "name": "width",
            "type": "number",
            "description": "The border (padding) inside the DIconLayout."
          }
        ]
      },
      {
        "name": "SetLayoutDir",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the direction that it will be layed out, using the <page>Enums/DOCK</page>.\n\nCurrently only TOP and LEFT are supported.",
        "arguments": [
          {
            "name": "direction",
            "type": "number",
            "description": "<page>Enums/DOCK</page>"
          }
        ]
      },
      {
        "name": "SetSpaceX",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the horizontal (x) spacing between children within the DIconLayout. You must call <page>DIconLayout:Layout</page> in order for the changes to take effect.",
        "arguments": [
          {
            "name": "xSpacing",
            "type": "number",
            "description": "The width of the gap between child objects."
          }
        ]
      },
      {
        "name": "SetSpaceY",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the vertical (y) spacing between children within the DIconLayout. You must call <page>DIconLayout:Layout</page> in order for the changes to take effect.",
        "arguments": [
          {
            "name": "ySpacing",
            "type": "number",
            "description": "The vertical gap between rows in the DIconLayout."
          }
        ]
      },
      {
        "name": "SetStretchHeight",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ],
        "description": "If set to true, the icon layout will stretch its height to fit all the children.\n\nSee also <page>DIconLayout:SetStretchWidth</page>",
        "arguments": [
          {
            "name": "do_stretch",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      {
        "name": "SetStretchWidth",
        "parent": "DIconLayout",
        "realms": [
          "client",
          "menu"
        ],
        "description": "If set to true, the icon layout will stretch its width to fit all the children.\n\nSee also <page>DIconLayout:SetStretchHeight</page>",
        "arguments": [
          {
            "name": "stretchW",
            "type": "boolean",
            "description": ""
          }
        ]
      }
    ]
  },
  {
    "name": "DImage",
    "parent": "DPanel",
    "description": "<page>DImage</page> is an advanced, more robust version of the <page>Material</page> panel.\n\nSee <page>DImageButton</page> for a click-able version of this panel.",
    "functions": [
      {
        "name": "DoLoadMaterial",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nActually loads the <page>IMaterial</page> to render it. Called from <page>DImage:LoadMaterial</page>."
      },
      {
        "name": "FixVertexLitMaterial",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\n\"Fixes\" the current material of the <page>DImage</page> if it has VertexLit shader by creating a new one with the same name and a prefix of \"_DImage\" and automatically calling <page>DImage:SetMaterial</page> with the new material.\n\nThis fixes the problem where using materials using shaders that expect lighting information causing \"weird\" flickering when displayed in 2D/Unlit environment."
      },
      {
        "name": "GetFailsafeMatName",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nReturns the texture path set by <page>DImage:SetFailsafeMatName</page>.",
        "returnValues": [
          {
            "type": "string"
          }
        ]
      },
      {
        "name": "GetImage",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the image loaded in the image panel.",
        "returnValues": [
          {
            "type": "string",
            "description": "The path to the image that is loaded."
          }
        ]
      },
      {
        "name": "GetImageColor",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the color override of the image panel.",
        "returnValues": [
          {
            "type": "table",
            "name": "col",
            "description": "The color override of the image. Uses the <page>Color</page>."
          }
        ]
      },
      {
        "name": "GetKeepAspect",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether the <page>DImage</page> should keep the aspect ratio of its image when being resized.\n\nSee <page>DImage:SetKeepAspect</page> for more info on how it works.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the <page>DImage</page> should keep the aspect ratio of its image when being resized."
          }
        ]
      },
      {
        "name": "GetMaterial",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the current <page>Global.Material</page> of the <page>DImage</page>.",
        "returnValues": [
          {
            "type": "IMaterial"
          }
        ]
      },
      {
        "name": "GetMatName",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nReturns the texture path set by <page>DImage:SetMatName</page>.",
        "returnValues": [
          {
            "type": "string"
          }
        ]
      },
      {
        "name": "LoadMaterial",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nInitializes the loading process of the material to render if it is not loaded yet.\n\nYou do not need to call this function. It is done for you automatically."
      },
      {
        "name": "PaintAt",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Paints a ghost copy of the DImage panel at the given position and dimensions. This function overrides <page>Panel:PaintAt</page>.",
        "arguments": [
          {
            "name": "posX",
            "type": "number",
            "description": "The x coordinate to draw the panel from."
          },
          {
            "name": "posY",
            "type": "number",
            "description": "The y coordinate to draw the panel from."
          },
          {
            "name": "width",
            "type": "number",
            "description": "The width of the panel image to be drawn."
          },
          {
            "name": "height",
            "type": "number",
            "description": "The height of the panel image to be drawn."
          }
        ]
      },
      {
        "name": "SetFailsafeMatName",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nSets the backup material to be loaded when the image is first rendered. Used by <page>DImage:SetOnViewMaterial</page>.",
        "arguments": [
          {
            "name": "backupMat",
            "type": "string",
            "description": ""
          }
        ]
      },
      {
        "name": "SetImage",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the image to load into the frame. If the first image can't be loaded and `strBackup` is set, that image will be loaded instead.\n\nThis eventually calls <page>DImage:SetMaterial</page>.",
        "arguments": [
          {
            "name": "strImage",
            "type": "string",
            "description": "The path of the image to load. When no file extension is supplied the VMT file extension is used."
          },
          {
            "name": "strBackup",
            "type": "string",
            "default": "nil",
            "description": "The path of the backup image."
          }
        ],
        "source": {
          "file": "lua/vgui/dimage.lua",
          "lineStart": 91
        }
      },
      {
        "name": "SetImageColor",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the image's color override.",
        "arguments": [
          {
            "name": "col",
            "type": "table",
            "description": "The color override of the image. Uses the <page>Color</page>."
          }
        ]
      },
      {
        "name": "SetKeepAspect",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether the <page>DImage</page> should keep the aspect ratio of its image when being resized.\n\nNote that this will not try to fit the image inside the button, but instead it will fill the button with the image.",
        "arguments": [
          {
            "name": "keep",
            "type": "boolean",
            "description": "true to keep the aspect ratio, false not to"
          }
        ]
      },
      {
        "name": "SetMaterial",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets a <page>Global.Material</page> directly as an image.",
        "arguments": [
          {
            "name": "mat",
            "type": "IMaterial",
            "description": "The material to set"
          }
        ]
      },
      {
        "name": "SetMatName",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nSets the material to be loaded when the image is first rendered. Used by <page>DImage:SetOnViewMaterial</page>.",
        "arguments": [
          {
            "name": "mat",
            "type": "string",
            "description": ""
          }
        ]
      },
      {
        "name": "SetOnViewMaterial",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Similar to <page>DImage:SetImage</page>, but will only do the expensive part of actually loading the textures/material if the material is about to be rendered/viewed.\n\nUseful for cases like <page>DIconBrowser</page>, where there are hundreds of small icons in 1 panel in a list that do not need all to be loaded at the same time.",
        "arguments": [
          {
            "name": "mat",
            "type": "string",
            "description": ""
          },
          {
            "name": "backupMat",
            "type": "string",
            "description": ""
          }
        ]
      },
      {
        "name": "Unloaded",
        "parent": "DImage",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns true if the image is **not** yet loaded.",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      }
    ]
  },
  {
    "name": "DImageButton",
    "parent": "DButton",
    "description": "An image button.\n\nThis panel inherits all methods of <page>DButton</page>, such as <page>DLabel:DoClick</page>.",
    "functions": [
      {
        "name": "DepressImage",
        "parent": "DImageButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nUsed internally to briefly scale the image when clicked."
      },
      {
        "name": "GetDepressImage",
        "parent": "DImageButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether <page>DImageButton:DepressImage</page> is functional or not.",
        "returnValues": [
          {
            "type": "boolean",
            "name": "enable",
            "description": "`true` to enable image depressing when clicked."
          }
        ]
      },
      {
        "name": "GetImage",
        "parent": "DImageButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the \"image\" of the <page>DImageButton</page>. Equivalent of <page>DImage:GetImage</page>.",
        "returnValues": [
          {
            "type": "string",
            "description": "The path to the image that is loaded."
          }
        ]
      },
      {
        "name": "GetStretchToFit",
        "parent": "DImageButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether the image inside the button should be stretched to fit it or not\n\nSee <page>DImageButton:SetStretchToFit</page>",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "SetColor",
        "parent": "DImageButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the color of the image. Equivalent of <page>DImage:SetImageColor</page>",
        "arguments": [
          {
            "name": "color",
            "type": "table",
            "description": "The <page>Global.Color</page> to set"
          }
        ]
      },
      {
        "name": "SetDepressImage",
        "parent": "DImageButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Controls whether <page>DImageButton:DepressImage</page> is functional or not.",
        "arguments": [
          {
            "name": "enable",
            "type": "boolean",
            "description": "`true` to enable image depressing when clicked."
          }
        ]
      },
      {
        "name": "SetIcon",
        "parent": "DImageButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nAlias of <page>DImageButton:SetImage</page>."
      },
      {
        "name": "SetImage",
        "parent": "DImageButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the \"image\" of the <page>DImageButton</page>. Equivalent of <page>DImage:SetImage</page>.",
        "arguments": [
          {
            "name": "strImage",
            "type": "string",
            "description": "The path of the image to load. When no file extension is supplied the VMT file extension is used."
          },
          {
            "name": "strBackup",
            "type": "string",
            "default": "nil",
            "description": "The path of the backup image."
          }
        ]
      },
      {
        "name": "SetImageVisible",
        "parent": "DImageButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Hides or shows the image of the image button. Internally this calls <page>Panel:SetVisible</page> on the internal <page>DImage</page>.",
        "arguments": [
          {
            "name": "visible",
            "type": "boolean",
            "description": "Set true to make it visible ( default ), or false to hide the image"
          }
        ]
      },
      {
        "name": "SetKeepAspect",
        "parent": "DImageButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether the <page>DImageButton</page> should keep the aspect ratio of its image. Equivalent of <page>DImage:SetKeepAspect</page>.\n\nNote that this will not try to fit the image inside the button, but instead it will fill the button with the image.",
        "arguments": [
          {
            "name": "keep",
            "type": "boolean",
            "description": "true to keep the aspect ratio, false not to"
          }
        ]
      },
      {
        "name": "SetMaterial",
        "parent": "DImageButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets a <page>Global.Material</page> directly as an image. Equivalent of <page>DImage:SetMaterial</page>.",
        "arguments": [
          {
            "name": "mat",
            "type": "IMaterial",
            "description": "The material to set"
          }
        ]
      },
      {
        "name": "SetOnViewMaterial",
        "parent": "DImageButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "See <page>DImage:SetOnViewMaterial</page>",
        "arguments": [
          {
            "name": "mat",
            "type": "string",
            "description": ""
          },
          {
            "name": "backup",
            "type": "string",
            "description": ""
          }
        ]
      },
      {
        "name": "SetStretchToFit",
        "parent": "DImageButton",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether the image inside the <page>DImageButton</page> should be stretched to fill the entire size of the button, without preserving aspect ratio.\n\nIf set to false, the image will not be resized at all.",
        "arguments": [
          {
            "name": "stretch",
            "type": "boolean",
            "description": "True to stretch, false to not to stretch"
          }
        ]
      }
    ]
  },
  {
    "name": "DKillIcon",
    "parent": "Panel",
    "description": "Uses the <page>killicon</page> to persistently draw a killicon.",
    "functions": [
      {
        "name": "GetName",
        "parent": "DKillIcon",
        "realms": [
          "client"
        ],
        "description": "Gets the killicon being shown.",
        "returnValues": [
          {
            "type": "string",
            "description": "The name of the killicon currently being displayed."
          }
        ]
      },
      {
        "name": "SetName",
        "parent": "DKillIcon",
        "realms": [
          "client"
        ],
        "description": "Sets the killicon to be displayed. You should call <page>Panel:SizeToContents</page> following this.\n\nKillicons can be added with <page>killicon.Add</page> and <page>killicon.AddFont</page>.",
        "arguments": [
          {
            "name": "iconName",
            "type": "string",
            "description": "The name of the killicon to be displayed."
          }
        ]
      }
    ]
  },
  {
    "name": "DLabel",
    "parent": "Label",
    "description": "A standard Derma text label. A lot of this panels functionality is a base for button elements, such as <page>DButton</page>\n\nDoes not support multiline text.",
    "functions": [
      {
        "name": "DoClick",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the label is left clicked (on key release) by the player.\n\nThis will be called after <page>DLabel:OnDepressed</page> and <page>DLabel:OnReleased</page>.\n\nThis can be overridden; by default, it calls <page>DLabel:Toggle</page>.\n\nSee also <page>DLabel:DoRightClick</page>, <page>DLabel:DoMiddleClick</page> and <page>DLabel:DoDoubleClick</page>."
      },
      {
        "name": "DoClickInternal",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called just before <page>DLabel:DoClick</page>.\n\nIn <page>DLabel</page> does nothing and is safe to override. Used by <page>DMenuOption</page> and <page>DCollapsibleCategory</page>'s tabs."
      },
      {
        "name": "DoDoubleClick",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the label is double clicked by the player with left clicks.\n\n<page>DLabel:SetDoubleClickingEnabled</page> must be set to true for this hook to work, which it is by default.\n\nThis will be called after <page>DLabel:OnDepressed</page> and <page>DLabel:OnReleased</page> and <page>DLabel:DoClick</page>.\n\nSee also <page>DLabel:DoRightClick</page> and <page>DLabel:DoMiddleClick</page>."
      },
      {
        "name": "DoDoubleClickInternal",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called just before <page>DLabel:DoDoubleClick</page>. In <page>DLabel</page> does nothing and is safe to override."
      },
      {
        "name": "DoMiddleClick",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the label is middle mouse (Mouse wheel, also known as mouse 3) clicked (on key release) by the player.\n\nThis will be called after <page>DLabel:OnDepressed</page> and <page>DLabel:OnReleased</page>.\n\nSee also <page>DLabel:DoClick</page>, <page>DLabel:DoRightClick</page> and <page>DLabel:DoDoubleClick</page>."
      },
      {
        "name": "DoRightClick",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the label is right clicked (on key release) by the player.\n\nThis will be called after <page>DLabel:OnDepressed</page> and <page>DLabel:OnReleased</page>.\n\nSee also <page>DLabel:DoClick</page>, <page>DLabel:DoMiddleClick</page> and <page>DLabel:DoDoubleClick</page>."
      },
      {
        "name": "GetAutoStretchVertical",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether the label stretches vertically or not.\n\nSet by <page>DLabel:SetAutoStretchVertical</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the label stretches vertically or not."
          }
        ]
      },
      {
        "name": "GetBright",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether the <page>DLabel</page> should set its text color to the current skin's bright text color.\n\nSee <page>DLabel:SetBright</page>.",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "GetColor",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the actual color of the text.\n\nSee also <page>DLabel:GetTextColor</page> and <page>DLabel:GetTextStyleColor</page>.",
        "returnValues": [
          {
            "type": "table",
            "description": "The the actual color of the text."
          }
        ]
      },
      {
        "name": "GetDark",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether the <page>DLabel</page> should set its text color to the current skin's dark text color.\n\nSee <page>DLabel:SetDark</page>.",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "GetDisabled",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated>Use <page>Panel:IsEnabled</page> instead.</deprecated>\n\nGets the disabled state of the <page>DLabel</page>. This is set with <page>DLabel:SetDisabled</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "The disabled state of the label."
          }
        ]
      },
      {
        "name": "GetDoubleClickingEnabled",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether or not double clicking will call <page>DLabel:DoDoubleClick</page>.\n\nSee <page>DLabel:SetDoubleClickingEnabled</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "true = enabled, false means disabled"
          }
        ]
      },
      {
        "name": "GetDrawBackground",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated>You should use <page>DLabel:GetPaintBackground</page> instead.</deprecated>\n\nReturns whether or not the panel background is being drawn. Alias of <page>DLabel:GetPaintBackground</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "True if the panel background is drawn, false otherwise."
          }
        ]
      },
      {
        "name": "GetFont",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the current font of the DLabel. This is set with <page>DLabel:SetFont</page>.",
        "returnValues": [
          {
            "type": "string",
            "description": "The name of the font in use."
          }
        ]
      },
      {
        "name": "GetHighlight",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether the <page>DLabel</page> should set its text color to the current skin's highlighted text color.\n\nSee <page>DLabel:SetHighlight</page>.",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "GetIsMenu",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Used internally by <page>DComboBox</page>.\n\nReturns whether the frame is part of a derma menu or not.\n\nIf this is `true`, <page>Global.CloseDermaMenus</page> will not be called when the frame is clicked, and thus any open menus will remain open.",
        "returnValues": [
          {
            "type": "boolean",
            "name": "isMenu",
            "description": "Whether this panel is a Menu Component"
          }
        ]
      },
      {
        "name": "GetIsToggle",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether the toggle functionality is enabled for a label. Set with <page>DLabel:SetIsToggle</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether or not toggle functionality is enabled."
          }
        ]
      },
      {
        "name": "GetPaintBackground",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether or not the background should be painted.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "If the background is painted or not"
          }
        ]
      },
      {
        "name": "GetTextColor",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the \"override\" text color, set by <page>DLabel:SetTextColor</page>.",
        "returnValues": [
          {
            "type": "table",
            "description": "The color of the text, or nil."
          }
        ]
      },
      {
        "name": "GetTextStyleColor",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nReturns the \"internal\" or fallback color of the text.\n\nSee also <page>DLabel:GetTextColor</page> and <page>DLabel:SetTextStyleColor</page>.",
        "returnValues": [
          {
            "type": "table",
            "description": "The \"internal\" color of the text"
          }
        ]
      },
      {
        "name": "GetToggle",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the current toggle state of the label. This can be set with <page>DLabel:SetToggle</page> and toggled with <page>DLabel:Toggle</page>.\n\nIn order to use toggle functionality, you must first call <page>DLabel:SetIsToggle</page> with `true`, as it is disabled by default.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "The current toggle state."
          }
        ]
      },
      {
        "name": "OnDepressed",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the player presses the label with any mouse button.\n\nThis works as an alternative to <page>PANEL:OnMousePressed</page> as that hook is used heavily by <page>DLabel</page> and overriding it will break functionality.\n\nSee also <page>DLabel:DoClick</page>, <page>DLabel:DoMiddleClick</page>, <page>DLabel:DoRightClick</page>, <page>DLabel:OnReleased</page> and <page>DLabel:DoDoubleClick</page>."
      },
      {
        "name": "OnReleased",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the player releases any mouse button on the label. This is always called after <page>DLabel:OnDepressed</page>.\n\nThis works as an alternative to <page>PANEL:OnMouseReleased</page> as that hook is used heavily by <page>DLabel</page> and overriding it will break functionality.\n\nSee also <page>DLabel:DoClick</page>, <page>DLabel:DoMiddleClick</page>, <page>DLabel:DoRightClick</page> and <page>DLabel:DoDoubleClick</page>."
      },
      {
        "name": "OnToggled",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the toggle state of the label is changed by <page>DLabel:Toggle</page>.\n\nIn order to use toggle functionality, you must first call <page>DLabel:SetIsToggle</page> with `true`, as it is disabled by default.",
        "arguments": [
          {
            "name": "toggleState",
            "type": "boolean",
            "description": "The new toggle state."
          }
        ]
      },
      {
        "name": "SetAutoStretchVertical",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Automatically adjusts the height of the label dependent of the height of the text inside of it.",
        "arguments": [
          {
            "name": "stretch",
            "type": "boolean",
            "description": "Whenever to stretch the label vertically or not."
          }
        ]
      },
      {
        "name": "SetBright",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the color of the text to the bright text color defined in the skin.\n\nDisables <page>DLabel:SetDark</page>. Gets overridden by <page>DLabel:SetHighlight</page>.\n\nYou should only consider using this if you are using background elements that are not manually painted and are using the skin colors. Otherwise use <page>DLabel:SetTextColor</page>.",
        "arguments": [
          {
            "name": "bright",
            "type": "boolean",
            "description": "Whenever to set the text to bright or not."
          }
        ]
      },
      {
        "name": "SetColor",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Changes color of label. Alias of <page>DLabel:SetTextColor</page>.",
        "arguments": [
          {
            "name": "color",
            "type": "table",
            "description": "The color to set. Uses the Color structure."
          }
        ]
      },
      {
        "name": "SetDark",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the color of the text to the dark text color defined in the skin.\n\nDisables <page>DLabel:SetBright</page>. Gets overridden by <page>DLabel:SetHighlight</page>.\n\nYou should only consider using this if you are using background elements that are not manually painted and are using the skin colors. Otherwise use <page>DLabel:SetTextColor</page>.",
        "arguments": [
          {
            "name": "dark",
            "type": "boolean",
            "description": "Whenever to set the text to dark or not."
          }
        ]
      },
      {
        "name": "SetDisabled",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated>Use <page>Panel:SetEnabled</page> instead.</deprecated>\n\nSets the disabled state of the <page>DLabel</page>.\n\nWhen disabled, the label does not respond to click, toggle or drag &amp; drop actions.",
        "arguments": [
          {
            "name": "disable",
            "type": "boolean",
            "description": "`true` to disable the DLabel, `false` to enable it."
          }
        ]
      },
      {
        "name": "SetDoubleClickingEnabled",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether or not double clicking should call <page>DLabel:DoDoubleClick</page>.\n\nThis is enabled by default.",
        "arguments": [
          {
            "name": "enable",
            "type": "boolean",
            "description": "true to enable, false to disable"
          }
        ]
      },
      {
        "name": "SetDrawBackground",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated>You should use <page>DLabel:SetPaintBackground</page> instead.</deprecated>Sets whether or not to draw the panel background. Alias of <page>DLabel:SetPaintBackground</page>.",
        "arguments": [
          {
            "name": "draw",
            "type": "boolean",
            "description": "True to show the panel's background, false to hide it."
          }
        ]
      },
      {
        "name": "SetFont",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the font of the label.",
        "arguments": [
          {
            "name": "fontName",
            "type": "string",
            "description": "The name of the font.\n\nSee <page text=\"here\">Default_Fonts</page> for a list of existing fonts.\nAlternatively, use <page>surface.CreateFont</page> to create your own custom font."
          }
        ]
      },
      {
        "name": "SetHighlight",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the color of the text to the highlight text color defined in the skin.\n\nFor the default Derma skin this makes the label red.\n\nOverrides colors set by both <page>DLabel:SetBright</page> and <page>DLabel:SetDark</page> while active.\n\nYou should only consider using this if you are using background elements that are not manually painted and are using the skin colors. Otherwise use <page>DLabel:SetTextColor</page>.",
        "arguments": [
          {
            "name": "highlight",
            "type": "boolean",
            "description": "true to set the label's color to skins's text highlight color, false otherwise."
          }
        ]
      },
      {
        "name": "SetIsMenu",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Used internally by <page>DComboBox</page>.\n\n\nSets whether the frame is part of a derma menu or not.\n\nIf this is set to `true`, <page>Global.CloseDermaMenus</page> will not be called when the frame is clicked, and thus any open menus will remain open.",
        "arguments": [
          {
            "name": "isMenu",
            "type": "boolean",
            "description": "Whether this pane is a Menu Component"
          }
        ]
      },
      {
        "name": "SetIsToggle",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Enables or disables toggle functionality for a label. Retrieved with <page>DLabel:GetIsToggle</page>.\n\nYou must call this before using <page>DLabel:SetToggle</page>, <page>DLabel:GetToggle</page> or <page>DLabel:Toggle</page>.",
        "arguments": [
          {
            "name": "allowToggle",
            "type": "boolean",
            "description": "Whether or not to enable toggle functionality."
          }
        ]
      },
      {
        "name": "SetPaintBackground",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether or not the background should be painted. This is mainly used by derivative classes, such as <page>DButton</page>.",
        "arguments": [
          {
            "name": "paint",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      {
        "name": "SetTextColor",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the text color of the <page>DLabel</page>. This will take precedence over <page>DLabel:SetTextStyleColor</page>.",
        "arguments": [
          {
            "name": "color",
            "type": "table",
            "description": "The text color. Uses the <page>Color</page>."
          }
        ]
      },
      {
        "name": "SetTextStyleColor",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal>Use <page>DLabel:SetTextColor</page> instead!</internal>\n\n\nUsed by <page>DLabel:SetDark</page>, <page>DLabel:SetBright</page> and <page>DLabel:SetHighlight</page> to set the text color without affecting <page>DLabel:SetTextColor</page> calls.",
        "arguments": [
          {
            "name": "color",
            "type": "table",
            "description": "The text color. Uses the <page>Color</page>."
          }
        ]
      },
      {
        "name": "SetToggle",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the toggle state of the label. This can be retrieved with <page>DLabel:GetToggle</page> and toggled with <page>DLabel:Toggle</page>.\n\nIn order to use toggle functionality, you must first call <page>DLabel:SetIsToggle</page> with `true`, as it is disabled by default.",
        "arguments": [
          {
            "name": "toggleState",
            "type": "boolean",
            "description": "The toggle state to be set."
          }
        ]
      },
      {
        "name": "Toggle",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Toggles the label's state. This can be set and retrieved with <page>DLabel:SetToggle</page> and <page>DLabel:GetToggle</page>.\n\nIn order to use toggle functionality, you must first call <page>DLabel:SetIsToggle</page> with `true`, as it is disabled by default."
      },
      {
        "name": "UpdateColours",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "A hook called from within <page>PANEL:ApplySchemeSettings</page> to determine the color of the text on display.",
        "arguments": [
          {
            "name": "skin",
            "type": "table",
            "description": "A table supposed to contain the color values listed above."
          }
        ],
        "source": {
          "file": "lua/vgui/dlabel.lua",
          "lineStart": 289,
          "lineEnd": 279
        }
      },
      {
        "name": "UpdateFGColor",
        "parent": "DLabel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nCalled internally to update the color of the text."
      }
    ]
  },
  {
    "name": "DLabelEditable",
    "parent": "DLabel",
    "description": "An editable <page>DLabel</page>, double click on it to edit.\n\nThis is used in the spawnmenu spawnlist headers.",
    "functions": [
      {
        "name": "GetAutoStretch",
        "parent": "DLabelEditable",
        "realms": [
          "client"
        ],
        "description": "Returns whether the editable label will stretch to the text entered or not.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the editable label will stretch to the text entered or not."
          }
        ]
      },
      {
        "name": "IsEditing",
        "parent": "DLabelEditable",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether this <page>DLabelEditable</page> is being edited or not. (i.e. has focus)",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether this <page>DLabelEditable</page> is being edited or not"
          }
        ]
      },
      {
        "name": "OnLabelTextChanged",
        "parent": "DLabelEditable",
        "realms": [
          "client"
        ],
        "description": "A hook called when the player presses Enter (i.e. the finished editing the label) and the text has changed.\n\nAllows you to override/modify the text that will be set to display.",
        "arguments": [
          {
            "name": "txt",
            "type": "string",
            "description": "The original user input text"
          }
        ],
        "returnValues": [
          {
            "type": "string",
            "description": "If provided, will override the text that will be applied to the label itself."
          }
        ]
      },
      {
        "name": "SetAutoStretch",
        "parent": "DLabelEditable",
        "realms": [
          "client"
        ],
        "description": "Sets whether the editable label should stretch to the text entered or not.",
        "arguments": [
          {
            "name": "stretch",
            "type": "boolean",
            "description": "Whether the editable label should stretch to the text entered or not."
          }
        ]
      }
    ]
  },
  {
    "name": "DLabelURL",
    "parent": "URLLabel",
    "description": "Underlined link label without a DoClick function. When a valid URL is set and the label is clicked, it will open a browser window and navigate to the address.\n\nThis panel uses <page>gui.OpenURL</page> internally and its restrictions apply.",
    "functions": [
      {
        "name": "GetAutoStretchVertical",
        "parent": "DLabelURL",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nDoes absolutely nothing at all.",
        "returnValues": [
          {
            "type": "boolean",
            "name": "draw",
            "description": "Does nothing."
          }
        ]
      },
      {
        "name": "GetColor",
        "parent": "DLabelURL",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Gets the current text color of the <page>DLabelURL</page>. Returns either <page>DLabelURL:GetTextColor</page> or if that is unset -  <page>DLabelURL:GetTextStyleColor</page>.",
        "returnValues": [
          {
            "type": "table",
            "description": "The current text <page>Global.Color</page>."
          }
        ]
      },
      {
        "name": "GetTextColor",
        "parent": "DLabelURL",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Gets the current text color of the <page>DLabelURL</page> set by <page>DLabelURL:SetTextColor</page>.",
        "returnValues": [
          {
            "type": "table",
            "description": "The current text <page>Global.Color</page>."
          }
        ]
      },
      {
        "name": "GetTextStyleColor",
        "parent": "DLabelURL",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the color set by <page>DLabelURL:SetTextStyleColor</page>.",
        "returnValues": [
          {
            "type": "table",
            "description": "The <page>Color</page>"
          }
        ]
      },
      {
        "name": "SetAutoStretchVertical",
        "parent": "DLabelURL",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nDoes absolutely nothing at all.",
        "arguments": [
          {
            "name": "draw",
            "type": "boolean",
            "description": "Does nothing."
          }
        ]
      },
      {
        "name": "SetColor",
        "parent": "DLabelURL",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Alias of <page>DLabelURL:SetTextColor</page>.",
        "arguments": [
          {
            "name": "col",
            "type": "table",
            "description": "The <page>Global.Color</page> to use."
          }
        ]
      },
      {
        "name": "SetTextColor",
        "parent": "DLabelURL",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the text color of the <page>DLabelURL</page>. Overrides <page>DLabelURL:SetTextStyleColor</page>.\n\n\nThis should only be used immediately after it is created, and otherwise <page>Panel:SetFGColor</page>.",
        "arguments": [
          {
            "name": "col",
            "type": "table",
            "description": "The <page>Global.Color</page> to use."
          }
        ]
      },
      {
        "name": "SetTextStyleColor",
        "parent": "DLabelURL",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the base text color of the <page>DLabelURL</page>. This is overridden by <page>DLabelURL:SetTextColor</page>.",
        "arguments": [
          {
            "name": "color",
            "type": "table",
            "description": "The <page>Global.Color</page> to set"
          }
        ]
      },
      {
        "name": "UpdateFGColor",
        "parent": "DLabelURL",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>Used internally to set correct text color via <page>Panel:SetFGColor</page> and <page>DLabelURL:GetColor</page>."
      }
    ]
  },
  {
    "name": "DListBox",
    "parent": "DPanelList",
    "description": "<deprecated>\nDerived from the deprecated <page>DPanelList</page>.\n</deprecated>\n\nA simple list box with optional multi-select.\nAs this is deprecated, it is recommended that you use <page>DListView</page>, which contains the same functionality with multi-column options.",
    "functions": [
      {
        "name": "GetMultiple",
        "parent": "DListBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether the list box can select multiple items.",
        "returnValues": [
          {
            "type": "boolean",
            "name": "multiple",
            "description": "Whether the list box can select multiple items."
          }
        ]
      },
      {
        "name": "GetSelectedItems",
        "parent": "DListBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns selected items.",
        "returnValues": [
          {
            "type": "table",
            "description": "The selected items. A list of <page>DListBoxItem</page>."
          }
        ]
      },
      {
        "name": "GetSelectedValues",
        "parent": "DListBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns selected item values.",
        "returnValues": [
          {
            "type": "table",
            "description": "The selected item values. A list of <page>Panel:GetValue</page> of each selected <page>DListBoxItem</page>."
          }
        ]
      },
      {
        "name": "SelectByName",
        "parent": "DListBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Select a <page>DListBoxItem</page> based on its value.",
        "arguments": [
          {
            "name": "val",
            "type": "string",
            "description": "<page>Panel:GetValue</page> of a <page>DListBoxItem</page> to select."
          }
        ]
      },
      {
        "name": "SelectItem",
        "parent": "DListBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nUsed internally to select a specific panel.",
        "arguments": [
          {
            "name": "item",
            "type": "Panel",
            "description": "<page>DListBox</page> to select."
          },
          {
            "name": "onlyme",
            "type": "boolean",
            "description": "Whether to deselect other selected items."
          }
        ]
      },
      {
        "name": "SetMultiple",
        "parent": "DListBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether the list box can select multiple items.",
        "arguments": [
          {
            "name": "multiple",
            "type": "boolean",
            "description": "Whether the list box can select multiple items."
          }
        ]
      },
      {
        "name": "SetSelectedItems",
        "parent": "DListBox",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\nSets selected items.",
        "arguments": [
          {
            "name": "items",
            "type": "table",
            "description": "The items to select. A list of <page>DListBoxItem</page>."
          }
        ]
      }
    ]
  },
  {
    "name": "DListBoxItem",
    "parent": "DLabel",
    "description": "<deprecated>\nUsed Internally by <page>DListBox</page>.\n</deprecated>",
    "functions": [
      {
        "name": "GetMother",
        "parent": "DListBoxItem",
        "realms": [
          "client"
        ],
        "description": "Returns the parent \"mother\" of this **DListBoxItem** set by <page>DListBoxItem:SetMother</page>.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "The \"mother\" <page>DListBox</page>."
          }
        ]
      },
      {
        "name": "Select",
        "parent": "DListBoxItem",
        "realms": [
          "client"
        ],
        "description": "Selects this item.",
        "arguments": [
          {
            "name": "onlyMe",
            "type": "boolean",
            "description": "Whether to deselect other items."
          }
        ]
      },
      {
        "name": "SetMother",
        "parent": "DListBoxItem",
        "realms": [
          "client"
        ],
        "description": "<internal></internal>\n\nSets the \"mother\" (parent) panel for this item. Done internally by <page>DListBox:AddItem</page>",
        "arguments": [
          {
            "name": "parent",
            "type": "Panel",
            "description": "The \"mother\" panel to set."
          }
        ]
      }
    ]
  },
  {
    "name": "DListLayout",
    "parent": "DDragBase",
    "description": "A vertical list of panels that optionally allows child elements to be rearranged with the mouse cursor.\n\nChild panels' widths are set to the width of the DListLayout, and it resizes vertically to accommodate the heights of all children. You can place this inside a <page>DScrollPanel</page> when adding many panels.\n\nTo enable the drag &amp; drop rearrangement functionality, call <page>DDragBase:MakeDroppable</page> on the DListLayout with a unique identifier. All panels added following this will be moveable."
  },
  {
    "name": "DListView",
    "parent": "DPanel",
    "description": "A data view with rows and columns.",
    "functions": [
      {
        "name": "AddColumn",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Adds a column to the listview.",
        "arguments": [
          {
            "name": "column",
            "type": "string",
            "description": "The name of the column to add."
          },
          {
            "name": "position",
            "type": "number",
            "default": "nil",
            "description": "At which position to insert the new column compared to the other columns. Set to 1 to add the new column before all other columns.\n\nBy default the column will be placed after all columns."
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "The newly created <page>DListView_Column</page>."
          }
        ]
      },
      {
        "name": "AddLine",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Adds a line to the list view.",
        "arguments": [
          {
            "name": "text",
            "type": "vararg",
            "description": "Values for a new row in the DListView, If several arguments are supplied, each argument will correspond to a respective column in the DListView."
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "The newly created <page>DListView_Line</page>."
          }
        ]
      },
      {
        "name": "ClearSelection",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Clears the current selection in the DListView."
      },
      {
        "name": "ColumnWidth",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Gets the width of a column.",
        "arguments": [
          {
            "name": "column",
            "type": "number",
            "description": "The column to get the width of."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "Width of the column."
          }
        ]
      },
      {
        "name": "DataLayout",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Creates the lines and gets the height of the contents, in a DListView.",
        "returnValues": [
          {
            "type": "number",
            "description": "The height of the contents"
          }
        ]
      },
      {
        "name": "DisableScrollbar",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Removes the scrollbar."
      },
      {
        "name": "DoDoubleClick",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when a line in the DListView is double clicked.",
        "arguments": [
          {
            "name": "lineID",
            "type": "number",
            "description": "The line number of the double clicked line."
          },
          {
            "name": "line",
            "type": "Panel",
            "description": "The double clicked <page>DListView_Line</page>."
          }
        ]
      },
      {
        "name": "FixColumnsLayout",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nInternal helper function called from the <page>PANEL:PerformLayout</page> of <page>DListView</page>."
      },
      {
        "name": "GetCanvas",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Gets the canvas.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "The canvas."
          }
        ]
      },
      {
        "name": "GetDataHeight",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the height of the data of the <page>DListView</page>.\n\nSee also <page>DListView:SetDataHeight</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The height of the data of the <page>DListView</page>."
          }
        ]
      },
      {
        "name": "GetDirty",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nSee <page>DListView:SetDirty</page>.",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "GetHeaderHeight",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the height of the header of the <page>DListView</page>.\n\nSee also <page>DListView:SetHeaderHeight</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The height of the header of the <page>DListView</page>."
          }
        ]
      },
      {
        "name": "GetHideHeaders",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether the header line should be visible on not.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the header line should be visible on not."
          }
        ]
      },
      {
        "name": "GetInnerTall",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the height of <page>DListView:GetCanvas</page>.\n\nIntended to represent the height of all data lines.",
        "returnValues": [
          {
            "type": "number",
            "description": "The height of <page>DListView:GetCanvas</page>."
          }
        ]
      },
      {
        "name": "GetLine",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Gets the <page>DListView_Line</page> at the given index.",
        "arguments": [
          {
            "name": "id",
            "type": "number",
            "description": "The index of the line to get."
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "The <page>DListView_Line</page> at the given index."
          }
        ]
      },
      {
        "name": "GetLines",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Gets all of the lines added to the DListView.",
        "returnValues": [
          {
            "type": "table",
            "description": "The lines added to the DListView."
          }
        ]
      },
      {
        "name": "GetMultiSelect",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether multiple lines can be selected or not.\n\nSee <page>DListView:SetMultiSelect</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether multiple lines can be selected or not."
          }
        ]
      },
      {
        "name": "GetSelected",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Gets all of the lines that are currently selected.",
        "returnValues": [
          {
            "type": "table",
            "description": "A table of <page>DListView_Line</page>s."
          }
        ]
      },
      {
        "name": "GetSelectedLine",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Gets the currently selected <page>DListView_Line</page> index.\n\nIf <page>DListView:SetMultiSelect</page> is set to true, only the first line of all selected lines will be returned. Use <page>DListView:GetSelected</page> instead to get all of the selected lines.",
        "returnValues": [
          {
            "type": "number",
            "description": "The index of the currently selected line."
          },
          {
            "type": "Panel",
            "description": "The currently selected <page>DListView_Line</page>."
          }
        ]
      },
      {
        "name": "GetSortable",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether sorting of columns by clicking their headers is allowed or not.\n\nSee also <page>DListView:SetSortable</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether sorting of columns by clicking their headers is allowed or not"
          }
        ]
      },
      {
        "name": "GetSortedID",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nConverts LineID to SortedID",
        "arguments": [
          {
            "name": "lineId",
            "type": "number",
            "description": "The <page>DListView_Line:GetID</page> of a line to look up"
          }
        ],
        "returnValues": [
          {
            "type": "number"
          }
        ]
      },
      {
        "name": "OnClickLine",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal>Use <page>DListView:OnRowSelected</page> instead!</internal>\n\nCalled whenever a line is clicked.",
        "arguments": [
          {
            "name": "line",
            "type": "Panel",
            "description": "The selected line."
          },
          {
            "name": "isSelected",
            "type": "boolean",
            "description": "Boolean indicating whether the line is selected."
          }
        ]
      },
      {
        "name": "OnRequestResize",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nCalled from <page>DListView_Column</page>.",
        "arguments": [
          {
            "name": "column",
            "type": "Panel",
            "description": "The column which initialized the resize"
          },
          {
            "name": "size",
            "type": "number",
            "description": ""
          }
        ]
      },
      {
        "name": "OnRowRightClick",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when a row is right-clicked",
        "arguments": [
          {
            "name": "lineID",
            "type": "number",
            "description": "The line ID of the right clicked line"
          },
          {
            "name": "line",
            "type": "Panel",
            "description": "The line panel itself, a <page>DListView_Line</page>."
          }
        ]
      },
      {
        "name": "OnRowSelected",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called internally by <page>DListView:OnClickLine</page> when a line is selected. This is the function you should override to define the behavior when a line is selected.",
        "arguments": [
          {
            "name": "rowIndex",
            "type": "number",
            "description": "The index of the row/line that the user clicked on."
          },
          {
            "name": "row",
            "type": "Panel",
            "description": "The <page>DListView_Line</page> that the user clicked on."
          }
        ]
      },
      {
        "name": "RemoveLine",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Removes a line from the list view.",
        "arguments": [
          {
            "name": "line",
            "type": "number",
            "description": "Removes the given row, by row id (same number as <page>DListView:GetLine</page>)."
          }
        ]
      },
      {
        "name": "SelectFirstItem",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Selects the line at the first index of the DListView if one has been added."
      },
      {
        "name": "SelectItem",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Selects a line in the listview.",
        "arguments": [
          {
            "name": "Line",
            "type": "Panel",
            "description": "The line to select."
          }
        ]
      },
      {
        "name": "SetDataHeight",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the height of all lines of the <page>DListView</page> except for the header line.\n\nSee also <page>DListView:SetHeaderHeight</page>.",
        "arguments": [
          {
            "name": "height",
            "type": "number",
            "description": "The new height to set. Default value is 17."
          }
        ]
      },
      {
        "name": "SetDirty",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nUsed internally to signify if the <page>DListView</page> needs a rebuild.",
        "arguments": [
          {
            "name": "isDirty",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      {
        "name": "SetHeaderHeight",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the height of the header line of the <page>DListView</page>.\n\nSee also <page>DListView:SetDataHeight</page>.",
        "arguments": [
          {
            "name": "height",
            "type": "number",
            "description": "The new height to set. Default value is 16."
          }
        ]
      },
      {
        "name": "SetHideHeaders",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether the header line should be visible on not.",
        "arguments": [
          {
            "name": "hide",
            "type": "boolean",
            "description": "Whether the header line should be visible on not."
          }
        ]
      },
      {
        "name": "SetMultiSelect",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether multiple lines can be selected by the user by using the <key>Ctrl</key> or <key>Shift</key> keys. When set to false, only one line can be selected.",
        "arguments": [
          {
            "name": "allowMultiSelect",
            "type": "boolean",
            "description": "Whether multiple lines can be selected or not"
          }
        ]
      },
      {
        "name": "SetSortable",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Enables/disables the sorting of columns by clicking.\n<note>\nThis will only affect columns that are created after this function is called. Existing columns will be unaffected.\n</note>",
        "arguments": [
          {
            "name": "isSortable",
            "type": "boolean",
            "description": "Whether sorting columns with clicking is allowed or not."
          }
        ]
      },
      {
        "name": "SortByColumn",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sorts the items in the specified column.",
        "arguments": [
          {
            "name": "columnIndex",
            "type": "number",
            "description": "The index of the column that should be sorted."
          },
          {
            "name": "descending",
            "type": "boolean",
            "default": "false",
            "description": "Whether the items should be sorted in descending order or not."
          }
        ]
      },
      {
        "name": "SortByColumns",
        "parent": "DListView",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sorts the list based on given columns.\n\nAll arguments are optional",
        "arguments": [
          {
            "name": "column1",
            "type": "number",
            "default": "nil",
            "description": ""
          },
          {
            "name": "descrending1",
            "type": "boolean",
            "default": "false",
            "description": ""
          },
          {
            "name": "column2",
            "type": "number",
            "default": "nil",
            "description": ""
          },
          {
            "name": "descrending2",
            "type": "boolean",
            "default": "false",
            "description": ""
          },
          {
            "name": "column3",
            "type": "number",
            "default": "nil",
            "description": ""
          },
          {
            "name": "descrending3",
            "type": "boolean",
            "default": "false",
            "description": ""
          },
          {
            "name": "column4",
            "type": "number",
            "default": "nil",
            "description": ""
          },
          {
            "name": "descrending4",
            "type": "boolean",
            "default": "false",
            "description": ""
          }
        ]
      }
    ]
  },
  {
    "name": "DListView_Column",
    "parent": "Panel",
    "description": "<internal></internal>\n\nA single column, used by <page>DListView</page>.",
    "functions": [
      {
        "name": "DoClick",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the column is left clicked (on key release) by the client.\n\nSee also <page>DListView_Column:DoRightClick</page>.",
        "source": {
          "file": "lua/vgui/dlistview_column.lua",
          "lineStart": 91,
          "lineEnd": 96
        }
      },
      {
        "name": "DoRightClick",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the column is right clicked (on key release) by the client.\n\nSee also <page>DListView_Column:DoClick</page>.",
        "source": {
          "file": "lua/vgui/dlistview_column.lua",
          "lineStart": 98,
          "lineEnd": 100
        }
      },
      {
        "name": "GetColumnID",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Gets the index used for this column.",
        "returnValues": [
          {
            "type": "number",
            "name": "index",
            "description": "The column index of the <page>DListView_Column</page>."
          }
        ]
      },
      {
        "name": "GetDescending",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether the column is sorted in descending order or not.",
        "returnValues": [
          {
            "type": "boolean",
            "name": "desc",
            "description": "Whether the column is sorted in descending order or not."
          }
        ]
      },
      {
        "name": "GetFixedWidth",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the fixed width of this column.",
        "returnValues": [
          {
            "type": "number",
            "name": "width",
            "description": "The fixed width."
          }
        ]
      },
      {
        "name": "GetMaxWidth",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the maximum width set with <page>DListView_Column:SetMaxWidth</page>.",
        "returnValues": [
          {
            "type": "number",
            "name": "width",
            "description": "The maximum width"
          }
        ]
      },
      {
        "name": "GetMinWidth",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the minimum width set with <page>DListView_Column:SetMinWidth</page>.",
        "returnValues": [
          {
            "type": "number",
            "name": "width",
            "description": "The minimum width"
          }
        ]
      },
      {
        "name": "GetTextAlign",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the text alignment for the column",
        "returnValues": [
          {
            "type": "number",
            "name": "alignment",
            "description": "The direction of the content, based on the number pad. See <page>DListView_Column:SetTextAlign</page>."
          }
        ]
      },
      {
        "name": "ResizeColumn",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Resizes the column, additionally adjusting the size of the column to the right, if any.",
        "arguments": [
          {
            "name": "size",
            "type": "number",
            "description": "The amount to add to the current column's width.\n\nPositive values will make it wider, and negative values will make it thinner."
          }
        ]
      },
      {
        "name": "SetColumnID",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>Sets the index used for this column.",
        "arguments": [
          {
            "name": "index",
            "type": "number",
            "description": "The column index of the <page>DListView_Column</page>."
          }
        ]
      },
      {
        "name": "SetDescending",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether the column is sorted in descending order or not.",
        "arguments": [
          {
            "name": "desc",
            "type": "boolean",
            "description": "Whether the column is sorted in descending order or not."
          }
        ]
      },
      {
        "name": "SetFixedWidth",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the fixed width of the column.\n<note>\nInternally this will set <page text=\"SetMinWidth\">DListView_Column:SetMinWidth</page> and <page text=\"SetMaxWidth\">DListView_Column:SetMaxWidth</page> to the value provided\n</note>",
        "arguments": [
          {
            "name": "width",
            "type": "number",
            "description": "The number value which will determine a fixed width."
          }
        ]
      },
      {
        "name": "SetMaxWidth",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the maximum width of a column.",
        "arguments": [
          {
            "name": "width",
            "type": "number",
            "description": "The number value which will determine a maximum width."
          }
        ]
      },
      {
        "name": "SetMinWidth",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the minimum width of a column.",
        "arguments": [
          {
            "name": "width",
            "type": "number",
            "description": "The number value which will determine a minimum width."
          }
        ]
      },
      {
        "name": "SetName",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the text in the column's header.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "The new name that the column's header will use."
          }
        ]
      },
      {
        "name": "SetTextAlign",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the text alignment for the column",
        "arguments": [
          {
            "name": "alignment",
            "type": "number",
            "description": "The direction of the content, based on the number pad.\n\n|   |   |   |\n| --- | --- | --- |\n| <key>7</key>: **top-left** | <key>8</key>: **top-center**\t| <key>9</key>: **top-right** |\n| <key>4</key>: **middle-left** | <key>5</key>: **center** | <key>6</key>: **middle-right** |\n| <key>1</key>: **bottom-left** | <key>2</key>: **bottom-center** | <key>3</key>: **bottom-right** |"
          }
        ]
      },
      {
        "name": "SetWidth",
        "parent": "DListView_Column",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the width of the panel.",
        "arguments": [
          {
            "name": "width",
            "type": "number",
            "description": "The number value which will determine panel width."
          }
        ]
      }
    ]
  },
  {
    "name": "DListView_ColumnPlain",
    "parent": "DListView_Column",
    "description": "<internal>\nUsed by <page>DListView</page>.\n</internal>"
  },
  {
    "name": "DListView_DraggerBar",
    "parent": "DButton",
    "description": "<internal>Used by <page>DListView</page>.</internal>"
  },
  {
    "name": "DListView_Line",
    "parent": "Panel",
    "description": "<internal></internal>\n\nA panel used by <page>DListView</page>",
    "functions": [
      {
        "name": "DataLayout",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nCalled by <page>DListView:DataLayout</page>",
        "arguments": [
          {
            "name": "pnl",
            "type": "DListView",
            "description": "The list view."
          }
        ]
      },
      {
        "name": "GetAltLine",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether this line is odd or even in the list. This is internally used (and set) to change the looks of every other line.",
        "returnValues": [
          {
            "type": "boolean",
            "name": "alt",
            "description": "Whether this line is 'alternative'."
          }
        ]
      },
      {
        "name": "GetColumnText",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Gets the string held in the specified column of a <page>DListView_Line</page> panel.\n\nThis is the same thing as doing <page text=\"DListView_Line:GetValue\">Panel:GetValue</page>( column_number ).",
        "arguments": [
          {
            "name": "column",
            "type": "number",
            "description": "The number of the column to retrieve the text from, starts with 1."
          }
        ],
        "returnValues": [
          {
            "type": "string",
            "description": "The contents of the specified column."
          }
        ]
      },
      {
        "name": "GetID",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the ID of this line, set automatically in <page>DListView:AddLine</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The ID of this line."
          }
        ]
      },
      {
        "name": "GetListView",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the parent <page>DListView</page> of this line.",
        "returnValues": [
          {
            "type": "DListView",
            "name": "pnl",
            "description": "The parent <page>DListView</page> of this line."
          }
        ]
      },
      {
        "name": "GetSortValue",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the data stored on given cell of this line.\n\nUsed in the <page>DListView:SortByColumn</page> function in case you want to sort with something else than the text.",
        "arguments": [
          {
            "name": "column",
            "type": "number",
            "description": "The number of the column to write the text from, starts with 1."
          }
        ],
        "returnValues": [
          {
            "type": "any",
            "name": "data",
            "description": "The data that is set for given column of this line, if any."
          }
        ]
      },
      {
        "name": "GetValue",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Alias of <page>DListView_Line:GetColumnText</page>. Overrides <page>Panel:GetValue</page>.",
        "arguments": [
          {
            "name": "column",
            "type": "number",
            "description": "The number of the column to retrieve the text from, starts with 1."
          }
        ],
        "returnValues": [
          {
            "type": "string",
            "description": "The contents of the specified column."
          }
        ]
      },
      {
        "name": "IsLineSelected",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether this line is selected.",
        "returnValues": [
          {
            "type": "boolean",
            "name": "selected",
            "description": "Whether this line is selected."
          }
        ]
      },
      {
        "name": "OnRightClick",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the player right clicks this line."
      },
      {
        "name": "OnSelect",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the player selects this line."
      },
      {
        "name": "SetAltLine",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\nSets whether this line is odd or even in the list. This is internally used (and set automatically) to change the looks of every other line.",
        "arguments": [
          {
            "name": "alt",
            "type": "boolean",
            "description": "Whether this line is 'alternative'."
          }
        ]
      },
      {
        "name": "SetColumnText",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the string held in the specified column of a <page>DListView_Line</page> panel.",
        "arguments": [
          {
            "name": "column",
            "type": "number",
            "description": "The number of the column to write the text from, starts with 1."
          },
          {
            "name": "value",
            "type": "string",
            "description": "Column text you want to set"
          }
        ],
        "returnValues": [
          {
            "type": "DLabel",
            "name": "label",
            "description": "The DLabel in which the text was set."
          }
        ]
      },
      {
        "name": "SetID",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\nSets the ID of this line, used internally by <page>DListView:AddLine</page>.",
        "arguments": [
          {
            "name": "id",
            "type": "number",
            "description": "The ID for this line."
          }
        ]
      },
      {
        "name": "SetListView",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nSets the parent <page>DListView</page> for this line. Used internally by <page>DListView:AddLine</page>.",
        "arguments": [
          {
            "name": "pnl",
            "type": "DListView",
            "description": "The new parent <page>DListView</page> for this line."
          }
        ]
      },
      {
        "name": "SetSelected",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether this line is selected or not.",
        "arguments": [
          {
            "name": "selected",
            "type": "boolean",
            "description": "Whether this line is selected."
          }
        ]
      },
      {
        "name": "SetSortValue",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Allows you to store data per column.\n\nUsed in the <page>DListView:SortByColumn</page> function in case you want to sort with something else than the text.",
        "arguments": [
          {
            "name": "column",
            "type": "number",
            "description": "The number of the column to write the text from, starts with 1."
          },
          {
            "name": "data",
            "type": "any",
            "description": "Data for given column on the line you wish to set."
          }
        ]
      },
      {
        "name": "SetValue",
        "parent": "DListView_Line",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Alias of <page>DListView_Line:SetColumnText</page>.",
        "arguments": [
          {
            "name": "column",
            "type": "number",
            "description": "The number of the column to write the text from, starts with 1."
          },
          {
            "name": "value",
            "type": "string",
            "description": "Column text you want to set"
          }
        ],
        "returnValues": [
          {
            "type": "DLabel",
            "name": "label",
            "description": "The DLabel in which the text was set."
          }
        ]
      }
    ]
  },
  {
    "name": "DListViewHeaderLabel",
    "parent": "DLabel",
    "description": "<internal>Used by <page>DListView_ColumnPlain</page>.</internal>"
  },
  {
    "name": "DListViewLabel",
    "parent": "DLabel",
    "description": "<internal>\nUsed by <page>DListView_Line</page>.\n</internal>"
  },
  {
    "name": "DListViewLine",
    "parent": "Panel",
    "description": "<internal>\nAlias of <page>DListView_Line</page>.\n</internal>"
  },
  {
    "name": "DMenu",
    "parent": "DScrollPanel",
    "description": "A simple menu with sub menu, icon and convar support.",
    "functions": [
      {
        "name": "AddCVar",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Creates a <page>DMenuOptionCVar</page> and adds it as an option into the menu. Checking and unchecking the option will alter the given console variable's value.",
        "arguments": [
          {
            "name": "strText",
            "type": "string",
            "description": "The text of the button"
          },
          {
            "name": "convar",
            "type": "string",
            "description": "The console variable to change"
          },
          {
            "name": "on",
            "type": "string",
            "description": "The value of the console variable to set when the option is checked"
          },
          {
            "name": "off",
            "type": "string",
            "description": "The value of the console variable to set when the option is unchecked"
          },
          {
            "name": "funcFunction",
            "type": "function",
            "default": "nil",
            "description": "If set, the function will be called every time the option is pressed/clicked/selected.\n\n<callback>\n<arg type=\"Panel\" name=\"pnl\">The <page>DMenuOptionCVar</page> that was clicked.</arg>\n</callback>"
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "The created <page>DMenuOptionCVar</page>"
          }
        ],
        "source": {
          "file": "lua/vgui/dmenu.lua",
          "lineStart": 49,
          "lineEnd": 64
        }
      },
      {
        "name": "AddOption",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Add an option to the DMenu",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "Name of the option."
          },
          {
            "name": "func",
            "type": "function",
            "default": "nil",
            "description": "Function to execute when this option is clicked.\n\n<callback>\n<arg type=\"Panel\" name=\"pnl\">The <page>DMenuOption</page> that was clicked.</arg>\n</callback>"
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "Returns the created <page>DMenuOption</page> panel."
          }
        ],
        "source": {
          "file": "lua/vgui/dmenu.lua",
          "lineStart": 36
        }
      },
      {
        "name": "AddPanel",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Adds a panel to the <page>DMenu</page> as if it were an option.\n\nThis invokes <page>DScrollPanel:AddItem</page> and will not create a new panel if a class name is passed, unlike <page>Panel:Add</page>.",
        "arguments": [
          {
            "name": "pnl",
            "type": "Panel",
            "description": "The panel that you want to add."
          }
        ],
        "source": {
          "file": "lua/vgui/dmenu.lua",
          "lineStart": 29
        }
      },
      {
        "name": "AddSpacer",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Adds a horizontal line spacer."
      },
      {
        "name": "AddSubMenu",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Add a sub menu to the DMenu",
        "arguments": [
          {
            "name": "Name",
            "type": "string",
            "description": "Name of the sub menu."
          },
          {
            "name": "func",
            "type": "function",
            "default": "nil",
            "description": "Function to execute when this sub menu is clicked.\n\n<callback>\n<arg type=\"Panel\" name=\"pnl\">The <page>DMenuOption</page> that was clicked.</arg>\n</callback>"
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "The created sub <page>DMenu</page>"
          },
          {
            "type": "Panel",
            "description": "The created <page>DMenuOption</page>"
          }
        ]
      },
      {
        "name": "ChildCount",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the number of child elements of <page>DMenu</page>'s <page>DScrollPanel:GetCanvas</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The number of child elements"
          }
        ]
      },
      {
        "name": "ClearHighlights",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nClears all highlights made by <page>DMenu:HighlightItem</page>.\n\nDoesn't appear to be used or do anything."
      },
      {
        "name": "CloseSubMenu",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nUsed internally by <page>DMenu:OpenSubMenu</page>.",
        "arguments": [
          {
            "name": "menu",
            "type": "Panel",
            "description": "The menu to close"
          }
        ]
      },
      {
        "name": "GetChild",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Gets a child by its index.",
        "arguments": [
          {
            "name": "childIndex",
            "type": "number",
            "description": "The index of the child to get.\n\n<note>Unlike <page>Panel:GetChild</page>, this index starts at 1.</note>"
          }
        ]
      },
      {
        "name": "GetDeleteSelf",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nSet by <page>DMenu:SetDeleteSelf</page>",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "GetDrawBorder",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nReturns the value set by <page>DMenu:SetDrawBorder</page>.",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "GetDrawColumn",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether the <page>DMenu</page> should draw the icon column with a different color or not.\n\nSee <page>DMenu:SetDrawColumn</page>",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether to draw the column or not"
          }
        ]
      },
      {
        "name": "GetMaxHeight",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the maximum height of the <page>DMenu</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The maximum height in pixels"
          }
        ]
      },
      {
        "name": "GetMinimumWidth",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the minimum width of the <page>DMenu</page> in pixels",
        "returnValues": [
          {
            "type": "number",
            "description": "the minimum width of the <page>DMenu</page>"
          }
        ]
      },
      {
        "name": "GetOpenSubMenu",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nReturns the currently opened submenu.\n\nUsed internally to store the open submenu by <page>DMenu:Hide</page>, <page>DMenu:OpenSubMenu</page>.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "The currently opened submenu, if any."
          }
        ]
      },
      {
        "name": "Hide",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Used to safely hide (not remove) the menu. This will also hide any opened submenues recursively."
      },
      {
        "name": "HighlightItem",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nHighlights selected item in the <page>DMenu</page> by setting the item's key \"Highlight\" to true.\n\nDoesn't appear to be working or used.",
        "arguments": [
          {
            "name": "item",
            "type": "Panel",
            "description": "The item to highlight."
          }
        ]
      },
      {
        "name": "Open",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Opens the DMenu at the current mouse position",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "default": "gui.MouseX()",
            "description": "Position (X coordinate) to open the menu at."
          },
          {
            "name": "y",
            "type": "number",
            "default": "gui.MouseY()",
            "description": "Position (Y coordinate) to open the menu at."
          },
          {
            "name": "skipanimation",
            "type": "any",
            "default": "nil",
            "description": "This argument does nothing."
          },
          {
            "name": "ownerpanel",
            "type": "Panel",
            "default": "nil",
            "description": "If `x` and `y` are not set manually, setting this argument will offset the `y` position of the opened menu by the height of given panel."
          }
        ]
      },
      {
        "name": "OpenSubMenu",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Closes any active sub menus, and opens a new one.",
        "arguments": [
          {
            "name": "item",
            "type": "Panel",
            "description": "The <page>DMenuOption</page> to open the submenu at"
          },
          {
            "name": "menu",
            "type": "Panel",
            "default": "nil",
            "description": "The submenu to open. If set to nil, the function just closes existing submenus."
          }
        ]
      },
      {
        "name": "OptionSelected",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when a option has been selected",
        "arguments": [
          {
            "name": "option",
            "type": "Panel",
            "description": "The <page>DMenuOption</page> that was selected"
          },
          {
            "name": "optionText",
            "type": "string",
            "description": "The options text"
          }
        ]
      },
      {
        "name": "OptionSelectedInternal",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nCalled by <page>DMenuOption</page>. Calls <page>DMenu:OptionSelected</page>.",
        "arguments": [
          {
            "name": "option",
            "type": "Panel",
            "description": "The <page>DMenuOption</page> that called this function"
          }
        ]
      },
      {
        "name": "SetDeleteSelf",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Set to true by default. IF set to true, the menu will be deleted when it is closed, not simply hidden.\n\nThis is used by <page>DMenuBar</page>",
        "arguments": [
          {
            "name": "newState",
            "type": "boolean",
            "description": "true to delete menu on close, false to simply hide."
          }
        ]
      },
      {
        "name": "SetDrawBorder",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nDoes nothing.",
        "arguments": [
          {
            "name": "bool",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      {
        "name": "SetDrawColumn",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether the <page>DMenu</page> should draw the icon column with a different color.",
        "arguments": [
          {
            "name": "draw",
            "type": "boolean",
            "description": "Whether to draw the column or not"
          }
        ]
      },
      {
        "name": "SetMaxHeight",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the maximum height the <page>DMenu</page> can have. If the height of all menu items exceed this value, a scroll bar will be automatically added.",
        "arguments": [
          {
            "name": "maxHeight",
            "type": "number",
            "description": "The maximum height of the <page>DMenu</page> to set, in pixels"
          }
        ]
      },
      {
        "name": "SetMinimumWidth",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the minimum width of the <page>DMenu</page>. The menu will be stretched to match the given value.",
        "arguments": [
          {
            "name": "minWidth",
            "type": "number",
            "description": "The minimum width of the <page>DMenu</page> in pixels"
          }
        ]
      },
      {
        "name": "SetOpenSubMenu",
        "parent": "DMenu",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nUsed internally to store the open submenu by <page>DMenu:Hide</page>, <page>DMenu:OpenSubMenu</page>, <page>DMenu:CloseSubMenu</page>",
        "arguments": [
          {
            "name": "item",
            "type": "Panel",
            "description": "The menu to store"
          }
        ]
      }
    ]
  },
  {
    "name": "DMenuBar",
    "parent": "DPanel",
    "description": "A simple menu bar.",
    "functions": [
      {
        "name": "AddMenu",
        "parent": "DMenuBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Creates a new <page>DMenu</page> object tied to a <page>DButton</page> with the given label on the menu bar.\n\nThis will create a new menu regardless of whether or not one with the same label exists. To add **or** get a menu, use <page>DMenuBar:AddOrGetMenu</page>.",
        "arguments": [
          {
            "name": "label",
            "type": "string",
            "description": "The name (label) of the derma menu to create."
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "The new <page>DMenu</page> which will be opened when the button is clicked."
          }
        ]
      },
      {
        "name": "AddOrGetMenu",
        "parent": "DMenuBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Retrieves a <page>DMenu</page> object from the menu bar. If one with the given label doesn't exist, a new one is created.\n\nTo add a DMenu without checking, use <page>DMenuBar:AddMenu</page>.",
        "arguments": [
          {
            "name": "label",
            "type": "string",
            "description": "The name (label) of the derma menu to get or create."
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "The <page>DMenu</page> with the given label."
          }
        ]
      },
      {
        "name": "GetDrawBackground",
        "parent": "DMenuBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated>Use <page>DMenuBar:GetPaintBackground</page> instead.</deprecated>\n\nReturns whether or not the background should be painted. Is the same as <page>DMenuBar:GetPaintBackground</page>",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Should the background be painted"
          }
        ]
      },
      {
        "name": "GetIsMenu",
        "parent": "DMenuBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether or not the panel is a menu. Used for closing menus when another panel is selected.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Is a menu"
          }
        ]
      },
      {
        "name": "GetOpenMenu",
        "parent": "DMenuBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "If a menu is visible/opened, then the menu is returned.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "Returns the visible/open menu or nil."
          }
        ]
      },
      {
        "name": "GetPaintBackground",
        "parent": "DMenuBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether or not the background should be painted. Is the same as <page>DMenuBar:GetDrawBackground</page>",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Should the background be painted"
          }
        ]
      },
      {
        "name": "SetDrawBackground",
        "parent": "DMenuBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated>Use <page>DMenuBar:SetPaintBackground</page></deprecated>\n\nSets whether or not the background should be painted. Is the same as <page>DMenuBar:SetPaintBackground</page>",
        "arguments": [
          {
            "name": "shouldPaint",
            "type": "boolean",
            "description": "Should the background be painted"
          }
        ]
      },
      {
        "name": "SetIsMenu",
        "parent": "DMenuBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether or not the panel is part of a DMenu.\n\nIf this is set to `true`, <page>Global.CloseDermaMenus</page> will not be called when the panel is clicked, and thus any open menus will remain open.",
        "arguments": [
          {
            "name": "isMenu",
            "type": "boolean",
            "description": "Is this a menu"
          }
        ]
      },
      {
        "name": "SetPaintBackground",
        "parent": "DMenuBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether or not the background should be painted. Is the same as <page>DMenuBar:SetDrawBackground</page>",
        "arguments": [
          {
            "name": "shouldPaint",
            "type": "boolean",
            "description": "Should the background be painted"
          }
        ]
      }
    ]
  },
  {
    "name": "DMenuOption",
    "parent": "DButton",
    "description": "<internal></internal>\n\nInternal subpanel that represents an option used by <page>DMenu</page>.",
    "functions": [
      {
        "name": "AddSubMenu",
        "parent": "DMenuOption",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Creates a sub <page>DMenu</page> and returns it. Has no duplicate call protection.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "The created <page>DMenu</page> to add options to."
          }
        ]
      },
      {
        "name": "GetChecked",
        "parent": "DMenuOption",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the checked state of <page>DMenuOption</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Are we checked or not"
          }
        ]
      },
      {
        "name": "GetIsCheckable",
        "parent": "DMenuOption",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether the <page>DMenuOption</page> is a checkbox option or a normal button option.",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "GetMenu",
        "parent": "DMenuOption",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns which <page>DMenu</page> this option belongs.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "A <page>DMenu</page> to which this panel belongs."
          }
        ]
      },
      {
        "name": "GetRadio",
        "parent": "DMenuOption",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether this <page>DMenuOption</page> should act like a radio button, set by <page>DMenuOption:SetRadio</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "name": "checked",
            "description": "`true` to set as a radio button."
          }
        ]
      },
      {
        "name": "OnChecked",
        "parent": "DMenuOption",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called whenever the <page>DMenuOption</page>'s checked state changes.",
        "arguments": [
          {
            "name": "checked",
            "type": "boolean",
            "description": "The new checked state"
          }
        ]
      },
      {
        "name": "SetChecked",
        "parent": "DMenuOption",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the checked state of the <page>DMenuOption</page>.\n\nInvokes <page>DMenuOption:OnChecked</page>.",
        "arguments": [
          {
            "name": "checked",
            "type": "boolean",
            "description": "`true` to set as checked."
          }
        ]
      },
      {
        "name": "SetIsCheckable",
        "parent": "DMenuOption",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether the <page>DMenuOption</page> is a checkbox option or a normal button option.\n\nEnables automatic <page>DMenuOption:GetChecked</page> toggling with left/right clicks.",
        "arguments": [
          {
            "name": "checkable",
            "type": "boolean",
            "description": "Whether the menu option should allow the player to toggle itself."
          }
        ]
      },
      {
        "name": "SetMenu",
        "parent": "DMenuOption",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>Used to set the <page>DMenu</page> for this option.",
        "arguments": [
          {
            "name": "pnl",
            "type": "Panel",
            "description": "The <page>DMenu</page> for this option."
          }
        ]
      },
      {
        "name": "SetRadio",
        "parent": "DMenuOption",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether this <page>DMenuOption</page> should act like a radio button.\n\nChecking a radio button automatically unchecks all adjacent radio buttons.",
        "arguments": [
          {
            "name": "checked",
            "type": "boolean",
            "description": "`true` to set as a radio button."
          }
        ]
      },
      {
        "name": "SetSubMenu",
        "parent": "DMenuOption",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nUsed internally by <page>DMenuOption:AddSubMenu</page> to create the submenu arrow and assign the created submenu to be opened when this option is hovered.",
        "arguments": [
          {
            "name": "menu",
            "type": "Panel",
            "description": "The sub <page>DMenu</page> this option belongs to."
          }
        ]
      },
      {
        "name": "ToggleCheck",
        "parent": "DMenuOption",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Toggles the checked state of <page>DMenuOption</page>. Does not respect <page>DMenuOption:GetIsCheckable</page>."
      }
    ]
  },
  {
    "name": "DMenuOptionCVar",
    "parent": "DMenuOption",
    "description": "<internal></internal>\n\nAn internal panel used by <page>DMenu</page>.\nIt acts as a menu option that can be checked.\nIt automatically sets and reads the given console variable.\n\nIt can be right clicked to toggle without closing the <page>DMenu</page>.\n\nUse <page>DMenu:AddCVar</page> instead.",
    "functions": [
      {
        "name": "GetConVar",
        "parent": "DMenuOptionCVar",
        "realms": [
          "client"
        ],
        "description": "Returns the <page text=\"console variable\">ConVars</page> used by the <page>DMenuOptionCVar</page>.",
        "returnValues": [
          {
            "type": "string",
            "description": "The <page text=\"console variable\">ConVars</page> used"
          }
        ]
      },
      {
        "name": "GetValueOff",
        "parent": "DMenuOptionCVar",
        "realms": [
          "client"
        ],
        "description": "Returns the value of the <page text=\"console variable\">ConVars</page> when the <page>DMenuOptionCVar</page> is not checked.",
        "returnValues": [
          {
            "type": "string",
            "description": "The value"
          }
        ]
      },
      {
        "name": "GetValueOn",
        "parent": "DMenuOptionCVar",
        "realms": [
          "client"
        ],
        "description": "Return the value of the <page text=\"console variable\">ConVars</page> when the <page>DMenuOptionCVar</page> is checked.",
        "returnValues": [
          {
            "type": "string",
            "description": "The value"
          }
        ]
      },
      {
        "name": "SetConVar",
        "parent": "DMenuOptionCVar",
        "realms": [
          "client"
        ],
        "description": "Sets the <page text=\"console variable\">ConVars</page> to be used by <page>DMenuOptionCVar</page>.",
        "arguments": [
          {
            "name": "cvar",
            "type": "string",
            "description": "The <page text=\"console variable\">ConVars</page> name to set"
          }
        ]
      },
      {
        "name": "SetValueOff",
        "parent": "DMenuOptionCVar",
        "realms": [
          "client"
        ],
        "description": "Sets the value of the <page text=\"console variable\">ConVars</page> when the <page>DMenuOptionCVar</page> is not checked.",
        "arguments": [
          {
            "name": "value",
            "type": "string",
            "description": "The value"
          }
        ]
      },
      {
        "name": "SetValueOn",
        "parent": "DMenuOptionCVar",
        "realms": [
          "client"
        ],
        "description": "Sets the value of the <page text=\"console variable\">ConVars</page> when the <page>DMenuOptionCVar</page> is checked.",
        "arguments": [
          {
            "name": "value",
            "type": "string",
            "description": "The value"
          }
        ]
      }
    ]
  },
  {
    "name": "DModelPanel",
    "parent": "DButton",
    "description": "DModelPanel is a VGUI element that projects a 3D model onto a 2D plane. See also <page>DAdjustableModelPanel</page>",
    "functions": [
      {
        "name": "DrawModel",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "description": "<internal></internal> Used by the DModelPanel's paint hook to draw the model and background."
      },
      {
        "name": "GetAmbientLight",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "description": "Returns the ambient lighting used on the rendered entity.",
        "returnValues": [
          {
            "type": "table",
            "description": "The color of the ambient lighting."
          }
        ]
      },
      {
        "name": "GetAnimated",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "description": "Returns whether or not the panel entity should be animated when the default <page>DModelPanel:LayoutEntity</page> function is called.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "True if the panel entity can be animated with <page>Entity:SetSequence</page> directly, false otherwise."
          }
        ]
      },
      {
        "name": "GetAnimSpeed",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "description": "Returns the animation speed of the panel entity, see <page>DModelPanel:SetAnimSpeed</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The animation speed."
          }
        ]
      },
      {
        "name": "GetCamPos",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "description": "Returns the position of the model viewing camera.",
        "returnValues": [
          {
            "type": "Vector",
            "description": "The position of the camera."
          }
        ]
      },
      {
        "name": "GetColor",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "description": "Returns the color of the rendered entity.",
        "returnValues": [
          {
            "type": "table",
            "description": "The color of the entity, see <page>Color</page>."
          }
        ]
      },
      {
        "name": "GetEntity",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "description": "Returns the entity being rendered by the model panel.",
        "returnValues": [
          {
            "type": "CSEnt",
            "description": "The rendered entity (client-side)"
          }
        ]
      },
      {
        "name": "GetFOV",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "description": "Returns the FOV (field of view) the camera is using.",
        "returnValues": [
          {
            "type": "number",
            "description": "The FOV of the camera."
          }
        ]
      },
      {
        "name": "GetLookAng",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "description": "Returns the angles of the model viewing camera. Is **nil** until changed with <page>DModelPanel:SetLookAng</page>.",
        "returnValues": [
          {
            "type": "Angle",
            "description": "The angles of the camera."
          }
        ]
      },
      {
        "name": "GetLookAt",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "description": "Returns the position the viewing camera is pointing toward.",
        "returnValues": [
          {
            "type": "Vector",
            "description": "The position the camera is pointing toward."
          }
        ]
      },
      {
        "name": "GetModel",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "description": "Gets the model of the rendered entity.",
        "returnValues": [
          {
            "type": "string",
            "description": "The model of the rendered entity."
          }
        ]
      },
      {
        "name": "LayoutEntity",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "description": "By default, this function slowly rotates and animates the entity being rendered.\n\nIf you want to change this behavior, you should override it.",
        "arguments": [
          {
            "name": "entity",
            "type": "Entity",
            "description": "The entity that is being rendered."
          }
        ]
      },
      {
        "name": "PostDrawModel",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "description": "Called when the entity of the <page>DModelPanel</page> was drawn.\n\nThis is a rendering hook with 3d drawing context.",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "The clientside entity of the <page>DModelPanel</page> that has been drawn."
          }
        ]
      },
      {
        "name": "PreDrawModel",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "description": "Called **before** the entity of the <page>DModelPanel</page> is drawn.",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "The clientside entity of the <page>DModelPanel</page> that has been drawn."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return false to stop the entity from being drawn. This will also cause <page>DModelPanel:PostDrawModel</page> to stop being called."
          }
        ]
      },
      {
        "name": "RunAnimation",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "description": "This function is used in <page>DModelPanel:LayoutEntity</page>. It will progress the animation, set using <page>Entity:SetSequence</page>. By default, it is the walking animation."
      },
      {
        "name": "SetAmbientLight",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "description": "Sets the ambient lighting used on the rendered entity.",
        "arguments": [
          {
            "name": "color",
            "type": "table",
            "description": "The color of the ambient lighting."
          }
        ]
      },
      {
        "name": "SetAnimated",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "description": "Sets whether or not to animate the entity when the default <page>DModelPanel:LayoutEntity</page> is called.",
        "arguments": [
          {
            "name": "animated",
            "type": "boolean",
            "description": "True to animate, false otherwise."
          }
        ]
      },
      {
        "name": "SetAnimSpeed",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "description": "Sets the speed used by <page>DModelPanel:RunAnimation</page> to advance frame on an entity sequence.\n\n<note><page>Entity:FrameAdvance</page> doesn't seem to have any functioning arguments and therefore changing this will not have any affect on the panel entity's sequence speed without reimplementation. It only affects the value returned by <page>DModelPanel:GetAnimSpeed</page></note>",
        "arguments": [
          {
            "name": "animSpeed",
            "type": "number",
            "description": "The animation speed."
          }
        ]
      },
      {
        "name": "SetCamPos",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "description": "Sets the position of the camera.",
        "arguments": [
          {
            "name": "pos",
            "type": "Vector",
            "description": "The position to set the camera at."
          }
        ]
      },
      {
        "name": "SetColor",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "description": "Sets the color of the rendered entity.\n\n<note>This does not work on Garry's Mod player models since they use a different color system. To modify a player model color, see Example 2 on the <page>DModelPanel</page> page</note>",
        "arguments": [
          {
            "name": "color",
            "type": "table",
            "description": "The render color of the entity."
          }
        ]
      },
      {
        "name": "SetDirectionalLight",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "description": "Sets the directional lighting used on the rendered entity.",
        "arguments": [
          {
            "name": "direction",
            "type": "number",
            "description": "The light direction, see <page>Enums/BOX</page>."
          },
          {
            "name": "color",
            "type": "table",
            "description": "The color of the directional lighting."
          }
        ]
      },
      {
        "name": "SetEntity",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "description": "Sets the entity to be rendered by the model panel.\n\n<note>If you set `ent` to a shared entity you must set `ent` to nil before removing this panel or else a \"Trying to remove server entity on client!\" error is thrown</note>",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "The new panel entity."
          }
        ]
      },
      {
        "name": "SetFOV",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "description": "Sets the panel camera's FOV (field of view).",
        "arguments": [
          {
            "name": "fov",
            "type": "number",
            "description": "The field of view value."
          }
        ]
      },
      {
        "name": "SetLookAng",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "description": "Sets the angles of the camera.",
        "arguments": [
          {
            "name": "ang",
            "type": "Angle",
            "description": "The angles to set the camera to."
          }
        ]
      },
      {
        "name": "SetLookAt",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "description": "Makes the panel's camera face the given position. Basically sets the camera's angles (<page>DModelPanel:SetLookAng</page>) after doing some math.",
        "arguments": [
          {
            "name": "pos",
            "type": "Vector",
            "description": "The position to orient the camera toward."
          }
        ]
      },
      {
        "name": "SetModel",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "description": "Sets the model of the rendered entity.\n\n<note>This function may give a different model than expected. This is not a bug, however this problem may appear with some player models which are renamed several times in a wrong way. To solve that, you can use <page>Entity:SetModel</page> and <page>Entity:SetModelName</page> on the internal panel entity. More information : https://github.com/Facepunch/garrysmod-issues/issues/4534.</note>",
        "arguments": [
          {
            "name": "model",
            "type": "string",
            "description": "The model to apply to the entity."
          }
        ]
      },
      {
        "name": "StartScene",
        "parent": "DModelPanel",
        "realms": [
          "client"
        ],
        "description": "Runs a <page>Global.ClientsideScene</page> on the panel's entity.",
        "arguments": [
          {
            "name": "path",
            "type": "string",
            "description": "The path to the scene file. (.vcd)"
          }
        ]
      }
    ]
  },
  {
    "name": "DModelSelect",
    "parent": "DPanelSelect",
    "description": "<deprecated>\nThis is derived from the deprecated <page>DPanelList</page>.\n</deprecated>\n\nA vertical list of models.",
    "functions": [
      {
        "name": "SetHeight",
        "parent": "DModelSelect",
        "realms": [
          "client"
        ],
        "description": "Sets the height of the panel **in the amount of 64px spawnicons**.\n\nOverrides <page>Panel:SetHeight</page>.",
        "arguments": [
          {
            "name": "num",
            "type": "number",
            "default": "2",
            "description": "Basically how many rows of 64x64 px spawnicons should fit in this DModelSelect"
          }
        ]
      },
      {
        "name": "SetModelList",
        "parent": "DModelSelect",
        "realms": [
          "client"
        ],
        "description": "Called to set the list of models within the panel element.",
        "arguments": [
          {
            "name": "models",
            "type": "table",
            "description": "Each key is a model path, the value is a kay-value table where they key is a convar name and value is the value to set to that convar."
          },
          {
            "name": "convar",
            "type": "string",
            "description": "<page>ConVar</page> to set when a model from this list is selected."
          },
          {
            "name": "dontSort",
            "type": "boolean",
            "description": "Do not sort the list. (by the `Model` member)"
          },
          {
            "name": "dontCallListConVars",
            "type": "boolean",
            "description": "If set, only the `convar` from the 2nd argument will be set, not individual convars from the models list."
          }
        ]
      }
    ]
  },
  {
    "name": "DModelSelectMulti",
    "parent": "DPropertySheet",
    "description": "<deprecated></deprecated>\nA combination of <page>DModelSelect</page> and <page>DPropertySheet</page>.",
    "functions": [
      {
        "name": "AddModelList",
        "parent": "DModelSelectMulti",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Adds a new tab of models.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "Name of the tab to add."
          },
          {
            "name": "models",
            "type": "table",
            "description": "Models list for this tab. See <page>DModelSelect:SetModelList</page>."
          },
          {
            "name": "convar",
            "type": "string",
            "description": "<page>ConVar</page> to set when a model from this list is selected."
          },
          {
            "name": "dontSort",
            "type": "boolean",
            "description": "Do not sort the list. (by the `Model` member)"
          },
          {
            "name": "dontCallListConVars",
            "type": "boolean",
            "description": "If set, only the `convar` from the 2nd argument will be set, not individual convars from the models list."
          }
        ]
      }
    ]
  },
  {
    "name": "DNotify",
    "parent": "Panel",
    "description": "A panel that fades its contents in and out once, like a notification.",
    "functions": [
      {
        "name": "AddItem",
        "parent": "DNotify",
        "realms": [
          "client"
        ],
        "description": "Adds a panel to the notification",
        "arguments": [
          {
            "name": "pnl",
            "type": "Panel",
            "description": "The panel to add"
          },
          {
            "name": "lifeLength",
            "type": "number",
            "default": "nil",
            "description": "If set, overrides <page>DNotify:SetLife</page> for when the given panel should be removed."
          }
        ]
      },
      {
        "name": "GetAlignment",
        "parent": "DNotify",
        "realms": [
          "client"
        ],
        "description": "Returns the current alignment of this notification panel. Set by <page>DNotify:SetAlignment</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The numpad alignment"
          }
        ]
      },
      {
        "name": "GetItems",
        "parent": "DNotify",
        "realms": [
          "client"
        ],
        "description": "Returns all the items added with <page>DNotify:AddItem</page>.",
        "returnValues": [
          {
            "type": "table",
            "description": "A table of <page>Panel</page>s."
          }
        ]
      },
      {
        "name": "GetLife",
        "parent": "DNotify",
        "realms": [
          "client"
        ],
        "description": "Returns the display time in seconds of the DNotify. This is set with\n<page>DNotify:SetLife</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The display time in seconds."
          }
        ]
      },
      {
        "name": "GetSpacing",
        "parent": "DNotify",
        "realms": [
          "client"
        ],
        "description": "Returns the spacing between items set by <page>DNotify:SetSpacing</page>.",
        "returnValues": [
          {
            "type": "number"
          }
        ]
      },
      {
        "name": "SetAlignment",
        "parent": "DNotify",
        "realms": [
          "client"
        ],
        "description": "Sets the alignment of the child panels in the notification",
        "arguments": [
          {
            "name": "alignment",
            "type": "number",
            "description": "It's the Numpad alignment, 6 is right, 9 is top left, etc."
          }
        ]
      },
      {
        "name": "SetLife",
        "parent": "DNotify",
        "realms": [
          "client"
        ],
        "description": "Sets the display time in seconds for the DNotify.",
        "arguments": [
          {
            "name": "time",
            "type": "number",
            "description": "The time in seconds."
          }
        ]
      },
      {
        "name": "SetSpacing",
        "parent": "DNotify",
        "realms": [
          "client"
        ],
        "description": "Sets the spacing between child elements of the notification panel.",
        "arguments": [
          {
            "name": "spacing",
            "type": "number",
            "description": ""
          }
        ]
      },
      {
        "name": "Shuffle",
        "parent": "DNotify",
        "realms": [
          "client"
        ],
        "description": "<internal></internal>Used internally to position and fade in/out its <page>DNotify:GetItems</page>."
      }
    ]
  },
  {
    "name": "DNumberScratch",
    "parent": "DImageButton",
    "description": "Choose a number from a number line, with zooming for precision.\nZoom in by moving your mouse forward and moving back does the opposite. Looks like a blue circle until you click and hold on it",
    "functions": [
      {
        "name": "DrawNotches",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nUsed by <page>DNumberScratch:DrawScreen</page>.",
        "arguments": [
          {
            "name": "level",
            "type": "number",
            "description": ""
          },
          {
            "name": "x",
            "type": "number",
            "description": ""
          },
          {
            "name": "y",
            "type": "number",
            "description": ""
          },
          {
            "name": "w",
            "type": "number",
            "description": ""
          },
          {
            "name": "h",
            "type": "number",
            "description": ""
          },
          {
            "name": "range",
            "type": "number",
            "description": ""
          },
          {
            "name": "value",
            "type": "number",
            "description": ""
          },
          {
            "name": "min",
            "type": "number",
            "description": ""
          },
          {
            "name": "max",
            "type": "number",
            "description": ""
          }
        ]
      },
      {
        "name": "DrawScreen",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nUsed by <page>DNumberScratch:PaintScratchWindow</page>.",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "description": ""
          },
          {
            "name": "y",
            "type": "number",
            "description": ""
          },
          {
            "name": "w",
            "type": "number",
            "description": ""
          },
          {
            "name": "h",
            "type": "number",
            "description": ""
          }
        ]
      },
      {
        "name": "GetActive",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether this panel is active or not, i.e. if the player is currently changing its value.",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "GetDecimals",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the desired amount of numbers after the decimal point.",
        "returnValues": [
          {
            "type": "number",
            "description": "0 for whole numbers only, 1 for one number after the decimal point, etc."
          }
        ]
      },
      {
        "name": "GetFloatValue",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the real value of the <page>DNumberScratch</page> as a number.\n\nSee also <page>DNumberScratch:GetTextValue</page> and <page>DNumberScratch:GetFraction</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The real value of the <page>DNumberScratch</page>"
          }
        ]
      },
      {
        "name": "GetFraction",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the value of the <page>DNumberScratch</page> as a fraction, a value between 0 and 1 where 0 is the minimum and 1 is the maximum value of the <page>DNumberScratch</page>.\n\nSee also:\n* <page>DNumberScratch:GetTextValue</page>\n* <page>DNumberScratch:GetFloatValue</page>\n* <page>DNumberScratch:SetFraction</page>",
        "returnValues": [
          {
            "type": "number",
            "description": "A value between 0 and 1"
          }
        ]
      },
      {
        "name": "GetMax",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the maximum value that can be selected on the number scratch",
        "returnValues": [
          {
            "type": "number",
            "description": "The maximum value that can be selected on the number scratch"
          }
        ]
      },
      {
        "name": "GetMin",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the minimum value that can be selected on the number scratch",
        "returnValues": [
          {
            "type": "number",
            "description": "The minimum value that can be selected on the number scratch"
          }
        ]
      },
      {
        "name": "GetRange",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the range of the <page>DNumberScratch</page>. Basically max value - min value.",
        "returnValues": [
          {
            "type": "number",
            "description": "The range of the <page>DNumberScratch</page>"
          }
        ]
      },
      {
        "name": "GetShouldDrawScreen",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether the scratch window should be visible or not.",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "GetTextValue",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the real value of the <page>DNumberScratch</page> as a string.\n\nSee also <page>DNumberScratch:GetFloatValue</page> and <page>DNumberScratch:GetFraction</page>.",
        "returnValues": [
          {
            "type": "string",
            "description": "The real value of the <page>DNumberScratch</page>"
          }
        ]
      },
      {
        "name": "GetZoom",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the zoom level of the scratch window",
        "returnValues": [
          {
            "type": "number"
          }
        ]
      },
      {
        "name": "IdealZoom",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the ideal zoom level for the panel based on the <page>DNumberScratch:GetRange</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The ideal zoom level for the panel based on the panels range."
          }
        ]
      },
      {
        "name": "IsEditing",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether the player is currently editing the value of the <page>DNumberScratch</page>.",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "LockCursor",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nUsed to lock the cursor in place."
      },
      {
        "name": "OnValueChanged",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the value of the <page>DNumberScratch</page> is changed.",
        "arguments": [
          {
            "name": "newValue",
            "type": "number",
            "description": "The new value"
          }
        ]
      },
      {
        "name": "PaintScratchWindow",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nUsed to paint the 'scratch' window."
      },
      {
        "name": "SetActive",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nSets whether or not the panel is 'active'.\n\nForcing this panel to be active may not work.",
        "arguments": [
          {
            "name": "active",
            "type": "boolean",
            "description": "true to activate, false to deactivate."
          }
        ]
      },
      {
        "name": "SetDecimals",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the desired amount of numbers after the decimal point.",
        "arguments": [
          {
            "name": "decimals",
            "type": "number",
            "description": "0 for whole numbers only, 1 for one number after the decimal point, etc."
          }
        ]
      },
      {
        "name": "SetFloatValue",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nDoes not trigger <page>DNumberScratch:OnValueChanged</page>\n\nUse <page>DNumberScratch:SetValue</page> instead.",
        "arguments": [
          {
            "name": "val",
            "type": "number",
            "description": "The value to set"
          }
        ]
      },
      {
        "name": "SetFraction",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the value of the <page>DNumberScratch</page> as a fraction, a value between 0 and 1 where 0 is the minimum and 1 is the maximum value of the <page>DNumberScratch</page>",
        "arguments": [
          {
            "name": "frac",
            "type": "number",
            "description": "A value between 0 and 1"
          }
        ]
      },
      {
        "name": "SetMax",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the max value that can be selected on the number scratch",
        "arguments": [
          {
            "name": "max",
            "type": "number",
            "description": "The maximum number"
          }
        ]
      },
      {
        "name": "SetMin",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the minimum value that can be selected on the number scratch.",
        "arguments": [
          {
            "name": "min",
            "type": "number",
            "description": "The minimum number"
          }
        ]
      },
      {
        "name": "SetShouldDrawScreen",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nSets if the scratch window should be drawn or not. Cannot be used to force it to draw, only to hide it, which will not stop the panel from working with invisible window.",
        "arguments": [
          {
            "name": "shouldDraw",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      {
        "name": "SetValue",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the value of the <page>DNumberScratch</page> and triggers <page>DNumberScratch:OnValueChanged</page>",
        "arguments": [
          {
            "name": "val",
            "type": "number",
            "description": "The value to set."
          }
        ]
      },
      {
        "name": "SetZoom",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the zoom level of the scratch panel.",
        "arguments": [
          {
            "name": "zoom",
            "type": "number",
            "description": ""
          }
        ]
      },
      {
        "name": "UpdateConVar",
        "parent": "DNumberScratch",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nForces the assigned ConVar to be updated to the value of this <page>DNumberScratch</page>"
      }
    ]
  },
  {
    "name": "DNumberWang",
    "parent": "DTextEntry",
    "description": "DNumberWang is a VGUI element that allows you to input a numeric value using up and down arrows or direct entry.",
    "functions": [
      {
        "name": "GetDecimals",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the amount of decimal places allowed in the number selector, set by <page>DNumberWang:SetDecimals</page>",
        "returnValues": [
          {
            "type": "number",
            "description": "The amount of decimal places allowed in the number selector."
          }
        ]
      },
      {
        "name": "GetFloatValue",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nReturns whatever is set by <page>DNumberWang:SetFloatValue</page> or 0.",
        "returnValues": [
          {
            "type": "number"
          }
        ]
      },
      {
        "name": "GetFraction",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns a fraction representing the current number selector value to number selector min/max range ratio. If argument `val` is supplied, that number will be computed instead.",
        "arguments": [
          {
            "name": "val",
            "type": "number",
            "description": "The fraction numerator."
          }
        ]
      },
      {
        "name": "GetInterval",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns interval at which the up and down buttons change the current value.",
        "returnValues": [
          {
            "type": "number",
            "name": "min",
            "description": "The current interval."
          }
        ]
      },
      {
        "name": "GetMax",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the maximum numeric value allowed by the number selector.",
        "returnValues": [
          {
            "type": "number",
            "description": "The maximum value."
          }
        ]
      },
      {
        "name": "GetMin",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the minimum numeric value allowed by the number selector.",
        "returnValues": [
          {
            "type": "number",
            "description": "The minimum number."
          }
        ]
      },
      {
        "name": "GetTextArea",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nThis function returns the panel it is used on.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "self"
          }
        ]
      },
      {
        "name": "GetValue",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the numeric value inside the number selector.",
        "returnValues": [
          {
            "type": "number",
            "description": "The numeric value."
          }
        ]
      },
      {
        "name": "HideWang",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Hides the number selector arrows."
      },
      {
        "name": "OnValueChanged",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the number selector value is changed.",
        "arguments": [
          {
            "name": "val",
            "type": "number",
            "description": "The new value of the number selector."
          }
        ]
      },
      {
        "name": "SetDecimals",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the amount of decimal places allowed in the number selector.",
        "arguments": [
          {
            "name": "num",
            "type": "number",
            "description": "The amount of decimal places."
          }
        ]
      },
      {
        "name": "SetFloatValue",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nAppears to do nothing.",
        "arguments": [
          {
            "name": "val",
            "type": "number",
            "description": ""
          }
        ]
      },
      {
        "name": "SetFraction",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the value of the number selector based on the given fraction number.",
        "arguments": [
          {
            "name": "val",
            "type": "number",
            "description": "The fraction of the number selector's range."
          }
        ]
      },
      {
        "name": "SetInterval",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets interval at which the up and down buttons change the current value.",
        "arguments": [
          {
            "name": "min",
            "type": "number",
            "description": "The new interval."
          }
        ]
      },
      {
        "name": "SetMax",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the maximum numeric value allowed by the number selector.",
        "arguments": [
          {
            "name": "max",
            "type": "number",
            "description": "The maximum value."
          }
        ]
      },
      {
        "name": "SetMin",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the minimum numeric value allowed by the number selector.",
        "arguments": [
          {
            "name": "min",
            "type": "number",
            "description": "The minimum value."
          }
        ]
      },
      {
        "name": "SetMinMax",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the minimum and maximum value allowed by the number selector.",
        "arguments": [
          {
            "name": "min",
            "type": "number",
            "description": "The minimum value."
          },
          {
            "name": "max",
            "type": "number",
            "description": "The maximum value."
          }
        ]
      },
      {
        "name": "SetValue",
        "parent": "DNumberWang",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the value of the <page>DNumberWang</page> and triggers <page>DNumberWang:OnValueChanged</page>",
        "arguments": [
          {
            "name": "val",
            "type": "number",
            "description": "The value to set."
          }
        ]
      }
    ]
  },
  {
    "name": "DNumPad",
    "parent": "DPanel",
    "description": "<deprecated>\nYou should use <page>DBinder</page> instead.\n</deprecated>\n\nGMod 12 style \"number pad\" panel used by tools for binding keys to tool actions. Deprecated in favor of <page>DBinder</page>."
  },
  {
    "name": "DNumSlider",
    "parent": "Panel",
    "description": "The **DNumSlider** allows you to create a slider, allowing the user to slide it to set a value, or changing the value in the box.",
    "functions": [
      {
        "name": "GetDecimals",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the amount of numbers after the decimal point.",
        "returnValues": [
          {
            "type": "number",
            "description": "0 for whole numbers only, 1 for one number after the decimal point, etc."
          }
        ]
      },
      {
        "name": "GetDefaultValue",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the default value of the slider, if one was set by <page>DNumSlider:SetDefaultValue</page>",
        "returnValues": [
          {
            "type": "number",
            "description": "The default value of the slider"
          }
        ]
      },
      {
        "name": "GetMax",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the maximum value of the slider",
        "returnValues": [
          {
            "type": "number",
            "description": "The maximum value of the slider"
          }
        ]
      },
      {
        "name": "GetMin",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the minimum value of the slider",
        "returnValues": [
          {
            "type": "number",
            "description": "The minimum value of the slider"
          }
        ]
      },
      {
        "name": "GetRange",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the range of the slider, basically maximum value - minimum value.",
        "returnValues": [
          {
            "type": "number",
            "description": "The range of the slider"
          }
        ]
      },
      {
        "name": "GetTextArea",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the <page>DTextEntry</page> component of the slider.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "The <page>DTextEntry</page>."
          }
        ]
      },
      {
        "name": "GetValue",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the value of the <page>DNumSlider</page>",
        "returnValues": [
          {
            "type": "number",
            "description": "The value of the slider."
          }
        ]
      },
      {
        "name": "IsEditing",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns true if either the <page>DTextEntry</page>, the <page>DSlider</page> or the <page>DNumberScratch</page> are being edited.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether or not the <page>DNumSlider</page> is being edited by the player."
          }
        ]
      },
      {
        "name": "OnValueChanged",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the value of the slider is changed, through code or changing the slider.",
        "arguments": [
          {
            "name": "value",
            "type": "number",
            "description": "The new value of the DNumSlider."
          }
        ],
        "source": {
          "file": "lua/vgui/dnumslider.lua",
          "lineStart": 193,
          "lineEnd": 197
        }
      },
      {
        "name": "ResetToDefaultValue",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Resets the slider to the default value, if one was set by <page>DNumSlider:SetDefaultValue</page>.\n\nThis function is called by the <page>DNumSlider</page> when user middle mouse clicks on the draggable knob of the slider."
      },
      {
        "name": "SetConVar",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the console variable to be updated when the value of the slider is changed.",
        "arguments": [
          {
            "name": "cvar",
            "type": "string",
            "description": "The name of the <page>ConVar</page> to be updated."
          }
        ]
      },
      {
        "name": "SetDark",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Calls <page>DLabel:SetDark</page> on the <page>DLabel</page> part of the <page>DNumSlider</page>.",
        "arguments": [
          {
            "name": "dark",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      {
        "name": "SetDecimals",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the desired amount of numbers after the decimal point.\n<note>\nThis doesn't affect values passed to <page>DNumSlider:OnValueChanged</page>.\n</note>\n\n<note>\nTo get right values passed to <page>DNumSlider:OnValueChanged</page> use <page>math.Round</page>.\n</note>",
        "arguments": [
          {
            "name": "decimals",
            "type": "number",
            "description": "0 for whole numbers only, 1 for one number after the decimal point, etc."
          }
        ]
      },
      {
        "name": "SetDefaultValue",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the default value of the slider, to be used by <page>DNumSlider:ResetToDefaultValue</page> or by middle mouse clicking the draggable knob of the slider.",
        "arguments": [
          {
            "name": "default",
            "type": "number",
            "description": "The new default value of the slider to set"
          }
        ]
      },
      {
        "name": "SetMax",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the maximum value for the slider.",
        "arguments": [
          {
            "name": "max",
            "type": "number",
            "description": "The value to set as maximum for the slider."
          }
        ]
      },
      {
        "name": "SetMin",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the minimum value for the slider",
        "arguments": [
          {
            "name": "min",
            "type": "number",
            "description": "The value to set as minimum for the slider."
          }
        ]
      },
      {
        "name": "SetMinMax",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the minimum and the maximum value of the slider.",
        "arguments": [
          {
            "name": "min",
            "type": "number",
            "description": "The minimum value of the slider."
          },
          {
            "name": "max",
            "type": "number",
            "description": "The maximum value of the slider."
          }
        ]
      },
      {
        "name": "SetValue",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the value of the <page>DNumSlider</page>.",
        "arguments": [
          {
            "name": "val",
            "type": "number",
            "description": "The value to set."
          }
        ]
      },
      {
        "name": "TranslateSliderValues",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "description": ""
          },
          {
            "name": "y",
            "type": "number",
            "description": ""
          }
        ],
        "returnValues": [
          {
            "type": "number"
          },
          {
            "type": "number",
            "description": "The second passed argument."
          }
        ]
      },
      {
        "name": "UpdateNotches",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>Updates visual notches on the slider."
      },
      {
        "name": "ValueChanged",
        "parent": "DNumSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal> Called when the value has been changed. This will also be called when the user manually changes the value through the text panel.\n\nThis is an internal function. Override <page>DNumSlider:OnValueChanged</page> instead.",
        "arguments": [
          {
            "name": "value",
            "type": "number",
            "description": "The value the slider has been changed to."
          }
        ]
      }
    ]
  },
  {
    "name": "DPanel",
    "parent": "Panel",
    "description": "A simple rectangular box, commonly used for parenting other elements to. Pretty much all elements are based on this.",
    "functions": [
      {
        "name": "GetBackgroundColor",
        "parent": "DPanel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the panel's background color.\n\n<note>By default this returns **nil** even though the default background color is white</note>",
        "returnValues": [
          {
            "type": "table",
            "description": "Color of the panel's background."
          }
        ]
      },
      {
        "name": "GetDisabled",
        "parent": "DPanel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether or not the panel is disabled.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "True if the panel is disabled (mouse input disabled and background alpha set to 75), false if its enabled (mouse input enabled and background alpha set to 255)."
          }
        ]
      },
      {
        "name": "GetDrawBackground",
        "parent": "DPanel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated>You should use <page>DPanel:GetPaintBackground</page> instead.</deprecated>Returns whether or not the panel background is being drawn. Alias of <page>DPanel:GetPaintBackground</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "True if the panel background is drawn, false otherwise."
          }
        ]
      },
      {
        "name": "GetIsMenu",
        "parent": "DPanel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Used internally by <page>DMenu</page>.\n\nReturns whether the frame is part of a derma menu or not.\n\nIf this is `true`, <page>Global.CloseDermaMenus</page> will not be called when the frame is clicked, and thus any open menus will remain open.",
        "returnValues": [
          {
            "type": "boolean",
            "name": "isMenu",
            "description": "Whether this panel is a Menu Component"
          }
        ]
      },
      {
        "name": "GetPaintBackground",
        "parent": "DPanel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether or not the panel background is being drawn.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "True if the panel background is drawn, false otherwise."
          }
        ]
      },
      {
        "name": "GetTabbingDisabled",
        "parent": "DPanel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>Does nothing. Returns value set by <page>DPanel:SetTabbingDisabled</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "name": "draw"
          }
        ]
      },
      {
        "name": "SetBackgroundColor",
        "parent": "DPanel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the background color of the panel.",
        "arguments": [
          {
            "name": "color",
            "type": "table",
            "description": "The background color."
          }
        ]
      },
      {
        "name": "SetDisabled",
        "parent": "DPanel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether or not to disable the panel.",
        "arguments": [
          {
            "name": "disabled",
            "type": "boolean",
            "description": "True to disable the panel (mouse input disabled and background alpha set to 75), false to enable it (mouse input enabled and background alpha set to 255)."
          }
        ]
      },
      {
        "name": "SetDrawBackground",
        "parent": "DPanel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated>You should use <page>DPanel:SetPaintBackground</page> instead.</deprecated>Sets whether or not to draw the panel background. Alias of <page>DPanel:SetPaintBackground</page>.",
        "arguments": [
          {
            "name": "draw",
            "type": "boolean",
            "description": "True to show the panel's background, false to hide it."
          }
        ]
      },
      {
        "name": "SetIsMenu",
        "parent": "DPanel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Used internally by <page>DMenu</page>.\n\n\nSets whether the frame is part of a derma menu or not.\n\nIf this is set to `true`, <page>Global.CloseDermaMenus</page> will not be called when the frame is clicked, and thus any open menus will remain open.",
        "arguments": [
          {
            "name": "isMenu",
            "type": "boolean",
            "description": "Whether this pane is a Menu Component"
          }
        ]
      },
      {
        "name": "SetPaintBackground",
        "parent": "DPanel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether or not to paint/draw the panel background.",
        "arguments": [
          {
            "name": "paint",
            "type": "boolean",
            "description": "True to show the panel's background, false to hide it."
          }
        ]
      },
      {
        "name": "SetTabbingDisabled",
        "parent": "DPanel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>Does nothing.",
        "arguments": [
          {
            "name": "draw",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      {
        "name": "UpdateColours",
        "parent": "DPanel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nDoes nothing."
      }
    ]
  },
  {
    "name": "DPanelList",
    "parent": "DPanel",
    "description": "Displays elements in a horizontal or vertical list. A scrollbar is automatically shown if necessary.\nYou can get its vertical bar via `DPanelList.VBar`.\n<page>DPanelList</page> was succeeded in version 13 by more specialised layout elements.\n\n<deprecated>\n<br> Use a combination of <page>DIconLayout</page>, <page>DListLayout</page> and <page>DScrollPanel</page> instead.\n</deprecated>",
    "functions": [
      {
        "name": "AddItem",
        "parent": "DPanelList",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Adds a existing panel to the end of <page>DPanelList</page>.",
        "arguments": [
          {
            "name": "pnl",
            "type": "Panel",
            "description": "Panel to be used as element of list"
          },
          {
            "name": "state",
            "type": "string",
            "default": "nil",
            "description": "If set to \"ownline\", the item will take its own entire line."
          }
        ]
      },
      {
        "name": "CleanList",
        "parent": "DPanelList",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Removes all items."
      },
      {
        "name": "EnableVerticalScrollbar",
        "parent": "DPanelList",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Enables/creates the vertical scroll bar so that the panel list can be scrolled through."
      },
      {
        "name": "GetItems",
        "parent": "DPanelList",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns all panels has added by <page>DPanelList:AddItem</page>",
        "returnValues": [
          {
            "type": "table",
            "description": "A table of panels used as items of <page>DPanelList</page>."
          }
        ]
      },
      {
        "name": "GetPadding",
        "parent": "DPanelList",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns offset of list items from the panel borders set by <page>DPanelList:SetPadding</page>",
        "returnValues": [
          {
            "type": "number",
            "description": "Offset from panel borders"
          }
        ]
      },
      {
        "name": "GetSpacing",
        "parent": "DPanelList",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns distance between list items set by <page>DPanelList:SetSpacing</page>",
        "returnValues": [
          {
            "type": "number",
            "description": "Distance between panels"
          }
        ]
      },
      {
        "name": "InsertAtTop",
        "parent": "DPanelList",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Insert given panel at the top of the list.",
        "arguments": [
          {
            "name": "insert",
            "type": "Panel",
            "description": "The panel to insert"
          },
          {
            "name": "strLineState",
            "type": "string",
            "description": "If set to \"ownline\", no other panels will be placed to the left or right of the panel we are inserting"
          }
        ]
      },
      {
        "name": "Rebuild",
        "parent": "DPanelList",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\nUsed internally to rebuild the child panel positions."
      },
      {
        "name": "SetAutoSize",
        "parent": "DPanelList",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the <page>DPanelList</page> to size its height to its contents. This is set to false by default.",
        "arguments": [
          {
            "name": "shouldSizeToContents",
            "type": "boolean",
            "description": "Whether to size to the height of the <page>DPanelList</page> contents."
          }
        ],
        "source": {
          "file": "lua/vgui/dpanellist.lua",
          "lineStart": 4
        }
      },
      {
        "name": "SetPadding",
        "parent": "DPanelList",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the offset of the lists items from the panel borders",
        "arguments": [
          {
            "name": "Offset",
            "type": "number",
            "description": "Offset from panel borders"
          }
        ]
      },
      {
        "name": "SetSpacing",
        "parent": "DPanelList",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets distance between list items",
        "arguments": [
          {
            "name": "Distance",
            "type": "number",
            "description": "Distance between panels"
          }
        ]
      }
    ]
  },
  {
    "name": "DPanelOverlay",
    "parent": "DPanel",
    "description": "Adds curved corners.",
    "functions": [
      {
        "name": "GetColor",
        "parent": "DPanelOverlay",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the border color of the <page>DPanelOverlay</page> set by <page>DPanelOverlay:SetColor</page>.",
        "returnValues": [
          {
            "type": "table",
            "description": "The set color. Uses the <page>Color</page>."
          }
        ]
      },
      {
        "name": "GetType",
        "parent": "DPanelOverlay",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the type of the <page>DPanelOverlay</page> set by <page>DPanelOverlay:SetType</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The set type."
          }
        ]
      },
      {
        "name": "PaintDifferentColours",
        "parent": "DPanelOverlay",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>Used internally by the panel for type 3.",
        "arguments": [
          {
            "name": "cola",
            "type": "table",
            "description": ""
          },
          {
            "name": "colb",
            "type": "table",
            "description": ""
          },
          {
            "name": "colc",
            "type": "table",
            "description": ""
          },
          {
            "name": "cold",
            "type": "table",
            "description": ""
          },
          {
            "name": "size",
            "type": "number",
            "description": ""
          }
        ]
      },
      {
        "name": "PaintInnerCorners",
        "parent": "DPanelOverlay",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>Used internally by the panel for types 1 and 2.",
        "arguments": [
          {
            "name": "size",
            "type": "number",
            "description": ""
          }
        ]
      },
      {
        "name": "SetColor",
        "parent": "DPanelOverlay",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the border color of the <page>DPanelOverlay</page>.",
        "arguments": [
          {
            "name": "color",
            "type": "table",
            "description": "The color to set. Uses the <page>Color</page>."
          }
        ]
      },
      {
        "name": "SetType",
        "parent": "DPanelOverlay",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the type of the <page>DPanelOverlay</page>.",
        "arguments": [
          {
            "name": "type",
            "type": "number",
            "description": "The type to set.\n\nPossible value are:\n* 1 - 8px corners of given color\n* 2 - 4px corners of given type\n* 3 - 2 top? corners of hardcoded color, 2 other corners of given color"
          }
        ]
      }
    ]
  },
  {
    "name": "DPanelSelect",
    "parent": "DPanelList",
    "description": "<deprecated>\nThis is derived from the deprecated <page>DPanelList</page>.\n</deprecated>\n\nA base panel for things like <page>DModelSelect</page>.\nBasically, a list of panels that can be selected.\nSelected panel can be retrieved and has visual indication of being selected.",
    "functions": [
      {
        "name": "AddPanel",
        "parent": "DPanelSelect",
        "realms": [
          "client"
        ],
        "description": "Adds a panel to be selectable.",
        "arguments": [
          {
            "name": "pnl",
            "type": "Panel",
            "description": "The panel to add."
          },
          {
            "name": "conVars",
            "type": "table",
            "default": "nil",
            "description": "<page>ConVar</page>s to set when this panel is selected. Keys are the cvar name, value is the value for that cvar."
          }
        ]
      },
      {
        "name": "FindBestActive",
        "parent": "DPanelSelect",
        "realms": [
          "client"
        ],
        "description": "<internal></internal>\n\nUsed internally by <page>DPanelSelect:AddPanel</page> to select the best default selected panel based on player's convars."
      },
      {
        "name": "OnActivePanelChanged",
        "parent": "DPanelSelect",
        "realms": [
          "client"
        ],
        "description": "Called when the selected panel changes.",
        "arguments": [
          {
            "name": "oldPnl",
            "type": "Panel",
            "description": "Old selected panel."
          },
          {
            "name": "newPnl",
            "type": "Panel",
            "description": "New selected panel."
          }
        ]
      },
      {
        "name": "SelectPanel",
        "parent": "DPanelSelect",
        "realms": [
          "client"
        ],
        "description": "Selects a given panel.",
        "arguments": [
          {
            "name": "pnl",
            "type": "Panel",
            "description": "Panel to select. It should've been added previously via <page>DPanelSelect:AddPanel</page>."
          }
        ]
      }
    ]
  },
  {
    "name": "DPanPanel",
    "parent": "DPanel",
    "description": "A panel similar to <page>DScrollPanel</page>, but that allows the player to pan around, for example a zoomed in image within a small window.",
    "functions": [
      {
        "name": "AddItem",
        "parent": "DPanPanel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Parents the passed panel to the <page>DPanPanel:GetCanvas</page>.",
        "arguments": [
          {
            "name": "pnl",
            "type": "Panel",
            "description": "The panel to add."
          }
        ]
      },
      {
        "name": "GetCanvas",
        "parent": "DPanPanel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "The internal canvas panel.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "The canvas panel."
          }
        ]
      },
      {
        "name": "OnScroll",
        "parent": "DPanPanel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\nUsed internally, called from <page>DPanPanel:ScrollToChild</page>.",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "description": ""
          },
          {
            "name": "y",
            "type": "number",
            "description": ""
          }
        ]
      },
      {
        "name": "ScrollToChild",
        "parent": "DPanPanel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Scroll to a specific child panel.",
        "arguments": [
          {
            "name": "pnl",
            "type": "Panel",
            "description": "The panel to scroll to."
          }
        ],
        "source": {
          "file": "lua/vgui/dpanpanel.lua",
          "lineStart": 123,
          "lineEnd": 135
        }
      },
      {
        "name": "SetCanvas",
        "parent": "DPanPanel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nUsed internally.",
        "arguments": [
          {
            "name": "pnl",
            "type": "Panel",
            "description": "The canvas panel."
          }
        ]
      }
    ]
  },
  {
    "name": "DProgress",
    "parent": "Panel",
    "description": "A progressbar, works with a fraction between 0 and 1 where 0 is 0% and 1 is 100%.",
    "functions": [
      {
        "name": "GetFraction",
        "parent": "DProgress",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the progress bar's fraction. 0 is 0% and 1 is 100%.",
        "returnValues": [
          {
            "type": "number",
            "description": "Current fraction of the progress bar."
          }
        ]
      },
      {
        "name": "SetFraction",
        "parent": "DProgress",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the fraction of the progress bar. 0 is 0% and 1 is 100%.",
        "arguments": [
          {
            "name": "fraction",
            "type": "number",
            "description": "Fraction of the progress bar. Range is 0 to 1 (0% to 100%)."
          }
        ]
      }
    ]
  },
  {
    "name": "DProperties",
    "parent": "Panel",
    "description": "A grid for editing the properties of something using names and values. Properties can be categorized and strongly typed.\n\n<img src=\"ab571/8dc38978e7c3bbe.png\" alt=\"DProperties example\">\n##  Associated controls\n* <page>DProperty_VectorColor</page>\n* <page>DProperty_Boolean</page>\n* <page>DProperty_Generic</page>\n* <page>DProperty_Combo</page>\n* <page>DProperty_Float</page>\n* <page>DProperty_Int</page>",
    "functions": [
      {
        "name": "GetCanvas",
        "parent": "DProperties",
        "realms": [
          "client"
        ],
        "description": "Returns the <page>DScrollPanel</page> all the properties panels are attached to.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "A <page>DScrollPanel</page> canvas"
          }
        ]
      },
      {
        "name": "GetCategory",
        "parent": "DProperties",
        "realms": [
          "client"
        ],
        "description": "<internal></internal>\n\nReturns (or creates) a category of properties.\n\nSee <page>DProperties:CreateRow</page> for adding actual properties.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "Name of the category"
          },
          {
            "name": "create",
            "type": "boolean",
            "default": "false",
            "description": "Create a new category if it doesn't exist."
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "An internal panel."
          }
        ]
      }
    ]
  },
  {
    "name": "DProperty_Boolean",
    "parent": "DProperty_Generic",
    "description": "<internal></internal>\nCheckbox control for the <page>DProperties</page> panel."
  },
  {
    "name": "DProperty_Combo",
    "parent": "DProperty_Generic",
    "description": "<internal></internal>\n\n<page>DComboBox</page> control for a <page>DProperties</page> panel.",
    "functions": [
      {
        "name": "AddChoice",
        "parent": "DProperty_Combo",
        "realms": [
          "client"
        ],
        "description": "Add a choice to your combo control.",
        "arguments": [
          {
            "name": "Text",
            "type": "string",
            "description": "Shown text."
          },
          {
            "name": "data",
            "type": "any",
            "description": "Stored Data."
          },
          {
            "name": "select",
            "type": "boolean",
            "default": "false",
            "description": "Select this element?"
          }
        ]
      },
      {
        "name": "DataChanged",
        "parent": "DProperty_Combo",
        "realms": [
          "client"
        ],
        "description": "Called after the user selects a new value.",
        "arguments": [
          {
            "name": "data",
            "type": "any",
            "description": "The new data that was selected."
          }
        ]
      },
      {
        "name": "SetSelected",
        "parent": "DProperty_Combo",
        "realms": [
          "client"
        ],
        "description": "Set the selected option.",
        "arguments": [
          {
            "name": "Id",
            "type": "number",
            "description": "Id of the choice to be selected."
          }
        ]
      },
      {
        "name": "Setup",
        "parent": "DProperty_Combo",
        "realms": [
          "client"
        ],
        "description": "<internal></internal>\nSets up a combo control.",
        "arguments": [
          {
            "name": "data",
            "type": "table",
            "default": "{ text = 'Select...' }",
            "description": "Data to use to set up the combo box control. See <page>Editable Entities</page>.\n\nStructure:\n* <page>string</page> text - The default label for this combo box\n* <page>table</page> values - The values to add to the combo box. Keys are the \"nice\" text, values are the data value to send.\n* <page>table</page> icons - The icons for each value. They will be matched by key name.\n* <page>boolean</page> select - The \"nice\" name/key of the value that should be initially selected."
          }
        ]
      }
    ]
  },
  {
    "name": "DProperty_Entity",
    "parent": "DProperty_Generic",
    "description": "<internal></internal>\nEntity picker control for the <page>DProperties</page> panel."
  },
  {
    "name": "DProperty_Float",
    "parent": "DProperty_Generic",
    "description": "<internal></internal>\nFloat control for the <page>DProperties</page> panel.",
    "functions": [
      {
        "name": "GetDecimals",
        "parent": "DProperty_Float",
        "realms": [
          "client"
        ],
        "description": "Called to poll the amount of digits after the decimal point. This is used internally for <page>DProperty_Int</page>.",
        "returnValues": [
          {
            "type": "table",
            "name": "data",
            "description": "The amount of digits after the decimal point."
          }
        ]
      }
    ]
  },
  {
    "name": "DProperty_Generic",
    "parent": "Panel",
    "description": "<internal></internal>\n\nA base for other controls for <page>DProperties</page>. Acts as a generic text input on its own.",
    "functions": [
      {
        "name": "GetRow",
        "parent": "DProperty_Generic",
        "realms": [
          "client"
        ],
        "description": "Returns the internal row panel of a <page>DProperties</page> that this panel belongs to.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "The row panel."
          }
        ]
      },
      {
        "name": "SetRow",
        "parent": "DProperty_Generic",
        "realms": [
          "client"
        ],
        "description": "<internal></internal>Called internally by <page>DProperties</page>.",
        "arguments": [
          {
            "name": "row",
            "type": "Panel",
            "description": "The new row panel."
          }
        ]
      },
      {
        "name": "Setup",
        "parent": "DProperty_Generic",
        "realms": [
          "client"
        ],
        "description": "Sets up a generic control for use by <page>DProperties</page>.",
        "arguments": [
          {
            "name": "data",
            "type": "table",
            "description": "See <page>Editable Entities</page>."
          }
        ]
      },
      {
        "name": "ValueChanged",
        "parent": "DProperty_Generic",
        "realms": [
          "client"
        ],
        "description": "Called by this control, or a derived control, to alert the row of the change.",
        "arguments": [
          {
            "name": "newVal",
            "type": "any",
            "description": "The new value."
          },
          {
            "name": "force",
            "type": "boolean",
            "description": "Force an update."
          }
        ]
      }
    ]
  },
  {
    "name": "DProperty_Int",
    "parent": "DProperty_Float",
    "description": "<internal></internal>\nInteger control for the <page>DProperties</page> panel."
  },
  {
    "name": "DProperty_VectorColor",
    "parent": "DProperty_Generic",
    "description": "<internal></internal>\nColor picker control for a DProperties panel. Opens a <page>DColorCombo</page> if the color preview is clicked.\n\nSee <page>Editable Entities</page> for how this is used ingame.",
    "functions": [
      {
        "name": "Setup",
        "parent": "DProperty_VectorColor",
        "realms": [
          "client"
        ],
        "description": "<internal></internal> Called by a property row to setup a color selection control.",
        "arguments": [
          {
            "name": "settings",
            "type": "table",
            "description": "A table of settings. None of the values are used for this property. See <page>Editable Entities</page>."
          }
        ]
      },
      {
        "name": "SetValue",
        "parent": "DProperty_VectorColor",
        "realms": [
          "client"
        ],
        "description": "Sets the color value of the property.",
        "arguments": [
          {
            "name": "color",
            "type": "Vector",
            "description": "Sets the color to use in a <page>DProperty_VectorColor</page>."
          }
        ]
      }
    ]
  },
  {
    "name": "DPropertySheet",
    "parent": "Panel",
    "description": "A tab oriented control where you can create multiple tabs with items within. Used mainly for organization.",
    "functions": [
      {
        "name": "AddSheet",
        "parent": "DPropertySheet",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Adds a new tab.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "Name of the tab"
          },
          {
            "name": "pnl",
            "type": "Panel",
            "description": "Panel to be used as contents of the tab. This normally should be a <page>DPanel</page>"
          },
          {
            "name": "icon",
            "type": "string",
            "default": "nil",
            "description": "Icon for the tab. This will ideally be a <page text=\"silkicon\">Silkicons</page>, but any material name can be used."
          },
          {
            "name": "noStretchX",
            "type": "boolean",
            "default": "false",
            "description": "Should <page>DPropertySheet</page> try to fill itself with given panel horizontally."
          },
          {
            "name": "noStretchY",
            "type": "boolean",
            "default": "false",
            "description": "Should <page>DPropertySheet</page> try to fill itself with given panel vertically."
          },
          {
            "name": "tooltip",
            "type": "string",
            "default": "nil",
            "description": "Tooltip for the tab when user hovers over it with his cursor"
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "A table containing the following keys:\n* <page>Panel</page> Tab - The created <page>DTab</page>.\n* <page>string</page> Name - Name of the created tab\n* <page>Panel</page> Panel - The contents panel of the tab"
          }
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineStart": 175,
          "lineEnd": 210
        }
      },
      {
        "name": "CloseTab",
        "parent": "DPropertySheet",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Removes tab and/or panel from the parent DPropertySheet.",
        "arguments": [
          {
            "name": "tab",
            "type": "Panel",
            "description": "The <page>DTab</page> of the sheet from <page>DPropertySheet</page>.\n\nSee <page>DPropertySheet:GetItems</page>."
          },
          {
            "name": "removePanel",
            "type": "boolean",
            "description": "Set to true to remove the associated panel object as well."
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "The panel of the tab."
          }
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineStart": 405,
          "lineEnd": 441
        }
      },
      {
        "name": "CrossFade",
        "parent": "DPropertySheet",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nInternal function that handles the cross fade animation when the player switches tabs.",
        "arguments": [
          {
            "name": "anim",
            "type": "table",
            "description": ""
          },
          {
            "name": "delta",
            "type": "number",
            "description": ""
          },
          {
            "name": "data",
            "type": "table",
            "description": ""
          }
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineStart": 254,
          "lineEnd": 302
        }
      },
      {
        "name": "GetActiveTab",
        "parent": "DPropertySheet",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the active <page>DTab</page> of this <page>DPropertySheet</page>.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "The <page>DTab</page>"
          }
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineStart": 151
        }
      },
      {
        "name": "GetFadeTime",
        "parent": "DPropertySheet",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the amount of time (in seconds) it takes to fade between tabs.\n\nSet by <page>DPropertySheet:SetFadeTime</page>",
        "returnValues": [
          {
            "type": "number",
            "description": "The amount of time (in seconds) it takes to fade between tabs."
          }
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineStart": 153
        }
      },
      {
        "name": "GetItems",
        "parent": "DPropertySheet",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns a list of all tabs of this <page>DPropertySheet</page>.",
        "returnValues": [
          {
            "type": "table",
            "description": "A table of tables.\nEach table contains 3 key-value pairs:\n\n* <page>string</page> Name - The name of the tab.\n* <page>Panel</page> Tab - The <page>DTab</page> associated with the tab.\n* <page>Panel</page> Panel - The <page>Panel</page> associated with the tab."
          }
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineStart": 248,
          "lineEnd": 252
        }
      },
      {
        "name": "GetPadding",
        "parent": "DPropertySheet",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Gets the padding from the parent panel to child panels.",
        "returnValues": [
          {
            "type": "number",
            "description": "Padding"
          }
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineStart": 152
        }
      },
      {
        "name": "GetShowIcons",
        "parent": "DPropertySheet",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nReturns whatever value was set by <page>DPropertySheet:SetShowIcons</page>.",
        "returnValues": [
          {
            "type": "boolean"
          }
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineStart": 155
        }
      },
      {
        "name": "OnActiveTabChanged",
        "parent": "DPropertySheet",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when a player switches the tabs.\n\nSource code states that this is meant to be overridden.",
        "arguments": [
          {
            "name": "old",
            "type": "Panel",
            "description": "The previously active <page>DTab</page>"
          },
          {
            "name": "new",
            "type": "Panel",
            "description": "The newly active <page>DTab</page>"
          }
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineStart": 238,
          "lineEnd": 240
        }
      },
      {
        "name": "SetActiveTab",
        "parent": "DPropertySheet",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the active tab of the <page>DPropertySheet</page>.",
        "arguments": [
          {
            "name": "tab",
            "type": "Panel",
            "description": "The <page>DTab</page> to set active.\n\nSee <page>DPropertySheet:GetItems</page>"
          }
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineStart": 151
        }
      },
      {
        "name": "SetFadeTime",
        "parent": "DPropertySheet",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the amount of time (in seconds) it takes to fade between tabs.",
        "arguments": [
          {
            "name": "time",
            "type": "number",
            "default": "0.1",
            "description": "The amount of time it takes (in seconds) to fade between tabs."
          }
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineStart": 153
        }
      },
      {
        "name": "SetPadding",
        "parent": "DPropertySheet",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the padding from parent panel to children panel.",
        "arguments": [
          {
            "name": "padding",
            "type": "number",
            "default": "8",
            "description": "Amount of padding"
          }
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineStart": 152
        }
      },
      {
        "name": "SetShowIcons",
        "parent": "DPropertySheet",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nDoes nothing.",
        "arguments": [
          {
            "name": "show",
            "type": "boolean",
            "description": ""
          }
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineStart": 155
        }
      },
      {
        "name": "SetupCloseButton",
        "parent": "DPropertySheet",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Creates a close button on the right side of the <page>DPropertySheet</page> that will run the given callback function when pressed.",
        "arguments": [
          {
            "name": "func",
            "type": "function",
            "description": "Callback function to be called when the close button is pressed."
          }
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineStart": 391,
          "lineEnd": 403
        }
      },
      {
        "name": "SizeToContentWidth",
        "parent": "DPropertySheet",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the width of the <page>DPropertySheet</page> to fit the contents of all of the tabs.",
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineStart": 359,
          "lineEnd": 374
        }
      },
      {
        "name": "SwitchToName",
        "parent": "DPropertySheet",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Switches the active tab to a tab with given name.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "Case sensitive name of the tab."
          }
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineStart": 376,
          "lineEnd": 389
        }
      }
    ]
  },
  {
    "name": "DRGBPicker",
    "parent": "DPanel",
    "description": "DRGBPicker is an interactive panel which can be used to select a color hue.\n\nSee <page>DColorCube</page> for a color picker which controls brightness and saturation.\n\nSee <page>DColorMixer</page> for a color picker that allows control over hue, saturation, and brightness at once.",
    "functions": [
      {
        "name": "GetPosColor",
        "parent": "DRGBPicker",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nReturns the color at given position on the internal texture.",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "description": "The X coordinate on the texture to get the color from"
          },
          {
            "name": "y",
            "type": "number",
            "description": "The Y coordinate on the texture to get the color from"
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "<page>Color</page>"
          },
          {
            "type": "number",
            "description": "The X-coordinate clamped to the texture's width."
          },
          {
            "type": "number",
            "description": "The Y-coordinate clamped to the texture's height."
          }
        ]
      },
      {
        "name": "GetRGB",
        "parent": "DRGBPicker",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the color currently set on the color picker.",
        "returnValues": [
          {
            "type": "table",
            "description": "The color set on the color picker, see <page>Color</page>."
          }
        ]
      },
      {
        "name": "OnChange",
        "parent": "DRGBPicker",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Function which is called when the cursor is clicked and/or moved on the color picker. Meant to be overridden.",
        "arguments": [
          {
            "name": "col",
            "type": "table",
            "description": "The color that is selected on the color picker (<page>Color</page> form)."
          }
        ]
      },
      {
        "name": "SetRGB",
        "parent": "DRGBPicker",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the color stored in the color picker.\n\n<note>This function is meant to be called internally and will not update the position of the color picker line or call <page>DRGBPicker:OnChange</page></note>",
        "arguments": [
          {
            "name": "color",
            "type": "table",
            "description": "The color to set, see <page>Color</page>."
          }
        ]
      }
    ]
  },
  {
    "name": "DScrollBarGrip",
    "parent": "DPanel",
    "description": "<internal></internal>\n\nAn internal panel used by <page>DVScrollBar</page> as the grip (middle) part of the scrollbar."
  },
  {
    "name": "DScrollPanel",
    "parent": "DPanel",
    "description": "DScrollPanel is a VGUI Element similar to DPanel however it has a vertical scrollbar docked to the right which can be used to put more content in a smaller area. DScrollPanels are essentially <page>DPanel</page>s with the Scroll Bar.\n\nThis can be used to replace the <page>DPanelList</page> with <page>DPanelList:EnableVerticalScrollbar</page> and get similar functionality as well as using a non-deprecated element.\n\nIf you would like to paint or edit the elements of the scrollbar use <page>DScrollPanel:GetVBar</page>. If you want to see if the scrollbar is visible then use the VBar.Enabled variable on the scrollbar's VBar.\n\n<note><page>Panel:DockPadding</page> will not have an effect on children of this panel. Use the function on <page>DScrollPanel:GetCanvas</page> instead.</note>",
    "functions": [
      {
        "name": "AddItem",
        "parent": "DScrollPanel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Parents the passed panel to the DScrollPanel's canvas.",
        "arguments": [
          {
            "name": "pnl",
            "type": "Panel",
            "description": "The panel to add."
          }
        ],
        "source": {
          "file": "lua/vgui/dscrollpanel.lua",
          "lineStart": 33,
          "lineEnd": 37
        }
      },
      {
        "name": "GetCanvas",
        "parent": "DScrollPanel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the canvas ( The panel all child panels are parented to ) of the DScrollPanel.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "The canvas"
          }
        ],
        "source": {
          "file": "lua/vgui/dscrollpanel.lua",
          "lineStart": 57,
          "lineEnd": 61
        }
      },
      {
        "name": "GetPadding",
        "parent": "DScrollPanel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\nGets the <page>DScrollPanel</page>s padding, set by <page>DScrollPanel:SetPadding</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "DScrollPanels padding"
          }
        ]
      },
      {
        "name": "GetVBar",
        "parent": "DScrollPanel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the vertical scroll bar of the panel.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "The <page>DVScrollBar</page>."
          }
        ],
        "source": {
          "file": "lua/vgui/dscrollpanel.lua",
          "lineStart": 51,
          "lineEnd": 55
        }
      },
      {
        "name": "InnerWidth",
        "parent": "DScrollPanel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Return the width of the DScrollPanel's canvas.",
        "returnValues": [
          {
            "type": "number",
            "description": "The width of the DScrollPanel's canvas"
          }
        ],
        "source": {
          "file": "lua/vgui/dscrollpanel.lua",
          "lineStart": 63,
          "lineEnd": 67
        }
      },
      {
        "name": "PerformLayoutInternal",
        "parent": "DScrollPanel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nUsed internally to rebuild the panel's children positioning. You should use <page>Panel:InvalidateLayout</page> instead."
      },
      {
        "name": "Rebuild",
        "parent": "DScrollPanel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nUsed internally to rebuild the panel's children positioning. You should use <page>Panel:InvalidateLayout</page> instead.",
        "source": {
          "file": "lua/vgui/dscrollpanel.lua",
          "lineStart": 69,
          "lineEnd": 80
        }
      },
      {
        "name": "ScrollToChild",
        "parent": "DScrollPanel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Scrolls to the given child",
        "arguments": [
          {
            "name": "panel",
            "type": "Panel",
            "description": "The panel to scroll to, must be a child of the DScrollPanel."
          }
        ],
        "source": {
          "file": "lua/vgui/dscrollpanel.lua",
          "lineStart": 94,
          "lineEnd": 106
        }
      },
      {
        "name": "SetCanvas",
        "parent": "DScrollPanel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\nSets the canvas of the DScrollPanel.",
        "arguments": [
          {
            "name": "canvas",
            "type": "Panel",
            "description": "The new canvas"
          }
        ]
      },
      {
        "name": "SetPadding",
        "parent": "DScrollPanel",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nSets the DScrollPanel's padding. This function appears to be unused.",
        "arguments": [
          {
            "name": "padding",
            "type": "number",
            "description": "The padding of the DScrollPanel."
          }
        ]
      }
    ]
  },
  {
    "name": "DShape",
    "parent": "DPanel",
    "description": "Draw a shape on a derma panel. Only one kind of shape, a rectangle, is available for use.",
    "functions": [
      {
        "name": "GetBorderColor",
        "parent": "DShape",
        "realms": [
          "client"
        ],
        "description": "Returns the current type of shape this panel is set to display.\n\nSee <page>DShape:SetBorderColor</page>.",
        "returnValues": [
          {
            "type": "table",
            "description": "The border <page>Color</page>"
          }
        ]
      },
      {
        "name": "GetColor",
        "parent": "DShape",
        "realms": [
          "client"
        ],
        "description": "Returns the color set to display the shape with.",
        "returnValues": [
          {
            "type": "table",
            "description": "The shape <page>Color</page>"
          }
        ]
      },
      {
        "name": "GetType",
        "parent": "DShape",
        "realms": [
          "client"
        ],
        "description": "Returns the current type of shape this panel is set to display.\n\nSee <page>DShape:SetType</page>.",
        "returnValues": [
          {
            "type": "string",
            "description": "Current shape type."
          }
        ]
      },
      {
        "name": "SetBorderColor",
        "parent": "DShape",
        "realms": [
          "client"
        ],
        "description": "Sets the border color of the shape.\n\nCurrently does nothing.",
        "arguments": [
          {
            "name": "clr",
            "type": "table",
            "description": "The desired border color.\n\nSee <page>Color</page>"
          }
        ]
      },
      {
        "name": "SetColor",
        "parent": "DShape",
        "realms": [
          "client"
        ],
        "description": "Sets the color to display the shape with.",
        "arguments": [
          {
            "name": "clr",
            "type": "table",
            "description": "The <page>Color</page>"
          }
        ]
      },
      {
        "name": "SetType",
        "parent": "DShape",
        "realms": [
          "client"
        ],
        "description": "Sets the shape to be drawn.",
        "arguments": [
          {
            "name": "type",
            "type": "string",
            "description": "The render type of the DShape. Only rectangles (`Rect`) work currently. If you don't define a type immediately, the <page>PANEL:Paint</page> method will generate errors until you do."
          }
        ]
      }
    ]
  },
  {
    "name": "DSizeToContents",
    "parent": "Panel",
    "description": "A helper panel that will automatically resize itself to fit all its children using <page>Panel:SizeToChildren</page>.",
    "functions": [
      {
        "name": "GetSizeX",
        "parent": "DSizeToContents",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether the <page>DSizeToContents</page> panel should size to contents horizontally.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the panel should size to contents horizontally."
          }
        ]
      },
      {
        "name": "GetSizeY",
        "parent": "DSizeToContents",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether the <page>DSizeToContents</page> panel should size to contents vertically.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the panel should size to contents vertically."
          }
        ]
      },
      {
        "name": "SetSizeX",
        "parent": "DSizeToContents",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether the <page>DSizeToContents</page> panel should size to contents horizontally. This is `true` by default.",
        "arguments": [
          {
            "name": "sizeX",
            "type": "boolean",
            "description": "Whether the panel should size to contents horizontally."
          }
        ]
      },
      {
        "name": "SetSizeY",
        "parent": "DSizeToContents",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether the <page>DSizeToContents</page> panel should size to contents vertically. This is `true` by default.",
        "arguments": [
          {
            "name": "sizeY",
            "type": "boolean",
            "description": "Whether the panel should size to contents vertically."
          }
        ]
      }
    ]
  },
  {
    "name": "DSlider",
    "parent": "Panel",
    "description": "Creates a slider that can be moved along the X and/or Y axis",
    "functions": [
      {
        "name": "ConVarXNumberThink",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nUsed internally to set the X axis convar."
      },
      {
        "name": "ConVarYNumberThink",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nUsed internally to set the Y axis convar."
      },
      {
        "name": "GetDragging",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Identical to <page>DSlider:IsEditing</page>",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "GetLockX",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the draggable panel's lock on the X axis.\n\nSee <page>DSlider:SetLockX</page> for more info.",
        "returnValues": [
          {
            "type": "number"
          }
        ]
      },
      {
        "name": "GetLockY",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the draggable panel's lock on the Y axis.\n\nSee <page>DSlider:SetLockY</page> for more info.",
        "returnValues": [
          {
            "type": "number"
          }
        ]
      },
      {
        "name": "GetNotchColor",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated>Does not affect anything by default.</deprecated>\nReturns the current notch color, set by <page>DSlider:SetNotchColor</page>",
        "returnValues": [
          {
            "type": "Color",
            "name": "clr",
            "description": "The current color"
          }
        ]
      },
      {
        "name": "GetNotches",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nAppears to be non functioning, however is still used by panels such as <page>DNumSlider</page>.",
        "returnValues": [
          {
            "type": "number"
          }
        ]
      },
      {
        "name": "GetNumSlider",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nDoes nothing.",
        "returnValues": [
          {
            "type": "any"
          }
        ]
      },
      {
        "name": "GetSlideX",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the target position of the draggable \"knob\" panel of the slider on the X axis.\n\nSet by <page>DSlider:SetSlideX</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The value range seems to be from 0 to 1"
          }
        ]
      },
      {
        "name": "GetSlideY",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the target position of the draggable \"knob\" panel of the slider on the Y axis.\n\nSet by <page>DSlider:SetSlideY</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The value range seems to be from 0 to 1"
          }
        ]
      },
      {
        "name": "GetTrapInside",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the value set by <page>DSlider:SetTrapInside</page>.",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "IsEditing",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns true if this element is being edited by the player.",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "OnValueChanged",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the values of this slider panel were changed.",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "description": "The X axis position of the slider in range 0-1"
          },
          {
            "name": "y",
            "type": "number",
            "description": "The Y axis position of the slider in range 0-1"
          }
        ]
      },
      {
        "name": "OnValuesChangedInternal",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nUsed internally to fire <page>DSlider:OnValueChanged</page>"
      },
      {
        "name": "ResetToDefaultValue",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "This function is called by the <page>DSlider</page> when user middle mouse clicks on the draggable knob of the slider.\n\nYou are meant to override this function to do reset the slider to desired defaults on both axes.\n\nBy default, will reset the slider to `0.5` on both axes."
      },
      {
        "name": "SetBackground",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the background for the slider.",
        "arguments": [
          {
            "name": "path",
            "type": "string",
            "description": "Path to the image."
          }
        ]
      },
      {
        "name": "SetConVarX",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the <page>ConVar</page> to be set when the slider changes on the X axis.",
        "arguments": [
          {
            "name": "convar",
            "type": "string",
            "description": "Name of the convar to set."
          }
        ]
      },
      {
        "name": "SetConVarY",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the <page>ConVar</page> to be set when the slider changes on the Y axis.",
        "arguments": [
          {
            "name": "convar",
            "type": "string",
            "description": "Name of the convar to set."
          }
        ]
      },
      {
        "name": "SetDragging",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nSets whether or not the slider is being dragged.",
        "arguments": [
          {
            "name": "dragging",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      {
        "name": "SetImage",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nDoes nothing."
      },
      {
        "name": "SetImageColor",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nDoes nothing."
      },
      {
        "name": "SetLockX",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the lock on the X axis.\n\nFor example the value 0.5 will lock the draggable panel to half the width of the slider's panel.",
        "arguments": [
          {
            "name": "lockX",
            "type": "number",
            "default": "nil",
            "description": "Set to nil to reset lock.\n\nThe value range is from 0 to 1."
          }
        ]
      },
      {
        "name": "SetLockY",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the lock on the Y axis.\n\nFor example the value 0.5 will lock the draggable panel to half the height of the slider's panel.",
        "arguments": [
          {
            "name": "lockY",
            "type": "number",
            "default": "nil",
            "description": "Set to nil to reset lock.\n\nThe value range is from 0 to 1."
          }
        ]
      },
      {
        "name": "SetNotchColor",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated>Does not affect anything by default.</deprecated>\nSets the current notch color, overriding the color set by the derma skin.",
        "arguments": [
          {
            "name": "clr",
            "type": "Color",
            "description": "The new color to set"
          }
        ]
      },
      {
        "name": "SetNotches",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nAppears to be non functioning, however is still used by panels such as <page>DNumSlider</page>.",
        "arguments": [
          {
            "name": "notches",
            "type": "number",
            "description": ""
          }
        ]
      },
      {
        "name": "SetNumSlider",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nDoes nothing.",
        "arguments": [
          {
            "name": "slider",
            "type": "any",
            "description": ""
          }
        ]
      },
      {
        "name": "SetSlideX",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Used to position the draggable panel of the slider on the X axis.",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "description": "The value range seems to be from 0 to 1"
          }
        ]
      },
      {
        "name": "SetSlideY",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Used to position the draggable panel of the slider on the Y axis.",
        "arguments": [
          {
            "name": "y",
            "type": "number",
            "description": "The value range seems to be from 0 to 1"
          }
        ]
      },
      {
        "name": "SetTrapInside",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Makes the slider itself, the \"knob\", trapped within the bounds of the slider panel. Example:\n\n<upload src=\"70c/8dafb0260022da3.png\" size=\"6257\" name=\"image.png\">\n</upload>",
        "arguments": [
          {
            "name": "trap",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      {
        "name": "TranslateValues",
        "parent": "DSlider",
        "realms": [
          "client",
          "menu"
        ],
        "description": "For override by child panels, such as <page>DNumSlider</page>. Allows changing the output values of the slider.",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "description": "The input X coordinate, in range of 0-1."
          },
          {
            "name": "y",
            "type": "number",
            "description": "The input Y coordinate, in range of 0-1."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The output X coordinate, in range of 0-1."
          },
          {
            "type": "number",
            "description": "The output X coordinate, in range of 0-1."
          }
        ]
      }
    ]
  },
  {
    "name": "DSprite",
    "parent": "DPanel",
    "description": "A panel that draws a sprite on the player's HUD with the given <page>IMaterial</page>, <page>Global.Color</page> and rotation.\n\nA shortcut for this is <page>Global.CreateSprite</page>().",
    "functions": [
      {
        "name": "GetColor",
        "parent": "DSprite",
        "realms": [
          "client"
        ],
        "description": "Gets the color the sprite is using as a modifier.",
        "returnValues": [
          {
            "type": "table",
            "description": "The <page>Global.Color</page> being used."
          }
        ]
      },
      {
        "name": "GetHandle",
        "parent": "DSprite",
        "realms": [
          "client"
        ],
        "description": "<deprecated></deprecated>\nReturns the value set by <page>DSprite:SetHandle</page>",
        "returnValues": [
          {
            "type": "Vector"
          }
        ]
      },
      {
        "name": "GetMaterial",
        "parent": "DSprite",
        "realms": [
          "client"
        ],
        "description": "Gets the material the sprite is using.",
        "returnValues": [
          {
            "type": "IMaterial",
            "description": "The material in use."
          }
        ]
      },
      {
        "name": "GetRotation",
        "parent": "DSprite",
        "realms": [
          "client"
        ],
        "description": "Gets the 2D rotation angle of the sprite, in the plane of the screen.",
        "returnValues": [
          {
            "type": "number",
            "description": "The anti-clockwise rotation in degrees."
          }
        ]
      },
      {
        "name": "SetColor",
        "parent": "DSprite",
        "realms": [
          "client"
        ],
        "description": "Sets the color modifier for the sprite.",
        "arguments": [
          {
            "name": "color",
            "type": "table",
            "description": "The <page>Global.Color</page> to use."
          }
        ]
      },
      {
        "name": "SetHandle",
        "parent": "DSprite",
        "realms": [
          "client"
        ],
        "description": "<deprecated></deprecated>\nSeems to be an unused feature. Does nothing.",
        "arguments": [
          {
            "name": "vec",
            "type": "Vector",
            "description": ""
          }
        ]
      },
      {
        "name": "SetMaterial",
        "parent": "DSprite",
        "realms": [
          "client"
        ],
        "description": "Sets the source material for the sprite.",
        "arguments": [
          {
            "name": "material",
            "type": "IMaterial",
            "description": "The material to use. This will ideally be an [UnlitGeneric](https://developer.valvesoftware.com/wiki/UnlitGeneric)."
          }
        ]
      },
      {
        "name": "SetRotation",
        "parent": "DSprite",
        "realms": [
          "client"
        ],
        "description": "Sets the 2D rotation angle of the sprite, in the plane of the screen.",
        "arguments": [
          {
            "name": "ang",
            "type": "number",
            "description": "The anti-clockwise rotation in degrees."
          }
        ]
      }
    ]
  },
  {
    "name": "DTab",
    "parent": "DButton",
    "description": "<internal></internal>\nThis element is created within and only used in the <page>DPropertySheet</page> file. These can be elements are stored items are stored in the `Items` subtable of the <page>DPropertySheet</page>",
    "functions": [
      {
        "name": "GetPanel",
        "parent": "DTab",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the panel that the tab represents.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "Panel added to the sheet using <page>DPropertySheet:AddSheet</page>."
          }
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineStart": 5
        }
      },
      {
        "name": "GetPropertySheet",
        "parent": "DTab",
        "realms": [
          "client",
          "menu"
        ],
        "description": "The <page>DPropertySheet</page> this tab belongs to.",
        "returnValues": [
          {
            "type": "Panel",
            "name": "pnl",
            "description": "The <page>DPropertySheet</page> this tab belongs to."
          }
        ]
      },
      {
        "name": "GetTabHeight",
        "parent": "DTab",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nReturns the target height of this tab. Used internally by <page>DTab</page>'s <page>PANEL:ApplySchemeSettings</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "Either 20, or 28 if <page>DTab:IsActive</page>."
          }
        ]
      },
      {
        "name": "IsActive",
        "parent": "DTab",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether the tab is the currently selected tab of the associated <page>DPropertySheet</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Currently selected tab."
          }
        ],
        "source": {
          "file": "lua/vgui/dpropertysheet.lua",
          "lineStart": 34
        }
      },
      {
        "name": "SetPanel",
        "parent": "DTab",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal> Used internally by <page>DTab:Setup</page>.",
        "arguments": [
          {
            "name": "pnl",
            "type": "Panel",
            "description": "The contents of this tab."
          }
        ]
      },
      {
        "name": "SetPropertySheet",
        "parent": "DTab",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal> Used internally by <page>DTab:Setup</page>.",
        "arguments": [
          {
            "name": "pnl",
            "type": "Panel",
            "description": "The <page>DPropertySheet</page> to set for this tab."
          }
        ]
      },
      {
        "name": "Setup",
        "parent": "DTab",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal> Used internally by <page>DPropertySheet:AddSheet</page>.",
        "arguments": [
          {
            "name": "label",
            "type": "string",
            "description": "Label of the tab"
          },
          {
            "name": "sheet",
            "type": "Panel",
            "description": "The <page>DPropertySheet</page> this tab belongs to."
          },
          {
            "name": "pnl",
            "type": "Panel",
            "description": "Panel to be used as contents of the tab. This normally should be a <page>DPanel</page>."
          },
          {
            "name": "icon",
            "type": "string",
            "default": "nil",
            "description": "Icon for the tab. This will typically be a <page text=\"silkicon\">Silkicons</page>, but any material name can be used."
          }
        ]
      }
    ]
  },
  {
    "name": "DTextEntry",
    "parent": "TextEntry",
    "description": "A form which may be used to display text the player is meant to select and copy or alternately allow them to enter some text of their own.\n\n<note>At least one of your `DTextEntry`'s parents must either be an <page>EditablePanel</page> or derived from it (like a <page>DFrame</page>, for example), else it won't be able to focus and thus be unselectable.\n\nYou must also call <page>Panel:MakePopup</page> on said panel or the `DTextEntry` will not work.</note>",
    "functions": [
      {
        "name": "AddHistory",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Adds an entry to <page>DTextEntry</page>'s history.\n\nSee <page>DTextEntry:SetHistoryEnabled</page>.",
        "arguments": [
          {
            "name": "text",
            "type": "string",
            "description": "Text to add to the text entry's history."
          }
        ],
        "source": {
          "file": "lua/vgui/dtextentry.lua",
          "lineStart": 366,
          "lineEnd": 373
        }
      },
      {
        "name": "AllowInput",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called whenever the value of the panel has been updated (whether by user input or otherwise).\n\nIt allows you to determine whether a user can modify the <page>TextEntry</page>'s text.\n\nBy default, this only checks whether the panel disallows numeric characters, preventing it from being edited if the value contains any.\n\nThis is actually an engine hook that only works on <page>TextEntry</page> derived elements.\n\nIf you are looking for a way to modify character limits, see <page>Panel:SetMaximumCharCount</page>",
        "arguments": [
          {
            "name": "char",
            "type": "string",
            "description": "The last character entered into the panel."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return `true` to prevent the value from changing, `false` to allow it."
          }
        ],
        "source": {
          "file": "lua/vgui/dtextentry.lua",
          "lineStart": 321,
          "lineEnd": 327
        }
      },
      {
        "name": "CheckNumeric",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether a string is numeric or not.\nAlways returns false if the <page>DTextEntry:SetNumeric</page> is set to false.",
        "arguments": [
          {
            "name": "strValue",
            "type": "string",
            "description": "The string to check."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the string is numeric or not."
          }
        ],
        "source": {
          "file": "lua/vgui/dtextentry.lua",
          "lineStart": 296,
          "lineEnd": 311
        }
      },
      {
        "name": "GetAutoComplete",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called by the DTextEntry when a list of autocompletion options is requested. Meant to be overridden.",
        "arguments": [
          {
            "name": "inputText",
            "type": "string",
            "description": "Player's current input."
          }
        ],
        "returnValues": [
          {
            "type": "table",
            "description": "If a table is returned, the values of the table will show up as autocomplete suggestions for the user."
          }
        ]
      },
      {
        "name": "GetCursorColor",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the cursor color of a DTextEntry.",
        "returnValues": [
          {
            "type": "table",
            "description": "The color of the cursor as a <page>Color</page>."
          }
        ]
      },
      {
        "name": "GetDisabled",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated>Use <page>Panel:IsEnabled</page> instead.</deprecated>\n\nReturns whether the textbox is disabled. Use <page>Panel:IsEnabled</page> instead.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the textbox is disabled."
          }
        ]
      },
      {
        "name": "GetDrawBackground",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated> Alias of <page>DTextEntry:GetPaintBackground</page>. Use that instead.\n\nWhether the background is displayed or not.",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "GetDrawBorder",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nReturns the value set by <page>DTextEntry:SetDrawBorder</page>.",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "GetEnterAllowed",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether pressing Enter can cause the panel to lose focus. Note that a multiline DTextEntry cannot be escaped using the Enter key even when this function returns true.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether pressing the Enter key can cause the panel to lose focus."
          }
        ]
      },
      {
        "name": "GetFloat",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the contents of the DTextEntry as a number.",
        "returnValues": [
          {
            "type": "number",
            "description": "Text of the DTextEntry as a float, or nil if it cannot be converted to a number using <page>Global.tonumber</page>."
          }
        ],
        "source": {
          "file": "lua/vgui/dtextentry.lua",
          "lineStart": 388,
          "lineEnd": 392
        }
      },
      {
        "name": "GetHighlightColor",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the highlight/text selection color of the text entry. If it was not overwritten, it will return the derma skin value. (`colTextEntryTextHighlight`)",
        "returnValues": [
          {
            "type": "table",
            "description": "The highlight <page>Global.Color</page>."
          }
        ]
      },
      {
        "name": "GetHistoryEnabled",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether the history functionality of  <page>DTextEntry</page> is enabled. See <page>DTextEntry:AddHistory</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the history is enabled or not."
          }
        ]
      },
      {
        "name": "GetInt",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Similar to <page>DTextEntry:GetFloat</page>, but rounds the value to the nearest integer.",
        "returnValues": [
          {
            "type": "number",
            "description": "Text of the DTextEntry as a round number, or nil if it cannot be converted to a number."
          }
        ],
        "source": {
          "file": "lua/vgui/dtextentry.lua",
          "lineStart": 379,
          "lineEnd": 386
        }
      },
      {
        "name": "GetNumeric",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether only numeric characters (`123456789.-`) can be entered into the DTextEntry.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the DTextEntry is numeric or not."
          }
        ]
      },
      {
        "name": "GetPaintBackground",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Whether the background is displayed or not",
        "returnValues": [
          {
            "type": "boolean",
            "name": "show",
            "description": "`false` hides the background; this is `true` by default."
          }
        ]
      },
      {
        "name": "GetPlaceholderColor",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Return current color of panel placeholder",
        "returnValues": [
          {
            "type": "table",
            "description": "Current placeholder color"
          }
        ]
      },
      {
        "name": "GetPlaceholderText",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the placeholder text set with <page>DTextEntry:SetPlaceholderText</page>.",
        "returnValues": [
          {
            "type": "string"
          }
        ]
      },
      {
        "name": "GetTabbingDisabled",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether or not the panel accepts <key>tab</key> key.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the <page>DTextEntry</page> should ignore <key>tab</key>."
          }
        ]
      },
      {
        "name": "GetTextColor",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the text color of a DTextEntry.",
        "returnValues": [
          {
            "type": "table",
            "description": "The color of the text as a <page>Color</page>."
          }
        ]
      },
      {
        "name": "GetUpdateOnType",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether the <page>DTextEntry</page> is set to run <page>DTextEntry:OnValueChange</page> every time a character is typed or deleted or only when Enter is pressed.",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "IsEditing",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether this DTextEntry is being edited or not. (i.e. has focus)",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether this DTextEntry is being edited or not"
          }
        ],
        "source": {
          "file": "lua/vgui/dtextentry.lua",
          "lineStart": 64,
          "lineEnd": 66
        }
      },
      {
        "name": "OnChange",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called by <page>DTextEntry:OnTextChanged</page> when the user modifies the text in the <page>DTextEntry</page>.\n\nYou should override this function to define custom behavior when the <page>DTextEntry</page> text changes."
      },
      {
        "name": "OnEnter",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called whenever enter is pressed on a <page>DTextEntry</page>.\n\n<note><page>DTextEntry:IsEditing</page> will still return true in this callback!</note>",
        "arguments": [
          {
            "name": "value",
            "type": "string",
            "description": "The current text of the <page>DTextEntry</page>"
          }
        ]
      },
      {
        "name": "OnGetFocus",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called whenever the <page>DTextEntry</page> gains focus.",
        "source": {
          "file": "lua/vgui/dtextentry.lua",
          "lineStart": 336,
          "lineEnd": 348
        }
      },
      {
        "name": "OnKeyCode",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called from <page>DTextEntry</page>'s <page>TextEntry:OnKeyCodeTyped</page> override whenever a valid character is typed while the text entry is focused.",
        "arguments": [
          {
            "name": "keyCode",
            "type": "number",
            "description": "They key code of the key pressed, see <page>Enums/KEY</page>."
          }
        ]
      },
      {
        "name": "OnLoseFocus",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called whenever the <page>DTextEntry</page> lose focus."
      },
      {
        "name": "OnTextChanged",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\nCalled internally when the text inside the <page>DTextEntry</page> changes. This is an implementation of <page>TextEntry:OnTextChanged</page>\n\nYou should not override this function. Use <page>DTextEntry:OnValueChange</page> instead.",
        "arguments": [
          {
            "name": "noMenuRemoval",
            "type": "boolean",
            "description": "Determines whether to remove the autocomplete menu (false) or not (true)."
          }
        ],
        "source": {
          "file": "lua/vgui/dtextentry.lua",
          "lineStart": 188,
          "lineEnd": 208
        }
      },
      {
        "name": "OnValueChange",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the text changes of the <page>DTextEntry</page> are applied. (And set to the attached console variable, if one is given)\n\nSee also <page>DTextEntry:OnChange</page> for a function that is called on every text change, even if the console variable is not updated.\n\nYou should override this function to define custom behavior when the text changes.\n\nThis method is called:\n* When Enter is pressed after typing\n* When <page>DTextEntry:SetValue</page> is used\n* For every key typed - only if <page>DTextEntry:SetUpdateOnType</page> was set to true (default is false)",
        "arguments": [
          {
            "name": "value",
            "type": "string",
            "description": "The DTextEntry text."
          }
        ]
      },
      {
        "name": "OpenAutoComplete",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal>You really should be using <page>DTextEntry:GetAutoComplete</page> instead.</internal>\nBuilds a <page>DMenu</page> for the DTextEntry based on the input table.",
        "arguments": [
          {
            "name": "tab",
            "type": "table",
            "description": "Table containing results from <page>DTextEntry:GetAutoComplete</page>."
          }
        ],
        "source": {
          "file": "lua/vgui/dtextentry.lua",
          "lineStart": 213,
          "lineEnd": 232
        }
      },
      {
        "name": "SetCursorColor",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the cursor's color in  DTextEntry (the blinking line).",
        "arguments": [
          {
            "name": "color",
            "type": "table",
            "description": "The color to set the cursor to."
          }
        ]
      },
      {
        "name": "SetDisabled",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated>Use <page>Panel:SetEnabled</page> instead.</deprecated>\n\nDisables input on a DTextEntry and greys it out visually. This differs from <page>DTextEntry:SetEditable</page> which doesn't visually change the textbox.",
        "arguments": [
          {
            "name": "disabled",
            "type": "boolean",
            "description": "Whether the textbox should be disabled"
          }
        ],
        "source": {
          "file": "lua/vgui/dtextentry.lua",
          "lineStart": 313,
          "lineEnd": 315
        }
      },
      {
        "name": "SetDrawBackground",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated> Alias of <page>DTextEntry:SetPaintBackground</page>. Use that instead.",
        "arguments": [
          {
            "name": "show",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      {
        "name": "SetDrawBorder",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nDoes nothing.",
        "arguments": [
          {
            "name": "bool",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      {
        "name": "SetEditable",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Disables Input on a DTextEntry. This differs from <page>DTextEntry:SetDisabled</page> - SetEditable will not affect the appearance of the textbox.",
        "arguments": [
          {
            "name": "enabled",
            "type": "boolean",
            "description": "Whether the DTextEntry should be editable"
          }
        ],
        "source": {
          "file": "lua/vgui/dtextentry.lua",
          "lineStart": 329,
          "lineEnd": 334
        }
      },
      {
        "name": "SetEnterAllowed",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether pressing the Enter key will cause the DTextEntry to lose focus or not, provided it is not multiline. This is true by default.",
        "arguments": [
          {
            "name": "allowEnter",
            "type": "boolean",
            "description": "If set to false, pressing Enter will not cause the panel to lose focus and will never call <page>DTextEntry:OnEnter</page>."
          }
        ]
      },
      {
        "name": "SetFont",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Changes the font of the DTextEntry.",
        "arguments": [
          {
            "name": "font",
            "type": "string",
            "description": "The name of the font to be changed to."
          }
        ]
      },
      {
        "name": "SetHighlightColor",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets/overrides the default highlight/text selection color of the text entry.",
        "arguments": [
          {
            "name": "color",
            "type": "table",
            "description": "The new highlight <page>Global.Color</page>."
          }
        ]
      },
      {
        "name": "SetHistoryEnabled",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Enables or disables the history functionality of  <page>DTextEntry</page>. This allows the player to scroll through history elements using up and down arrow keys.\n\nSee <page>DTextEntry:AddHistory</page>.",
        "arguments": [
          {
            "name": "enable",
            "type": "boolean",
            "description": "Whether to enable history or not."
          }
        ]
      },
      {
        "name": "SetNumeric",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether or not to decline non-numeric characters as input.\n\nNumeric characters are `1234567890.-`",
        "arguments": [
          {
            "name": "numericOnly",
            "type": "boolean",
            "description": "Whether to accept only numeric characters."
          }
        ]
      },
      {
        "name": "SetPaintBackground",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether to show the default background of the DTextEntry.",
        "arguments": [
          {
            "name": "show",
            "type": "boolean",
            "description": "`false` hides the background; this is `true` by default."
          }
        ]
      },
      {
        "name": "SetPlaceholderColor",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Allow you to set placeholder color.",
        "arguments": [
          {
            "name": "color",
            "type": "table",
            "default": "Color(128, 128, 128)",
            "description": "The color of the placeholder."
          }
        ]
      },
      {
        "name": "SetPlaceholderText",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the placeholder text that will be shown while the text entry has no user text. The player will not need to delete the placeholder text if they decide to start typing.",
        "arguments": [
          {
            "name": "text",
            "type": "string",
            "default": "nil",
            "description": ""
          }
        ]
      },
      {
        "name": "SetTabbingDisabled",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether or not the panel accepts <key>tab</key> key.\n<note>Disabling tab key prevents the panel from unfocusing by mouse, however, still works for focusing to other keyboard focus.</note>",
        "arguments": [
          {
            "name": "enabled",
            "type": "boolean",
            "description": "Whether the <page>DTextEntry</page> should ignore <key>tab</key>."
          }
        ]
      },
      {
        "name": "SetTextColor",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the text color of the <page>DTextEntry</page>.",
        "arguments": [
          {
            "name": "color",
            "type": "table",
            "description": "The text color. Uses the <page>Color</page>."
          }
        ]
      },
      {
        "name": "SetUpdateOnType",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether we should fire <page>DTextEntry:OnValueChange</page> every time we type or delete a character or only when Enter is pressed.",
        "arguments": [
          {
            "name": "updateOnType",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      {
        "name": "SetValue",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the text of the <page>DTextEntry</page> and calls <page>DTextEntry:OnValueChange</page>.\n\n<note>The text of the <page>DTextEntry</page> only changes if it's not currently being typed in. If you would rather set the text regardless, use <page>Panel:SetText</page>.</note>",
        "arguments": [
          {
            "name": "text",
            "type": "string",
            "description": "The value to set."
          }
        ],
        "source": {
          "file": "lua/vgui/dtextentry.lua",
          "lineStart": 277,
          "lineEnd": 290
        }
      },
      {
        "name": "UpdateConvarValue",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal>Used by <page>DTextEntry:OnTextChanged</page>, <page>DTextEntry:OnEnter</page> and <page>DTextEntry:OnLoseFocus</page></internal>\n\nUpdates the ConVar associated with the TextEntry to its new value.",
        "source": {
          "file": "lua/vgui/dtextentry.lua",
          "lineStart": 256,
          "lineEnd": 262
        }
      },
      {
        "name": "UpdateFromHistory",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\nUsed internally to set text from the history."
      },
      {
        "name": "UpdateFromMenu",
        "parent": "DTextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\nUsed internally to set text from the autocomplete menu."
      }
    ]
  },
  {
    "name": "DTileLayout",
    "parent": "DDragBase",
    "description": "Similarly to <page>DIconLayout</page>, this lays out panels in two dimensions as tiles.\n\nThe difference between this and <page>DIconLayout</page> is that <page>DIconLayout</page> items all have the same height while\n<page>DTileLayout</page> items do not have this enforcement.\n<page>DTileLayout</page> will find the best way to \"pack\" its children.\nFor example, in a two column layout, a item of height 2 units will be placed in one column while\ntwo items of height 1 unit will be placed in the other column.\n\nIt is worth noting however that because this panel iterates through its children in an undefined order and lays out while\nit is iterating, there is no guarantee that this packing will lead to the lowest possible height.\n\nThis is used by the spawnmenu to arrange spawnicons.\n\nThe base size defines the smallest a tile can be, and it will resize vertically to accommodate all child panels.\nThe number of elements in each row is determined by the base size and width.\n\nIt also optionally permits the rearrangement of these tiles.\nTo enable this functionality, call <page>DDragBase:MakeDroppable</page> on the DTileLayout with a unique identifier.\nAll panels added following this will be moveable.",
    "functions": [
      {
        "name": "ClearTiles",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "description": "<internal></internal> Clears the panel's tile table. Used by <page>DTileLayout:LayoutTiles</page>."
      },
      {
        "name": "ConsumeTiles",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "description": "<internal></internal> Called to designate a range of tiles as occupied by a panel.",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "description": "The x coordinate of the top-left corner of the panel."
          },
          {
            "name": "y",
            "type": "number",
            "description": "The y coordinate of the top-left corner of the panel."
          },
          {
            "name": "w",
            "type": "number",
            "description": "The panel's width."
          },
          {
            "name": "h",
            "type": "number",
            "description": "The panel's height."
          }
        ]
      },
      {
        "name": "Copy",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "description": "Creates and returns an exact copy of the DTileLayout.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "The created copy."
          }
        ]
      },
      {
        "name": "CopyContents",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "description": "Creates copies of all the children from the given panel object and parents them to this one.",
        "arguments": [
          {
            "name": "source",
            "type": "Panel",
            "description": "The source panel from which to copy all children."
          }
        ]
      },
      {
        "name": "FindFreeTile",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "description": "<internal></internal> Finds the coordinates of the first group of free tiles that fit the given size.",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "description": "The x coordinate to start looking from."
          },
          {
            "name": "y",
            "type": "number",
            "description": "The y coordinate to start looking from."
          },
          {
            "name": "w",
            "type": "number",
            "description": "The needed width."
          },
          {
            "name": "h",
            "type": "number",
            "description": "The needed height."
          }
        ],
        "returnValues": [
          {
            "type": "number",
            "description": "The x coordinate of the found available space."
          },
          {
            "type": "number",
            "description": "The y coordinate of the found available space."
          }
        ]
      },
      {
        "name": "FitsInTile",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "description": "<internal></internal> Determines if a group of tiles is vacant.",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "description": "The x coordinate of the first tile."
          },
          {
            "name": "y",
            "type": "number",
            "description": "The y coordinate of the first tile."
          },
          {
            "name": "w",
            "type": "number",
            "description": "The width needed."
          },
          {
            "name": "h",
            "type": "number",
            "description": "The height needed."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether or not this group is available for occupation."
          }
        ]
      },
      {
        "name": "GetBaseSize",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "description": "Returns the size of each single tile, set with <page>DTileLayout:SetBaseSize</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "Base tile size."
          }
        ]
      },
      {
        "name": "GetBorder",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "description": "Returns the border spacing set by <page>DTileLayout:SetBorder</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The border spacing"
          }
        ]
      },
      {
        "name": "GetMinHeight",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "description": "Returns the minimum height the DTileLayout can resize to.",
        "returnValues": [
          {
            "type": "number",
            "description": "The minimum height the panel can shrink to."
          }
        ]
      },
      {
        "name": "GetSpaceX",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "description": "Returns the X axis spacing between 2 elements set by <page>DTileLayout:SetSpaceX</page>.",
        "returnValues": [
          {
            "type": "number"
          }
        ]
      },
      {
        "name": "GetSpaceY",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "description": "Returns the Y axis spacing between 2 elements set by <page>DTileLayout:SetSpaceY</page>.",
        "returnValues": [
          {
            "type": "number"
          }
        ]
      },
      {
        "name": "GetTile",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "description": "<internal></internal> Gets the occupied state of a tile.",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "description": "The x coordinate of the tile."
          },
          {
            "name": "y",
            "type": "number",
            "description": "The y coordinate of the tile."
          }
        ],
        "returnValues": [
          {
            "type": "any",
            "description": "The occupied state of the tile, normally `1` or `nil`."
          }
        ]
      },
      {
        "name": "Layout",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "description": "Resets the last width/height info, and invalidates the panel's layout, causing it to recalculate all child positions. It is called whenever a child is added or removed, and can be called to refresh the panel."
      },
      {
        "name": "LayoutTiles",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "description": "<internal></internal> Called by <page>PANEL:PerformLayout</page> to arrange and lay out the child panels, if it has changed in size."
      },
      {
        "name": "OnModified",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "description": "Called when anything is dropped on or rearranged within the DTileLayout."
      },
      {
        "name": "SetBaseSize",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "description": "Sets the size of a single tile. If a child panel is larger than this size, it will occupy several tiles.\n\nIf you are setting the size of the children properly then you probably don't need to change this.",
        "arguments": [
          {
            "name": "size",
            "type": "number",
            "description": "The size of each tile. It is recommended you use `2ⁿ` (`16, 32, 64...`) numbers, and those above `4`, as numbers lower than this will result in many tiles being processed and therefore slow operation."
          }
        ]
      },
      {
        "name": "SetBorder",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "description": "Sets the spacing between the border/edge of the <page>DTileLayout</page> and all the elements inside.",
        "arguments": [
          {
            "name": "border",
            "type": "number",
            "description": ""
          }
        ]
      },
      {
        "name": "SetMinHeight",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "description": "Determines the minimum height the DTileLayout will resize to. This is useful if child panels will be added/removed often.",
        "arguments": [
          {
            "name": "minH",
            "type": "number",
            "description": "The minimum height the panel can shrink to."
          }
        ]
      },
      {
        "name": "SetSpaceX",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "description": "Sets the spacing between 2 elements in the <page>DTileLayout</page> on the X axis.",
        "arguments": [
          {
            "name": "spacingX",
            "type": "number",
            "description": "New X axis spacing."
          }
        ]
      },
      {
        "name": "SetSpaceY",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "description": "Sets the spacing between 2 elements in the <page>DTileLayout</page> on the Y axis.",
        "arguments": [
          {
            "name": "spaceY",
            "type": "number",
            "description": "New Y axis spacing."
          }
        ]
      },
      {
        "name": "SetTile",
        "parent": "DTileLayout",
        "realms": [
          "client"
        ],
        "description": "<internal></internal> Called to set the occupied state of a tile.",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "description": "The x coordinate of the tile."
          },
          {
            "name": "y",
            "type": "number",
            "description": "The y coordinate of the tile."
          },
          {
            "name": "state",
            "type": "any",
            "description": "The new state of the tile, normally `1` or `nil`."
          }
        ]
      }
    ]
  },
  {
    "name": "DTooltip",
    "parent": "DLabel",
    "description": "<internal></internal>\n\nThe panel used internally for tool tips. See <page>Panel:SetTooltip</page>.",
    "functions": [
      {
        "name": "Close",
        "parent": "DTooltip",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Forces the tooltip to close. This will remove the panel."
      },
      {
        "name": "DrawArrow",
        "parent": "DTooltip",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Used to draw a triangle beneath the <page>DTooltip</page>\n<note>Requires <page>DTooltip:SetContents</page>, without this it will error</note>",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "description": "arrow location on the x axis"
          },
          {
            "name": "y",
            "type": "number",
            "description": "arrow location on the y axis"
          }
        ]
      },
      {
        "name": "OpenForPanel",
        "parent": "DTooltip",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nSets up the tooltip for display for given panel and starts the timer.\n\nNormally you wouldn't call this and you'd use <page>Panel:SetTooltip</page>, <page>Panel:SetTooltipPanel</page> or <page>Panel:SetTooltipPanelOverride</page>.",
        "arguments": [
          {
            "name": "pnl",
            "type": "Panel",
            "description": "The panel to open the tooltip for."
          }
        ]
      },
      {
        "name": "PositionTooltip",
        "parent": "DTooltip",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nPositions the <page>DTooltip</page> so it doesn't stay in the same draw position."
      },
      {
        "name": "SetContents",
        "parent": "DTooltip",
        "realms": [
          "client",
          "menu"
        ],
        "description": "What Panel you want put inside of the <page>DTooltip</page>\n\n<note>You can only have one Panel at a time; use Parenting to add more</note>",
        "arguments": [
          {
            "name": "panel",
            "type": "Panel",
            "description": "Contents"
          },
          {
            "name": "delete",
            "type": "boolean",
            "default": "false",
            "description": "If set to true, the panel in the first argument will be automatically removed when <page>DTooltip</page> is closed via <page>DTooltip:Close</page>."
          }
        ]
      }
    ]
  },
  {
    "name": "DTree",
    "parent": "DScrollPanel",
    "description": "A tree view element for Derma.\n\nSee also <page>DTree_Node</page>.",
    "functions": [
      {
        "name": "AddNode",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Add a node to the DTree",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "Name of the option."
          },
          {
            "name": "icon",
            "type": "string",
            "default": "icon16/folder.png",
            "description": "The icon that will show nexto the node in the DTree."
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "Returns the created <page>DTree_Node</page> panel."
          }
        ]
      },
      {
        "name": "ChildExpanded",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nCalls directly to <page>Panel:InvalidateLayout</page>.\nCalled by <page>DTree_Node</page>s when a sub element has been expanded or collapsed.\n\nUsed as a placeholder function alongside <page>DTree:ExpandTo</page>, <page>DTree:SetExpanded</page> and <page>DTree:MoveChildTo</page>.\n\nThe <page>DTree</page> acts a root node and methods with the same name in <page>DTree_Node</page> call to the parent.",
        "arguments": [
          {
            "name": "bExpand",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      {
        "name": "DoClick",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the any node is clicked. Called by <page>DTree_Node:DoClick</page>.",
        "arguments": [
          {
            "name": "node",
            "type": "DTree_Node",
            "description": "The right clicked node."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "name": "suppress"
          }
        ]
      },
      {
        "name": "DoRightClick",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the any node is right clicked. Called by <page>DTree_Node:DoRightClick</page>.",
        "arguments": [
          {
            "name": "node",
            "type": "DTree_Node",
            "description": "The right clicked node."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "name": "suppress"
          }
        ]
      },
      {
        "name": "ExpandTo",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nDoes nothing. Used as a placeholder empty function alongside <page>DTree:MoveChildTo</page>, <page>DTree:SetExpanded</page> and <page>DTree:ChildExpanded</page>.\n\nThe <page>DTree</page> acts a root node and methods with the same name in <page>DTree_Node</page> call to the parent.",
        "arguments": [
          {
            "name": "bExpand",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      {
        "name": "GetClickOnDragHover",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the status of <page>DTree:SetClickOnDragHover</page>. See that for more info.",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "GetIndentSize",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the indentation size of the <page>DTree</page>, the distance between each \"level\" of the tree is offset on the left from the previous level.\n\nCurrently this feature has no effect on the <page>DTree</page> element.",
        "returnValues": [
          {
            "type": "number",
            "description": "The indentation size."
          }
        ]
      },
      {
        "name": "GetLineHeight",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the height of each <page>DTree_Node</page> in the tree.",
        "returnValues": [
          {
            "type": "number",
            "description": "The height of each <page>DTree_Node</page> in the tree."
          }
        ]
      },
      {
        "name": "GetSelectedItem",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the currently selected node.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "Curently selected <page>DTree_Node</page>."
          }
        ]
      },
      {
        "name": "GetShowIcons",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether or not the <page>Silkicons</page> next to each node of the DTree will be displayed.\n\nIndividual icons can be set with <page>DTree_Node:SetIcon</page> or passed as the second argument in <page>DTree:AddNode</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether or not the silkicons next to each node will be displayed."
          }
        ]
      },
      {
        "name": "LayoutTree",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nDoes nothing."
      },
      {
        "name": "MoveChildTo",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Moves given node to the top of <page>DTree</page>s children. (Makes it the topmost mode)\n\nUsed as a placeholder function alongside <page>DTree:ExpandTo</page>, <page>DTree:SetExpanded</page> and <page>DTree:ChildExpanded</page>.\n\nThe <page>DTree</page> acts a root node and methods with the same name in <page>DTree_Node</page> call to the parent.",
        "arguments": [
          {
            "name": "child",
            "type": "Panel",
            "description": "The node to move"
          },
          {
            "name": "pos",
            "type": "number",
            "description": "<deprecated></deprecated> Unused, does nothing."
          }
        ]
      },
      {
        "name": "OnNodeSelected",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "description": "This function is called when a node within a tree is selected.",
        "arguments": [
          {
            "name": "node",
            "type": "Panel",
            "description": "The node that was selected."
          }
        ]
      },
      {
        "name": "Root",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the root <page>DTree_Node</page>, the node that is the parent to all other nodes of the DTree.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "Root node."
          }
        ]
      },
      {
        "name": "SetClickOnDragHover",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Enables the \"click when drag-hovering\" functionality.\n\nIf enabled, when hovering over any <page>DTree_Node</page> of this <page>DTree</page> while dragging a panel, the node will be automatically clicked on (and subsequently <page>DTree:OnNodeSelected</page> will be called) to open any attached panels, such as spawnlists in spawnmenu.\n\nSee also: <page>PANEL:DragHoverClick</page>.",
        "arguments": [
          {
            "name": "enable",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      {
        "name": "SetExpanded",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nDoes nothing. Is not called by the <page>DTree</page> itself.\n\nUsed as a placeholder empty function alongside <page>DTree:ExpandTo</page>, <page>DTree:MoveChildTo</page> and <page>DTree:ChildExpanded</page> to prevent errors when <page>DTree_Node:SetExpanded</page> is incorrectly used on a <page>DTree</page>.",
        "arguments": [
          {
            "name": "bExpand",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      {
        "name": "SetIndentSize",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the indentation size of the <page>DTree</page>, the distance between each \"level\" of the tree is offset on the left from the previous level.\n\nCurrently this feature has no effect on the <page>DTree</page> element.",
        "arguments": [
          {
            "name": "size",
            "type": "number",
            "description": "The new indentation size."
          }
        ]
      },
      {
        "name": "SetLineHeight",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the height of each <page>DTree_Node</page> in the tree.\n\nThe default value is 17.",
        "arguments": [
          {
            "name": "h",
            "type": "number",
            "description": "The height to set."
          }
        ]
      },
      {
        "name": "SetSelectedItem",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Set the currently selected top-level node.",
        "arguments": [
          {
            "name": "node",
            "type": "Panel",
            "description": "<page>DTree_Node</page> to select."
          }
        ]
      },
      {
        "name": "SetShowIcons",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether or not the <page>Silkicons</page> next to each node of the DTree will be displayed.\n\nIndividual icons can be set with <page>DTree_Node:SetIcon</page> or passed as the second argument in <page>DTree:AddNode</page>.",
        "arguments": [
          {
            "name": "show",
            "type": "boolean",
            "description": "Whether or not to show icons."
          }
        ]
      },
      {
        "name": "ShowIcons",
        "parent": "DTree",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether or not the <page>Silkicons</page> next to each node of the DTree will be displayed.\n\nAlias of <page>DTree:GetShowIcons</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether or not the silkicons next to each node will be displayed."
          }
        ]
      }
    ]
  },
  {
    "name": "DTree_Node",
    "parent": "DPanel",
    "description": "<internal></internal>\n\nThis panel is created whenever you add a node to a <page>DTree</page>.\nThe root node of a <page>DTree</page> is also a <page>DTree_Node</page> and controls much of its action. it can be accessed with <page>DTree:Root</page>.",
    "functions": [
      {
        "name": "AddFolder",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "A helper function that adds a new node and calls to <page>DTree_Node:MakeFolder</page> on it.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "The name of the new node"
          },
          {
            "name": "folder",
            "type": "string",
            "description": "The folder in the filesystem to use, relative to the garrysmod/ folder."
          },
          {
            "name": "path",
            "type": "string",
            "description": "The path to search in. See <page>File Search Paths</page>"
          },
          {
            "name": "showFiles",
            "type": "boolean",
            "default": "false",
            "description": "Should files be added as nodes (true) or folders only (false)"
          },
          {
            "name": "wildcard",
            "type": "string",
            "default": "*",
            "description": "The wildcard to use when searching for files."
          },
          {
            "name": "bDontForceExpandable",
            "type": "boolean",
            "default": "false",
            "description": ""
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "The created <page>DTree_Node</page>"
          }
        ]
      },
      {
        "name": "AddNode",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Add a child node to the DTree_Node",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": "Name of the node."
          },
          {
            "name": "icon",
            "type": "string",
            "default": "icon16/folder.png",
            "description": "The icon that will show next to the node in the DTree."
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "Returns the created <page>DTree_Node</page> panel."
          }
        ]
      },
      {
        "name": "AddPanel",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nAdds the given panel to the child nodes list, a <page>DListLayout</page>.",
        "arguments": [
          {
            "name": "pnl",
            "type": "Panel",
            "description": "The panel to add."
          }
        ]
      },
      {
        "name": "AnimSlide",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nInternal function that handles the expand/collapse animations.",
        "arguments": [
          {
            "name": "anim",
            "type": "table",
            "description": ""
          },
          {
            "name": "delta",
            "type": "number",
            "description": ""
          },
          {
            "name": "data",
            "type": "table",
            "description": ""
          }
        ]
      },
      {
        "name": "ChildExpanded",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nCalled when a child node is expanded or collapsed to propagate this event to parent nodes to update layout.",
        "arguments": [
          {
            "name": "expanded",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      {
        "name": "CleanList",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Cleans up the internal table of items (sub-nodes) of this node from invalid panels or sub-nodes that were moved from this node to another.\n\nAppears the be completely unused by the game on its own."
      },
      {
        "name": "Copy",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Create and returns a copy of this node, including all the sub-nodes.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "The copied <page>DTree_Node</page>."
          }
        ]
      },
      {
        "name": "CreateChildNodes",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nCreates the container <page>DListLayout</page> for the <page>DTree_Node</page>s.\n\nThis is called automatically so you don't have to."
      },
      {
        "name": "DoChildrenOrder",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nCalled automatically to update the status of <page>DTree_Node:GetLastChild</page> on children of this node."
      },
      {
        "name": "DoClick",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the node is clicked.\n\nSee also <page>DTree_Node:DoRightClick</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to prevent DoClick from being called on parent nodes or the <page>DTree</page> itself."
          }
        ]
      },
      {
        "name": "DoRightClick",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the node is right clicked.\n\nSee also <page>DTree_Node:DoClick</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Return true to prevent DoRightClick from being called on parent nodes or the <page>DTree</page> itself."
          }
        ]
      },
      {
        "name": "ExpandRecurse",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Expands or collapses this node, as well as ALL child nodes of this node.\n\nWorks opposite of <page>DTree_Node:ExpandTo</page>.",
        "arguments": [
          {
            "name": "expand",
            "type": "boolean",
            "description": "Whether to expand (true) or collapse (false)"
          }
        ]
      },
      {
        "name": "ExpandTo",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Collapses or expands all nodes from the topmost-level node to this one.\n\nWorks opposite of <page>DTree_Node:ExpandRecurse</page>.",
        "arguments": [
          {
            "name": "expand",
            "type": "boolean",
            "description": "Whether to expand (true) or collapse (false)"
          }
        ]
      },
      {
        "name": "FilePopulate",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nCalled automatically from <page>DTree_Node:PopulateChildrenAndSelf</page> and <page>DTree_Node:PopulateChildren</page> to populate this node with child nodes of files and folders.",
        "arguments": [
          {
            "name": "bAndChildren",
            "type": "boolean",
            "description": "Does nothing. Set to true if called from <page>DTree_Node:PopulateChildren</page>."
          },
          {
            "name": "bExpand",
            "type": "boolean",
            "description": "Expand self once population process is finished."
          }
        ]
      },
      {
        "name": "FilePopulateCallback",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nCalled automatically from <page>DTree_Node:FilePopulate</page> to actually fill the node with sub-nodes based on set preferences like should files be added, etc.",
        "arguments": [
          {
            "name": "files",
            "type": "table",
            "description": "A list of files in this folder"
          },
          {
            "name": "folders",
            "type": "table",
            "description": "A list of folder in this folder."
          },
          {
            "name": "foldername",
            "type": "string",
            "description": "The folder name/path this node represents"
          },
          {
            "name": "path",
            "type": "string",
            "description": "The Path ID search was performed with. See <page>File Search Paths</page>"
          },
          {
            "name": "bAndChildren",
            "type": "boolean",
            "description": "Inherited from the **FilePopulate** call. Does nothing"
          },
          {
            "name": "wildcard",
            "type": "string",
            "description": "The wildcard that was given"
          }
        ]
      },
      {
        "name": "GetChildNode",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns n-th child node.\n\nBasically an alias of <page>Panel:GetChild</page>.",
        "arguments": [
          {
            "name": "num",
            "type": "number",
            "description": "The number of the child to get, starting with 0"
          }
        ],
        "returnValues": [
          {
            "type": "Panel",
            "description": "The child panel, if valid ID is given"
          }
        ]
      },
      {
        "name": "GetChildNodeCount",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the number of child nodes this node has. For use with <page>DTree_Node:GetChildNode</page>",
        "returnValues": [
          {
            "type": "number",
            "description": "Number of child nodes."
          }
        ]
      },
      {
        "name": "GetChildNodes",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns a table containing all child nodes of this node.",
        "returnValues": [
          {
            "type": "table",
            "description": "A list of all child nodes."
          }
        ]
      },
      {
        "name": "GetDirty",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nReturns value set by <page>DTree_Node:SetDirty</page>.",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "GetDoubleClickToOpen",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether the double clock to collapse/expand functionality is enabled on this node.",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "GetDraggableName",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nReturns what is set by <page>DTree_Node:SetDraggableName</page>.",
        "returnValues": [
          {
            "type": "string"
          }
        ]
      },
      {
        "name": "GetDrawLines",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nReturns whether or not this node is drawing lines",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "GetExpanded",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether the node is expanded or not.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Expanded or not."
          }
        ]
      },
      {
        "name": "GetFileName",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the filepath of the file attached to this node.",
        "returnValues": [
          {
            "type": "string"
          }
        ]
      },
      {
        "name": "GetFolder",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the folder path to search in, set by <page>DTree_Node:MakeFolder</page>.",
        "returnValues": [
          {
            "type": "string",
            "description": "The folder path."
          }
        ]
      },
      {
        "name": "GetForceShowExpander",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether the expand/collapse button is shown on this node regardless of whether or not it has sub-nodes.\n\nSee also <page>DTree_Node:SetForceShowExpander</page>.",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "GetHideExpander",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether the expand button (little + button) should be shown or hidden.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Цhether the expand button should be shown or hidden."
          }
        ]
      },
      {
        "name": "GetIcon",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the image path to the icon of this node.",
        "returnValues": [
          {
            "type": "string",
            "description": "The path to the image"
          }
        ]
      },
      {
        "name": "GetIndentSize",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the indentation level of the <page>DTree</page> this node belongs to.\n\nAlias of <page>DTree:GetIndentSize</page>, see it for more info.",
        "returnValues": [
          {
            "type": "number",
            "description": "The indentation level."
          }
        ]
      },
      {
        "name": "GetLastChild",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether this node is the last child on this level or not.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether this node is the last child on this level or not."
          }
        ]
      },
      {
        "name": "GetLineHeight",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "The height of a single <page>DTree_Node</page> of the <page>DTree</page> this node belongs to.\n\nAlias of <page>DTree:GetLineHeight</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The height of a single <page>DTree_Node</page>."
          }
        ]
      },
      {
        "name": "GetNeedsChildSearch",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal><deprecated>Seems to be unused entirely.</deprecated>Returns whether the node still needs a filesystem search for sub-nodes.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether the node still needs a filesystem search."
          }
        ]
      },
      {
        "name": "GetNeedsPopulating",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nReturns whether or not the node is set to be populated from the filesystem.",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "GetParentNode",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the parent <page>DTree_Node</page>. Note that <page>Panel:GetParent</page> will not be the same!",
        "returnValues": [
          {
            "type": "Panel",
            "description": "The parent node."
          }
        ]
      },
      {
        "name": "GetPathID",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the path ID (<page>File Search Paths</page>) used in populating the <page>DTree</page> from the filesystem.\n\nSee <page>DTree_Node:SetPathID</page> and <page>DTree_Node:MakeFolder</page>.",
        "returnValues": [
          {
            "type": "string",
            "description": "The Path ID"
          }
        ]
      },
      {
        "name": "GetRoot",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the root node, the <page>DTree</page> this node is under.\n\nSee also <page>DTree_Node:GetParentNode</page>.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "The root node"
          }
        ]
      },
      {
        "name": "GetShowFiles",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether or not nodes for files should/will be added when populating the node from filesystem.",
        "returnValues": [
          {
            "type": "boolean"
          }
        ]
      },
      {
        "name": "GetWildCard",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the wildcard set by <page>DTree_Node:MakeFolder</page>.",
        "returnValues": [
          {
            "type": "string",
            "description": "The search wildcard"
          }
        ]
      },
      {
        "name": "Insert",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Inserts a sub-node into this node before or after the given node.",
        "arguments": [
          {
            "name": "node",
            "type": "Panel",
            "description": "The <page>DTree_Node</page> to insert."
          },
          {
            "name": "nodeNextTo",
            "type": "Panel",
            "description": "The node to insert the node above before or after."
          },
          {
            "name": "before",
            "type": "boolean",
            "description": "true to insert before, false to insert after."
          }
        ]
      },
      {
        "name": "InsertNode",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nInserts an existing node as a \"child\" or a sub-node of this node.\nUsed internally by the drag'n'drop functionality.",
        "arguments": [
          {
            "name": "node",
            "type": "Panel",
            "description": "Has to be <page>DTree_Node</page>"
          }
        ]
      },
      {
        "name": "InstallDraggable",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nCalled automatically internally.\n\nMakes the target node compatible with this node's drag'n'drop.",
        "arguments": [
          {
            "name": "node",
            "type": "Panel",
            "description": "The <page>DTree_Node</page>."
          }
        ]
      },
      {
        "name": "InternalDoClick",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nSee <page>DTree_Node:DoClick</page>"
      },
      {
        "name": "InternalDoRightClick",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nSee <page>DTree_Node:DoRightClick</page>."
      },
      {
        "name": "IsRootNode",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns true if <page>DTree_Node:GetRoot</page> is the same as <page>DTree_Node:GetParentNode</page> of this node.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "If this is a root node."
          }
        ]
      },
      {
        "name": "LeaveTree",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Removes given node as a sub-node of this node.\n\nIt doesn't actually remove or unparent the panel, just removes it from the internal <page>DListView</page>.",
        "arguments": [
          {
            "name": "pnl",
            "type": "Panel",
            "description": "The node to remove"
          }
        ]
      },
      {
        "name": "MakeFolder",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Makes this node a folder in the filesystem. This will make it automatically populated.\n\nSee also <page>DTree_Node:AddFolder</page>.",
        "arguments": [
          {
            "name": "folder",
            "type": "string",
            "description": "The folder in the filesystem to use, relative to the garrysmod/ folder."
          },
          {
            "name": "path",
            "type": "string",
            "description": "The path to search in. See <page>File Search Paths</page>"
          },
          {
            "name": "showFiles",
            "type": "boolean",
            "default": "false",
            "description": "Should files be added as nodes (true) or folders only (false)"
          },
          {
            "name": "wildcard",
            "type": "string",
            "default": "*",
            "description": "The wildcard to use when searching for files."
          },
          {
            "name": "dontForceExpandable",
            "type": "boolean",
            "default": "false",
            "description": "If set to true, don't show the expand buttons on empty nodes."
          }
        ]
      },
      {
        "name": "MoveChildTo",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Moves given panel to the top of the children of this node.\n\nDespite name of this function, it cannot move the children to any position but the topmost.",
        "arguments": [
          {
            "name": "node",
            "type": "Panel",
            "description": "The node to move."
          }
        ]
      },
      {
        "name": "MoveToTop",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Moves this node to the top of the level."
      },
      {
        "name": "OnModified",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when sub-nodes of this <page>DTree_Node</page> were changed, such as being rearranged if that functionality is enabled."
      },
      {
        "name": "OnNodeAdded",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when a new sub-node is added this node.",
        "arguments": [
          {
            "name": "newNode",
            "type": "DTree_Node",
            "description": "The newly added sub node."
          }
        ]
      },
      {
        "name": "OnNodeSelected",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nCalled when this or a sub node is selected. Do not use this, it is not for override.\n\nUse <page>DTree:OnNodeSelected</page> or <page>DTree_Node:DoClick</page> instead.",
        "arguments": [
          {
            "name": "node",
            "type": "Panel",
            "description": ""
          }
        ]
      },
      {
        "name": "PerformRootNodeLayout",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nCalled automatically to perform layout on this node if this node <page>DTree_Node:IsRootNode</page>."
      },
      {
        "name": "PopulateChildren",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nCalled automatically from <page>DTree_Node:PopulateChildrenAndSelf</page>."
      },
      {
        "name": "PopulateChildrenAndSelf",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nCalled automatically from <page>DTree_Node:SetExpanded</page> (or when user manually expands the node) to populate the node with sub-nodes from the filesystem if this was enabled via <page>DTree_Node:MakeFolder</page>.",
        "arguments": [
          {
            "name": "expand",
            "type": "boolean",
            "description": "Expand self once population process is finished."
          }
        ]
      },
      {
        "name": "SetDirty",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nAppears to have no effect on the <page>DTree_Node</page>.",
        "arguments": [
          {
            "name": "dirty",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      {
        "name": "SetDoubleClickToOpen",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether double clicking the node should expand/collapse it or not.",
        "arguments": [
          {
            "name": "enable",
            "type": "boolean",
            "description": "true to enable, false to disable this functionality."
          }
        ]
      },
      {
        "name": "SetDraggableName",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nUsed to store name for sub elements for a <page>Panel:Droppable</page> call.",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "description": ""
          }
        ]
      },
      {
        "name": "SetDrawLines",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nSets whether or not this node should draw visual lines.",
        "arguments": [
          {
            "name": "draw",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      {
        "name": "SetExpanded",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Expands or collapses this node.",
        "arguments": [
          {
            "name": "expand",
            "type": "boolean",
            "description": "Whether to expand (true) or collapse (false)"
          },
          {
            "name": "surpressAnimation",
            "type": "boolean",
            "default": "false",
            "description": "Whether to play animation (false) or not (true)"
          }
        ]
      },
      {
        "name": "SetFileName",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nSets the file full filepath to the file attached to this node",
        "arguments": [
          {
            "name": "filename",
            "type": "string",
            "description": ""
          }
        ]
      },
      {
        "name": "SetFolder",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nSets the folder to search files and folders in.\n\nUse <page>DTree_Node:MakeFolder</page> instead.",
        "arguments": [
          {
            "name": "folder",
            "type": "string",
            "description": ""
          }
        ]
      },
      {
        "name": "SetForceShowExpander",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets whether or not the expand/collapse button (+/- button) should be shown on this node regardless of whether it has sub-elements or not.",
        "arguments": [
          {
            "name": "forceShow",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      {
        "name": "SetHideExpander",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nSets whether the expand button (little + button) should be shown or hidden.",
        "arguments": [
          {
            "name": "hide",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      {
        "name": "SetIcon",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the material for the icon of the <page>DTree_Node</page>.",
        "arguments": [
          {
            "name": "path",
            "type": "string",
            "description": "The path to the material to be used. Do not include \"materials/\". .pngs are supported."
          }
        ]
      },
      {
        "name": "SetLastChild",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nCalled automatically to set whether this node is the last child on this level or not.",
        "arguments": [
          {
            "name": "last",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      {
        "name": "SetNeedsChildSearch",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n<deprecated>Seems to be unused entirely.</deprecated>\n\nSets whether the node still needs a filesystem search for sub-nodes.",
        "arguments": [
          {
            "name": "newState",
            "type": "boolean",
            "description": "New state."
          }
        ]
      },
      {
        "name": "SetNeedsPopulating",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nSets whether or not the node needs populating from the filesystem.",
        "arguments": [
          {
            "name": "needs",
            "type": "boolean",
            "description": "Whether or not the node needs populating"
          }
        ]
      },
      {
        "name": "SetParentNode",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nSets the parent node of this node. Not the same as <page>Panel:SetParent</page>.\n\nThis is set automatically, you shouldn't use this.",
        "arguments": [
          {
            "name": "parent",
            "type": "Panel",
            "description": "The panel to set as a parent node for this node"
          }
        ]
      },
      {
        "name": "SetPathID",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nSets the path ID (<page>File Search Paths</page>) for populating the tree from the filesystem.\n\nUse <page>DTree_Node:MakeFolder</page> instead.",
        "arguments": [
          {
            "name": "path",
            "type": "string",
            "description": "The path ID to set."
          }
        ]
      },
      {
        "name": "SetRoot",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nSets the root node (the <page>DTree</page>) of this node.\n\nThis is set automatically, you shouldn't use this.",
        "arguments": [
          {
            "name": "root",
            "type": "Panel",
            "description": "The panel to set as root node."
          }
        ]
      },
      {
        "name": "SetSelected",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nCalled automatically to update the \"selected\" status of this node.",
        "arguments": [
          {
            "name": "selected",
            "type": "boolean",
            "description": "Whether this node is currently selected or not."
          }
        ]
      },
      {
        "name": "SetShowFiles",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nSets whether or not nodes for files should be added when populating the node from filesystem.",
        "arguments": [
          {
            "name": "showFiles",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      {
        "name": "SetupCopy",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<deprecated></deprecated>\n\nCurrently does nothing, not implemented."
      },
      {
        "name": "SetWildCard",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nSets the search wildcard.\n\nUse <page>DTree_Node:MakeFolder</page> instead",
        "arguments": [
          {
            "name": "wildcard",
            "type": "string",
            "description": "The wildcard to set"
          }
        ]
      },
      {
        "name": "ShowIcons",
        "parent": "DTree_Node",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether or not the <page>DTree</page> this node is in has icons enabled.\n\nSee <page>DTree:ShowIcons</page> for more info.",
        "returnValues": [
          {
            "type": "number",
            "description": "Whether the icons are shown or not"
          }
        ]
      }
    ]
  },
  {
    "name": "DTree_Node_Button",
    "parent": "DButton",
    "description": "<internal></internal>\n\nUsed by <page>DTree_Node</page>."
  },
  {
    "name": "DVerticalDivider",
    "parent": "DPanel",
    "description": "Vertical version of <page>DHorizontalDivider</page>.",
    "functions": [
      {
        "name": "DoConstraints",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ],
        "description": "<internal></internal>Used internally to clamp the vertical divider to <page>DVerticalDivider:GetTopMin</page> and <page>DVerticalDivider:GetBottomMin</page>."
      },
      {
        "name": "GetBottom",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ],
        "description": "Returns the bottom content panel of the <page>DVerticalDivider</page>.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "The bottom content panel."
          }
        ]
      },
      {
        "name": "GetBottomMin",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ],
        "description": "Returns the minimum height of the bottom content panel.",
        "returnValues": [
          {
            "type": "number",
            "description": "The minimum height of the bottom content panel."
          }
        ]
      },
      {
        "name": "GetDividerHeight",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ],
        "description": "Returns the height of the divider bar between the top and bottom content panels of the <page>DVerticalDivider</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The height of the divider bar."
          }
        ]
      },
      {
        "name": "GetDragging",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ],
        "description": "Returns whether the divider is being dragged or not.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "If true, mouse movement will alter the size of the divider."
          }
        ]
      },
      {
        "name": "GetHoldPos",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ],
        "description": "<internal></internal>\nReturns the local Y position of where the user starts dragging the divider.",
        "returnValues": [
          {
            "type": "number",
            "description": "The local Y position where divider dragging has started."
          }
        ]
      },
      {
        "name": "GetMiddle",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ],
        "description": "Returns the middle content panel of the <page>DVerticalDivider</page>.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "The middle content panel."
          }
        ]
      },
      {
        "name": "GetTop",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ],
        "description": "Returns the top content panel of the <page>DVerticalDivider</page>.",
        "returnValues": [
          {
            "type": "Panel",
            "description": "The top content panel."
          }
        ]
      },
      {
        "name": "GetTopHeight",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ],
        "description": "Returns the current height of the top content panel set by <page>DVerticalDivider:SetTopHeight</page> or by the user.",
        "returnValues": [
          {
            "type": "number",
            "description": "The current height of the <page>DVerticalDivider</page>."
          }
        ]
      },
      {
        "name": "GetTopMax",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ],
        "description": "Returns the maximum height of the top content panel. See <page>DVerticalDivider:SetTopMax</page> for more information.",
        "returnValues": [
          {
            "type": "number",
            "description": "The maximum height of the top content panel."
          }
        ]
      },
      {
        "name": "GetTopMin",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ],
        "description": "Returns the minimum height of the top content panel.",
        "returnValues": [
          {
            "type": "number",
            "description": "The minimum height of the top content panel."
          }
        ]
      },
      {
        "name": "SetBottom",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ],
        "description": "Sets the passed panel as the bottom content of the <page>DVerticalDivider</page>.",
        "arguments": [
          {
            "name": "pnl",
            "type": "Panel",
            "description": "The panel to set as the bottom content."
          }
        ]
      },
      {
        "name": "SetBottomMin",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ],
        "description": "Sets the minimum height of the bottom content panel.",
        "arguments": [
          {
            "name": "height",
            "type": "number",
            "description": "The minimum height of the bottom content panel. Default is 50."
          }
        ]
      },
      {
        "name": "SetDividerHeight",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ],
        "description": "Sets the height of the divider bar between the top and bottom content panels of the <page>DVerticalDivider</page>.",
        "arguments": [
          {
            "name": "height",
            "type": "number",
            "description": "The height of the divider bar."
          }
        ]
      },
      {
        "name": "SetDragging",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ],
        "description": "<internal></internal>\nSets whether the divider is being dragged or not.",
        "arguments": [
          {
            "name": "isDragging",
            "type": "boolean",
            "description": "Setting this to true causes cursor movement to alter the position of the divider."
          }
        ]
      },
      {
        "name": "SetHoldPos",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ],
        "description": "<internal></internal>\nSets the local Y position of where the user starts dragging the divider.",
        "arguments": [
          {
            "name": "y",
            "type": "number",
            "description": "The local Y position where divider dragging has started."
          }
        ]
      },
      {
        "name": "SetMiddle",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ],
        "description": "Places the passed panel in between the top and bottom content panels of the <page>DVerticalDivider</page>.",
        "arguments": [
          {
            "name": "pnl",
            "type": "Panel",
            "description": "The panel to set as the middle content."
          }
        ]
      },
      {
        "name": "SetTop",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ],
        "description": "Sets the passed panel as the top content of the <page>DVerticalDivider</page>.",
        "arguments": [
          {
            "name": "pnl",
            "type": "Panel",
            "description": "The panel to set as the top content."
          }
        ]
      },
      {
        "name": "SetTopHeight",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ],
        "description": "Sets the height of the top content panel.\n\nThe height of the bottom content panel is automatically calculated by taking the total height of the <page>DVerticalDivider</page> and subtracting it with the height of the top content panel and the divider bar.",
        "arguments": [
          {
            "name": "height",
            "type": "number",
            "description": "The height of the top content panel."
          }
        ]
      },
      {
        "name": "SetTopMax",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ],
        "description": "Sets the maximum height of the top content panel. This is ignored if the panel would exceed the minimum bottom content panel height set from <page>DVerticalDivider:SetBottomMin</page>.",
        "arguments": [
          {
            "name": "height",
            "type": "number",
            "description": "The maximum height of the top content panel. Default is 4096."
          }
        ]
      },
      {
        "name": "SetTopMin",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ],
        "description": "Sets the minimum height of the top content panel.",
        "arguments": [
          {
            "name": "height",
            "type": "number",
            "description": "The minimum height of the top content panel. Default is 50."
          }
        ]
      },
      {
        "name": "StartGrab",
        "parent": "DVerticalDivider",
        "realms": [
          "client"
        ],
        "description": "<internal></internal>\nCauses the user to start dragging the divider."
      }
    ]
  },
  {
    "name": "DVScrollBar",
    "parent": "Panel",
    "description": "A generic vertical scrollbar, used in <page>DScrollPanel</page>. See the horizontal alternative [here](DHScrollBar).\n\nThe scrollbar notably contains `DVScrollBar.btnUp`, `DVScrollBar.btnDown`, and `DVScrollBar.btnGrip` which are the up button, down button, and grip respectively. Editing the paint functions of these allows custom scrollbar styling (See <page>DScrollPanel:GetVBar</page> for an example), although it is a better idea to use [Derma Skins](Derma_Skin_Creation).",
    "functions": [
      {
        "name": "AddScroll",
        "parent": "DVScrollBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Adds specified amount of scroll in pixels.",
        "arguments": [
          {
            "name": "add",
            "type": "number",
            "description": "How much to scroll downwards. Can be negative for upwards scroll"
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "True if the scroll level was changed (i.e. if we did or did not scroll)"
          }
        ]
      },
      {
        "name": "AnimateTo",
        "parent": "DVScrollBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Smoothly scrolls to given level.",
        "arguments": [
          {
            "name": "scroll",
            "type": "number",
            "description": "The scroll level to animate to. In pixels from the top ( from 0 )"
          },
          {
            "name": "length",
            "type": "number",
            "description": "Length of the animation in seconds"
          },
          {
            "name": "delay",
            "type": "number",
            "default": "0",
            "description": "Delay of the animation in seconds"
          },
          {
            "name": "ease",
            "type": "number",
            "default": "-1",
            "description": "See <page>Panel:NewAnimation</page> for explanation."
          }
        ]
      },
      {
        "name": "BarScale",
        "parent": "DVScrollBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the scale of the scroll bar based on the difference in size between the visible \"window\" into the canvas that is being scrolled. Should be used after <page>DVScrollBar:SetUp</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The scale of the scrollbar."
          }
        ]
      },
      {
        "name": "GetHideButtons",
        "parent": "DVScrollBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns whether or not the manual up/down scroll buttons are visible or not. Set by <page>DVScrollBar:SetHideButtons</page>.",
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether or not the manual up/down scroll buttons are visible or not."
          }
        ]
      },
      {
        "name": "GetOffset",
        "parent": "DVScrollBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the negative of <page>DVScrollBar:GetScroll</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "The scroll offset."
          }
        ]
      },
      {
        "name": "GetScroll",
        "parent": "DVScrollBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Returns the amount of scroll level from the top in pixels",
        "returnValues": [
          {
            "type": "number",
            "description": "The amount of scroll level from the top"
          }
        ]
      },
      {
        "name": "Grip",
        "parent": "DVScrollBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "<internal></internal>\n\nCalled from within <page>DScrollBarGrip</page>"
      },
      {
        "name": "SetHideButtons",
        "parent": "DVScrollBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Allows hiding the up and down buttons for better visual stylisation.",
        "arguments": [
          {
            "name": "hide",
            "type": "boolean",
            "description": "True to hide"
          }
        ]
      },
      {
        "name": "SetScroll",
        "parent": "DVScrollBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets the scroll level in pixels.",
        "arguments": [
          {
            "name": "scroll",
            "type": "number",
            "description": "The new scroll value."
          }
        ]
      },
      {
        "name": "SetUp",
        "parent": "DVScrollBar",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Sets up the scrollbar for use.\n\nThe scrollbar will automatically disable itself if the total height of the canvas is lower than the height of the panel that holds the canvas during this function call.",
        "arguments": [
          {
            "name": "barSize",
            "type": "number",
            "description": "The size of the panel that holds the canvas, basically size of \"1 page\"."
          },
          {
            "name": "canvasSize",
            "type": "number",
            "description": "The total size of the canvas, this typically is the bigger number."
          }
        ]
      }
    ]
  },
  {
    "name": "EditablePanel",
    "parent": "Panel",
    "description": "Base panel used by <page>DFrame</page>, this panel is needed so that elements such as the <page>TextEntry</page> can obtain focus."
  },
  {
    "name": "fingerposer",
    "parent": "ContextBase",
    "description": "<internal></internal>\nA panel used by Sandbox's Finger Poser tool."
  },
  {
    "name": "FingerVar",
    "parent": "Panel",
    "description": "<internal>\nUsed by the <page>fingerposer</page> panel.\n</internal>\n\nA panel used by Sandbox's Finger Poser tool."
  },
  {
    "name": "Frame",
    "parent": "Panel",
    "description": "<deprecated>You should use <page>DFrame</page> instead.</deprecated>\n\nA window that in which you can place just about every other component and even another frame."
  },
  {
    "name": "HTML",
    "parent": "Panel",
    "description": "The HTML control can be used to display HTML code just like an internet browser. Unlike <page>DHTML</page>, this control cannot accept user input or complex interaction, such as retrieving image data.\n\n**Blocked URL Extentions**\n\n`This means your url cannot end in any of these extensions, e.g.: (http://yourdomain.com/garry.exe)`\n* .exe\n* .bat\n* .dll\n* .zip\n* .mp3\n* .swf"
  },
  {
    "name": "IconEditor",
    "parent": "DFrame",
    "description": "An icon editor that permits a user to modify a <page>SpawnIcon</page> and re-render it. This is used by the spawn menu and is what is shown when you right-click an icon and select `Edit Icon`.\n\nThis makes use of the <page>DAdjustableModelPanel</page> element.\n\n<note>This panel is only available in Sandbox and Sandbox derived gamemodes!</note>\n<img src=\"IconEditor.jpg\">",
    "functions": [
      {
        "name": "AboveLayout",
        "parent": "IconEditor",
        "realms": [
          "client"
        ],
        "description": "Applies the top-down view camera settings for the model in the <page>DAdjustableModelPanel</page>.\n\nCalled when a user clicks the `Above` (third) button (See <page>IconEditor</page>)."
      },
      {
        "name": "BestGuessLayout",
        "parent": "IconEditor",
        "realms": [
          "client"
        ],
        "description": "Applies the best camera settings for the model in the <page>DAdjustableModelPanel</page>, using the values returned by <page>Global.PositionSpawnIcon</page>.\n\nCalled when a user clicks the `wand` button (See the ) and when <page>IconEditor:Refresh</page> is called."
      },
      {
        "name": "FillAnimations",
        "parent": "IconEditor",
        "realms": [
          "client"
        ],
        "description": "<internal></internal> Fills the <page>DListView</page> on the left of the editor with the model entity's animation list. Called by <page>IconEditor:Refresh</page>.",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity being rendered within the model panel."
          }
        ]
      },
      {
        "name": "FullFrontalLayout",
        "parent": "IconEditor",
        "realms": [
          "client"
        ],
        "description": "Applies the front view camera settings for the model in the <page>DAdjustableModelPanel</page>.\n\nCalled when a user clicks the `Front` (second) button (See the )."
      },
      {
        "name": "OriginLayout",
        "parent": "IconEditor",
        "realms": [
          "client"
        ],
        "description": "Places the camera at the origin (0,0,0), relative to the entity, in the <page>DAdjustableModelPanel</page>.\n\nCalled when a user clicks the `Center` (fifth) button (See the )."
      },
      {
        "name": "Refresh",
        "parent": "IconEditor",
        "realms": [
          "client"
        ],
        "description": "Updates the internal <page>DAdjustableModelPanel</page> and <page>SpawnIcon</page>.\n\nThis should be called immediately after setting the SpawnIcon with <page>IconEditor:SetIcon</page>."
      },
      {
        "name": "RenderIcon",
        "parent": "IconEditor",
        "realms": [
          "client"
        ],
        "description": "Re-renders the <page>SpawnIcon</page>.\n\nCalled when a user clicks the `RENDER` button, this retrieves the render data from the internal <page>DAdjustableModelPanel</page> and passes it as a table to <page>Panel:RebuildSpawnIconEx</page>."
      },
      {
        "name": "RightLayout",
        "parent": "IconEditor",
        "realms": [
          "client"
        ],
        "description": "Applies the right side view camera settings for the model in the <page>DAdjustableModelPanel</page>.\n\nCalled when a user clicks the `Right` (fourth) button (See the ). (Note: The icon for this points left.)"
      },
      {
        "name": "SetDefaultLighting",
        "parent": "IconEditor",
        "realms": [
          "client"
        ],
        "description": "<internal></internal> Sets up the default ambient and directional lighting for the <page>DAdjustableModelPanel</page>. Called by <page>IconEditor:Refresh</page>."
      },
      {
        "name": "SetFromEntity",
        "parent": "IconEditor",
        "realms": [
          "client"
        ],
        "description": "Sets the editor's model and icon from an entity. Alternative to <page>IconEditor:SetIcon</page>, with uses a <page>SpawnIcon</page>.\n\nYou do not need to call <page>IconEditor:Refresh</page> after this.",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity to retrieve the model and skin from."
          }
        ]
      },
      {
        "name": "SetIcon",
        "parent": "IconEditor",
        "realms": [
          "client"
        ],
        "description": "Sets the <page>SpawnIcon</page> to modify. You should call <page>Panel:Refresh</page> immediately after this, as the user will not be able to make changes to the icon beforehand.",
        "arguments": [
          {
            "name": "icon",
            "type": "Panel",
            "description": "The <page>SpawnIcon</page> object to be modified."
          }
        ]
      },
      {
        "name": "UpdateEntity",
        "parent": "IconEditor",
        "realms": [
          "client"
        ],
        "description": "<internal></internal> Updates the entity being rendered in the internal <page>DAdjustableModelPanel</page>. Called by the model panel's <page>DModelPanel:LayoutEntity</page> method.",
        "arguments": [
          {
            "name": "ent",
            "type": "Entity",
            "description": "The entity being rendered within the model panel."
          }
        ]
      }
    ]
  },
  {
    "name": "ImageCheckBox",
    "parent": "Button",
    "description": "A checkbox panel similar to <page>DCheckBox</page> and <page>DImageButton</page> with customizable checked state image.\n\nUses the <page>Material</page> panel internally. Can't have a label.\n\n<note>Will error if no material was set.</note>",
    "functions": [
      {
        "name": "GetChecked",
        "parent": "ImageCheckBox",
        "realms": [
          "client"
        ],
        "description": "Returns the checked state of the <page>ImageCheckBox</page>",
        "returnValues": [
          {
            "type": "boolean",
            "description": "true for checked, false otherwise"
          }
        ]
      },
      {
        "name": "Set",
        "parent": "ImageCheckBox",
        "realms": [
          "client"
        ],
        "description": "Sets the checked state of the checkbox.\n\nChecked state can be obtained by <page>ImageCheckBox</page>.State.",
        "arguments": [
          {
            "name": "OnOff",
            "type": "boolean",
            "description": "true for checked, false otherwise"
          }
        ],
        "source": {
          "file": "lua/vgui/imagecheckbox.lua",
          "lineStart": 32,
          "lineEnd": 36
        }
      },
      {
        "name": "SetChecked",
        "parent": "ImageCheckBox",
        "realms": [
          "client"
        ],
        "description": "Sets the checked state of the checkbox.\n\nChecked state can be obtained via <page>ImageCheckBox:GetChecked</page>",
        "arguments": [
          {
            "name": "bOn",
            "type": "boolean",
            "description": "true for checked, false otherwise"
          }
        ],
        "source": {
          "file": "lua/vgui/imagecheckbox.lua",
          "lineStart": 18,
          "lineEnd": 24
        }
      },
      {
        "name": "SetMaterial",
        "parent": "ImageCheckBox",
        "realms": [
          "client"
        ],
        "description": "Sets the material that will be visible when the <page>ImageCheckBox</page> is checked.\n\nInternally calls <page>Material:SetMaterial</page>.\n\n<note>Will error if no material was set.</note>",
        "arguments": [
          {
            "name": "mat",
            "type": "string",
            "description": "The file path of the material to set (relative to \"garrysmod/materials/\")."
          }
        ],
        "source": {
          "file": "lua/vgui/imagecheckbox.lua",
          "lineStart": 4,
          "lineEnd": 16
        }
      }
    ]
  },
  {
    "name": "Label",
    "parent": "Panel",
    "description": "A basic label or \"single line text area\" that is non-editable. You might be looking for <page>DLabel</page>, which uses this panel internally."
  },
  {
    "name": "Material",
    "parent": "Button",
    "description": "Material is a VGUI element that renders a VMT material.",
    "functions": [
      {
        "name": "SetAlpha",
        "parent": "Material",
        "realms": [
          "client"
        ],
        "description": "Sets the alpha value of the Material panel.",
        "arguments": [
          {
            "name": "alpha",
            "type": "number",
            "description": "The alpha value, from 0 to 255."
          }
        ]
      },
      {
        "name": "SetMaterial",
        "parent": "Material",
        "realms": [
          "client"
        ],
        "description": "Sets the material used by the panel.\n\n<note>If the material is not showing up as the correct size, try setting the Material panel's `AutoSize` variable to **false**</note>",
        "arguments": [
          {
            "name": "matname",
            "type": "string",
            "description": "The file path of the material to set (relative to \"garrysmod/materials/\")."
          }
        ]
      }
    ]
  },
  {
    "name": "MatSelect",
    "parent": "ContextBase",
    "description": "The panel used by Material &amp; Lamp Sandbox tools for texture selection. Despite being only used in Sandbox, it is **not** exclusive to that gamemode.\n\nSee also <page>PropSelect</page> for the prop selecting alternative.",
    "functions": [
      {
        "name": "AddMaterial",
        "parent": "MatSelect",
        "realms": [
          "client"
        ],
        "description": "Adds a new material to the selection list.",
        "arguments": [
          {
            "name": "label",
            "type": "string",
            "description": "Tooltip for the material, for when the player hovers over the material."
          },
          {
            "name": "path",
            "type": "string",
            "description": "Path to the material. Relative to `materials/` folder (do not include it), and do not include the `.vmt` extension."
          }
        ]
      },
      {
        "name": "AddMaterialEx",
        "parent": "MatSelect",
        "realms": [
          "client"
        ],
        "description": "Adds a new material to the selection list, with some extra options.",
        "arguments": [
          {
            "name": "label",
            "type": "string",
            "description": "Tooltip for the material, for when the player hovers over the material."
          },
          {
            "name": "path",
            "type": "string",
            "description": "Path to the material. Relative to `materials/` folder (do not include it), and do not include the `.vmt` extension."
          },
          {
            "name": "value",
            "type": "any",
            "description": "Overrides the \"value\" of the material. This will be what <page>MatSelect:OnSelect</page> receives in the first argument. It also affects <page>MatSelect:FindMaterialByValue</page>."
          },
          {
            "name": "convars",
            "type": "table",
            "description": "A list of convar names (as keys) and their values to set when the user selects this material. <page>ContextBase:SetConVar</page> will be ignored."
          }
        ]
      },
      {
        "name": "FindAndSelectMaterial",
        "parent": "MatSelect",
        "realms": [
          "client"
        ],
        "description": "Find a material and selects it, if it exists in this panel.",
        "arguments": [
          {
            "name": "mat",
            "type": "string",
            "description": "The material to find and select within this <page>MatSelect</page>."
          }
        ]
      },
      {
        "name": "FindMaterialByValue",
        "parent": "MatSelect",
        "realms": [
          "client"
        ],
        "description": "Find a <page>DImageButton</page> panel based on the input material path.",
        "arguments": [
          {
            "name": "mat",
            "type": "string",
            "description": "The material to find within this <page>MatSelect</page>."
          }
        ],
        "returnValues": [
          {
            "type": "DImageButton",
            "description": "The found material, or nil."
          }
        ]
      },
      {
        "name": "GetAutoHeight",
        "parent": "MatSelect",
        "realms": [
          "client"
        ],
        "description": "Returns whether the panel would set its own height to fit all materials within its height.",
        "returnValues": [
          {
            "type": "boolean",
            "name": "autoSize",
            "description": "`true` = auto size itself."
          }
        ]
      },
      {
        "name": "OnRightClick",
        "parent": "MatSelect",
        "realms": [
          "client"
        ],
        "description": "Called when the player right clicks a material.\n\nBy default, this opens a menu that lets the player copy the material path.",
        "arguments": [
          {
            "name": "pnl",
            "type": "Panel",
            "description": "The <page>DImageButton</page> that was clicked."
          }
        ]
      },
      {
        "name": "OnSelect",
        "parent": "MatSelect",
        "realms": [
          "client"
        ],
        "description": "Called when the player selects a material.",
        "arguments": [
          {
            "name": "material",
            "type": "string",
            "description": "Material path of the selected material, not including any file extension."
          },
          {
            "name": "pnl",
            "type": "Panel",
            "description": "The <page>DImageButton</page> that was clicked."
          }
        ]
      },
      {
        "name": "SelectedItemPaintOver",
        "parent": "MatSelect",
        "realms": [
          "client"
        ],
        "description": "Defines a paint over function for a <page>DImageButton</page> when it is selected.\n\n<warning>`self` in the context of this function is the <page>DImageButton</page>!</warning>",
        "arguments": [
          {
            "name": "w",
            "type": "number",
            "description": "Width of the <page>DImageButton</page> panel."
          },
          {
            "name": "h",
            "type": "number",
            "description": "Height of the <page>DImageButton</page> panel."
          }
        ]
      },
      {
        "name": "SelectMaterial",
        "parent": "MatSelect",
        "realms": [
          "client"
        ],
        "description": "<internal>Use <page>MatSelect:FindAndSelectMaterial</page> instead.</internal>\n\nSelects a given material panel.",
        "arguments": [
          {
            "name": "mat",
            "type": "DImageButton",
            "description": "The material to select, found by <page>MatSelect:FindMaterialByValue</page>"
          }
        ]
      },
      {
        "name": "SetAutoHeight",
        "parent": "MatSelect",
        "realms": [
          "client"
        ],
        "description": "Sets whether the panel should set its own height to fit all materials within its height.",
        "arguments": [
          {
            "name": "autoSize",
            "type": "boolean",
            "description": "If `true`, auto size itself."
          }
        ]
      },
      {
        "name": "SetItemHeight",
        "parent": "MatSelect",
        "realms": [
          "client"
        ],
        "description": "Sets the height of a single material in pixels.",
        "arguments": [
          {
            "name": "height ",
            "type": "number",
            "description": "The height of the material, in pixels. Default is `128`."
          }
        ]
      },
      {
        "name": "SetItemWidth",
        "parent": "MatSelect",
        "realms": [
          "client"
        ],
        "description": "Sets the width of a single material in pixels.",
        "arguments": [
          {
            "name": "width",
            "type": "number",
            "description": "The width of the material, in pixels. Default is `128`."
          }
        ]
      },
      {
        "name": "SetNumRows",
        "parent": "MatSelect",
        "realms": [
          "client"
        ],
        "description": "Sets the target height of the panel, in number of rows.",
        "arguments": [
          {
            "name": "rows",
            "type": "number",
            "description": "Amount of rows to target the height to. Default is `2`."
          }
        ]
      }
    ]
  },
  {
    "name": "ModelImage",
    "parent": "",
    "description": "<internal></internal>\nPanel used to display models, used by <page>SpawnIcon</page>."
  },
  {
    "name": "PanelList",
    "parent": "Panel",
    "description": "A panel list with a custom vertical scroll bar that doesn't have up/down buttons and has a momentum to scrolling.\n\n<deprecated>You should use <page>DScrollPanel</page> instead</deprecated>"
  },
  {
    "name": "PresetEditor",
    "parent": "DFrame",
    "description": "<internal></internal>\nA preset editor, which can be opened by <page>ControlPresets</page>.\nThis control only exists in Sandbox derived gamemodes."
  },
  {
    "name": "PropSelect",
    "parent": "ContextBase",
    "description": "Used in Sandbox tools to allow the player to select models out of a list. Despite being only used in Sandbox, it is **not** exclusive to that gamemode.\n\nSee also <page>MatSelect</page> for the material selecting alternative.",
    "functions": [
      {
        "name": "AddModel",
        "parent": "PropSelect",
        "realms": [
          "client"
        ],
        "description": "Adds a new model to the selection list.",
        "arguments": [
          {
            "name": "model",
            "type": "string",
            "description": "Model path, **including** `models/` and `.mdl`."
          },
          {
            "name": "convars",
            "type": "table",
            "description": "A list of convar names (as keys) and their values to set when the user selects this model."
          }
        ]
      },
      {
        "name": "AddModelEx",
        "parent": "PropSelect",
        "realms": [
          "client"
        ],
        "description": "Adds a new model to the selection list.",
        "arguments": [
          {
            "name": "value",
            "type": "string",
            "description": "The \"value\" for this model, which is used to set the <page>ContextBase:SetConVar</page>."
          },
          {
            "name": "model",
            "type": "string",
            "description": "Model path, **including** `models/` and `.mdl`."
          },
          {
            "name": "skin",
            "type": "number",
            "description": "The skin number for this model. It will **not** be set to the convar, use the value argument to track skin-model combos."
          }
        ]
      },
      {
        "name": "FindAndSelectButton",
        "parent": "PropSelect",
        "realms": [
          "client"
        ],
        "description": "Find and select a <page>SpawnIcon</page> panel based on the input model path.",
        "arguments": [
          {
            "name": "mdl",
            "type": "string",
            "description": "The model to find and select within this <page>PropSelect</page>."
          }
        ]
      },
      {
        "name": "FindModelByValue",
        "parent": "PropSelect",
        "realms": [
          "client"
        ],
        "description": "Find a <page>SpawnIcon</page> panel based on the input model path.",
        "arguments": [
          {
            "name": "mdl",
            "type": "string",
            "description": "The model to find within this <page>PropSelect</page>."
          }
        ],
        "returnValues": [
          {
            "type": "SpawnIcon",
            "description": "The found spawnicon, or `nil`."
          }
        ]
      },
      {
        "name": "OnRightClick",
        "parent": "PropSelect",
        "realms": [
          "client"
        ],
        "description": "Called when the player right clicks a model.\n\nBy default, this opens a menu that lets the player copy the model path.",
        "arguments": [
          {
            "name": "pnl",
            "type": "Panel",
            "description": "The <page>Spawnicon</page> that was clicked."
          }
        ]
      },
      {
        "name": "OnSelect",
        "parent": "PropSelect",
        "realms": [
          "client"
        ],
        "description": "Called when the player selects a model.",
        "arguments": [
          {
            "name": "pnl",
            "type": "Panel",
            "description": "The <page>Spawnicon</page> that was clicked."
          },
          {
            "name": "model",
            "type": "String",
            "description": "Path of the selected model, or its \"value\"."
          }
        ]
      },
      {
        "name": "SelectModel",
        "parent": "PropSelect",
        "realms": [
          "client"
        ],
        "description": "<internal>Use <page>PropSelect:FindAndSelectButton</page> instead.</internal>\n\nSelects a given spawnicon panel.",
        "arguments": [
          {
            "name": "icon",
            "type": "SpawnIcon",
            "description": "The spawnicon to select, retrieved via <page>PropSelect:FindModelByValue</page>."
          }
        ]
      }
    ]
  },
  {
    "name": "RadioButton",
    "parent": "Panel",
    "description": "<internal></internal>\n<deprecated></deprecated>\nCurrently there are no functions to retrieve checked state of a Radio Button, and their visuals are seemingly broken."
  },
  {
    "name": "RichText",
    "parent": "Panel",
    "description": "A very versatile text display element that's used to power the default chat and console.\n\nRich Text panels allows multicolored, highlight-able, and interactive text using individual text segment markup (segments are defined by the <page>Panel:AppendText</page> method).\n\nThe **RichText** element has a `64000` character limit."
  },
  {
    "name": "SlideBar",
    "parent": "Panel",
    "description": "Used as scroll bar for <page>PanelList</page>\n<deprecated>\nUsed in deprecated  <page>PanelList</page>. Use <page>DVScrollBar</page> (Used in <page>DScrollPanel</page>).\n</deprecated>"
  },
  {
    "name": "Slider",
    "parent": "Panel",
    "description": "<deprecated>\nOnly exists for backwards compatibility with <page>Panel:SetActionFunction</page> and <page>Panel:PostMessage</page>.\nUse <page>DNumSlider</page> instead.\n</deprecated>\n\nA simple slider featuring an numeric display."
  },
  {
    "name": "SpawnIcon",
    "parent": "DButton",
    "description": "A \"spawn icon\" displays an image for the given model path.\nIt is mostly used in the Spawn Menu (<key>Q</key>).\nIt uses <page>ModelImage</page> internally.",
    "functions": [
      {
        "name": "GetBodyGroup",
        "parent": "SpawnIcon",
        "realms": [
          "client"
        ],
        "description": "Returns the currently active <page text=\"Sub Model IDs\">Structures/BodyGroupData#submodels</page> for each Body Group of the spawn icon.\n\nThis is set by <page>SpawnIcon:SetBodyGroup</page>.",
        "returnValues": [
          {
            "type": "string",
            "description": "The Body Groups of the spawnicon"
          }
        ]
      },
      {
        "name": "GetModelName",
        "parent": "SpawnIcon",
        "realms": [
          "client"
        ],
        "description": "Returns the currently set model name. This is set by <page>SpawnIcon:SetModelName</page>.",
        "returnValues": [
          {
            "type": "string",
            "description": "The model name"
          }
        ]
      },
      {
        "name": "GetSkinID",
        "parent": "SpawnIcon",
        "realms": [
          "client"
        ],
        "description": "Returns the currently set skin of the spawnicon. This is set by <page>SpawnIcon:SetSkinID</page>.",
        "returnValues": [
          {
            "type": "number",
            "description": "Current skin ID"
          }
        ]
      },
      {
        "name": "OpenMenu",
        "parent": "SpawnIcon",
        "realms": [
          "client"
        ],
        "description": "Called when right clicked on the SpawnIcon. It will not be called if there is a selection (<page>Panel:GetSelectionCanvas</page>), in which case <page>SANDBOX:SpawnlistOpenGenericMenu</page> is called."
      },
      {
        "name": "SetBodyGroup",
        "parent": "SpawnIcon",
        "realms": [
          "client"
        ],
        "description": "<internal>This is done automatically by SpawnIcon. You do not need to call this. Doing so may cause unforeseen consequences.</internal>\n\nSets the active <page text=\"Sub Model ID\">Structures/BodyGroupData#submodels</page> for the given <page text=\"Body Group \t\tID\">Structures/BodyGroupData#id</page>, so it can be retrieved with <page>SpawnIcon:GetBodyGroup</page>.\n\nUse <page>Panel:SetModel</page> instead.",
        "arguments": [
          {
            "name": "bodyGroupId",
            "type": "number",
            "description": "The Body Group ID to set the active Sub Model ID for.\nBody Group IDs start at `0`."
          },
          {
            "name": "activeSubModelId",
            "type": "number",
            "description": "The Sub Model ID to set as active.\nSub Model IDs start at `0`."
          }
        ]
      },
      {
        "name": "SetModelName",
        "parent": "SpawnIcon",
        "realms": [
          "client"
        ],
        "description": "<internal>This is done automatically by SpawnIcon. You do not need to call this. Doing so may cause unforeseen consequences.</internal>\n\nSets the model name, so it can be retrieved with <page>SpawnIcon:GetModelName</page>. Use <page>Panel:SetModel</page> instead.",
        "arguments": [
          {
            "name": "mdl",
            "type": "string",
            "description": "The model name to set"
          }
        ]
      },
      {
        "name": "SetSkinID",
        "parent": "SpawnIcon",
        "realms": [
          "client"
        ],
        "description": "<internal>This is done automatically by SpawnIcon. You do not need to call this. Doing so may cause unforeseen consequences.</internal>\n\nSets the skin id of the spawn icon, so it can be retrieved with <page>SpawnIcon:GetSkinID</page>. Use <page>Panel:SetModel</page> instead.",
        "arguments": [
          {
            "name": "skin",
            "type": "number",
            "description": "Skin ID to set"
          }
        ]
      }
    ]
  },
  {
    "name": "SpawnmenuContentPanel",
    "parent": "DPanel",
    "description": "The default SpawnmenuContentPanel\n<internal></internal>",
    "functions": [
      {
        "name": "CallPopulateHook",
        "parent": "SpawnmenuContentPanel",
        "realms": [
          "client"
        ],
        "description": "Changes the Spawnmenu category to search in",
        "arguments": [
          {
            "name": "hookname",
            "type": "string",
            "description": "The Hook name"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/content.lua",
          "lineStart": 52,
          "lineEnd": 56
        }
      },
      {
        "name": "EnableModify",
        "parent": "SpawnmenuContentPanel",
        "realms": [
          "client"
        ],
        "description": "Allows the modification of the ContentSidebar",
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/content.lua",
          "lineStart": 44,
          "lineEnd": 46
        }
      },
      {
        "name": "EnableSearch",
        "parent": "SpawnmenuContentPanel",
        "realms": [
          "client"
        ],
        "description": "Changes the Spawnmenu category to search in",
        "arguments": [
          {
            "name": "category",
            "type": "string",
            "description": "The category"
          },
          {
            "name": "hookname",
            "type": "string",
            "description": "The Hook name"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/content.lua",
          "lineStart": 48,
          "lineEnd": 50
        }
      },
      {
        "name": "SwitchPanel",
        "parent": "SpawnmenuContentPanel",
        "realms": [
          "client"
        ],
        "description": "Switches the current panel with the given panel",
        "arguments": [
          {
            "name": "panel",
            "type": "Panel",
            "description": "Panel to switch to"
          }
        ],
        "source": {
          "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/content.lua",
          "lineStart": 58,
          "lineEnd": 75
        }
      }
    ]
  },
  {
    "name": "TextEntry",
    "parent": "Panel",
    "description": "Basic text input field. See <page>DTextEntry</page> for a more advanced version.",
    "functions": [
      {
        "name": "OnKeyCodeTyped",
        "parent": "TextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called from engine whenever a valid character is typed while the text entry is focused.\n\nUsed internally for functionality of <page>DTextEntry</page>",
        "arguments": [
          {
            "name": "keyCode",
            "type": "number",
            "description": "They key code of the key pressed, see <page>Enums/KEY</page>."
          }
        ],
        "returnValues": [
          {
            "type": "boolean",
            "description": "Whether you've handled the key press. Returning true prevents the default text entry behavior from occurring."
          }
        ]
      },
      {
        "name": "OnTextChanged",
        "parent": "TextEntry",
        "realms": [
          "client",
          "menu"
        ],
        "description": "Called when the text inside the <page>TextEntry</page> changes.\n\nYou may be looking for <page>DTextEntry:OnValueChange</page> instead."
      }
    ]
  },
  {
    "name": "TGAImage",
    "parent": "Panel",
    "description": "A panel capable of loading `.tga` images."
  },
  {
    "name": "UGCPublishWindow",
    "parent": "DFrame",
    "description": "A window that is used to publish dupes and saves\n<img src=\"b04e5/8dc6d3d77422fbe.png\" size=\"94866\" name=\"image.png\">",
    "functions": [
      {
        "name": "CheckInput",
        "parent": "UGCPublishWindow",
        "realms": [
          "menu"
        ],
        "description": "Checks if the Tags and Title are valid and if so it enables the publish button."
      },
      {
        "name": "DisplayError",
        "parent": "UGCPublishWindow",
        "realms": [
          "menu"
        ],
        "description": "Displays the given error message.",
        "arguments": [
          {
            "name": "err",
            "type": "string",
            "description": "The error message."
          }
        ]
      },
      {
        "name": "DoPublish",
        "parent": "UGCPublishWindow",
        "realms": [
          "menu"
        ],
        "description": "Publishes the Item or throws an error if the Title or Tags are invalid",
        "arguments": [
          {
            "name": "wsid",
            "type": "string",
            "description": "The workshop id"
          },
          {
            "name": "err",
            "type": "string",
            "description": "If wsid is nil, this will be the error message"
          }
        ]
      },
      {
        "name": "FitContents",
        "parent": "UGCPublishWindow",
        "realms": [
          "menu"
        ],
        "description": "Rezises the panel to nicely fit all children"
      },
      {
        "name": "GetChosenTag",
        "parent": "UGCPublishWindow",
        "realms": [
          "menu"
        ],
        "description": "Returns the name of the current selected tag.",
        "returnValues": [
          {
            "type": "string",
            "name": "tag",
            "description": "The choosen tag, or nil if none is selected."
          }
        ]
      },
      {
        "name": "OnPublishFinished",
        "parent": "UGCPublishWindow",
        "realms": [
          "menu"
        ],
        "description": "Called when the Item was published or if any error occurred while publishing",
        "arguments": [
          {
            "name": "wsid",
            "type": "string",
            "description": "The workshop id"
          },
          {
            "name": "err",
            "type": "string",
            "description": "If wsid is nil, this will be the error message"
          }
        ]
      },
      {
        "name": "Setup",
        "parent": "UGCPublishWindow",
        "realms": [
          "menu"
        ],
        "description": "updated the Workshop items list.",
        "arguments": [
          {
            "name": "ugcType",
            "type": "string",
            "description": "The type / namespace of the <page>WorkshopFileBase</page> that created this panel"
          },
          {
            "name": "file",
            "type": "string",
            "description": "The File to publish"
          },
          {
            "name": "imageFile",
            "type": "string",
            "description": "The Image"
          },
          {
            "name": "handler",
            "type": "WorkshopFileBase",
            "description": "The <page>WorkshopFileBase</page> that created this panel"
          }
        ]
      },
      {
        "name": "UpdateWorkshopItems",
        "parent": "UGCPublishWindow",
        "realms": [
          "menu"
        ],
        "description": "updated the Workshop items list."
      }
    ]
  },
  {
    "name": "URLLabel",
    "parent": "",
    "description": "A panel similar to <page>Label</page>, but can be clicked to open a URL in the Steam Overlay, and appears with an underline. This is used by <page>DLabelURL</page>."
  }
]