[
  {
    "name": "AccessorFunc",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Adds simple Get/Set accessor functions on the specified table.\nCan also force the value to be set to a number, bool or string.",
    "arguments": [
      {
        "name": "tab",
        "type": "table",
        "description": "The table to add the accessor functions to."
      },
      {
        "name": "key",
        "type": "any",
        "description": "The key of the table to be get/set."
      },
      {
        "name": "name",
        "type": "string",
        "description": "The name of the functions (will be prefixed with Get and Set)."
      },
      {
        "name": "force",
        "type": "number",
        "default": "nil",
        "description": "The type the setter should force to (uses <page>Enums/FORCE</page>)."
      }
    ],
    "source": {
      "file": "lua/includes/util.lua",
      "lineStart": 182,
      "lineEnd": 220
    }
  },
  {
    "name": "Add_NPC_Class",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Defines a global entity class variable with an automatic value. In order to prevent collisions with other <page>Enums/CLASS</page>. You should prefix your variable with CLASS_ for consistency.",
    "arguments": [
      {
        "name": "name",
        "type": "string",
        "description": "The name of the new enum/global variable."
      }
    ],
    "source": {
      "file": "lua/includes/util.lua",
      "lineStart": 409,
      "lineEnd": 412
    }
  },
  {
    "name": "AddBackgroundImage",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Adds the specified image path to the main menu background pool. Image can be png or jpeg.",
    "arguments": [
      {
        "name": "path",
        "type": "string",
        "description": "Path to the image."
      }
    ],
    "source": {
      "file": "lua/menu/background.lua",
      "lineStart": 77
    }
  },
  {
    "name": "AddConsoleCommand",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "<internal>Use <page>concommand.Add</page> instead.</internal>Tells the engine to register a console command. If the command was ran, the engine calls <page>concommand.Run</page>.",
    "arguments": [
      {
        "name": "name",
        "type": "string",
        "description": "The name of the console command to add."
      },
      {
        "name": "helpText",
        "type": "string",
        "description": "The help text."
      },
      {
        "name": "flags",
        "type": "number",
        "description": "Concommand flags using <page>Enums/FCVAR</page>"
      }
    ]
  },
  {
    "name": "AddCSLuaFile",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Marks a Lua file to be sent to clients when they join the server. Doesn't do anything on the client - this means you can use it in a shared file without problems.\n\n<warning>If the file trying to be added is empty, an error will occur, and the file will not be sent to the client\n\nThe string cannot have whitespace.</warning>\n\n<note>\nThis function is not needed for scripts located in these paths because they are automatically sent to clients.\n**lua/matproxy/**\n**lua/postprocess/**\n**lua/vgui/**\n**lua/skins/**\n**lua/autorun/**\n**lua/autorun/client/**\n\nYou can add up to **8192** files. Each file can be up to **64KB** compressed (LZMA)\n</note>",
    "arguments": [
      {
        "name": "file",
        "type": "string",
        "default": "current file",
        "description": "The name/path to the Lua file that should be sent, **relative to the garrysmod/lua folder**. If no parameter is specified, it sends the current file.\n\nThe file path can be relative to the script it's ran from. For example, if your script is in `lua/myfolder/stuff.lua`, calling <page>Global.AddCSLuaFile</page>(\"otherstuff.lua\") and <page>Global.AddCSLuaFile</page>(\"myfolder/otherstuff.lua\") is the same thing.\n\n<note>Please make sure your file names are unique, the filesystem is shared across all addons, so a file named `lua/config.lua` in your addon may be overwritten by the same file in another addon.</note>"
      }
    ]
  },
  {
    "name": "AddonMaterial",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Loads the specified image from the `/cache` folder, used in combination with <page>steamworks.Download</page>. Most addons will provide a 512x512 png image.\n\n<note>This works with any image file with the `.cache` file extension, even outside of the `/cache` folder.</note>",
    "arguments": [
      {
        "name": "name",
        "type": "string",
        "description": "The name of the file."
      }
    ],
    "returnValues": [
      {
        "type": "IMaterial",
        "description": "The material, returns `nil` if the cached file is not an image."
      }
    ]
  },
  {
    "name": "AddOriginToPVS",
    "parent": "Global",
    "realms": [
      "server"
    ],
    "description": "Adds the specified vector to the PVS which is currently building. This allows all objects in visleafs visible from that vector to be drawn.",
    "arguments": [
      {
        "name": "position",
        "type": "Vector",
        "description": "The origin to add."
      }
    ]
  },
  {
    "name": "AddPropsOfParent",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "This function creates a Custom Category in the Spawnlist. Use <page>Global.GenerateSpawnlistFromPath</page> if you want to create a category with the contents of a folder.\n<warning>Using this function before <page>SANDBOX:PopulateContent</page> has been called will result in an error</warning>",
    "arguments": [
      {
        "name": "pnlContent",
        "type": "Panel",
        "description": "The SMContentPanel of the Node"
      },
      {
        "name": "node",
        "type": "Panel",
        "description": "The Node"
      },
      {
        "name": "parentid",
        "type": "number",
        "description": "The ParentID to use"
      },
      {
        "name": "customProps",
        "type": "table",
        "description": "The Table with the Contents of the new Category"
      }
    ],
    "source": {
      "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contenttypes/custom.lua",
      "lineStart": 139,
      "lineEnd": 172
    }
  },
  {
    "name": "AddWorldTip",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "This function creates a World Tip, similar to the one shown when aiming at a Thruster where it shows you its force.\n\nThis function will make a World Tip that will only last 50 milliseconds (1/20th of a second), so you must call it continuously as long as you want the World Tip to be shown. It is common to call it inside a Think hook.\n\nContrary to what the function's name implies, it is impossible to create more than one World Tip at the same time. A new World Tip will overwrite the old one, so only use this function when you know nothing else will also be using it.\n\nSee <page>SANDBOX:PaintWorldTips</page> for more information.\n\n<note>This function is only available in Sandbox and its derivatives</note>",
    "arguments": [
      {
        "name": "entindex",
        "type": "number",
        "default": "nil",
        "description": "**This argument is no longer used**; it has no effect on anything. You can use nil in this argument."
      },
      {
        "name": "text",
        "type": "string",
        "description": "The text for the world tip to display."
      },
      {
        "name": "dieTime",
        "type": "number",
        "default": "SysTime() + 0.05",
        "description": "**This argument is no longer used**; when you add a World Tip it will always last only 0.05 seconds. You can use nil in this argument."
      },
      {
        "name": "pos",
        "type": "Vector",
        "default": "ent:GetPos()",
        "description": "Where in the world you want the World Tip to be drawn. If you add a valid Entity in the next argument, this argument will have no effect on the actual World Tip."
      },
      {
        "name": "ent",
        "type": "Entity",
        "default": "nil",
        "description": "Which entity you want to associate with the World Tip. This argument is optional. If set to a valid entity, this will override the position set in `pos` with the Entity's position."
      }
    ]
  },
  {
    "name": "Angle",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Creates an <page>Angle</page> object, representing a [Euler Angle](https://en.wikipedia.org/wiki/Euler_angles) made up of pitch, yaw, and roll components.\n\n<warning>\nThis function is relatively expensive, in terms of performance, in situations where it is being called multiple times every frame (Like a loop, for example.) This is due to the overhead associated with object creation and garbage collection.\nWhere possible, it is generally better to store an <page>Angle</page> in a variable and re-use that variable rather than re-creating it repeatedly.\nIn cases where an empty <page>Angle</page> is needed, the global variable `angle_zero` is the preferred solution instead of `Angle( 0, 0, 0 )`.\n</warning>",
    "arguments": [
      {
        "name": "pitch",
        "type": "number",
        "description": "The pitch value of the angle, in degrees."
      },
      {
        "name": "yaw",
        "type": "number",
        "default": "0",
        "description": "The yaw value of the angle, in degrees."
      },
      {
        "name": "roll",
        "type": "number",
        "default": "0",
        "description": "The roll value of the angle, in degrees."
      }
    ],
    "returnValues": [
      {
        "type": "Angle",
        "description": "The newly created <page>Angle</page>"
      }
    ],
    "overloads": [
      {
        "arguments": [
          {
            "name": "angle",
            "type": "Angle",
            "description": "Creates a new <page>Angle</page> that is a copy of the <page>Angle</page> passed in."
          }
        ],
        "returnValues": [
          {
            "type": "Angle",
            "description": "The newly created <page>Angle</page>"
          }
        ]
      },
      {
        "arguments": [
          {
            "name": "angleString",
            "type": "string",
            "description": "Attempts to parse the input <page>string</page> from the <page>Global.print</page> format of an <page>Angle</page>.\n\nReturns an <page>Angle</page> with its pitch, yaw, and roll set to `0` if the <page>string</page> cannot be parsed."
          }
        ],
        "returnValues": [
          {
            "type": "Angle",
            "description": "The newly created <page>Angle</page>"
          }
        ]
      }
    ]
  },
  {
    "name": "AngleRand",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns an angle with a randomized pitch, yaw, and roll between min(inclusive), max(exclusive).",
    "arguments": [
      {
        "name": "min",
        "type": "number",
        "default": "-90 for pitch, -180 for yaw and roll",
        "description": "Min bound inclusive."
      },
      {
        "name": "max",
        "type": "number",
        "default": "90 for pitch, 180 for yaw and roll",
        "description": "Max bound exclusive."
      }
    ],
    "returnValues": [
      {
        "type": "Angle",
        "description": "The randomly generated angle."
      }
    ],
    "source": {
      "file": "lua/includes/util.lua",
      "lineStart": 108,
      "lineEnd": 110
    }
  },
  {
    "name": "assert",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "If the result of the first argument is false or nil, an error is thrown with the second argument as the message.",
    "arguments": [
      {
        "name": "expression",
        "type": "any",
        "description": "The expression to assert."
      },
      {
        "name": "errorMessage",
        "type": "string",
        "default": "assertion failed!",
        "description": "The error message to throw when assertion fails. This is only type-checked if the assertion fails."
      },
      {
        "name": "returns",
        "type": "vararg",
        "default": "nil",
        "description": "Any arguments past the error message will be returned by a successful assert."
      }
    ],
    "returnValues": [
      {
        "type": "any",
        "description": "If successful, returns the first argument."
      },
      {
        "type": "any",
        "description": "If successful, returns the error message. This will be nil if the second argument wasn't specified.\n\nSince the second argument is only type-checked if the assertion fails, this doesn't have to be a string."
      },
      {
        "type": "vararg",
        "description": "Returns any arguments past the error message."
      }
    ]
  },
  {
    "name": "BRANCH",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "A variable containing a string indicating which (Beta) Branch of the game you are using.\n\nWhile this variable is always available in the <page text=\"Client\">States#client</page> &amp; <page text=\"Menu\">States#menu</page>\nrealms, it is only defined in the <page text=\"Server\">States#server</page>  realm on local servers.\n\nFor more information on beta branches, see <page text=\"this page\">Dev_Branch</page>",
    "returnValues": [
      {
        "type": "string",
        "description": "The current branch."
      }
    ]
  },
  {
    "name": "BroadcastLua",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Sends the specified Lua code to all connected clients and executes it.\n<note>\nIf you need to use this function more than once, consider using <page>net</page> library.\nSend net message and make the entire code you want to execute in <page>net.Receive</page> on client.\nIf executed **clientside** it won't do anything.\n</note>",
    "arguments": [
      {
        "name": "code",
        "type": "string",
        "description": "The code to be executed. Capped at length of 254 characters."
      }
    ]
  },
  {
    "name": "BuildNetworkedVarsTable",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Dumps the networked variables of all entities into one table and returns it.",
    "returnValues": [
      {
        "type": "table",
        "description": "Format:\n* key = <page>Entity</page> for NWVars or <page>number</page> (always 0) for global vars\n* value = <page>table</page> formatted as:\n* key = <page>string</page> var name\n* value = any type var value"
      }
    ]
  },
  {
    "name": "CanAddServerToFavorites",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "<internal></internal>\n\nUsed internally to check if the current server the player is on can be added to favorites or not. Does not check if the server is ALREADY in the favorites.",
    "returnValues": [
      {
        "type": "boolean",
        "description": "Can add to favorites"
      }
    ]
  },
  {
    "name": "CancelLoading",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Aborts joining of the server you are currently joining."
  },
  {
    "name": "ChangeBackground",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Sets the active main menu background image to a random entry from the background images pool. Images are added with <page>Global.AddBackgroundImage</page>.",
    "arguments": [
      {
        "name": "currentgm",
        "type": "string",
        "description": "Apparently does nothing."
      }
    ],
    "source": {
      "file": "lua/menu/background.lua",
      "lineStart": 73,
      "lineEnd": 93
    }
  },
  {
    "name": "ChangeTooltip",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Automatically called by the engine when a panel is hovered over with the mouse",
    "arguments": [
      {
        "name": "panel",
        "type": "Panel",
        "description": "Panel that has been hovered over"
      }
    ],
    "source": {
      "file": "lua/includes/util/tooltips.lua",
      "lineStart": 38,
      "lineEnd": 64
    }
  },
  {
    "name": "ClearBackgroundImages",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Empties the pool of main menu background images.",
    "source": {
      "file": "lua/menu/background.lua",
      "lineStart": 95,
      "lineEnd": 99
    }
  },
  {
    "name": "ClearLuaErrorGroup",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Clears all Lua Errors with the given group id.",
    "arguments": [
      {
        "name": "group_id",
        "type": "string",
        "description": "group_id to remove. Will be \"[addon-name]-0\" or \"Other-\""
      }
    ],
    "source": {
      "file": "lua/menu/problems/problems.lua",
      "lineStart": 64,
      "lineEnd": 77
    }
  },
  {
    "name": "ClearProblem",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Removes the given Problem from the Problems table and refreshes the Problems panel.",
    "arguments": [
      {
        "name": "id",
        "type": "string",
        "description": "The Problem ID to remove"
      }
    ],
    "source": {
      "file": "lua/menu/problems/problems.lua",
      "lineStart": 79,
      "lineEnd": 89
    }
  },
  {
    "name": "ClientsideModel",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Creates a non physical entity that only exists on the client. See also <page>ents.CreateClientProp</page>.\n\n<bug issue=\"861\">Parented clientside models will become detached if the parent entity leaves the PVS. **A workaround is available on its github page.**</bug>\n\n<bug issue=\"1387\">Clientside entities are not garbage-collected, thus you must store a reference to the object and call <page>CSEnt:Remove</page> manually. **To workaround this bug, you need to hold a reference (in a variable) to the entity and remove it when necessary.**</bug>\n\n<bug issue=\"3184\">Clientside models will occasionally delete themselves during high server lag.</bug>",
    "arguments": [
      {
        "name": "model",
        "type": "string",
        "description": "The file path to the model."
      },
      {
        "name": "renderGroup",
        "type": "number",
        "default": "RENDERGROUP_OTHER",
        "description": "The render group of the entity for the clientside leaf system, see <page>Enums/RENDERGROUP</page>."
      }
    ],
    "returnValues": [
      {
        "type": "CSEnt",
        "description": "Created client-side model (`C_BaseFlex`)."
      }
    ]
  },
  {
    "name": "ClientsideRagdoll",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Creates a fully clientside ragdoll.\n\n<note>The ragdoll initially starts as hidden and with shadows disabled, see the example for how to enable it.\n\nThere's no need to call <page>Entity:Spawn</page> on this entity.</note>\n\n<bug issue=\"1387\">Clientside entities are not garbage-collected, thus you must store a reference to the object and call <page>CSEnt:Remove</page> manually.</bug>",
    "arguments": [
      {
        "name": "model",
        "type": "string",
        "description": "The file path to the model."
      },
      {
        "name": "renderGroup",
        "type": "number",
        "default": "RENDERGROUP_OPAQUE",
        "description": "The <page>Enums/RENDERGROUP</page> to assign."
      }
    ],
    "returnValues": [
      {
        "type": "CSEnt",
        "description": "The newly created client-side only ragdoll. (`C_ClientRagdoll`)"
      }
    ]
  },
  {
    "name": "ClientsideScene",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Creates a scene entity based on the scene name and the entity.",
    "arguments": [
      {
        "name": "name",
        "type": "string",
        "description": "The name of the scene."
      },
      {
        "name": "targetEnt",
        "type": "Entity",
        "description": "The entity to play the scene on."
      }
    ],
    "returnValues": [
      {
        "type": "CSEnt",
        "description": "C_SceneEntity"
      }
    ]
  },
  {
    "name": "CloseDermaMenus",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Closes all Derma menus that have been passed to <page>Global.RegisterDermaMenuForClose</page> and calls <page>GM:CloseDermaMenus</page>"
  },
  {
    "name": "collectgarbage",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Executes the specified action on the garbage collector.",
    "arguments": [
      {
        "name": "action",
        "type": "string",
        "default": "collect",
        "description": "The action to run.\n\nValid actions are `collect`, `stop`, `restart`, `count`, `step`, `setpause`, `setstepmul` and `isrunning`.\n<note>`isrunning` is only available on the x86-64 versions, because of the difference in the LuaJIT version. [See here](jit.version)</note>"
      },
      {
        "name": "arg",
        "type": "number",
        "description": "The argument of the specified action, only applicable for `step`, `setpause` and `setstepmul`."
      }
    ],
    "returnValues": [
      {
        "type": "any",
        "description": "If the action is count this is the number of kilobytes of memory used by Lua.\nIf the action is step this is true if a garbage collection cycle was finished.\n\nIf the action is setpause this is the previous value for the GC's pause.\nIf the action is setstepmul this is the previous value for the GC's step."
      }
    ]
  },
  {
    "name": "Color",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Creates a <page>Color</page>.\n<warning>This function is relatively expensive when used in rendering hooks or in operations requiring very frequent calls (like loops for example) due to object creation and garbage collection. It is better to store the color in a variable or to use the [default colors](https://wiki.facepunch.com/gmod/Global_Variables#misc) available.</warning>",
    "arguments": [
      {
        "name": "r",
        "type": "number",
        "description": "An integer from `0-255` describing the red value of the color."
      },
      {
        "name": "g",
        "type": "number",
        "description": "An integer from `0-255` describing the green value of the color."
      },
      {
        "name": "b",
        "type": "number",
        "description": "An integer from `0-255` describing the blue value of the color."
      },
      {
        "name": "a",
        "type": "number",
        "default": "255",
        "description": "An integer from `0-255` describing the alpha (transparency) of the color.(default 255)"
      }
    ],
    "returnValues": [
      {
        "type": "Color",
        "description": "The created <page>Color</page>."
      }
    ],
    "source": {
      "file": "lua/includes/util/color.lua",
      "lineStart": 11,
      "lineEnd": 19
    }
  },
  {
    "name": "ColorAlpha",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns a new <page>Color</page> with the RGB components of the given <page>Color</page> and the alpha value specified.",
    "arguments": [
      {
        "name": "color",
        "type": "table",
        "description": "The <page>Color</page> from which to take RGB values. This color will not be modified."
      },
      {
        "name": "alpha",
        "type": "number",
        "description": "The new alpha value, a number between 0 and 255. Values above 255 will be clamped."
      }
    ],
    "returnValues": [
      {
        "type": "table",
        "description": "The new <page>Color</page> with the modified alpha value"
      }
    ],
    "source": {
      "file": "lua/includes/util/color.lua",
      "lineStart": 21,
      "lineEnd": 28
    }
  },
  {
    "name": "ColorRand",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Creates a <page>Color</page> with randomized red, green, and blue components. If the alpha argument is true, alpha will also be randomized.",
    "arguments": [
      {
        "name": "a",
        "type": "boolean",
        "default": "false",
        "description": "Should alpha be randomized."
      }
    ],
    "returnValues": [
      {
        "type": "table",
        "description": "The created <page>Color</page>."
      }
    ],
    "source": {
      "file": "lua/includes/util.lua",
      "lineStart": 115,
      "lineEnd": 121
    }
  },
  {
    "name": "ColorToHSL",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Converts a <page>Color</page> into HSL color space.",
    "arguments": [
      {
        "name": "color",
        "type": "table",
        "description": "The <page>Color</page>."
      }
    ],
    "returnValues": [
      {
        "type": "number",
        "description": "The hue in degrees `[0, 360]`."
      },
      {
        "type": "number",
        "description": "The saturation in the range `[0, 1]`."
      },
      {
        "type": "number",
        "description": "The lightness in the range `[0, 1]`."
      }
    ]
  },
  {
    "name": "ColorToHSV",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Converts a <page>Color</page> into HSV color space.",
    "arguments": [
      {
        "name": "color",
        "type": "table",
        "description": "The <page>Color</page>."
      }
    ],
    "returnValues": [
      {
        "type": "number",
        "description": "The hue in degrees `[0, 360]`."
      },
      {
        "type": "number",
        "description": "The saturation in the range `[0, 1]`."
      },
      {
        "type": "number",
        "description": "The value in the range `[0, 1]`."
      }
    ]
  },
  {
    "name": "CompileFile",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Attempts to compile the given file. If successful, returns a function that can be called to perform the actual execution of the script.",
    "arguments": [
      {
        "name": "path",
        "type": "string",
        "description": "Path to the file, relative to the `garrysmod/lua/` directory."
      }
    ],
    "returnValues": [
      {
        "type": "function",
        "description": "The function which executes the script."
      }
    ]
  },
  {
    "name": "CompileString",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "This function will compile the code argument as lua code and return a function that will execute that code.\n\nPlease note that this function will not automatically execute the given code after compiling it.",
    "arguments": [
      {
        "name": "code",
        "type": "string",
        "description": "The code to compile."
      },
      {
        "name": "identifier",
        "type": "string",
        "description": "An identifier in case an error is thrown. (The same identifier can be used multiple times)"
      },
      {
        "name": "handleError",
        "type": "boolean",
        "default": "true",
        "description": "If false this function will return an error string instead of throwing an error."
      }
    ],
    "returnValues": [
      {
        "type": "function",
        "description": "A function that, when called, will execute the given code.\n\nReturns the error string if there was a Lua error and third argument is false."
      }
    ]
  },
  {
    "name": "ConVarExists",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns whether a <page>ConVar</page> with the given name exists or not",
    "arguments": [
      {
        "name": "name",
        "type": "string",
        "description": "Name of the <page>ConVar</page>."
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "True if the <page>ConVar</page> exists, false otherwise."
      }
    ]
  },
  {
    "name": "CreateClientConVar",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Makes a clientside-only console variable\n\n<note>This function is a wrapper of <page>Global.CreateConVar</page>, with the difference being that FCVAR_ARCHIVE and FCVAR_USERINFO are added automatically when **shouldsave** and **userinfo** are true, respectively.</note>\n\nAlthough this function is shared, it should only be used clientside.",
    "arguments": [
      {
        "name": "name",
        "type": "string",
        "description": "Name of the ConVar to be created and able to be accessed.\n\nThis cannot be a name of existing console command or console variable. It will silently fail if it is."
      },
      {
        "name": "default",
        "type": "string",
        "description": "Default value of the ConVar."
      },
      {
        "name": "shouldsave",
        "type": "boolean",
        "default": "true",
        "description": "Should the ConVar be saved across sessions in the cfg/client.vdf file."
      },
      {
        "name": "userinfo",
        "type": "boolean",
        "default": "false",
        "description": "Should the ConVar and its containing data be sent to the server when it has changed. This makes the convar accessible from server using <page>Player:GetInfoNum</page> and similar functions."
      },
      {
        "name": "helptext",
        "type": "string",
        "default": "",
        "description": "Help text to display in the console."
      },
      {
        "name": "min",
        "type": "number",
        "default": "nil",
        "description": "If set, the convar cannot be changed to a number lower than this value."
      },
      {
        "name": "max",
        "type": "number",
        "default": "nil",
        "description": "If set, the convar cannot be changed to a number higher than this value."
      }
    ],
    "returnValues": [
      {
        "type": "ConVar",
        "description": "Created convar."
      }
    ],
    "source": {
      "file": "lua/includes/util.lua",
      "lineStart": 450,
      "lineEnd": 464
    }
  },
  {
    "name": "CreateContextMenu",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Creates a ContextMenu.\n<internal></internal>",
    "source": {
      "file": "gamemodes/sandbox/gamemode/spawnmenu/contextmenu.lua",
      "lineStart": 135,
      "lineEnd": 220
    }
  },
  {
    "name": "CreateConVar",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Creates a console variable (<page>ConVar</page>), in general these are for things like gamemode/server settings.\n<warning>Do not use the FCVAR_NEVER_AS_STRING and FCVAR_REPLICATED flags together, as this can cause the console variable to have strange values on the client.</warning>",
    "arguments": [
      {
        "name": "name",
        "type": "string",
        "description": "Name of the <page>ConVar</page>.\n\nThis cannot be a name of an engine console command or console variable. It will throw an error if it is. If it is the same name as another lua ConVar, it will return that ConVar object."
      },
      {
        "name": "value",
        "type": "string",
        "description": "Default value of the convar. Can also be a number."
      },
      {
        "name": "flags",
        "type": "number",
        "default": "FCVAR_NONE",
        "description": "Flags of the convar, see <page>Enums/FCVAR</page>, either as bitflag or as table."
      },
      {
        "name": "helptext",
        "type": "string",
        "default": "",
        "description": "The help text to show in the console."
      },
      {
        "name": "min",
        "type": "number",
        "default": "nil",
        "description": "If set, the ConVar cannot be changed to a number lower than this value."
      },
      {
        "name": "max",
        "type": "number",
        "default": "nil",
        "description": "If set, the ConVar cannot be changed to a number higher than this value."
      }
    ],
    "returnValues": [
      {
        "type": "ConVar",
        "description": "The convar created."
      }
    ]
  },
  {
    "name": "CreateMaterial",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Creates a new material with the specified name and shader.\n\nMaterials created with this function can be used in <page>Entity:SetMaterial</page> and <page>Entity:SetSubMaterial</page> by prepending a `!` to their material name argument.\n\nThis will not create a new material if another material object with the same name already exists. All Materials created by this functions are cleaned up on map shutdown.\n\n<note>This does not work with [patch materials](https://developer.valvesoftware.com/wiki/Patch).</note>\n\n<bug issue=\"1531\">.pngs must be loaded with <page>Global.Material</page> before being used with this function.</bug>",
    "arguments": [
      {
        "name": "name",
        "type": "string",
        "description": "The material name. Must be unique."
      },
      {
        "name": "shaderName",
        "type": "string",
        "description": "The shader name. See <page>Shaders</page>."
      },
      {
        "name": "materialData",
        "type": "table",
        "description": "Key-value table that contains shader parameters and proxies.\n\n* See: [List of Shader Parameters on Valve Developers Wiki](https://developer.valvesoftware.com/wiki/Category:List_of_Shader_Parameters) and each shader's page from .\n\n<note>Unlike <page>IMaterial:SetTexture</page>, this table will not accept <page>ITexture</page> values. Instead, use the texture's name (see <page>ITexture:GetName</page>).</note>"
      }
    ],
    "returnValues": [
      {
        "type": "IMaterial",
        "description": "Created material"
      }
    ]
  },
  {
    "name": "CreateNewAddonPreset",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Creates a new Preset from the given JSON string.",
    "arguments": [
      {
        "name": "data",
        "type": "string",
        "description": "A JSON string containing all necessary information.\nJSON structue should be <page>Structures/Preset</page>"
      }
    ],
    "source": {
      "file": "lua/menu/mainmenu.lua",
      "lineStart": 435,
      "lineEnd": 442
    }
  },
  {
    "name": "CreateParticleSystem",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Creates a new particle system. See also <page>Entity:CreateParticleEffect</page>, <page>Global.ParticleEffectAttach</page> and <page>Global.CreateParticleSystemNoEntity</page>.\n\n<note>The particle effect must be precached with <page>Global.PrecacheParticleSystem</page> and the file its from must be added via <page>game.AddParticles</page> before it can be used!</note>",
    "arguments": [
      {
        "name": "ent",
        "type": "Entity",
        "description": "The entity to attach the control point to."
      },
      {
        "name": "effect",
        "type": "string",
        "description": "The name of the effect to create. It must be precached."
      },
      {
        "name": "partAttachment",
        "type": "number",
        "description": "See <page>Enums/PATTACH</page>."
      },
      {
        "name": "entAttachment",
        "type": "number",
        "default": "0",
        "description": "The attachment ID on the entity to attach the particle system to"
      },
      {
        "name": "offset",
        "type": "Vector",
        "default": "Vector( 0, 0, 0 )",
        "description": "The offset from the <page>Entity:GetPos</page> of the entity we are attaching this CP to."
      }
    ],
    "returnValues": [
      {
        "type": "CNewParticleEffect",
        "description": "The created particle system."
      }
    ]
  },
  {
    "name": "CreateParticleSystemNoEntity",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Creates a new particle system, and sets control points 0 and 1 to given position, as well as optionally orientation of CP0 to the given angles. See also <page>Global.CreateParticleSystem</page>\n\n<note>The particle effect must be precached with <page>Global.PrecacheParticleSystem</page> and the file its from must be added via <page>game.AddParticles</page> before it can be used!</note>",
    "arguments": [
      {
        "name": "effect",
        "type": "string",
        "description": "The name of the effect to create. It must be precached."
      },
      {
        "name": "pos",
        "type": "Vector",
        "description": "The position for the particle system."
      },
      {
        "name": "ang",
        "type": "Angle",
        "default": "Angle( 0, 0, 0 )",
        "description": "The orientation of the particle system."
      }
    ],
    "returnValues": [
      {
        "type": "CNewParticleEffect",
        "description": "The created particle system."
      }
    ]
  },
  {
    "name": "CreatePhysCollideBox",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Creates a new <page>PhysCollide</page> from the given bounds.\n\n<bug issue=\"3568\">This fails to create planes or points - no components of the mins or maxs can be the same.</bug>",
    "arguments": [
      {
        "name": "mins",
        "type": "Vector",
        "description": "Min corner of the box. This is not automatically ordered with the maxs and must contain the smallest vector components. See <page>Global.OrderVectors</page>."
      },
      {
        "name": "maxs",
        "type": "Vector",
        "description": "Max corner of the box. This is not automatically ordered with the mins and must contain the largest vector components."
      }
    ],
    "returnValues": [
      {
        "type": "PhysCollide",
        "description": "The new PhysCollide. This will be a NULL PhysCollide (<page>PhysCollide:IsValid</page> returns false) if given bad vectors or no more PhysCollides can be created in the physics engine."
      }
    ]
  },
  {
    "name": "CreatePhysCollidesFromModel",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Creates <page>PhysCollide</page> objects for every physics object the model has. The model must be precached with <page>util.PrecacheModel</page> before being used with this function.",
    "arguments": [
      {
        "name": "modelName",
        "type": "string",
        "description": "Model path to get the collision objects of."
      }
    ],
    "returnValues": [
      {
        "type": "table",
        "description": "Table of <page>PhysCollide</page> objects. The number of entries will match the model's physics object count. See also <page>Entity:GetPhysicsObjectCount</page>. Returns no value if the model doesn't exist, or has not been precached."
      }
    ]
  },
  {
    "name": "CreateSound",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns a sound parented to the specified entity.\n\n<note>You can only create one CSoundPatch per audio file, per entity at the same time.</note>\n<note>\nValid sample rates: **11025 Hz, 22050 Hz and 44100 Hz**, otherwise you may see this kind of message:\n\n`Unsupported 32-bit wave file your_sound.wav` and\n`Invalid sample rate (48000) for sound 'your_sound.wav'`\n</note>",
    "arguments": [
      {
        "name": "targetEnt",
        "type": "Entity",
        "description": "The target entity."
      },
      {
        "name": "soundName",
        "type": "string",
        "description": "The sound to play. (Sound path or a <page text=\"soundscript\">sound.Add</page>) [Soundscript Characters](https://developer.valvesoftware.com/wiki/Soundscripts/en#Sound_Characters) are supported."
      },
      {
        "name": "filter",
        "type": "CRecipientFilter",
        "default": "nil",
        "description": "A <page>CRecipientFilter</page> of the players that will have this sound networked to them.\n\nIf not set, the default is a [CPASAttenuationFilter](https://developer.valvesoftware.com/wiki/CRecipientFilter#Derived_classes).\n\n<note>This argument only works serverside.</note>"
      }
    ],
    "returnValues": [
      {
        "type": "CSoundPatch",
        "description": "The sound object. You should keep a reference to this object for as long as you wish the sound to play!"
      }
    ]
  },
  {
    "name": "CreateSprite",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Creates and returns a new <page>DSprite</page> element with the supplied material.",
    "arguments": [
      {
        "name": "material",
        "type": "IMaterial",
        "description": "Material the sprite should draw."
      }
    ],
    "returnValues": [
      {
        "type": "Panel",
        "description": "The new <page>DSprite</page> element."
      }
    ]
  },
  {
    "name": "CurTime",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns the uptime of the server in seconds (to at least 4 decimal places)\n\nThis is a synchronised value and affected by various factors such as host_timescale (or <page>game.GetTimeScale</page>) and the server being paused - either by `sv_pausable` or all players disconnecting.\n\nYou should use this function for timing in-game events but not for real-world events.\n\nSee also: <page>Global.RealTime</page>, <page>Global.SysTime</page>\n\n<note>This is internally defined as a float, and as such it will be affected by precision loss if your server uptime is more than 6 hours, which will cause jittery movement of players and props and inaccuracy of timers, it is highly encouraged to refresh or change the map when that happens (a server restart is not necessary).\n\n\n\nThis is **NOT** easy as it sounds to fix in the engine, so please refrain from posting issues about this</note>\n\n<bug issue=\"3026\">This returns 0 in <page>GM:PlayerAuthed</page>.</bug>",
    "returnValues": [
      {
        "type": "number",
        "description": "Time synced with the game server."
      }
    ]
  },
  {
    "name": "DamageInfo",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns an <page>CTakeDamageInfo</page> object.\n\n<bug issue=\"2771\">This does not create a unique object, but instead returns a shared reference. That means you cannot use two or more of these objects at once.</bug>",
    "returnValues": [
      {
        "type": "CTakeDamageInfo",
        "description": "The <page>CTakeDamageInfo</page> object."
      }
    ]
  },
  {
    "name": "DebugInfo",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Writes text to the right hand side of the screen, like the old error system. Messages disappear after a couple of seconds.",
    "arguments": [
      {
        "name": "slot",
        "type": "number",
        "description": "The location on the right hand screen to write the debug info to. Starts at 0, no upper limit"
      },
      {
        "name": "info",
        "type": "string",
        "description": "The debugging information to be written to the screen"
      }
    ]
  },
  {
    "name": "DEFINE_BASECLASS",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "A preprocessor keyword that is directly replaced with the following text:\n```lua\nlocal BaseClass = baseclass.Get\n```\n\nBecause this is a simple preprocessor keyword and not a function, it will cause problems if not used properly\n\nSee <page>baseclass.Get</page> for more information.\n<warning>The preprocessor is not smart enough to know when substitution doesn't make sense, such as: table keys and strings.\n\nRunning `print(\"DEFINE_BASECLASS\")` will result in `local BaseClass = baseclass.Get`</warning>\n\nFor more information, including usage examples, see the <page>BaseClasses</page> reference page.",
    "arguments": [
      {
        "name": "value",
        "type": "string",
        "description": "Baseclass name"
      }
    ]
  },
  {
    "name": "DeleteAddonPreset",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Deletes the given Preset.",
    "arguments": [
      {
        "name": "name",
        "type": "string",
        "description": "The name of the Preset to delete."
      }
    ],
    "source": {
      "file": "lua/menu/mainmenu.lua",
      "lineStart": 461,
      "lineEnd": 470
    }
  },
  {
    "name": "DeriveGamemode",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Loads and registers the specified gamemode, setting the GM table's DerivedFrom field to the value provided, if the table exists. The DerivedFrom field is used post-gamemode-load as the \"derived\" parameter for <page>gamemode.Register</page>. See  <page>Gamemode_Creation#derivinggamemodes</page> for more information about deriving gamemodes.",
    "arguments": [
      {
        "name": "base",
        "type": "string",
        "description": "Gamemode name to derive from."
      }
    ]
  },
  {
    "name": "Derma_Anim",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Creates a new derma animation.",
    "arguments": [
      {
        "name": "name",
        "type": "string",
        "description": "Name of the animation to create"
      },
      {
        "name": "panel",
        "type": "Panel",
        "description": "Panel to run the animation on"
      },
      {
        "name": "func",
        "type": "function",
        "description": "Function to call to process the animation\n\n<callback>\n<arg type=\"Panel\" name=\"pnl\">the panel passed to Derma_Anim</arg>\n<arg type=\"table\" name=\"anim\">the anim table</arg>\n<arg type=\"number\" name=\"delta\">the fraction of the progress through the animation</arg>\n<arg type=\"any\" name=\"data\">optional data passed to the run metatable method</arg>\n</callback>"
      }
    ],
    "returnValues": [
      {
        "type": "table",
        "description": "A lua metatable containing four methods:\n* Run() - Should be called each frame you want the animation to be ran.\n* Active() - Returns if the animation is currently active (has not finished and stop has not been called)\n* Stop() - Halts the animation at its current progress.\n* Start( Length, Data ) - Prepares the animation to be ran for Length seconds. Must be called once before calling Run(). The data parameter will be passed to the func function."
      }
    ],
    "source": {
      "file": "lua/derma/derma_animation.lua",
      "lineStart": 59,
      "lineEnd": 70
    }
  },
  {
    "name": "Derma_DrawBackgroundBlur",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Draws background blur around the given panel.\n<note>Calling this on the same <page>Panel</page> multiple times makes the blur darker.</note>",
    "arguments": [
      {
        "name": "panel",
        "type": "Panel",
        "description": "Panel to draw the background blur around"
      },
      {
        "name": "startTime",
        "type": "number",
        "description": "Time that the blur began being painted"
      }
    ],
    "source": {
      "file": "lua/derma/derma_utils.lua",
      "lineStart": 7,
      "lineEnd": 37
    }
  },
  {
    "name": "Derma_Hook",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Creates panel method that calls the supplied Derma skin hook via <page>derma.SkinHook</page>",
    "arguments": [
      {
        "name": "panel",
        "type": "Panel",
        "description": "Panel to add the hook to"
      },
      {
        "name": "functionName",
        "type": "string",
        "description": "Name of panel function to create"
      },
      {
        "name": "hookName",
        "type": "string",
        "description": "Name of Derma skin hook to call within the function"
      },
      {
        "name": "typeName",
        "type": "string",
        "description": "Type of element to call Derma skin hook for"
      }
    ],
    "source": {
      "file": "lua/derma/init.lua",
      "lineStart": 54,
      "lineEnd": 60
    }
  },
  {
    "name": "Derma_Install_Convar_Functions",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Makes the panel (usually an input of sorts) respond to changes in console variables by adding next functions to the panel:\n* <page>Panel:SetConVar</page>\n* <page>Panel:ConVarChanged</page>\n* <page>Panel:ConVarStringThink</page>\n* <page>Panel:ConVarNumberThink</page>\n\nThe console variable value is saved in the `m_strConVar` property of the panel.\n\nThe panel should call\n<page>Panel:ConVarStringThink</page> or\n<page>Panel:ConVarNumberThink</page>\nin its <page>PANEL:Think</page> hook and should call <page>Panel:ConVarChanged</page> when the panel's value has changed.",
    "arguments": [
      {
        "name": "target",
        "type": "Panel",
        "description": "The panel the functions should be added to."
      }
    ],
    "source": {
      "file": "lua/derma/init.lua",
      "lineStart": 80,
      "lineEnd": 121
    }
  },
  {
    "name": "Derma_Message",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Creates a derma window to display information",
    "arguments": [
      {
        "name": "Text",
        "type": "string",
        "description": "The text within the created panel."
      },
      {
        "name": "Title",
        "type": "string",
        "description": "The title of the created panel."
      },
      {
        "name": "Button",
        "type": "string",
        "description": "The text of the button to close the panel."
      }
    ],
    "returnValues": [
      {
        "type": "Panel",
        "description": "The created <page>DFrame</page>"
      }
    ],
    "source": {
      "file": "lua/derma/derma_utils.lua",
      "lineStart": 45,
      "lineEnd": 92
    }
  },
  {
    "name": "Derma_Query",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Shows a message box in the middle of the screen, with up to 4 buttons they can press.",
    "arguments": [
      {
        "name": "text",
        "type": "string",
        "default": "Message Text (Second Parameter)",
        "description": "The message to display."
      },
      {
        "name": "title",
        "type": "string",
        "default": "Message Title (First Parameter)",
        "description": "The title to give the message box."
      },
      {
        "name": "btn1text",
        "type": "string",
        "description": "The text to display on the first button."
      },
      {
        "name": "btn1func",
        "type": "function",
        "default": "nil",
        "description": "The function to run if the user clicks the first button."
      },
      {
        "name": "btn2text",
        "type": "string",
        "default": "nil",
        "description": "The text to display on the second button."
      },
      {
        "name": "btn2func",
        "type": "function",
        "default": "nil",
        "description": "The function to run if the user clicks the second button."
      },
      {
        "name": "btn3text",
        "type": "string",
        "default": "nil",
        "description": "The text to display on the third button"
      },
      {
        "name": "btn3func",
        "type": "function",
        "default": "nil",
        "description": "The function to run if the user clicks the third button."
      },
      {
        "name": "btn4text",
        "type": "string",
        "default": "nil",
        "description": "The text to display on the fourth button"
      },
      {
        "name": "btn4func",
        "type": "function",
        "default": "nil",
        "description": "The function to run if the user clicks the fourth button."
      }
    ],
    "returnValues": [
      {
        "type": "Panel",
        "description": "The Panel object of the created window."
      }
    ],
    "source": {
      "file": "lua/derma/derma_utils.lua",
      "lineStart": 104,
      "lineEnd": 179
    }
  },
  {
    "name": "Derma_StringRequest",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Creates a derma window asking players to input a string.",
    "arguments": [
      {
        "name": "title",
        "type": "string",
        "description": "The title of the created panel."
      },
      {
        "name": "subtitle",
        "type": "string",
        "description": "The text above the input box."
      },
      {
        "name": "default",
        "type": "string",
        "description": "The default text for the input box."
      },
      {
        "name": "confirm",
        "type": "function",
        "description": "The function to be called once the user has confirmed their input.\n<callback>\n<arg name=\"text\" type=\"string\">The text the player entered.</arg>\n</callback>"
      },
      {
        "name": "cancel",
        "type": "function",
        "default": "nil",
        "description": "The function to be called once the user has cancelled their input.\n<callback>\n<arg name=\"text\" type=\"string\">The text the player entered.</arg>\n</callback>"
      },
      {
        "name": "confirmText",
        "type": "string",
        "default": "OK",
        "description": "Allows you to override text of the \"OK\" button"
      },
      {
        "name": "cancelText",
        "type": "string",
        "default": "Cancel",
        "description": "Allows you to override text of the \"Cancel\" button"
      }
    ],
    "returnValues": [
      {
        "type": "Panel",
        "description": "The created <page>DFrame</page>"
      }
    ],
    "source": {
      "file": "lua/derma/derma_utils.lua",
      "lineStart": 194,
      "lineEnd": 263
    }
  },
  {
    "name": "DermaMenu",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Creates a <page>DMenu</page> and closes any current menus.",
    "arguments": [
      {
        "name": "keepOpen",
        "type": "boolean",
        "default": "false",
        "description": "If we should keep other <page>DMenu</page>s open (`true`) or not (`false`)."
      },
      {
        "name": "parent",
        "type": "Panel",
        "default": "nil",
        "description": "The panel to parent the created menu to."
      }
    ],
    "returnValues": [
      {
        "type": "Panel",
        "name": "menu",
        "description": "The created <page>DMenu</page>."
      }
    ],
    "source": {
      "file": "lua/derma/derma_menus.lua",
      "lineStart": 10,
      "lineEnd": 18
    }
  },
  {
    "name": "DisableClipping",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Sets whether rendering should be limited to being inside a panel or not. Needs to be used inside one of the <page>2d rendering hooks</page>\n\nSee also <page>Panel:NoClipping</page>.",
    "arguments": [
      {
        "name": "disable",
        "type": "boolean",
        "description": "Whether or not clipping should be disabled"
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "name": "oldState",
        "description": "Whether the clipping was enabled or not before this function call"
      }
    ]
  },
  {
    "name": "DOF_Kill",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Cancels current DOF post-process effect started with <page>Global.DOF_Start</page>",
    "source": {
      "file": "lua/postprocess/dof.lua",
      "lineStart": 14,
      "lineEnd": 30
    }
  },
  {
    "name": "DOF_Start",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Cancels any existing DOF post-process effects.\nBegins the DOF post-process effect.",
    "source": {
      "file": "lua/postprocess/dof.lua",
      "lineStart": 32,
      "lineEnd": 46
    }
  },
  {
    "name": "DOFModeHack",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "A hacky method used to fix some bugs regarding DoF. What this basically does it force all `C_BaseAnimating` entities to have the translucent <page text=\"rendergroup\">Enums/RENDERGROUP</page>, even if they use opaque or two-pass models.\n\n<internal></internal>",
    "arguments": [
      {
        "name": "enable",
        "type": "boolean",
        "description": "Enables or disables depth-of-field mode"
      }
    ]
  },
  {
    "name": "DoStopServers",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Stops searching for new servers in the given category",
    "arguments": [
      {
        "name": "category",
        "type": "string",
        "description": "The category to stop searching in. **Working Values: internet, favorite, history, lan**"
      }
    ],
    "source": {
      "file": "lua/menu/mainmenu.lua",
      "lineStart": 367,
      "lineEnd": 371
    }
  },
  {
    "name": "DrawBackground",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "<internal></internal> Draws the currently active main menu background image and handles transitioning between background images.\n\nThis is called by default in the menu panel's Paint hook.",
    "source": {
      "file": "lua/menu/background.lua",
      "lineStart": 73,
      "lineEnd": 93
    }
  },
  {
    "name": "DrawBloom",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Draws the bloom shader, which creates a glowing effect from bright objects.",
    "arguments": [
      {
        "name": "Darken",
        "type": "number",
        "description": "Determines how much to darken the effect. A lower number will make the glow come from lower light levels. A value of `1` will make the bloom effect unnoticeable. Negative values will make even pitch black areas glow."
      },
      {
        "name": "Multiply",
        "type": "number",
        "description": "Will affect how bright the glowing spots are. A value of `0` will make the bloom effect unnoticeable."
      },
      {
        "name": "SizeX",
        "type": "number",
        "description": "The size of the bloom effect along the horizontal axis."
      },
      {
        "name": "SizeY",
        "type": "number",
        "description": "The size of the bloom effect along the vertical axis."
      },
      {
        "name": "Passes",
        "type": "number",
        "description": "Determines how much to exaggerate the effect."
      },
      {
        "name": "ColorMultiply",
        "type": "number",
        "description": "Will multiply the colors of the glowing spots, making them more vivid."
      },
      {
        "name": "Red",
        "type": "number",
        "description": "How much red to multiply with the glowing color. Should be between `0` and `1`."
      },
      {
        "name": "Green",
        "type": "number",
        "description": "How much green to multiply with the glowing color. Should be between `0` and `1`."
      },
      {
        "name": "Blue",
        "type": "number",
        "description": "How much blue to multiply with the glowing color. Should be between `0` and `1`."
      }
    ],
    "source": {
      "file": "lua/postprocess/bloom.lua",
      "lineStart": 25,
      "lineEnd": 59
    }
  },
  {
    "name": "DrawBokehDOF",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Draws the Bokeh Depth Of Field effect .",
    "arguments": [
      {
        "name": "intensity",
        "type": "number",
        "description": "Intensity of the effect."
      },
      {
        "name": "distance",
        "type": "number",
        "description": "**Not worldspace distance**. Value range is from `0` to `1`."
      },
      {
        "name": "focus",
        "type": "number",
        "description": "Focus. Recommended values are from 0 to 12."
      }
    ]
  },
  {
    "name": "DrawColorModify",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Draws the Color Modify shader, which can be used to adjust colors on screen.",
    "arguments": [
      {
        "name": "modifyParameters",
        "type": "table",
        "description": "Color modification parameters. See <page>Shaders/g_colourmodify</page> and the example below. Note that if you leave out a field, it will retain its last value which may have changed if another caller uses this function."
      }
    ],
    "source": {
      "file": "lua/postprocess/color_modify.lua",
      "lineStart": 19,
      "lineEnd": 32
    }
  },
  {
    "name": "DrawMaterialOverlay",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Draws a material overlay on the screen.",
    "arguments": [
      {
        "name": "Material",
        "type": "string",
        "description": "This will be the material that is drawn onto the screen."
      },
      {
        "name": "RefractAmount",
        "type": "number",
        "description": "This will adjust how much the material will refract your screen."
      }
    ],
    "source": {
      "file": "lua/postprocess/overlay.lua",
      "lineStart": 11,
      "lineEnd": 31
    }
  },
  {
    "name": "DrawMotionBlur",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Creates a motion blur effect by drawing your screen multiple times.",
    "arguments": [
      {
        "name": "AddAlpha",
        "type": "number",
        "description": "How much alpha to change per frame."
      },
      {
        "name": "DrawAlpha",
        "type": "number",
        "description": "How much alpha the frames will have. A value of 0 will not render the motion blur effect."
      },
      {
        "name": "Delay",
        "type": "number",
        "description": "Determines the amount of time between frames to capture."
      }
    ],
    "source": {
      "file": "lua/postprocess/motion_blur.lua",
      "lineStart": 17,
      "lineEnd": 61
    }
  },
  {
    "name": "DrawSharpen",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Draws the sharpen shader, which creates more contrast.",
    "arguments": [
      {
        "name": "Contrast",
        "type": "number",
        "description": "How much contrast to create."
      },
      {
        "name": "Distance",
        "type": "number",
        "description": "How large the contrast effect will be."
      }
    ],
    "source": {
      "file": "lua/postprocess/sharpen.lua",
      "lineStart": 12,
      "lineEnd": 22
    }
  },
  {
    "name": "DrawSobel",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Draws the sobel shader, which detects edges and draws a black border.",
    "arguments": [
      {
        "name": "Threshold",
        "type": "number",
        "description": "Determines the threshold of edges. A value of `0` will make your screen completely black."
      }
    ],
    "source": {
      "file": "lua/postprocess/sobel.lua",
      "lineStart": 8,
      "lineEnd": 18
    }
  },
  {
    "name": "DrawSunbeams",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Renders the post-processing effect of beams of light originating from the map's sun. Utilises the `pp/sunbeams` material.",
    "arguments": [
      {
        "name": "darken",
        "type": "number",
        "description": "`$darken` property for sunbeams material."
      },
      {
        "name": "multiplier",
        "type": "number",
        "description": "`$multiply` property for sunbeams material."
      },
      {
        "name": "sunSize",
        "type": "number",
        "description": "`$sunsize` property for sunbeams material."
      },
      {
        "name": "sunX",
        "type": "number",
        "description": "`$sunx` property for sunbeams material."
      },
      {
        "name": "sunY",
        "type": "number",
        "description": "`$suny` property for sunbeams material."
      }
    ],
    "source": {
      "file": "lua/postprocess/sunbeams.lua",
      "lineStart": 14,
      "lineEnd": 29
    }
  },
  {
    "name": "DrawTexturize",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Draws the texturize shader, which replaces each pixel on your screen with a different part of the texture depending on its brightness. See <page text=\"g_texturize\">Shaders/g_texturize</page> for information on making the texture.",
    "arguments": [
      {
        "name": "Scale",
        "type": "number",
        "description": "Scale of the texture. A smaller number creates a larger texture."
      },
      {
        "name": "BaseTexture",
        "type": "number",
        "description": "This will be the texture to use in the effect. Make sure you use <page>Global.Material</page> to get the texture number."
      }
    ],
    "source": {
      "file": "lua/postprocess/texturize.lua",
      "lineStart": 8,
      "lineEnd": 19
    }
  },
  {
    "name": "DrawToyTown",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Draws the toy town shader, which blurs the top and bottom of your screen. This can make very large objects look like toys, hence the name.",
    "arguments": [
      {
        "name": "Passes",
        "type": "number",
        "description": "An integer determining how many times to draw the effect. A higher number creates more blur."
      },
      {
        "name": "Height",
        "type": "number",
        "description": "The amount of screen which should be blurred on the top and bottom."
      }
    ],
    "source": {
      "file": "lua/postprocess/toytown.lua",
      "lineStart": 12,
      "lineEnd": 28
    }
  },
  {
    "name": "DropEntityIfHeld",
    "parent": "Global",
    "realms": [
      "server"
    ],
    "description": "<deprecated>You really should be using <page>Entity:ForcePlayerDrop</page>, which does the same thing.</deprecated>\n\nDrops the specified entity if it is being held by any player with Gravity Gun, Physics Gun or `+use` pickup.\n\nSee also <page>Player:DropObject</page> and <page>Entity:ForcePlayerDrop</page>.",
    "arguments": [
      {
        "name": "ent",
        "type": "Entity",
        "description": "The entity to drop."
      }
    ]
  },
  {
    "name": "DTVar_ReceiveProxyGL",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Calls all NetworkVarNotify functions of the given entity with the given new value, but doesn't change the real value.\ninternally uses <page>Entity:CallDTVarProxies</page>",
    "arguments": [
      {
        "name": "entity",
        "type": "Entity",
        "description": "The Entity to run the NetworkVarNotify functions from."
      },
      {
        "name": "Type",
        "type": "string",
        "description": "The NetworkVar Type.\n* `String`\n* `Bool`\n* `Float`\n* `Int` (32-bit signed integer)\n* `Vector`\n* `Angle`\n* `Entity`"
      },
      {
        "name": "index",
        "type": "number",
        "description": "The NetworkVar index."
      },
      {
        "name": "new value",
        "type": "any",
        "description": "The new value."
      }
    ],
    "source": {
      "file": "lua/includes/extensions/entity.lua",
      "lineStart": 212,
      "lineEnd": 216
    }
  },
  {
    "name": "DynamicLight",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Creates or replaces a dynamic light with the given id.\n\n<note>Only 32 dlights and 64 elights can be active at once.</note>\n<warning>It is not safe to hold a reference to this object after creation since its data can be replaced by another dlight at any time.</warning>\n<bug issue=\"3798\">The minlight parameter affects the world and entities differently.</bug>",
    "arguments": [
      {
        "name": "index",
        "type": "number",
        "description": "An unsigned Integer. Usually an <page text=\"entity index\">Entity:EntIndex</page> is used here."
      },
      {
        "name": "elight",
        "type": "boolean",
        "default": "false",
        "description": "Allocates an elight instead of a dlight. Elights have a higher light limit and do not light the world (making the \"noworld\" parameter have no effect)."
      }
    ],
    "returnValues": [
      {
        "type": "table",
        "description": "A DynamicLight structured table. See <page>Structures/DynamicLight</page>"
      }
    ]
  },
  {
    "name": "DynamicMaterial",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Creates a dynamic Material from the given materialPath\n<warning>This function should never be used in a Rendering Hook because it creates a new dynamic material every time and can fill up your vram.</warning>",
    "arguments": [
      {
        "name": "materialPath",
        "type": "string",
        "description": "The material with path. The path is relative to the `materials/` folder."
      },
      {
        "name": "flags",
        "type": "string",
        "default": "nil",
        "description": "Some bind of bits / byte.\n<validate>What does this argument do / use.</validate> Currently working value: \"0100010\" --nocull smooth"
      }
    ],
    "returnValues": [
      {
        "type": "IMaterial",
        "description": "Generated material."
      }
    ]
  },
  {
    "name": "EffectData",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns a <page>CEffectData</page> object to be used with <page>util.Effect</page>.\n\n<bug issue=\"2771\">This does not create a unique object, but instead returns a shared reference. That means you cannot use two or more of these objects at once.</bug>",
    "returnValues": [
      {
        "type": "CEffectData",
        "description": "The <page>CEffectData</page> object."
      }
    ]
  },
  {
    "name": "Either",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "An [eagerly evaluated](https://en.wikipedia.org/wiki/Eager_evaluation) [ternary operator](https://en.wikipedia.org/wiki/%3F:), or, in layman's terms, a compact \"if then else\" statement.\n\nIn most cases, you should just use Lua's [\"pseudo\" ternary operator](https://en.wikipedia.org/wiki/%3F:#Lua), like this:\n\n```\nlocal myCondition = true\nlocal consequent = \"myCondition is true\"\nlocal alternative = \"myCondition is false\"\n\nprint(myCondition and consequent or alternative)\n```\n\nIn the above example, due to [short-circuit evaluation](https://en.wikipedia.org/wiki/Short-circuit_evaluation), `consequent` would be \"skipped\" and ignored (not evaluated) by Lua due to `myCondition` being `true`, and only `alternative` would be evaluated. However, when using `Either`, both `consequent` and `alternative` would be evaluated. A practical example of this can be found at the bottom of the page.\n\n# Falsey values\n\nIf `consequent` is \"falsey\" (Lua considers both `false` and `nil` as false), this will not work. For example:\n\n```\nlocal X = true\nlocal Y = false\nlocal Z = \"myCondition is false\"\n\nprint(X and Y or Z)\n```\n\nThis will actually print the value of `Z`.\n\nIn the above case, and other very rare cases, you may find `Either` useful.",
    "arguments": [
      {
        "name": "condition",
        "type": "any",
        "description": "The condition to check if true or false."
      },
      {
        "name": "truevar",
        "type": "any",
        "description": "If the condition isn't nil/false, returns this value."
      },
      {
        "name": "falsevar",
        "type": "any",
        "description": "If the condition is nil/false, returns this value."
      }
    ],
    "returnValues": [
      {
        "type": "any",
        "description": "The result."
      }
    ],
    "source": {
      "file": "lua/includes/util.lua",
      "lineStart": 398,
      "lineEnd": 401
    }
  },
  {
    "name": "EmitSentence",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Plays a sentence from `scripts/sentences.txt`",
    "arguments": [
      {
        "name": "soundName",
        "type": "string",
        "description": "The sound to play"
      },
      {
        "name": "position",
        "type": "Vector",
        "description": "The position to play at"
      },
      {
        "name": "entity",
        "type": "number",
        "description": "The entity to emit the sound from. Must be <page>Entity:EntIndex</page>"
      },
      {
        "name": "channel",
        "type": "number",
        "default": "CHAN_AUTO",
        "description": "The sound channel, see <page>Enums/CHAN</page>."
      },
      {
        "name": "volume",
        "type": "number",
        "default": "1",
        "description": "The volume of the sound, from 0 to 1"
      },
      {
        "name": "soundLevel",
        "type": "number",
        "default": "75",
        "description": "The sound level of the sound, see <page>Enums/SNDLVL</page>"
      },
      {
        "name": "soundFlags",
        "type": "number",
        "default": "0",
        "description": "The flags of the sound, see <page>Enums/SND</page>"
      },
      {
        "name": "pitch",
        "type": "number",
        "default": "100",
        "description": "The pitch of the sound, 0-255"
      }
    ]
  },
  {
    "name": "EmitSound",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Emits the specified sound at the specified position. See also <page>Entity:EmitSound</page> if you wish to play sounds on a specific entity.\n\n<note>\nValid sample rates: **11025 Hz, 22050 Hz and 44100 Hz**, otherwise you may see this kind of message:\n\n`Unsupported 32-bit wave file your_sound.wav` and\n`Invalid sample rate (48000) for sound 'your_sound.wav'`\n</note>",
    "arguments": [
      {
        "name": "soundName",
        "type": "string",
        "description": "The sound to play\n\nThis should either be a sound script name (<page>sound.Add</page>) or a file path relative to the `sound/` folder. (Make note that it's not sound**s**)"
      },
      {
        "name": "position",
        "type": "Vector",
        "description": "The position where the sound is meant to play, which is also used for a network filter (`CPASAttenuationFilter`) to decide which players will hear the sound."
      },
      {
        "name": "entity",
        "type": "number",
        "default": "0",
        "description": "The entity to emit the sound from. Can be an <page>Entity:EntIndex</page> or one of the following:\n* `0` - Plays sound on the world (position set to `0,0,0`)\n* `-1` - Plays sound on the local player (on server acts as `0`)\n* `-2` - Plays UI sound (position set to `0,0,0`, no spatial sound, on server acts as `0`)"
      },
      {
        "name": "channel",
        "type": "number",
        "default": "CHAN_AUTO",
        "description": "The sound channel, see <page>Enums/CHAN</page>."
      },
      {
        "name": "volume",
        "type": "number",
        "default": "1",
        "description": "The volume of the sound, from 0 to 1"
      },
      {
        "name": "soundLevel",
        "type": "number",
        "default": "75",
        "description": "The sound level of the sound, see <page>Enums/SNDLVL</page>"
      },
      {
        "name": "soundFlags",
        "type": "number",
        "default": "0",
        "description": "The flags of the sound, see <page>Enums/SND</page>"
      },
      {
        "name": "pitch",
        "type": "number",
        "default": "100",
        "description": "The pitch of the sound, 0-255"
      },
      {
        "name": "dsp",
        "type": "number",
        "default": "0",
        "description": "The DSP preset for this sound. [List of DSP presets](https://developer.valvesoftware.com/wiki/Dsp_presets)"
      },
      {
        "name": "filter",
        "type": "CRecipientFilter",
        "default": "nil",
        "description": "If set serverside, the sound will only be networked to the clients in the filter."
      }
    ]
  },
  {
    "name": "EndTooltip",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Removes the currently active tool tip from the screen.",
    "arguments": [
      {
        "name": "panel",
        "type": "Panel",
        "description": "This is the panel that has a tool tip."
      }
    ],
    "source": {
      "file": "lua/includes/util/tooltips.lua",
      "lineStart": 66,
      "lineEnd": 80
    }
  },
  {
    "name": "Entity",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns the entity with the matching <page>Entity:EntIndex</page>.\n\nIndices `1` through <page>game.MaxPlayers</page>() are always reserved for players.\n\n<note>In examples on this wiki, `Entity( 1 )` is used when a player entity is needed (see ). In singleplayer and listen servers, `Entity( 1 )` will always be the first player. In dedicated servers, however, `Entity( 1 )` won't always be a valid player if there is no one currently on the server.</note>",
    "arguments": [
      {
        "name": "entityIndex",
        "type": "number",
        "description": "The entity index."
      }
    ],
    "returnValues": [
      {
        "type": "Entity",
        "description": "The entity if it exists, or NULL if it doesn't."
      }
    ]
  },
  {
    "name": "error",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Throws a Lua error and breaks out of the current call stack.",
    "arguments": [
      {
        "name": "message",
        "type": "string",
        "description": "The error message to throw"
      },
      {
        "name": "errorLevel",
        "type": "number",
        "default": "1",
        "description": "The level to throw the error at."
      }
    ]
  },
  {
    "name": "Error",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Throws an error. This is currently an alias of <page>Global.ErrorNoHalt</page> despite it once throwing a halting error like <page text=\"error\">Global.error(lowercase)</page> without the stack trace appended.\n\n<bug issue=\"2113\">This function throws a non-halting error instead of a halting error.</bug>",
    "arguments": [
      {
        "name": "arguments",
        "type": "vararg",
        "description": "Converts all arguments to strings and prints them with no spacing or line breaks."
      }
    ]
  },
  {
    "name": "ErrorNoHalt",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Throws a Lua error but does not break out of the current call stack.\nThis function will not print a stack trace like a normal error would.\nEssentially similar if not equivalent to <page>Global.Msg</page>.",
    "arguments": [
      {
        "name": "arguments",
        "type": "vararg",
        "description": "Converts all arguments to strings and prints them with no spacing."
      }
    ]
  },
  {
    "name": "ErrorNoHaltWithStack",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Throws a Lua error but does not break out of the current call stack.\n\nThis function will print a stack trace like a normal error would.",
    "arguments": [
      {
        "name": "arguments",
        "type": "vararg",
        "description": "Converts all arguments to strings and prints them with no spacing."
      }
    ]
  },
  {
    "name": "EyeAngles",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Returns the angles of the current render context as calculated by <page>GM:CalcView</page>.\n\n<bug issue=\"2516\">This function is only reliable inside rendering hooks.</bug>",
    "returnValues": [
      {
        "type": "Angle",
        "description": "The angle of the currently rendered scene."
      }
    ]
  },
  {
    "name": "EyePos",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Returns the origin of the current render context as calculated by <page>GM:CalcView</page>.\n\n<bug issue=\"2516\">This function is only reliable inside rendering hooks.</bug>",
    "returnValues": [
      {
        "type": "Vector",
        "description": "Camera position."
      }
    ]
  },
  {
    "name": "EyeVector",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Returns the normal vector of the current render context as calculated by <page>GM:CalcView</page>, similar to <page>Global.EyeAngles</page>.\n\n<bug issue=\"2516\">This function is only reliable inside rendering hooks.</bug>",
    "returnValues": [
      {
        "type": "Vector",
        "description": "View direction of the currently rendered scene."
      }
    ]
  },
  {
    "name": "FindMetaTable",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns the meta table for the class with the matching name.\n\nInternally returns <page>debug.getregistry</page>()[metaName]\n\nYou can learn more about meta tables on the <page>Meta Tables</page> page.\n\nYou can find a list of meta tables that can be retrieved with this function on <page>Enums/TYPE</page>. The name in the description is the string to use with this function.",
    "arguments": [
      {
        "name": "metaName",
        "type": "string",
        "description": "The object type to retrieve the meta table of."
      }
    ],
    "returnValues": [
      {
        "type": "table",
        "description": "The corresponding meta table."
      }
    ]
  },
  {
    "name": "FindTooltip",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Returns the tool-tip text and tool-tip-panel (if any) of the given panel as well as itself",
    "arguments": [
      {
        "name": "panel",
        "type": "Panel",
        "description": "Panel to find tool-tip of"
      }
    ],
    "returnValues": [
      {
        "type": "string",
        "description": "tool-tip text"
      },
      {
        "type": "Panel",
        "description": "tool-tip panel"
      },
      {
        "type": "Panel",
        "description": "panel that the function was called with"
      }
    ],
    "source": {
      "file": "lua/includes/util/tooltips.lua",
      "lineStart": 20,
      "lineEnd": 36
    }
  },
  {
    "name": "FireAddonConflicts",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Refreshes all Addon Conflicts and Fires a Problem. Internally uses <page>Global.FireProblem</page>",
    "source": {
      "file": "lua/menu/problems/problems.lua",
      "lineStart": 303,
      "lineEnd": 324
    }
  },
  {
    "name": "FireProblem",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Creates a problem from the given definition.\n\n<note>\n\nExisting problems with the same Id will be replaced / overridden.\n\n</note>",
    "arguments": [
      {
        "name": "problem",
        "type": "Structures/Problem",
        "description": "The problem's definition."
      }
    ],
    "source": {
      "file": "lua/menu/problems/problems.lua",
      "lineStart": 91,
      "lineEnd": 102
    }
  },
  {
    "name": "FireProblemFromEngine",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "<internal>Internally uses <page>Global.FireProblem</page> to create / fire the Problem.</internal>\nThis function is called from the engine to notify the player about a problem in a more user friendly way compared to a console message.",
    "arguments": [
      {
        "name": "id",
        "type": "string",
        "description": "The Problem ID."
      },
      {
        "name": "severity",
        "type": "number",
        "description": "The Problem severity."
      },
      {
        "name": "params",
        "type": "string",
        "description": "Additional Parameters."
      }
    ],
    "source": {
      "file": "lua/menu/problems/problems.lua",
      "lineStart": 179,
      "lineEnd": 191
    }
  },
  {
    "name": "Format",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Formats the specified values into the string given. Same as <page>string.format</page>.",
    "arguments": [
      {
        "name": "format",
        "type": "string",
        "description": "The string to be formatted.\nFollows this format: http://www.cplusplus.com/reference/cstdio/printf/"
      },
      {
        "name": "formatParameters",
        "type": "vararg",
        "description": "Values to be formatted into the string."
      }
    ],
    "returnValues": [
      {
        "type": "string",
        "description": "The formatted string"
      }
    ],
    "source": {
      "file": "lua/includes/util.lua",
      "lineStart": 10
    }
  },
  {
    "name": "FrameNumber",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns the number of frames rendered since the game was launched."
  },
  {
    "name": "FrameTime",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns the <page>Global.CurTime</page>-based time in seconds it took to render the last frame.\n\nThis should be used for frame/tick based timing, such as movement prediction or animations.\n\nFor real-time-based frame time that isn't affected by `host_timescale`, use <page>Global.RealFrameTime</page>. RealFrameTime is more suited for things like GUIs or HUDs.",
    "returnValues": [
      {
        "type": "number",
        "description": "time (in seconds)"
      }
    ]
  },
  {
    "name": "GameDetails",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Callback function for when the client has joined a server. This function shows the server's loading URL by default.",
    "arguments": [
      {
        "name": "servername",
        "type": "string",
        "description": "Server's name."
      },
      {
        "name": "serverurl",
        "type": "string",
        "description": "Server's loading screen URL, or \"\" if the URL is not set."
      },
      {
        "name": "mapname",
        "type": "string",
        "description": "Server's current map's name."
      },
      {
        "name": "maxplayers",
        "type": "number",
        "description": "Max player count of server."
      },
      {
        "name": "steamid",
        "type": "string",
        "description": "The local player's <page>Player:SteamID64</page>."
      },
      {
        "name": "gamemode",
        "type": "string",
        "description": "Server's current gamemode's folder name."
      }
    ],
    "source": {
      "file": "lua/menu/loading.lua",
      "lineStart": 243
    }
  },
  {
    "name": "gcinfo",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "<deprecated>This function was deprecated in Lua 5.1 and is removed in Lua 5.2. Use <page>Global.collectgarbage</page>( \"count\" ) instead.</deprecated> Returns the current floored dynamic memory usage of Lua in kilobytes.",
    "returnValues": [
      {
        "type": "number",
        "description": "The current floored dynamic memory usage of Lua, in kilobytes."
      }
    ]
  },
  {
    "name": "GenerateSpawnlistFromPath",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "This function adds all models from a specified folder to a custom Spawnlist category. Internally uses <page>Global.AddPropsOfParent</page>\n<warning>Using this function before <page>SANDBOX:PopulateContent</page> has been called will result in an error</warning>",
    "arguments": [
      {
        "name": "folder",
        "type": "string",
        "description": "the folder to search for models"
      },
      {
        "name": "path",
        "type": "string",
        "description": "The path to look for the files and directories in. See <page text=\"this list\">File_Search_Paths</page> for a list of valid paths."
      },
      {
        "name": "name",
        "type": "string",
        "description": "The Spawnmenu Category name"
      },
      {
        "name": "icon",
        "type": "string",
        "default": "icon16/page.png",
        "description": "The Spawnmenu Category Icon to use"
      },
      {
        "name": "appid",
        "type": "number",
        "description": "The AppID which is needed for the Content"
      }
    ],
    "source": {
      "file": "gamemodes/sandbox/gamemode/spawnmenu/creationmenu/content/contenttypes/gameprops.lua",
      "lineStart": 24,
      "lineEnd": 41
    }
  },
  {
    "name": "GetAddonStatus",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Returns if the game was started with either -noaddons or -noworkshop",
    "returnValues": [
      {
        "type": "boolean",
        "name": "noaddons",
        "description": "true if the game was started with -noaddons. (see <page>Command_Line_Parameters</page>)"
      },
      {
        "type": "boolean",
        "name": "noworkshop",
        "description": "true if the game was started with -noworkshop. (see <page>Command_Line_Parameters</page>)"
      }
    ]
  },
  {
    "name": "GetAPIManifest",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "<internal></internal>\n\nGets miscellaneous information from Facepunches API.",
    "arguments": [
      {
        "name": "callback",
        "type": "function",
        "description": "Callback to be called when the API request is done.\n\n<callback>\n<arg type=\"string\" name=\"data\">JSON encoded data, see <page>util.JSONToTable</page>.</arg>\n</callback>\n\n<br>\nFormatted output:\n```js\n{\n\"ManifestVersion\": \tnumber - Version of the manifest\n\"Date\": \t\t\tstring - Date the data was retrieved\n\n// Contains all the blog posts, the things in the top right of the menu\n\"News\": {\n\"Blogs\": [\n\n// Structure of blog posts\n{\n\"Date\": \t\tstring - Date the post was created\n\"ShortName\": \tstring - Short name of the post, identifier of it on the blog website\n\"Title\": \t\tstring - Title of the post\n\"HeaderImage\": \tstring - Main image of the post, showed in the top right\n\"SummaryHtml\": \tstring - Summary of the blogpost, text thats shown to the user\n\"Url\": \t\t\tstring - URL to the post on the blog\n\"Tags\": \t\tstring - String of the posts tag\n}\n]\n}\n\n// Array of Facepunches Mods, Admins and Developers\n\"Administrators\": [\n{\n\"UserId\": \t\tstring - SteamID64 of the person\n\"Level\": \t\tstring - Level of the user (Administrator, Developer or Moderator)\n}\n]\n\n// Unused and contains nothing useful\n\"Heroes\": {}\n\n\"SentryUrl\": \t\tstring - Nothing\n\"DatabaseUrl\" \t\tstring - URL to the Facepunch API (/database/{action}/)\n\"FeedbackUrl\" \t\tstring - URL to the Facepunch API (/feedback/add/)\n\"ReportUrl\" \t\tstring - URL to the Facepunch API (/feedback/report/)\n\"LeaderboardUrl\" \tstring - URL to the Facepunch API (/leaderboard/{action}/)\n\"BenchmarkUrl\" \t\tstring - URL to the Facepunch API (/benchmark/add/)\n\"AccountUrl\" \t\tstring - URL to the Facepunch API (/account/{action}/)\n\n\"Servers\": {\n\"Official\": [] // Nothing\n\n// List of blacklisted servers\n\"Banned\": [\nstring \t- IP of the blacklisted server\n]\n}\n}\n```"
      }
    ]
  },
  {
    "name": "GetConVar",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Gets the <page>ConVar</page> with the specified name.\n\n<note>This function uses <page>Global.GetConVar_Internal</page> internally, but caches the result in Lua for quicker lookups.</note>\n<warning>Due to this function using <page>Global.GetConVar_Internal</page> internally it tends to be relatively slow. Please attempt to 'cache' the return of what you used to make it instead of using this function.\n\nExample:\n```\nlocal exampleConvar = CreateClientConVar(\"exampleConvar\", \"hi\")\n\nprint(exampleConvar:GetString())\n```\n\n</warning>",
    "arguments": [
      {
        "name": "name",
        "type": "string",
        "description": "Name of the ConVar to get"
      }
    ],
    "returnValues": [
      {
        "type": "ConVar",
        "description": "The <page>ConVar</page> object, or nil if no such <page>ConVar</page> was found."
      }
    ],
    "source": {
      "file": "lua/includes/util.lua",
      "lineStart": 472,
      "lineEnd": 484
    }
  },
  {
    "name": "GetConVar_Internal",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "<internal></internal>\n<warning>This function is very slow and not recommended. See <page>Global.GetConVar</page> for an example on how to properly store the return of what you're using so you can avoid using this function as much as possible.</warning>\nGets the ConVar with the specified name. This function doesn't cache the convar.",
    "arguments": [
      {
        "name": "name",
        "type": "string",
        "description": "Name of the ConVar to get"
      }
    ],
    "returnValues": [
      {
        "type": "ConVar",
        "description": "The ConVar object"
      }
    ]
  },
  {
    "name": "GetConVarNumber",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "<deprecated>Store the <page>ConVar</page> object retrieved with <page>Global.GetConVar</page> and call <page>ConVar:GetInt</page> or <page>ConVar:GetFloat</page> on it.</deprecated>Gets the numeric value ConVar with the specified name.",
    "arguments": [
      {
        "name": "name",
        "type": "string",
        "description": "Name of the ConVar to get."
      }
    ],
    "returnValues": [
      {
        "type": "number",
        "description": "The ConVar's value."
      }
    ],
    "source": {
      "file": "lua/includes/util.lua",
      "lineStart": 486,
      "lineEnd": 490
    }
  },
  {
    "name": "GetConVarString",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "<deprecated>Store the <page>ConVar</page> object retrieved with <page>Global.GetConVar</page> and call <page>ConVar:GetString</page> on it.</deprecated>Gets the string value ConVar with the specified name.",
    "arguments": [
      {
        "name": "name",
        "type": "string",
        "description": "Name of the ConVar to get."
      }
    ],
    "returnValues": [
      {
        "type": "string",
        "description": "The ConVar's value."
      }
    ],
    "source": {
      "file": "lua/includes/util.lua",
      "lineStart": 492,
      "lineEnd": 496
    }
  },
  {
    "name": "GetDefaultLoadingHTML",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Returns the default loading screen URL (asset://garrysmod/html/loading.html)",
    "returnValues": [
      {
        "type": "string",
        "description": "Default loading url (asset://garrysmod/html/loading.html)"
      }
    ]
  },
  {
    "name": "GetDemoFileDetails",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Retrieves data about the demo with the specified filename. Similar to <page>Global.GetSaveFileDetails</page>.",
    "arguments": [
      {
        "name": "filename",
        "type": "string",
        "description": "The file name of the demo."
      }
    ],
    "returnValues": [
      {
        "type": "table",
        "description": "Demo data."
      }
    ]
  },
  {
    "name": "GetDownloadables",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Returns a table with the names of files needed from the server you are currently joining.",
    "returnValues": [
      {
        "type": "table",
        "description": "table of file names"
      }
    ]
  },
  {
    "name": "getfenv",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns the environment table of either the stack level or the function specified.",
    "arguments": [
      {
        "name": "location",
        "type": "function",
        "default": "1",
        "description": "The object to get the enviroment from. Can also be a number that specifies the function at that stack level: Level 1 is the function calling getfenv. Level 0 is the base Garry's Mod environment (_G)."
      }
    ],
    "returnValues": [
      {
        "type": "table",
        "description": "The environment."
      }
    ]
  },
  {
    "name": "GetGlobal2Angle",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns an angle that is shared between the server and all clients.",
    "arguments": [
      {
        "name": "index",
        "type": "string",
        "description": "The unique index to identify the global value with."
      },
      {
        "name": "default",
        "type": "Angle",
        "default": "Angle( 0, 0, 0 )",
        "description": "The value to return if the global value is not set."
      }
    ],
    "returnValues": [
      {
        "type": "Angle",
        "description": "The global value, or default if the global is not set."
      }
    ]
  },
  {
    "name": "GetGlobal2Bool",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns a boolean that is shared between the server and all clients.",
    "arguments": [
      {
        "name": "index",
        "type": "string",
        "description": "The unique index to identify the global value with."
      },
      {
        "name": "default",
        "type": "boolean",
        "default": "false",
        "description": "The value to return if the global value is not set."
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "The global value, or the default if the global value is not set."
      }
    ]
  },
  {
    "name": "GetGlobal2Entity",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns an entity that is shared between the server and all clients.",
    "arguments": [
      {
        "name": "index",
        "type": "string",
        "description": "The unique index to identify the global value with."
      },
      {
        "name": "default",
        "type": "Entity",
        "default": "NULL",
        "description": "The value to return if the global value is not set."
      }
    ],
    "returnValues": [
      {
        "type": "Entity",
        "description": "The global value, or the default if the global value is not set."
      }
    ]
  },
  {
    "name": "GetGlobal2Float",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns a float that is shared between the server and all clients.",
    "arguments": [
      {
        "name": "index",
        "type": "string",
        "description": "The unique index to identify the global value with."
      },
      {
        "name": "default",
        "type": "number",
        "default": "0",
        "description": "The value to return if the global value is not set."
      }
    ],
    "returnValues": [
      {
        "type": "number",
        "description": "The global value, or the default if the global value is not set."
      }
    ]
  },
  {
    "name": "GetGlobal2Int",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns an integer that is shared between the server and all clients.\n\n<warning>The integer has a 32 bit limit. Use <page>Global.GetGlobalInt</page> for a higher limit</warning>",
    "arguments": [
      {
        "name": "index",
        "type": "string",
        "description": "The unique index to identify the global value with."
      },
      {
        "name": "default",
        "type": "number",
        "default": "0",
        "description": "The value to return if the global value is not set."
      }
    ],
    "returnValues": [
      {
        "type": "number",
        "description": "The global value, or the default if the global value is not set."
      }
    ]
  },
  {
    "name": "GetGlobal2String",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns a string that is shared between the server and all clients.",
    "arguments": [
      {
        "name": "index",
        "type": "string",
        "description": "The unique index to identify the global value with."
      },
      {
        "name": "default",
        "type": "string",
        "default": "",
        "description": "The value to return if the global value is not set."
      }
    ],
    "returnValues": [
      {
        "type": "string",
        "description": "The global value, or the default if the global value is not set."
      }
    ]
  },
  {
    "name": "GetGlobal2Var",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns a value that is shared between the server and all clients.",
    "arguments": [
      {
        "name": "index",
        "type": "string",
        "description": "The unique index to identify the global value with."
      },
      {
        "name": "default",
        "type": "any",
        "default": "nil",
        "description": "The value to return if the global value is not set."
      }
    ],
    "returnValues": [
      {
        "type": "any",
        "description": "The global value, or the default if the global value is not set."
      }
    ]
  },
  {
    "name": "GetGlobal2Vector",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns a vector that is shared between the server and all clients.",
    "arguments": [
      {
        "name": "Index",
        "type": "string",
        "description": "The unique index to identify the global value with."
      },
      {
        "name": "Default",
        "type": "Vector",
        "description": "The value to return if the global value is not set."
      }
    ],
    "returnValues": [
      {
        "type": "Vector",
        "description": "The global value, or the default if the global value is not set."
      }
    ]
  },
  {
    "name": "GetGlobalAngle",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns an angle that is shared between the server and all clients.",
    "arguments": [
      {
        "name": "index",
        "type": "string",
        "description": "The unique index to identify the global value with."
      },
      {
        "name": "default",
        "type": "Angle",
        "description": "The value to return if the global value is not set."
      }
    ],
    "returnValues": [
      {
        "type": "Angle",
        "description": "The global value, or default if the global is not set."
      }
    ]
  },
  {
    "name": "GetGlobalBool",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns a boolean that is shared between the server and all clients.",
    "arguments": [
      {
        "name": "index",
        "type": "string",
        "description": "The unique index to identify the global value with."
      },
      {
        "name": "default",
        "type": "boolean",
        "default": "false",
        "description": "The value to return if the global value is not set."
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "The global value, or the default if the global value is not set."
      }
    ]
  },
  {
    "name": "GetGlobalEntity",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns an entity that is shared between the server and all clients.",
    "arguments": [
      {
        "name": "index",
        "type": "string",
        "description": "The unique index to identify the global value with."
      },
      {
        "name": "default",
        "type": "Entity",
        "default": "NULL",
        "description": "The value to return if the global value is not set."
      }
    ],
    "returnValues": [
      {
        "type": "Entity",
        "description": "The global value, or the default if the global value is not set."
      }
    ]
  },
  {
    "name": "GetGlobalFloat",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns a float that is shared between the server and all clients.",
    "arguments": [
      {
        "name": "index",
        "type": "string",
        "description": "The unique index to identify the global value with."
      },
      {
        "name": "default",
        "type": "number",
        "default": "0",
        "description": "The value to return if the global value is not set."
      }
    ],
    "returnValues": [
      {
        "type": "number",
        "description": "The global value, or the default if the global value is not set."
      }
    ]
  },
  {
    "name": "GetGlobalInt",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns an integer that is shared between the server and all clients.\n\n<bug issue=\"3374\">This function will not round decimal values as it actually networks a float internally.</bug>",
    "arguments": [
      {
        "name": "index",
        "type": "string",
        "description": "The unique index to identify the global value with."
      },
      {
        "name": "default",
        "type": "number",
        "default": "0",
        "description": "The value to return if the global value is not set."
      }
    ],
    "returnValues": [
      {
        "type": "number",
        "description": "The global value, or the default if the global value is not set."
      }
    ]
  },
  {
    "name": "GetGlobalString",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns a string that is shared between the server and all clients.",
    "arguments": [
      {
        "name": "index",
        "type": "string",
        "description": "The unique index to identify the global value with."
      },
      {
        "name": "default",
        "type": "string",
        "default": "",
        "description": "The value to return if the global value is not set."
      }
    ],
    "returnValues": [
      {
        "type": "string",
        "description": "The global value, or the default if the global value is not set."
      }
    ]
  },
  {
    "name": "GetGlobalVar",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns a value that is shared between the server and all clients.",
    "arguments": [
      {
        "name": "index",
        "type": "string",
        "description": "The unique index to identify the global value with."
      },
      {
        "name": "default",
        "type": "any",
        "default": "nil",
        "description": "The value to return if the global value is not set."
      }
    ],
    "returnValues": [
      {
        "type": "any",
        "description": "The global value, or the default if the global value is not set."
      }
    ]
  },
  {
    "name": "GetGlobalVector",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns a vector that is shared between the server and all clients.",
    "arguments": [
      {
        "name": "Index",
        "type": "string",
        "description": "The unique index to identify the global value with."
      },
      {
        "name": "Default",
        "type": "Vector",
        "description": "The value to return if the global value is not set."
      }
    ],
    "returnValues": [
      {
        "type": "Vector",
        "description": "The global value, or the default if the global value is not set."
      }
    ]
  },
  {
    "name": "GetHostName",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns the name of the current server.",
    "returnValues": [
      {
        "type": "string",
        "description": "The name of the server."
      }
    ]
  },
  {
    "name": "GetHUDPanel",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Returns the panel that is used as a wrapper for the HUD. If you want your panel to be hidden when the main menu is opened, parent it to this. Child panels will also have their controls disabled.\n\nSee also <page>vgui.GetWorldPanel</page>",
    "returnValues": [
      {
        "type": "Panel",
        "description": "The HUD panel"
      }
    ]
  },
  {
    "name": "GetLoadPanel",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Returns the loading screen panel and creates it if it doesn't exist.",
    "returnValues": [
      {
        "type": "Panel",
        "description": "The loading screen panel"
      }
    ],
    "source": {
      "file": "lua/menu/loading.lua",
      "lineStart": 224
    }
  },
  {
    "name": "GetLoadStatus",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Returns the current status of the server join progress.",
    "returnValues": [
      {
        "type": "string",
        "description": "The current status"
      }
    ]
  },
  {
    "name": "GetMapList",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Returns a table with the names of all maps and categories that you have on your client.",
    "returnValues": [
      {
        "type": "table",
        "description": "Table of map names and categories."
      }
    ],
    "source": {
      "file": "lua/menu/getmaps.lua",
      "lineStart": 356,
      "lineEnd": 358
    }
  },
  {
    "name": "getmetatable",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns the metatable of an object. This function obeys the metatable's __metatable field, and will return that field if the metatable has it set.\n\nUse <page>debug.getmetatable</page> if you want the true metatable of the object.\n\nIf you want to modify the metatable, check out <page>Global.FindMetaTable</page>",
    "arguments": [
      {
        "name": "object",
        "type": "any",
        "description": "The value to return the metatable of."
      }
    ],
    "returnValues": [
      {
        "type": "any",
        "description": "The metatable of the value. This is not always a table."
      }
    ]
  },
  {
    "name": "GetOverlayPanel",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Returns the menu overlay panel, a container for panels like the error panel created in <page>GM:OnLuaError</page>.",
    "returnValues": [
      {
        "type": "Panel",
        "description": "The overlay panel"
      }
    ]
  },
  {
    "name": "GetPlayerList",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "<internal></internal>\nUpdates the PlayerList for the Currently Viewed Server. Internally uses <page>serverlist.PlayerList</page> to retrieve the PlayerList.",
    "arguments": [
      {
        "name": "serverip",
        "type": "string",
        "description": "The ServerIP to retrieve the PlayerList from."
      }
    ],
    "source": {
      "file": "lua/menu/mainmenu.lua",
      "lineStart": 189,
      "lineEnd": 198
    }
  },
  {
    "name": "GetPredictionPlayer",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns the player whose movement commands are currently being processed. The player this returns can safely have <page>Player:GetCurrentCommand</page>() called on them. See <page>Prediction</page>.",
    "returnValues": [
      {
        "type": "Player",
        "description": "The player currently being predicted, or NULL if no command processing is currently being done."
      }
    ]
  },
  {
    "name": "GetRenderTarget",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Creates or gets the rendertarget with the given name.\n\nSee <page>Global.GetRenderTargetEx</page> for an advanced version of this function with more options.\n\n<bug issue=\"2885\">This crashes when used on a cubemap texture.</bug>\n<warning>Rendertargets are not garbage-collected, which means they will remain in memory until you disconnect. So make sure to avoid creating new ones unecessarily and re-use as many of your existing rendertargets as possible to avoid filling up all your memory.</warning>\n<warning>Drawing rendertargets on themself can produce odd and unexpected results.</warning>\n<note>\nCalling this function is equivalent to\n```lua\nGetRenderTargetEx(name,\nwidth, height,\nRT_SIZE_NO_CHANGE,\nMATERIAL_RT_DEPTH_SEPARATE,\nbit.bor(2, 256),\n0,\nIMAGE_FORMAT_BGRA8888\n)\n```\n</note>",
    "arguments": [
      {
        "name": "name",
        "type": "string",
        "description": "The internal name of the render target."
      },
      {
        "name": "width",
        "type": "number",
        "description": "The width of the render target, must be power of 2. If not set to PO2, the size will be automatically converted to the nearest PO2 size."
      },
      {
        "name": "height",
        "type": "number",
        "description": "The height of the render target, must be power of 2. If not set to PO2, the size will be automatically converted to the nearest PO2 size."
      }
    ],
    "returnValues": [
      {
        "type": "ITexture",
        "description": "The render target"
      }
    ]
  },
  {
    "name": "GetRenderTargetEx",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Gets (or creates if it does not exist) the rendertarget with the given name, this function allows to adjust the creation of a rendertarget more than <page>Global.GetRenderTarget</page>.\n\nSee also <page>render.PushRenderTarget</page> and <page>render.SetRenderTarget</page>.",
    "arguments": [
      {
        "name": "name",
        "type": "string",
        "description": "The internal name of the render target.\n\n<warning>The name is treated like a path and gets its extension discarded.<br>\"name.1\" and \"name.2\" are considered the same name and will result in the same render target being reused.</warning>"
      },
      {
        "name": "width",
        "type": "number",
        "description": "The width of the render target, must be power of 2."
      },
      {
        "name": "height",
        "type": "number",
        "description": "The height of the render target, must be power of 2."
      },
      {
        "name": "sizeMode",
        "type": "number",
        "description": "Bitflag that influences the sizing of the render target, see <page>Enums/RT_SIZE</page>."
      },
      {
        "name": "depthMode",
        "type": "number",
        "description": "Bitflag that determines the depth buffer usage of the render target <page>Enums/MATERIAL_RT_DEPTH</page>.\n\n<warning>PNG's may not render to non MATERIAL_RT_DEPTH_NONE RenderTargets</warning>"
      },
      {
        "name": "textureFlags",
        "type": "number",
        "description": "Bitflag that configurates the texture, see <page>Enums/TEXTUREFLAGS</page>.\n\nList of flags can also be found on the Valve's Developer Wiki:\nhttps://developer.valvesoftware.com/wiki/Valve_Texture_Format"
      },
      {
        "name": "rtFlags",
        "type": "number",
        "description": "Flags that controll the HDR behaviour of the render target, see <page>Enums/CREATERENDERTARGETFLAGS</page>."
      },
      {
        "name": "imageFormat",
        "type": "number",
        "description": "Image format, see <page>Enums/IMAGE_FORMAT</page>.\n<note>Some additional image formats are accepted, but don't have enums. See [VTF Enumerations.](https://developer.valvesoftware.com/wiki/Valve_Texture_Format#VTF_enumerations)</note>"
      }
    ],
    "returnValues": [
      {
        "type": "ITexture",
        "description": "The new render target."
      }
    ]
  },
  {
    "name": "GetSaveFileDetails",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Retrieves data about the save with the specified filename. Similar to <page>Global.GetDemoFileDetails</page>.",
    "arguments": [
      {
        "name": "filename",
        "type": "string",
        "description": "The file name of the save."
      }
    ],
    "returnValues": [
      {
        "type": "table",
        "description": "Save data."
      }
    ]
  },
  {
    "name": "GetServers",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "<internal></internal>\nStarts Searching for Servers in the given Category. Can be stopped with <page>Global.DoStopServers</page>.\nInternally uses <page>serverlist.Query</page> to search for Servers.",
    "arguments": [
      {
        "name": "category",
        "type": "string",
        "description": "The Category to start searching the Servers in. **Working Values: internet, favorite, history, lan**"
      },
      {
        "name": "id",
        "type": "number",
        "description": "Some ID. can be a random number?"
      }
    ],
    "source": {
      "file": "lua/menu/mainmenu.lua",
      "lineStart": 299,
      "lineEnd": 365
    }
  },
  {
    "name": "GetTimeoutInfo",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Returns if the client is timing out, and time since last ping from the server. Similar to the server side <page>Player:IsTimingOut</page>.",
    "returnValues": [
      {
        "type": "boolean",
        "description": "Is timing out?"
      },
      {
        "type": "number",
        "description": "Get time since last pinged received."
      }
    ]
  },
  {
    "name": "GetViewEntity",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Returns the entity the client is using to see from (such as the player itself, the camera, or another entity).",
    "returnValues": [
      {
        "type": "Entity",
        "description": "The view entity."
      }
    ]
  },
  {
    "name": "GMOD_OpenURLNoOverlay",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "<internal></internal>\nOpens the given URL in a <page>HTML</page> panel.",
    "arguments": [
      {
        "name": "url",
        "type": "string",
        "description": "The url to open."
      }
    ],
    "source": {
      "file": "lua/menu/openurl.lua",
      "lineStart": 34,
      "lineEnd": 43
    }
  },
  {
    "name": "HSLToColor",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Converts a color from [HSL color space](https://en.wikipedia.org/wiki/HSL_and_HSV) into RGB color space and returns a <page>Color</page>.\n\n<bug issue=\"2407\">The returned color will not have the color metatable.</bug>",
    "arguments": [
      {
        "name": "hue",
        "type": "number",
        "description": "The hue in degrees from 0-360."
      },
      {
        "name": "saturation",
        "type": "number",
        "description": "The saturation from 0-1."
      },
      {
        "name": "value",
        "type": "number",
        "description": "The lightness from 0-1."
      }
    ],
    "returnValues": [
      {
        "type": "table",
        "description": "The <page>Color</page> created from the HSL color space."
      }
    ]
  },
  {
    "name": "HSVToColor",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Converts a color from [HSV color space](https://en.wikipedia.org/wiki/HSL_and_HSV) into RGB color space and returns a <page>Color</page>.\n\n<bug issue=\"2407\">The returned color will not have the color metatable.</bug>",
    "arguments": [
      {
        "name": "hue",
        "type": "number",
        "description": "The hue in degrees from 0-360."
      },
      {
        "name": "saturation",
        "type": "number",
        "description": "The saturation from 0-1."
      },
      {
        "name": "value",
        "type": "number",
        "description": "The value from 0-1."
      }
    ],
    "returnValues": [
      {
        "type": "table",
        "description": "The <page>Color</page> created from the HSV color space."
      }
    ]
  },
  {
    "name": "HTTP",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Launches an asynchronous http request with the given parameters.\n\n<bug issue=\"2232\">This cannot send or receive multiple headers with the same name.</bug>\n<note>HTTP-requests that respond with a large body may return an `unsuccessful` error. Try using the [Range](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range) header to download the file in chunks.</note>\n<note>\nHTTP-requests to destinations on private networks (such as `192.168.0.1`, or `127.0.0.1`) won't work.\n<br>\nTo enable HTTP-requests to destinations on private networks use <page>Command Line Parameters</page> `-allowlocalhttp`. (Dedicated servers only)\n</note>",
    "arguments": [
      {
        "name": "parameters",
        "type": "table",
        "description": "The request parameters. See <page>Structures/HTTPRequest</page>."
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "`true` if we made a request, `nil` if we failed."
      }
    ]
  },
  {
    "name": "include",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Executes a Lua script.\n\nThis function will try to load local client file if `sv_allowcslua` is **1**.\n\n<warning>The file you are attempting to include **MUST NOT** be empty or the include will fail. Files over a certain size (64KB compressed) may fail clientside as well.\n\nIf the file you are including is clientside or shared, it **must** be <page>Global.AddCSLuaFile</page>'d or this function will error saying the file doesn't exist.</warning>",
    "arguments": [
      {
        "name": "fileName",
        "type": "string",
        "description": "The name of the script to be executed. The path must be either relative to the current file, or be an absolute path (relative to and excluding the **lua/** folder).\n\nAddon files (.gma files) and dedicated servers clientside do not support relative parent folders (`..` notation).\n\nAbsolute paths for gamemode files must include `<gamemode_folder_name>/gamemode/`.\n\n<note>\nPlease make sure your file names are unique, the filesystem is shared across all addons, so a file named `lua/config.lua` in your addon may be overwritten by the same file in another addon.</note></gamemode_folder_name>"
      }
    ],
    "returnValues": [
      {
        "type": "vararg",
        "description": "Anything that the executed Lua script returns."
      }
    ]
  },
  {
    "name": "IncludeCS",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "<deprecated>To send the target file to the client simply call AddCSLuaFile() in the target file itself.</deprecated>\n\nThis function works exactly the same as <page>Global.include</page> both clientside and serverside.\n\nThe only difference is that on the serverside it also calls <page>Global.AddCSLuaFile</page> on the filename, so that it gets sent to the client.",
    "arguments": [
      {
        "name": "filename",
        "type": "string",
        "description": "The filename of the Lua file you want to include."
      }
    ],
    "returnValues": [
      {
        "type": "vararg",
        "description": "Anything that the executed Lua script returns."
      }
    ],
    "source": {
      "file": "lua/includes/util.lua",
      "lineStart": 162,
      "lineEnd": 168
    }
  },
  {
    "name": "ipairs",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns a [Stateless Iterator](https://www.lua.org/pil/7.3.html) for a [Generic For Loops](https://www.lua.org/pil/4.3.5.html), to return ordered key-value pairs from a table.\n\nThis will only iterate though **numerical** keys, and these must also be **sequential**; starting at 1 with no gaps.\n\nFor unordered pairs, see <page>Global.pairs</page>.\n\nFor pairs sorted by key in alphabetical order, see <page>Global.SortedPairs</page>.",
    "arguments": [
      {
        "name": "tab",
        "type": "table",
        "description": "The table to iterate over."
      }
    ],
    "returnValues": [
      {
        "type": "function",
        "description": "The iterator function."
      },
      {
        "type": "table",
        "description": "The table being iterated over."
      },
      {
        "type": "number",
        "description": "The origin index **=0**."
      }
    ]
  },
  {
    "name": "isangle",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns if the passed object is an <page>Angle</page>.",
    "arguments": [
      {
        "name": "variable",
        "type": "any",
        "description": "The variable to perform the type check for."
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "True if the variable is an <page>Angle</page>."
      }
    ]
  },
  {
    "name": "isbool",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns if the passed object is a <page>boolean</page>.",
    "arguments": [
      {
        "name": "variable",
        "type": "any",
        "description": "The variable to perform the type check for."
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "True if the variable is a <page>boolean</page>."
      }
    ]
  },
  {
    "name": "IsColor",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns whether the given object does or doesn't have a `metatable` of a color.\n\n<bug issue=\"2407\">Engine functions (i.e. those not written in plain Lua) that return color objects do not currently set the color metatable and this function will return false if you use it on them.</bug>",
    "arguments": [
      {
        "name": "Object",
        "type": "any",
        "description": "The object to be tested"
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "Whether the given object is a color or not"
      }
    ],
    "source": {
      "file": "lua/includes/util/color.lua",
      "lineStart": 30,
      "lineEnd": 37
    }
  },
  {
    "name": "IsConCommandBlocked",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Determines whether or not the provided console command will be blocked if it's ran through Lua functions, such as <page>Global.RunConsoleCommand</page> or <page>Player:ConCommand</page>.\n\nFor more info on blocked console commands, check out <page text=\"Blocked ConCommands\">Blocked_ConCommands</page>.\n<internal></internal>",
    "arguments": [
      {
        "name": "name",
        "type": "string",
        "description": "The console command to test."
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "Whether the command will be blocked."
      }
    ]
  },
  {
    "name": "IsEnemyEntityName",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns if the given NPC class name is an enemy. Returns `true` if the entity name is one of the following:\n* `monster_alien_grunt`\n* `monster_nihilanth`\n* `monster_tentacle`\n* `monster_alien_slave`\n* `monster_bigmomma`\n* `monster_bullchicken`\n* `monster_gargantua`\n* `monster_human_assassin`\n* `monster_babycrab`\n* `monster_human_grunt`\n* `monster_cockroach`\n* `monster_houndeye`\n* `monster_zombie`\n* `monster_headcrab`\n* `monster_alien_controller`\n* `monster_turret`\n* `monster_miniturret`\n* `monster_sentry`\n* `npc_antlion`\n* `npc_antlionguard`\n* `npc_antlionguardian`\n* `npc_barnacle`\n* `npc_breen`\n* `npc_clawscanner`\n* `npc_combine_s`\n* `npc_cscanner`\n* `npc_fastzombie`\n* `npc_fastzombie_torso`\n* `npc_headcrab`\n* `npc_headcrab_fast`\n* `npc_headcrab_poison`\n* `npc_hunter`\n* `npc_metropolice`\n* `npc_manhack`\n* `npc_poisonzombie`\n* `npc_strider`\n* `npc_stalker`\n* `npc_zombie`\n* `npc_zombie_torso`\n* `npc_zombine`\n* `npc_combine_camera`\n* `npc_turret_ceiling`\n* `npc_combinedropship`\n* `npc_combinegunship`\n* `npc_helicopter`\n* `npc_turret_floor`\n* `npc_antlion_worker`\n* `npc_headcrab_black`",
    "arguments": [
      {
        "name": "className",
        "type": "string",
        "description": "Class name of the entity to check."
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "Is an enemy?"
      }
    ],
    "source": {
      "file": "lua/includes/util.lua",
      "lineStart": 334,
      "lineEnd": 354
    }
  },
  {
    "name": "isentity",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns if the passed object is an <page>Entity</page>.",
    "arguments": [
      {
        "name": "variable",
        "type": "any",
        "description": "The variable to check."
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "True if the variable is an <page>Entity</page>."
      }
    ]
  },
  {
    "name": "IsFirstTimePredicted",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns if this is the first time this hook was predicted.\n\nThis is useful for one-time logic in your SWEPs PrimaryAttack, SecondaryAttack and Reload and other  (to prevent those hooks from being called rapidly in succession). It's also useful in a Move hook for when the client predicts movement.\n\nVisit <page>Prediction</page> for more information about this behavior.\n\n<note>This is already used internally for <page>Entity:EmitSound</page>, <page>Weapon:SendWeaponAnim</page> and <page>Entity:FireBullets</page>, but NOT in  <page>util.Effect</page>.</note>",
    "returnValues": [
      {
        "type": "boolean",
        "description": "Whether or not this is the first time being predicted."
      }
    ]
  },
  {
    "name": "IsFriendEntityName",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns if the given NPC class name is a friend. Returns `true` if the entity name is one of the following:\n* `monster_scientist`\n* `monster_barney`\n* `npc_alyx`\n* `npc_barney`\n* `npc_citizen`\n* `npc_dog`\n* `npc_eli`\n* `npc_fisherman`\n* `npc_gman`\n* `npc_kleiner`\n* `npc_magnusson`\n* `npc_monk`\n* `npc_mossman`\n* `npc_odessa`\n* `npc_vortigaunt`",
    "arguments": [
      {
        "name": "className",
        "type": "string",
        "description": "Class name of the entity to check"
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "Is a friend"
      }
    ],
    "source": {
      "file": "lua/includes/util.lua",
      "lineStart": 359,
      "lineEnd": 371
    }
  },
  {
    "name": "isfunction",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns if the passed object is a <page>function</page>.",
    "arguments": [
      {
        "name": "variable",
        "type": "any",
        "description": "The variable to perform the type check for."
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "True if the variable is a <page>function</page>."
      }
    ]
  },
  {
    "name": "IsInGame",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Returns true if the client is currently playing either a singleplayer or multiplayer game.",
    "returnValues": [
      {
        "type": "boolean",
        "description": "True if we are in a game."
      }
    ]
  },
  {
    "name": "IsInLoading",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Returns true when the loading panel is active.",
    "returnValues": [
      {
        "type": "boolean",
        "description": "True if loading panel is active."
      }
    ],
    "source": {
      "file": "lua/menu/loading.lua",
      "lineStart": 222,
      "lineEnd": 230
    }
  },
  {
    "name": "ismatrix",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns whether the passed object is a <page>VMatrix</page>.",
    "arguments": [
      {
        "name": "variable",
        "type": "any",
        "description": "The variable to perform the type check for."
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "True if the variable is a <page>VMatrix</page>."
      }
    ]
  },
  {
    "name": "IsMounted",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Checks whether or not a game is currently mounted. Uses data given by <page>engine.GetGames</page>.",
    "arguments": [
      {
        "name": "game",
        "type": "string",
        "description": "The game string/app ID to check."
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "True if the game is mounted."
      }
    ],
    "source": {
      "file": "lua/includes/util.lua",
      "lineStart": 378,
      "lineEnd": 393
    }
  },
  {
    "name": "isnumber",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns if the passed object is a <page>number</page>.",
    "arguments": [
      {
        "name": "variable",
        "type": "any",
        "description": "The variable to perform the type check for."
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "True if the variable is a <page>number</page>."
      }
    ]
  },
  {
    "name": "ispanel",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns if the passed object is a <page>Panel</page>.",
    "arguments": [
      {
        "name": "variable",
        "type": "any",
        "description": "The variable to perform the type check for."
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "True if the variable is a <page>Panel</page>."
      }
    ]
  },
  {
    "name": "IsServerBlacklisted",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Checks if the given server data is blacklisted or not.",
    "arguments": [
      {
        "name": "address",
        "type": "string",
        "description": "Server ip. can end with *"
      },
      {
        "name": "hostname",
        "type": "string",
        "description": "Server name"
      },
      {
        "name": "description",
        "type": "string",
        "description": "description to check"
      },
      {
        "name": "gm",
        "type": "string",
        "description": "Gamemode name"
      },
      {
        "name": "map",
        "type": "string",
        "description": "Map name"
      }
    ],
    "returnValues": [
      {
        "type": "string",
        "name": "result",
        "description": "Returns the reason why the server is blacklisted or nil if the server is not blacklisted."
      }
    ],
    "source": {
      "file": "lua/menu/mainmenu.lua",
      "lineStart": 245,
      "lineEnd": 294
    }
  },
  {
    "name": "isstring",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns if the passed object is a <page>string</page>.",
    "arguments": [
      {
        "name": "variable",
        "type": "any",
        "description": "The variable to perform the type check for."
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "True if the variable is a <page>string</page>."
      }
    ]
  },
  {
    "name": "istable",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns if the passed object is a <page>table</page>.\n<note>Will return TRUE for variables of type <page>Color</page></note>",
    "arguments": [
      {
        "name": "variable",
        "type": "any",
        "description": "The variable to perform the type check for."
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "True if the variable is a <page>table</page>."
      }
    ]
  },
  {
    "name": "IsTableOfEntitiesValid",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns whether or not every element within a table is a valid entity",
    "arguments": [
      {
        "name": "table",
        "type": "table",
        "description": "Table containing entities to check"
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "All entities valid"
      }
    ],
    "source": {
      "file": "lua/includes/util.lua",
      "lineStart": 36,
      "lineEnd": 46
    }
  },
  {
    "name": "IsUselessModel",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns whether or not a model is useless by checking that the file path is that of a proper model.\n\nIf the string \".mdl\" is not found in the model name, the function will return true.\n\nThe function will also return true if any of the following strings are found in the given model name:\n* \"_gesture\"\n* \"_anim\"\n* \"_gst\"\n* \"_pst\"\n* \"_shd\"\n* \"_ss\"\n* \"_posture\"\n* \"_anm\"\n* \"ghostanim\"\n* \"_paths\"\n* \"_shared\"\n* \"anim_\"\n* \"gestures_\"\n* \"shared_ragdoll_\"",
    "arguments": [
      {
        "name": "modelName",
        "type": "string",
        "description": "The model name to be checked"
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "Whether or not the model is useless"
      }
    ],
    "source": {
      "file": "lua/includes/util.lua",
      "lineStart": 286,
      "lineEnd": 300
    }
  },
  {
    "name": "IsValid",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns whether an object is valid or not. (Such as <page text=\"entities\">Entity</page>, <page>Panel</page>s, custom <page>table</page> objects and more).\n\nChecks that an object is not <page>nil</page>, has an `IsValid` method and if this method returns `true`. If the object has no `IsValid` method, it will return `false`.\n\n<note>Due to vehicles being technically valid the moment they're spawned, also use <page>Vehicle:IsValidVehicle</page> to make sure they're fully initialized.</note>",
    "arguments": [
      {
        "name": "toBeValidated",
        "type": "any",
        "description": "The table or object to be validated."
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "True if the object is valid."
      }
    ],
    "source": {
      "file": "lua/includes/util.lua",
      "lineStart": 225,
      "lineEnd": 234
    }
  },
  {
    "name": "isvector",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns if the passed object is a <page>Vector</page>.",
    "arguments": [
      {
        "name": "variable",
        "type": "any",
        "description": "The variable to perform the type check for."
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "True if the variable is a <page>Vector</page>."
      }
    ]
  },
  {
    "name": "JoinServer",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Joins the server with the specified IP.",
    "arguments": [
      {
        "name": "IP",
        "type": "string",
        "description": "The IP of the server to join"
      }
    ]
  },
  {
    "name": "JS_Language",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Adds javascript function 'language.Update' to an HTML panel as a method to call Lua's <page>language.GetPhrase</page> function.",
    "arguments": [
      {
        "name": "htmlPanel",
        "type": "Panel",
        "description": "Panel to add javascript function 'language.Update' to."
      }
    ],
    "source": {
      "file": "lua/includes/util/javascript_util.lua",
      "lineStart": 2,
      "lineEnd": 9
    }
  },
  {
    "name": "JS_Utility",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Adds javascript function 'util.MotionSensorAvailable' to an HTML panel as a method to call Lua's <page>motionsensor.IsAvailable</page> function.",
    "arguments": [
      {
        "name": "htmlPanel",
        "type": "Panel",
        "description": "Panel to add javascript function 'util.MotionSensorAvailable' to."
      }
    ],
    "source": {
      "file": "lua/includes/util/javascript_util.lua",
      "lineStart": 11,
      "lineEnd": 17
    }
  },
  {
    "name": "JS_Workshop",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Adds workshop related javascript functions to an HTML panel, used by the \"Dupes\" and \"Saves\" tabs in the spawnmenu.",
    "arguments": [
      {
        "name": "htmlPanel",
        "type": "Panel",
        "description": "Panel to add javascript functions to."
      }
    ],
    "source": {
      "file": "lua/includes/util/javascript_util.lua",
      "lineStart": 19,
      "lineEnd": 39
    }
  },
  {
    "name": "Label",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Convenience function that creates a <page>DLabel</page>, sets the text, and returns it",
    "arguments": [
      {
        "name": "text",
        "type": "string",
        "description": "The string to set the label's text to"
      },
      {
        "name": "parent",
        "type": "Panel",
        "default": "nil",
        "description": "Optional. The panel to parent the DLabel to"
      }
    ],
    "returnValues": [
      {
        "type": "Panel",
        "description": "The created <page>DLabel</page>"
      }
    ],
    "source": {
      "file": "lua/vgui/dlabel.lua",
      "lineStart": 291,
      "lineEnd": 298
    }
  },
  {
    "name": "LanguageChanged",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Callback function for when the client's language changes. Called by the engine.",
    "arguments": [
      {
        "name": "lang",
        "type": "string",
        "description": "The new language code."
      }
    ],
    "source": {
      "file": "lua/menu/mainmenu.lua",
      "lineStart": 387,
      "lineEnd": 394
    }
  },
  {
    "name": "Lerp",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Performs a linear interpolation from the start number to the end number.\n\nThis function provides a very efficient and easy way to smooth out movements.\n\nSee also <page>math.ease</page> for functions that allow to have non linear animations using linear interpolation.\n\n<note>This function is not meant to be used with constant value in the first argument if you're dealing with animation! Use a value that changes over time. See example for **proper** usage of Lerp for animations.</note>",
    "arguments": [
      {
        "name": "t",
        "type": "number",
        "description": "The fraction for finding the result. This number is clamped between 0 and 1. Shouldn't be a constant."
      },
      {
        "name": "from",
        "type": "number",
        "description": "The starting number. The result will be equal to this if delta is 0."
      },
      {
        "name": "to",
        "type": "number",
        "description": "The ending number. The result will be equal to this if delta is 1."
      }
    ],
    "returnValues": [
      {
        "type": "number",
        "description": "The result of the linear interpolation, `from + (to - from) * t`."
      }
    ],
    "source": {
      "file": "lua/includes/util.lua",
      "lineStart": 261,
      "lineEnd": 268
    }
  },
  {
    "name": "LerpAngle",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns point between first and second angle using given fraction and linear interpolation\n<note>This function is not meant to be used with constant value in the first argument, if you're dealing with animation! Use a value that changes over time</note>",
    "arguments": [
      {
        "name": "ratio",
        "type": "number",
        "description": "Ratio of progress through values"
      },
      {
        "name": "angleStart",
        "type": "Angle",
        "description": "Angle to begin from"
      },
      {
        "name": "angleEnd",
        "type": "Angle",
        "description": "Angle to end at"
      }
    ],
    "returnValues": [
      {
        "type": "Angle",
        "description": "angle"
      }
    ]
  },
  {
    "name": "LerpVector",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Linear interpolation between two vectors. It is commonly used to smooth movement between two vectors\n<note>This function is not meant to be used with constant value in the first argument, if you're dealing with animation! Use a value that changes over time</note>",
    "arguments": [
      {
        "name": "fraction",
        "type": "number",
        "description": "Fraction ranging from 0 to 1"
      },
      {
        "name": "from",
        "type": "Vector",
        "description": "The initial Vector"
      },
      {
        "name": "to",
        "type": "Vector",
        "description": "The desired Vector"
      }
    ],
    "returnValues": [
      {
        "type": "Vector",
        "description": "The lerped vector."
      }
    ]
  },
  {
    "name": "ListAddonPresets",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "<internal></internal>\nLoads all Addon Presets and updates the Preset list.",
    "source": {
      "file": "lua/menu/mainmenu.lua",
      "lineStart": 471,
      "lineEnd": 475
    }
  },
  {
    "name": "LoadAddonPresets",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Returns the contents of `addonpresets.txt` located in the `garrysmod/settings` folder. By default, this file stores your addon presets as JSON.\n\nYou can use <page>Global.SaveAddonPresets</page> to modify this file.",
    "returnValues": [
      {
        "type": "string",
        "name": "JSON",
        "description": "The contents of the file."
      }
    ]
  },
  {
    "name": "LoadLastMap",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "<internal></internal>This function is used to get the last map and category to which the map belongs from the cookie saved with <page>Global.SaveLastMap</page>.",
    "source": {
      "file": "lua/menu/getmaps.lua",
      "lineStart": 347
    }
  },
  {
    "name": "LoadNewsList",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "<internal></internal>\nUpdates the News List",
    "source": {
      "file": "lua/menu/mainmenu.lua",
      "lineStart": 232,
      "lineEnd": 239
    }
  },
  {
    "name": "LoadPresets",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Loads all preset settings for the <page>presets</page> and returns them in a table",
    "returnValues": [
      {
        "type": "table",
        "description": "Preset data"
      }
    ]
  },
  {
    "name": "Localize",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Returns a localisation for the given token, if none is found it will return the default (second) parameter.",
    "arguments": [
      {
        "name": "localisationToken",
        "type": "string",
        "description": "The token to find a translation for."
      },
      {
        "name": "default",
        "type": "string",
        "description": "The default value to be returned if no translation was found."
      }
    ]
  },
  {
    "name": "LocalPlayer",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Returns the player object of the current client.\n\n<note>LocalPlayer() will return NULL until all entities have been initialized. See <page>GM:InitPostEntity</page>.</note>",
    "returnValues": [
      {
        "type": "Player",
        "description": "The player object representing the client."
      }
    ]
  },
  {
    "name": "LocalToWorld",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Translates the specified position and angle from the specified local coordinate system into worldspace coordinates.\n\nIf you're working with an entity's local vectors, use <page>Entity:LocalToWorld</page> and/or <page>Entity:LocalToWorldAngles</page> instead.\n\nSee also: <page>Global.WorldToLocal</page>, the reverse of this function.",
    "arguments": [
      {
        "name": "localPos",
        "type": "Vector",
        "description": "The position vector in the source coordinate system, that should be translated to world coordinates"
      },
      {
        "name": "localAng",
        "type": "Angle",
        "description": "The angle in the source coordinate system, that should be converted to a world angle. If you don't need to convert an angle, you can supply an arbitrary valid angle (e.g. <page>Global.Angle</page>())."
      },
      {
        "name": "originPos",
        "type": "Vector",
        "description": "The origin point of the source coordinate system, in world coordinates"
      },
      {
        "name": "originAngle",
        "type": "Angle",
        "description": "The angles of the source coordinate system, as a world angle"
      }
    ],
    "returnValues": [
      {
        "type": "Vector",
        "description": "The world position of the supplied local position."
      },
      {
        "type": "Angle",
        "description": "The world angles of the supplied local angle."
      }
    ]
  },
  {
    "name": "Material",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Either returns the material with the given name, or loads the material interpreting the first argument as the path.\n\n## .png, .jpg and other image formats\n\nThis function is capable to loading `.png` or `.jpg` images, generating a texture and material for them on the fly.\n\nPNG, JPEG, GIF, and TGA files will work, but only if they have the `.png` or `.jpg` file extensions (even if the actual image format doesn't match the file extension)\n\nUse <page>Global.AddonMaterial</page> for image files with the `.cache` file extension. (from <page>steamworks.Download</page>)\n\nWhile images are no longer scaled to Power of 2 (sizes of 8, 16, 32, 64, 128, etc.) sizes since February 2019, it is still a good practice for things like icons, etc.\n\n<warning>Server-side, this function can consistently return an invalid material (with '__error') depending on the file type loaded.</warning>\n\n<warning>This function is very expensive when used in rendering hooks or in operations requiring very frequent calls. It is a good idea to cache the material in a variable (like in the examples).</warning>",
    "arguments": [
      {
        "name": "materialName",
        "type": "string",
        "description": "The material name or path relative to the `materials/` folder.\nPaths outside the `materials/` folder like `data/MyImage.jpg` or `maps/thumb/gm_construct.png` will also work for when generating materials.\n\nTo retrieve a Lua material created with <page>Global.CreateMaterial</page>, just prepend a `!` to the material name."
      },
      {
        "name": "pngParameters",
        "type": "string",
        "default": "nil",
        "description": "A string containing space separated keywords which will be used to add material parameters.\n\nSee <page>Material Parameters</page> for more information.\n\n<note>This feature only works when importing `.png` or `.jpg` image files.</note>"
      }
    ],
    "returnValues": [
      {
        "type": "IMaterial",
        "description": "Generated material."
      },
      {
        "type": "number",
        "description": "How long it took for the function to run."
      }
    ],
    "source": {
      "file": "lua/includes/util.lua",
      "lineStart": 15,
      "lineEnd": 31
    }
  },
  {
    "name": "Matrix",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns a <page>VMatrix</page> object, a 4x4 matrix.",
    "arguments": [
      {
        "name": "data",
        "type": "table",
        "default": "{{1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 1}}",
        "description": "Initial data to initialize the matrix with. Leave empty to initialize an identity matrix. See examples for usage.\n\nCan be a <page>VMatrix</page> to copy its data."
      }
    ],
    "returnValues": [
      {
        "type": "VMatrix",
        "description": "New matrix."
      }
    ]
  },
  {
    "name": "MenuGetAddonData",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "<internal>Internally uses <page>steamworks.FileInfo</page> to fetch the data.</internal>\nThis function retrieves the Addon data and passes it onto JS(JavaScript)",
    "arguments": [
      {
        "name": "workshopItemID",
        "type": "string",
        "description": "The ID of Steam Workshop item."
      }
    ],
    "source": {
      "file": "lua/menu/mainmenu.lua",
      "lineStart": 422,
      "lineEnd": 427
    }
  },
  {
    "name": "Mesh",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Returns a new static mesh object.",
    "arguments": [
      {
        "name": "mat",
        "type": "IMaterial",
        "default": "nil",
        "description": "The material the mesh is intended to be rendered with. It's merely a hint that tells that mesh what vertex format it should use."
      }
    ],
    "returnValues": [
      {
        "type": "IMesh",
        "description": "The created object."
      }
    ]
  },
  {
    "name": "Model",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Runs <page>util.PrecacheModel</page> and returns the string.",
    "arguments": [
      {
        "name": "model",
        "type": "string",
        "description": "The model to precache."
      }
    ],
    "returnValues": [
      {
        "type": "string",
        "description": "The same string entered as an argument."
      }
    ],
    "source": {
      "file": "lua/includes/util.lua",
      "lineStart": 135,
      "lineEnd": 138
    }
  },
  {
    "name": "module",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Creates a table with the specified module name and sets the function environment for said table.\n\nAny passed loaders are called with the table as an argument. An example of this is <page>package.seeall</page>.",
    "arguments": [
      {
        "name": "name",
        "type": "string",
        "description": "The name of the module. This will be used to access the module table in the runtime environment."
      },
      {
        "name": "loaders",
        "type": "vararg",
        "description": "Calls each function passed with the new table as an argument."
      }
    ]
  },
  {
    "name": "Msg",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Writes every given argument to the console.\n\nAutomatically attempts to convert each argument to a string. (See <page>Global.tostring</page>)\n\nUnlike <page>Global.print</page>, arguments are not separated by anything. They are simply concatenated.\n\nAdditionally, a newline isn't added automatically to the end, so subsequent Msg or print operations will continue the same line of text in the console. See <page>Global.MsgN</page> for a version that does add a newline.\n\nThe text is blue on the server, orange on the client, and green on the menu: <img src=\"msg_server_client_colors.png\">",
    "arguments": [
      {
        "name": "args",
        "type": "vararg",
        "description": "List of values to print."
      }
    ]
  },
  {
    "name": "MsgAll",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Works exactly like <page>Global.Msg</page> except that, if called on the server, will print to all players consoles plus the server console.",
    "arguments": [
      {
        "name": "args",
        "type": "vararg",
        "description": "List of values to print."
      }
    ]
  },
  {
    "name": "MsgC",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Just like <page>Global.Msg</page>, except it can also print colored text, just like <page>chat.AddText</page>.",
    "arguments": [
      {
        "name": "args",
        "type": "vararg",
        "description": "Values to print. If you put in a color, all text after that color will be printed in that color."
      }
    ]
  },
  {
    "name": "MsgN",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Same as <page>Global.print</page>, except it concatinates the arguments without inserting any whitespace in between them.\n\nSee also <page>Global.Msg</page>, which doesn't add a newline (`\"\\n\"`) at the end.",
    "arguments": [
      {
        "name": "args",
        "type": "vararg",
        "description": "List of values to print. They can be of any type and will be converted to strings with <page>Global.tostring</page>."
      }
    ]
  },
  {
    "name": "NamedColor",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Returns named color defined in resource/ClientScheme.res.",
    "arguments": [
      {
        "name": "name",
        "type": "string",
        "description": "Name of color"
      }
    ],
    "returnValues": [
      {
        "type": "table",
        "description": "A <page>Color</page> or nil"
      }
    ]
  },
  {
    "name": "newproxy",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "<bug issue=\"5299\">Fails under certain conditions when called in coroutines</bug>\nCreates a new <page>userdata</page> object.",
    "arguments": [
      {
        "name": "addMetatable",
        "type": "boolean",
        "default": "false",
        "description": "If true, the created <page>userdata</page> will be given its own metatable."
      }
    ],
    "returnValues": [
      {
        "type": "userdata",
        "description": "The newly created <page>userdata</page>."
      }
    ],
    "overloads": [
      {
        "arguments": [
          {
            "name": "userData",
            "type": "userdata",
            "description": "Creates a new <page>userdata</page> with the same metatable the <page>userdata</page> passed in had. The <page>userdata</page> passed in **must be** a <page>userdata</page> that has a metatable that was created from this function."
          }
        ],
        "returnValues": [
          {
            "type": "userdata",
            "description": "The newly created <page>userdata</page>."
          }
        ]
      }
    ]
  },
  {
    "name": "next",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns the next key and value pair in a table.\n\n<note>Table keys in Lua have no specific order, and will be returned in whatever order they exist in memory. This may not always be in ascending order or alphabetical order. If you need to iterate over an array in order, use <page>Global.ipairs</page>.</note>",
    "arguments": [
      {
        "name": "tab",
        "type": "table",
        "description": "The table"
      },
      {
        "name": "prevKey",
        "type": "any",
        "default": "nil",
        "description": "The previous key in the table."
      }
    ],
    "returnValues": [
      {
        "type": "any",
        "description": "The next key for the table. If the previous key was nil, this will be the first key in the table. If the previous key was the last key in the table, this will be nil."
      },
      {
        "type": "any",
        "description": "The value associated with that key. If the previous key was the last key in the table, this will be nil."
      }
    ]
  },
  {
    "name": "NumDownloadables",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Returns the number of files needed from the server you are currently joining.",
    "returnValues": [
      {
        "type": "number",
        "description": "The number of downloadables"
      }
    ]
  },
  {
    "name": "NumModelSkins",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Returns the amount of skins the specified model has.\n\nSee also <page>Entity:SkinCount</page> if you have an entity.",
    "arguments": [
      {
        "name": "modelName",
        "type": "string",
        "description": "Model to return amount of skins of"
      }
    ],
    "returnValues": [
      {
        "type": "number",
        "description": "Amount of skins"
      }
    ],
    "source": {
      "file": "lua/includes/util/model_database.lua",
      "lineStart": 80,
      "lineEnd": 93
    }
  },
  {
    "name": "OnModelLoaded",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "<internal></internal> Called by the engine when a model has been loaded. Caches model information with the <page>sql</page>.",
    "arguments": [
      {
        "name": "modelName",
        "type": "string",
        "description": "Name of the model."
      },
      {
        "name": "numPostParams",
        "type": "number",
        "description": "Number of pose parameters the model has."
      },
      {
        "name": "numSeq",
        "type": "number",
        "description": "Number of sequences the model has."
      },
      {
        "name": "numAttachments",
        "type": "number",
        "description": "Number of attachments the model has."
      },
      {
        "name": "numBoneControllers",
        "type": "number",
        "description": "Number of bone controllers the model has."
      },
      {
        "name": "numSkins",
        "type": "number",
        "description": "Number of skins that the model has."
      },
      {
        "name": "size",
        "type": "number",
        "description": "Size of the model."
      }
    ],
    "source": {
      "file": "lua/includes/util/model_database.lua",
      "lineStart": 23,
      "lineEnd": 78
    }
  },
  {
    "name": "OpenFolder",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Opens a folder with the given name in the garrysmod folder using the operating system's file browser.\n\n<bug issue=\"1532\">This does not work on OSX or Linux.</bug>",
    "arguments": [
      {
        "name": "folder",
        "type": "string",
        "description": "The subdirectory to open in the garrysmod folder."
      }
    ]
  },
  {
    "name": "OpenProblemsPanel",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Opens the Problems Panel.",
    "source": {
      "file": "lua/menu/problems/problems.lua",
      "lineStart": 156,
      "lineEnd": 176
    }
  },
  {
    "name": "OrderVectors",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Modifies the given vectors so that all of vector2's axis are larger than vector1's by switching them around. Also known as ordering vectors.\n\n<note>This function will irreversibly modify the given vectors</note>",
    "arguments": [
      {
        "name": "vector1",
        "type": "Vector",
        "description": "Bounding box min resultant"
      },
      {
        "name": "vector2",
        "type": "Vector",
        "description": "Bounding box max resultant"
      }
    ]
  },
  {
    "name": "pairs",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns an iterator function(<page>Global.next</page>) for a for loop that will return the values of the specified table in an arbitrary order.\n\n* For alphabetical **key** order use <page>Global.SortedPairs</page>.\n* For alphabetical **value** order use <page>Global.SortedPairsByValue</page>.",
    "arguments": [
      {
        "name": "tab",
        "type": "table",
        "description": "The table to iterate over."
      }
    ],
    "returnValues": [
      {
        "type": "function",
        "description": "The iterator (<page>Global.next</page>)."
      },
      {
        "type": "table",
        "description": "The table being iterated over."
      },
      {
        "type": "any",
        "description": "**nil** (for the constructor)."
      }
    ]
  },
  {
    "name": "Particle",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Calls <page>game.AddParticles</page> and returns given string.",
    "arguments": [
      {
        "name": "file",
        "type": "string",
        "description": "The particle file."
      }
    ],
    "returnValues": [
      {
        "type": "string",
        "description": "The particle file."
      }
    ],
    "source": {
      "file": "lua/includes/util.lua",
      "lineStart": 143,
      "lineEnd": 148
    }
  },
  {
    "name": "ParticleEffect",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Creates a particle effect. See also <page>Global.CreateParticleSystem</page>.\n\n<note>The particle effect must be precached **serverside** with <page>Global.PrecacheParticleSystem</page> and the file its from must be added via <page>game.AddParticles</page> before it can be used!</note>",
    "arguments": [
      {
        "name": "particleName",
        "type": "string",
        "description": "The name of the particle effect."
      },
      {
        "name": "position",
        "type": "Vector",
        "description": "The start position of Control Point 0 for the particle system."
      },
      {
        "name": "angles",
        "type": "Angle",
        "description": "The orientation of Control Point 0 for the particle system.\n\nYou must provide the entity argument for the angles to take effect."
      },
      {
        "name": "parent",
        "type": "Entity",
        "default": "NULL",
        "description": "If set, the particle will be parented to the entity."
      }
    ]
  },
  {
    "name": "ParticleEffectAttach",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Creates a particle effect with specialized parameters. See also <page>Entity:CreateParticleEffect</page> and <page>Global.CreateParticleSystem</page>.\n\n<note>The particle effect must be precached **serverside** with <page>Global.PrecacheParticleSystem</page> and the file its from must be added via <page>game.AddParticles</page> before it can be used!</note>",
    "arguments": [
      {
        "name": "particleName",
        "type": "string",
        "description": "The name of the particle effect."
      },
      {
        "name": "attachType",
        "type": "number",
        "description": "Attachment type using <page>Enums/PATTACH</page>."
      },
      {
        "name": "entity",
        "type": "Entity",
        "description": "The entity to be used in the way specified by the attachType."
      },
      {
        "name": "attachmentID",
        "type": "number",
        "description": "The id of the attachment to be used in the way specified by the attachType."
      }
    ]
  },
  {
    "name": "ParticleEmitter",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Creates a new <page>CLuaEmitter</page>.\n\n<note>Do not forget to delete the emitter with <page>CLuaEmitter:Finish</page> once you are done with it</note>\n<warning>There is a limit of 4097 emitters that can be active at once, exceeding this limit will throw a non-halting error in console!</warning>",
    "arguments": [
      {
        "name": "position",
        "type": "Vector",
        "description": "The start position of the emitter.\n\nThis is only used to determine particle drawing order for translucent particles."
      },
      {
        "name": "use3D",
        "type": "boolean",
        "default": "false",
        "description": "Whenever to render the particles in 2D or 3D mode. Supplying \"true\" will enable 3D (non-billboarded), otherwise it will default to 2D."
      }
    ],
    "returnValues": [
      {
        "type": "CLuaEmitter",
        "description": "The new particle emitter."
      }
    ]
  },
  {
    "name": "Path",
    "parent": "Global",
    "realms": [
      "server"
    ],
    "description": "Creates a path for the bot to follow",
    "arguments": [
      {
        "name": "type",
        "type": "string",
        "description": "The name of the path to create.\nThis is going to be `\"Follow\"` or `\"Chase\"` right now."
      }
    ],
    "returnValues": [
      {
        "type": "PathFollower",
        "description": "The path"
      }
    ]
  },
  {
    "name": "pcall",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Calls a function and catches an error that can be thrown while the execution of the call.\n\n<bug issue=\"2036\">This cannot stop errors from hooks called from the engine.</bug>\n\n<bug issue=\"2498\">This does not stop <page>Global.Error</page> and <page>Global.ErrorNoHalt</page> from sending error messages to the server (if called clientside) or calling the <page>GM:OnLuaError</page> hook. The success boolean returned will always return true and thus you will not get the error message returned. <page>Global.error</page> does not exhibit these behaviours.</bug>",
    "arguments": [
      {
        "name": "func",
        "type": "function",
        "description": "Function to be executed and of which the errors should be caught of"
      },
      {
        "name": "arguments",
        "type": "vararg",
        "description": "Arguments to call the function with."
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "If the function had no errors occur within it."
      },
      {
        "type": "vararg",
        "description": "If an error occurred, this will be a string containing the error message. Otherwise, this will be the return values of the function passed in."
      }
    ]
  },
  {
    "name": "Player",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns the player with the matching <page>Player:UserID</page>.\n\nFor a function that returns a player based on their <page>Entity:EntIndex</page>, see <page>Global.Entity</page>.\n\n\nFor a function that returns a player based on their connection ID, see <page>player.GetByID</page>.",
    "arguments": [
      {
        "name": "playerIndex",
        "type": "number",
        "description": "The player index."
      }
    ],
    "returnValues": [
      {
        "type": "Player",
        "description": "The retrieved player."
      }
    ]
  },
  {
    "name": "PositionSpawnIcon",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Moves the given model to the given position and calculates appropriate camera parameters for rendering the model to an icon.\n\nThe output table interacts nicely with <page>Panel:RebuildSpawnIconEx</page> with a few key renames.",
    "arguments": [
      {
        "name": "model",
        "type": "Entity",
        "description": "Model that is being rendered to the spawn icon"
      },
      {
        "name": "position",
        "type": "Vector",
        "description": "Position that the model is being rendered at"
      },
      {
        "name": "noAngles",
        "type": "boolean",
        "description": "If true the function won't reset the angles to 0 for the model."
      }
    ],
    "returnValues": [
      {
        "type": "table",
        "description": "Table of information of the view which can be used for rendering"
      }
    ],
    "source": {
      "file": "lua/includes/util/client.lua",
      "lineStart": 208,
      "lineEnd": 249
    }
  },
  {
    "name": "PrecacheParticleSystem",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Precaches a particle system with the specified name. The particle system must come from a file that is loaded with <page>game.AddParticles</page> beforehand.\n\nWhen used on the server, it automatically precaches the particle on client.\n\n<warning>There is a limit of 4096 precached particles on the server. So only precache particles that are actually going to be used.</warning>",
    "arguments": [
      {
        "name": "particleSystemName",
        "type": "string",
        "description": "The name of the particle system."
      }
    ]
  },
  {
    "name": "PrecacheScene",
    "parent": "Global",
    "realms": [
      "server"
    ],
    "description": "Precaches a scene file.",
    "arguments": [
      {
        "name": "scene",
        "type": "string",
        "description": "Path to the scene file to precache."
      }
    ]
  },
  {
    "name": "PrecacheSentenceFile",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Load and precache a custom sentence file.",
    "arguments": [
      {
        "name": "filename",
        "type": "string",
        "description": "The path to the custom sentences.txt."
      }
    ]
  },
  {
    "name": "PrecacheSentenceGroup",
    "parent": "Global",
    "realms": [
      "server"
    ],
    "description": "Precache a sentence group in a sentences.txt definition file.",
    "arguments": [
      {
        "name": "group",
        "type": "string",
        "description": "The group to precache."
      }
    ]
  },
  {
    "name": "print",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Writes every given argument to the console.\nAutomatically attempts to convert each argument to a string. (See <page>Global.tostring</page>)\n\nSeperates lines with a line break (`\"\\n\"`)\n\nSeparates arguments with a tab character (`\"\\t\"`).",
    "arguments": [
      {
        "name": "args",
        "type": "vararg",
        "description": "List of values to print."
      }
    ]
  },
  {
    "name": "PrintMessage",
    "parent": "Global",
    "realms": [
      "server"
    ],
    "description": "Displays a message in the chat, console, or center of screen of every player.\n\nThis uses the archaic user message system (<page>umsg</page>) and hence is limited to 255 characters.",
    "arguments": [
      {
        "name": "type",
        "type": "number",
        "description": "Which type of message should be sent to the players (see <page>Enums/HUD</page>)"
      },
      {
        "name": "message",
        "type": "string",
        "description": "Message to be sent to the players"
      }
    ]
  },
  {
    "name": "PrintTable",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Recursively prints the contents of a table to the console.",
    "arguments": [
      {
        "name": "tableToPrint",
        "type": "table",
        "description": "The table to be printed"
      },
      {
        "name": "indent",
        "type": "number",
        "default": "0",
        "description": "Number of tabs to start indenting at. Increases by 2 when entering another table."
      },
      {
        "name": "done",
        "type": "table",
        "default": "{}",
        "description": "Internal argument, you shouldn't normally change this. Used to check if a nested table has already been printed so it doesn't get caught in a loop."
      }
    ],
    "source": {
      "file": "lua/includes/util.lua",
      "lineStart": 56,
      "lineEnd": 94
    }
  },
  {
    "name": "ProjectedTexture",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Creates a new <page>ProjectedTexture</page>.",
    "returnValues": [
      {
        "type": "ProjectedTexture",
        "description": "Newly created projected texture."
      }
    ]
  },
  {
    "name": "ProtectedCall",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Runs a function without stopping the whole script on error.\n\nThis function is similar to <page>Global.pcall</page> and <page>Global.xpcall</page> except the errors are still printed and sent to the error handler (i.e. sent to server console if clientside and <page>GM:OnLuaError</page> called).",
    "arguments": [
      {
        "name": "func",
        "type": "function",
        "description": "Function to run"
      },
      {
        "name": "arguments",
        "type": "vararg",
        "description": "Arguments to call the function with."
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "Whether the function executed successfully or not"
      }
    ]
  },
  {
    "name": "RandomPairs",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns an iterator function that can be used to loop through a table in random order",
    "arguments": [
      {
        "name": "table",
        "type": "table",
        "description": "Table to create iterator for"
      },
      {
        "name": "descending",
        "type": "boolean",
        "default": "nil",
        "description": "Whether the iterator should iterate descending or not"
      }
    ],
    "returnValues": [
      {
        "type": "function",
        "description": "Iterator function"
      }
    ],
    "source": {
      "file": "lua/includes/extensions/table.lua",
      "lineStart": 614,
      "lineEnd": 631
    }
  },
  {
    "name": "rawequal",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Compares the two values without calling their __eq operator.",
    "arguments": [
      {
        "name": "value1",
        "type": "any",
        "description": "The first value to compare."
      },
      {
        "name": "value2",
        "type": "any",
        "description": "The second value to compare."
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "Whether or not the two values are equal."
      }
    ]
  },
  {
    "name": "rawget",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Gets the value with the specified key from the table without calling the __index method.",
    "arguments": [
      {
        "name": "table",
        "type": "table",
        "description": "Table to get the value from."
      },
      {
        "name": "index",
        "type": "any",
        "description": "The index to get the value from."
      }
    ],
    "returnValues": [
      {
        "type": "any",
        "description": "The value."
      }
    ]
  },
  {
    "name": "rawset",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Sets the value with the specified key from the table without calling the __newindex method.",
    "arguments": [
      {
        "name": "table",
        "type": "table",
        "description": "Table to get the value from."
      },
      {
        "name": "index",
        "type": "any",
        "description": "The index to get the value from."
      },
      {
        "name": "value",
        "type": "any",
        "description": "The value to set for the specified key."
      }
    ]
  },
  {
    "name": "RealFrameTime",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Returns the real frame-time which is unaffected by host_timescale. To be used for GUI effects (for example)\n<note>The returned number is clamped between `0` and `0.1`.</note>",
    "returnValues": [
      {
        "type": "number",
        "description": "Real frame time"
      }
    ],
    "source": {
      "file": "lua/includes/util/client.lua",
      "lineStart": 10,
      "lineEnd": 19
    }
  },
  {
    "name": "RealTime",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns the uptime of the game/server in seconds (to at least **4** decimal places). This value updates itself once every time the realm thinks. For servers, this is the server tickrate. For clients, its their current FPS.\n\n<note>This is **not** synchronised or affected by the game.\n\nThis will be affected by precision loss if the uptime is more than 30+(?) days, and effectively cease to be functional after 50+(?) days.\n\nChanging the map will **not** fix it like it does with <page>Global.CurTime</page>. A server restart is necessary.</note>\n\nYou should use this function (or <page>Global.SysTime</page>) for timing real-world events such as user interaction, but not for timing game events such as animations.\n\nSee also: <page>Global.CurTime</page>, <page>Global.SysTime</page>",
    "returnValues": [
      {
        "type": "number",
        "description": "Uptime of the game/server."
      }
    ]
  },
  {
    "name": "RecipientFilter",
    "parent": "Global",
    "realms": [
      "server"
    ],
    "description": "Creates a new <page>CRecipientFilter</page>.",
    "arguments": [
      {
        "name": "unreliable",
        "type": "boolean",
        "default": "false",
        "description": "If set to true, makes the filter unreliable.\n\nThis means, when sending over the network in cases like <page>Global.CreateSound</page> (and its subsequent updates), the message is not guaranteed to reach all clients."
      }
    ],
    "returnValues": [
      {
        "type": "CRecipientFilter",
        "description": "The new created recipient filter."
      }
    ]
  },
  {
    "name": "RecordDemoFrame",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "<internal></internal>\nAdds a frame to the currently recording demo.",
    "source": {
      "file": "lua/menu/demo_to_video.lua",
      "lineStart": 312
    }
  },
  {
    "name": "RefreshAddonConflicts",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Refreshes all Addon Conflicts after 1 Second. Internally uses <page>Global.FireAddonConflicts</page>",
    "source": {
      "file": "lua/menu/problems/problems.lua",
      "lineStart": 299,
      "lineEnd": 301
    }
  },
  {
    "name": "RegisterDermaMenuForClose",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Registers a Derma element to be closed the next time <page>Global.CloseDermaMenus</page> is called",
    "arguments": [
      {
        "name": "menu",
        "type": "Panel",
        "description": "Menu to be registered for closure"
      }
    ]
  },
  {
    "name": "RegisterMetaTable",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Registers a given table as a metatable. It can then be accessed by other code/addons via <page>Global.FindMetaTable</page>.",
    "arguments": [
      {
        "name": "metaName",
        "type": "string",
        "description": "The new metatable name. Cannot override existing types."
      },
      {
        "name": "metaTable",
        "type": "table",
        "description": "The new metatable table. It will be given a `MetaID` and `MetaName` fields."
      }
    ]
  },
  {
    "name": "RememberCursorPosition",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Saves position of your cursor on screen. You can restore it by using\n<page>Global.RestoreCursorPosition</page>.",
    "source": {
      "file": "lua/includes/util.lua",
      "lineStart": 427,
      "lineEnd": 436
    }
  },
  {
    "name": "RemoveTooltip",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Does the removing of the tooltip panel. Called by <page>Global.EndTooltip</page>.",
    "source": {
      "file": "lua/includes/util/tooltips.lua",
      "lineStart": 5,
      "lineEnd": 18
    }
  },
  {
    "name": "RenderAngles",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Returns the angle that the clients view is being rendered at",
    "returnValues": [
      {
        "type": "Angle",
        "description": "Render Angles"
      }
    ]
  },
  {
    "name": "RenderDoF",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Renders a Depth of Field effect",
    "arguments": [
      {
        "name": "origin",
        "type": "Vector",
        "description": "Origin to render the effect at"
      },
      {
        "name": "angle",
        "type": "Angle",
        "description": "Angle to render the effect at"
      },
      {
        "name": "usableFocusPoint",
        "type": "Vector",
        "description": "Point to focus the effect at"
      },
      {
        "name": "angleSize",
        "type": "number",
        "description": "Angle size of the effect"
      },
      {
        "name": "radialSteps",
        "type": "number",
        "description": "Amount of radial steps to render the effect with"
      },
      {
        "name": "passes",
        "type": "number",
        "description": "Amount of render passes"
      },
      {
        "name": "spin",
        "type": "boolean",
        "description": "Whether to cycle the frame or not"
      },
      {
        "name": "inView",
        "type": "table",
        "description": "Table of view data"
      },
      {
        "name": "fov",
        "type": "number",
        "description": "FOV to render the effect with"
      }
    ],
    "source": {
      "file": "lua/postprocess/super_dof.lua",
      "lineStart": 174,
      "lineEnd": 279
    }
  },
  {
    "name": "RenderStereoscopy",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Renders the stereoscopic post-process effect",
    "arguments": [
      {
        "name": "viewOrigin",
        "type": "Vector",
        "description": "Origin to render the effect at"
      },
      {
        "name": "viewAngles",
        "type": "Angle",
        "description": "Angles to render the effect at"
      }
    ],
    "source": {
      "file": "lua/postprocess/stereoscopy.lua",
      "lineStart": 11,
      "lineEnd": 37
    }
  },
  {
    "name": "RenderSuperDoF",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Renders the Super Depth of Field post-process effect",
    "arguments": [
      {
        "name": "viewOrigin",
        "type": "Vector",
        "description": "Origin to render the effect at"
      },
      {
        "name": "viewAngles",
        "type": "Angle",
        "description": "Angles to render the effect at"
      },
      {
        "name": "viewFOV",
        "type": "number",
        "description": "Field of View to render the effect at"
      }
    ],
    "source": {
      "file": "lua/postprocess/super_dof.lua",
      "lineStart": 281,
      "lineEnd": 329
    }
  },
  {
    "name": "RequestConnectToServer",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "<internal>Called by <page>permissions.AskToConnect</page></internal>\nIf the server has the permission \"connect\" granted, it will instantly connect you to the server.\nIf the permission is not granted it will, it opens a confirmation window to connect to the server.\n<upload src=\"ab571/8dc3890a88522bb.png\" size=\"16390\" name=\"connect_dialog.png\">\n</upload>",
    "arguments": [
      {
        "name": "serverip",
        "type": "string",
        "description": "The server ip to connect to"
      }
    ],
    "source": {
      "file": "lua/menu/openurl.lua",
      "lineStart": 266,
      "lineEnd": 274
    }
  },
  {
    "name": "RequestOpenURL",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "<internal></internal>\nOpens a confirmation window to open the url.\n<upload src=\"ab571/8dc3890ccb8cfd4.png\" size=\"14654\" name=\"confirm_dialog.png\">\n</upload>",
    "arguments": [
      {
        "name": "url",
        "type": "string",
        "description": "The Website URL to open."
      }
    ],
    "source": {
      "file": "lua/menu/openurl.lua",
      "lineStart": 261,
      "lineEnd": 265
    }
  },
  {
    "name": "RequestPermission",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "<internal></internal>\nOpens a confirmation window to grant the requested permission.\n<upload src=\"ab571/8dc3890f84fb468.png\" size=\"17108\" name=\"permission_request.png\">\n</upload>",
    "arguments": [
      {
        "name": "permission",
        "type": "string",
        "description": "The permission to ask"
      }
    ],
    "source": {
      "file": "lua/menu/openurl.lua",
      "lineStart": 275,
      "lineEnd": 279
    }
  },
  {
    "name": "require",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "First tries to load a binary module with the given name, if unsuccessful, it tries to load a Lua module with the given name.\n\n<bug issue=\"1041\" request=\"813\">Running this function with <page>Global.pcall</page> or <page>Global.xpcall</page> will still print an error that counts towards sv_kickerrornum.</bug>\n<note>This function will try to load local client file if `sv_allowcslua` is set to `1`</note>\n<note>\nBinary modules can't be installed as part of an addon and have to be put directly into ``garrysmod/lua/bin/`` to be detected.\nThis is a safety measure, because modules can be malicious and harm the system.\n</note>",
    "arguments": [
      {
        "name": "name",
        "type": "string",
        "description": "The name of the module to be loaded."
      }
    ]
  },
  {
    "name": "RestoreCursorPosition",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Restores position of your cursor on screen. You can save it by using <page>Global.RememberCursorPosition</page>.",
    "source": {
      "file": "lua/includes/util.lua",
      "lineStart": 438,
      "lineEnd": 445
    }
  },
  {
    "name": "RunConsoleCommand",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Executes the given console command with the parameters.\n\n<note>Some commands/convars are blocked from being ran/changed using this function, usually to prevent harm/annoyance to clients. For a list of blocked commands, see <page>Blocked ConCommands</page>.</note>",
    "arguments": [
      {
        "name": "command",
        "type": "string",
        "description": "The command to be executed."
      },
      {
        "name": "arguments",
        "type": "vararg",
        "description": "The arguments. Note, that unlike <page>Player:ConCommand</page>, you must pass each argument as a new string, not separating them with a space."
      }
    ]
  },
  {
    "name": "RunGameUICommand",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Runs a menu command. Equivalent to <page>Global.RunConsoleCommand</page>`( \"gamemenucommand\", command )` unless the command starts with the `\"engine\"` keyword in which case it is equivalent to <page>Global.RunConsoleCommand</page>`( command )`.\n<warning>Invoking engine commands no longer works, prints out `Not running engine cmd 'concommand'`</warning>",
    "arguments": [
      {
        "name": "command",
        "type": "string",
        "description": "The menu command to run\n\nShould be one of the following:\n* `Disconnect` - Disconnects from the current server.\n* `OpenBenchmarkDialog` - Opens the \"Video Hardware Stress Test\" dialog.\n* `OpenChangeGameDialog` - Does not work in GMod.\n* `OpenCreateMultiplayerGameDialog` - Opens the Source dialog for creating a listen server.\n* `OpenCustomMapsDialog` - Does nothing.\n* `OpenFriendsDialog` - Does nothing.\n* `OpenGameMenu` - Does not work in GMod.\n* `OpenLoadCommentaryDialog` - Opens the \"Developer Commentary\" selection dialog. Useless in GMod.\n* `OpenLoadDemoDialog` - Does nothing.\n* `OpenLoadGameDialog` - Opens the Source \"Load Game\" dialog.\n* `OpenNewGameDialog` - Opens the \"New Game\" dialog. Useless in GMod.\n* `OpenOptionsDialog` - Opens the options dialog.\n* `OpenPlayerListDialog` - Opens the \"Mute Players\" dialog that shows all players connected to the server and allows to mute them.\n* `OpenSaveGameDialog` - Opens the Source \"Save Game\" dialog.\n* `OpenServerBrowser` - Opens the legacy server browser.\n* `Quit` - Quits the game **without** confirmation (unlike other Source games).\n* `QuitNoConfirm` - Quits the game without confirmation (like other Source games).\n* `ResumeGame` - Closes the menu and returns to the game.\n* `engine 'concommand'` - Runs a console command. Unlike <page>Global.RunConsoleCommand</page> It will ignore <page>Blocked ConCommands</page>"
      }
    ]
  },
  {
    "name": "RunString",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Evaluates and executes the given code, will throw an error on failure.\n<note>Local variables are not passed to the given code.</note>",
    "arguments": [
      {
        "name": "code",
        "type": "string",
        "description": "The code to execute."
      },
      {
        "name": "identifier",
        "type": "string",
        "default": "RunString",
        "description": "The name that should appear in any error messages caused by this code."
      },
      {
        "name": "handleError",
        "type": "boolean",
        "default": "true",
        "description": "If false, this function will return a string containing any error messages instead of throwing an error."
      }
    ],
    "returnValues": [
      {
        "type": "string",
        "description": "If handleError is false, the error message (if any)."
      }
    ]
  },
  {
    "name": "RunStringEx",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Alias of <page>Global.RunString</page>.\n\n<deprecated>Use <page>Global.RunString</page> instead.</deprecated>"
  },
  {
    "name": "SafeRemoveEntity",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Removes the given entity unless it is a player or the world entity",
    "arguments": [
      {
        "name": "ent",
        "type": "Entity",
        "description": "Entity to safely remove."
      }
    ],
    "source": {
      "file": "lua/includes/util.lua",
      "lineStart": 239,
      "lineEnd": 245
    }
  },
  {
    "name": "SafeRemoveEntityDelayed",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Removes entity after delay using <page>Global.SafeRemoveEntity</page>",
    "arguments": [
      {
        "name": "entity",
        "type": "Entity",
        "description": "Entity to be removed"
      },
      {
        "name": "delay",
        "type": "number",
        "description": "Delay for entity removal in seconds"
      }
    ],
    "source": {
      "file": "lua/includes/util.lua",
      "lineStart": 250,
      "lineEnd": 256
    }
  },
  {
    "name": "SaveAddonPresets",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Sets the content of `addonpresets.txt` located in the `garrysmod/settings` folder. By default, this file stores your addon presets as JSON.\n\nYou can use <page>Global.LoadAddonPresets</page> to retrieve the data in this file.",
    "arguments": [
      {
        "name": "JSON",
        "type": "string",
        "description": "The new contents of the file."
      }
    ]
  },
  {
    "name": "SaveHideNews",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "<internal></internal>\nHides the News List when set to true.\n<note>If you call this don't forget to call <page>Global.LoadNewsList</page> to update the News List.</note>",
    "arguments": [
      {
        "name": "hide",
        "type": "boolean",
        "description": "true if it should hide the News."
      }
    ],
    "source": {
      "file": "lua/menu/mainmenu.lua",
      "lineStart": 241,
      "lineEnd": 243
    }
  },
  {
    "name": "SaveLastMap",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "<internal></internal>\nThis function is used to save the last map and category to which the map belongs as a .",
    "arguments": [
      {
        "name": "map",
        "type": "string",
        "description": "The name of the map."
      },
      {
        "name": "category",
        "type": "string",
        "description": "The name of the category to which this map belongs."
      }
    ],
    "source": {
      "file": "lua/menu/getmaps.lua",
      "lineStart": 337
    }
  },
  {
    "name": "SavePresets",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Overwrites all presets with the supplied table. Used by the <page>presets</page> for preset saving",
    "arguments": [
      {
        "name": "presets",
        "type": "table",
        "description": "Presets to be saved"
      }
    ]
  },
  {
    "name": "ScreenScale",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Returns a number based on the `size` argument and the players' screen width. The width is scaled in relation to `640x480` resolution.  This function is primarily used for scaling font sizes.\n\nSee <page>Global.ScreenScaleH</page> for a function that scales from height.",
    "arguments": [
      {
        "name": "size",
        "type": "number",
        "description": "The number you want to scale."
      }
    ],
    "returnValues": [
      {
        "type": "number",
        "description": "The scaled number based on your screen's width"
      }
    ],
    "source": {
      "file": "lua/includes/extensions/client/globals.lua",
      "lineStart": 6,
      "lineEnd": 8
    }
  },
  {
    "name": "ScreenScaleH",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Returns a number based on the `size` argument and players' screen height. The height is scaled in relation to `640x480` resolution.  This function is primarily used for scaling font sizes.\n\nSee <page>Global.ScreenScale</page> for a function that scales from width.",
    "arguments": [
      {
        "name": "size",
        "type": "number",
        "description": "The number you want to scale."
      }
    ],
    "returnValues": [
      {
        "type": "number",
        "description": "The scaled number based on your screen's height."
      }
    ],
    "source": {
      "file": "lua/includes/extensions/client/globals.lua",
      "lineStart": 10,
      "lineEnd": 12
    }
  },
  {
    "name": "ScrH",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Gets the height of the game's window (in pixels).\n<note>ScrH() returns the height from the current viewport, this can be changed via <page>render.SetViewPort</page>, inside Render Targets and cam.Start contexts.</note>",
    "returnValues": [
      {
        "type": "number",
        "description": "The height of the game's window in pixels"
      }
    ]
  },
  {
    "name": "ScrW",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Gets the width of the game's window (in pixels).\n<note>ScrW() returns the width from the current viewport, this can be changed via <page>render.SetViewPort</page>, inside Render Targets and cam.Start contexts.</note>",
    "returnValues": [
      {
        "type": "number",
        "description": "The width of the game's window in pixels"
      }
    ]
  },
  {
    "name": "select",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Used to select single values from a vararg or get the count of values in it.",
    "arguments": [
      {
        "name": "parameter",
        "type": "any",
        "description": "Can be a <page>number</page> or <page>string</page>.\n* If it's a string and starts with \"#\", the function will return the amount of values in the vararg (ignoring the rest of the string).\n* If it's a positive number, the function will return all values starting from the given index.\n* If the number is negative, it will return the amount specified from the end instead of the beginning. This mode will not be compiled by LuaJIT."
      },
      {
        "name": "vararg",
        "type": "vararg",
        "description": "The vararg. These are the values from which you want to select."
      }
    ],
    "returnValues": [
      {
        "type": "any",
        "description": "Returns a <page>number</page> or <page>vararg</page>, depending on the select method."
      }
    ]
  },
  {
    "name": "SendUserMessage",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Send a usermessage\n<deprecated>\nThis uses the <page>umsg</page> internally, which has been deprecated. Use the <page>net</page> instead.\n</deprecated>\n\n<note>\nThis does nothing clientside.\n</note>",
    "arguments": [
      {
        "name": "name",
        "type": "string",
        "description": "The name of the usermessage"
      },
      {
        "name": "recipients",
        "type": "any",
        "description": "Can be a <page>CRecipientFilter</page>, <page>table</page> or <page>Player</page> object."
      },
      {
        "name": "args",
        "type": "vararg",
        "description": "Data to send in the usermessage"
      }
    ],
    "source": {
      "file": "lua/includes/modules/usermessage.lua",
      "lineStart": 11,
      "lineEnd": 39
    }
  },
  {
    "name": "SentenceDuration",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns approximate duration of a sentence by name. See <page>Global.EmitSentence</page>.",
    "arguments": [
      {
        "name": "name",
        "type": "string",
        "description": "The sentence name."
      }
    ],
    "returnValues": [
      {
        "type": "number",
        "description": "The approximate duration."
      }
    ]
  },
  {
    "name": "ServerLog",
    "parent": "Global",
    "realms": [
      "server"
    ],
    "description": "Prints `ServerLog: PARAM` without a newline, to the server log and console.\n\nAs of June 2022, if `sv_logecho` is set to `0` (defaults to `1`) the message will not print to console and will only be written to the server's log file.",
    "arguments": [
      {
        "name": "parameter",
        "type": "string",
        "description": "The value to be printed to console."
      }
    ]
  },
  {
    "name": "SetClipboardText",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Adds the given string to the computers clipboard, which can then be pasted in or outside of GMod with Ctrl + V.",
    "arguments": [
      {
        "name": "text",
        "type": "string",
        "description": "The text to add to the clipboard."
      }
    ]
  },
  {
    "name": "setfenv",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Sets the environment for a function or a stack level. Can be used to sandbox code.",
    "arguments": [
      {
        "name": "location",
        "type": "function",
        "description": "The function to set the environment for, or a number representing stack level."
      },
      {
        "name": "environment",
        "type": "table",
        "description": "Table to be used as the the environment."
      }
    ],
    "returnValues": [
      {
        "type": "function",
        "description": "The function passed, otherwise nil."
      }
    ]
  },
  {
    "name": "SetGlobal2Angle",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Defines an angle to be automatically networked to clients\n\n<note>Running this function clientside will only set it clientside for the client it is called on!</note>",
    "arguments": [
      {
        "name": "index",
        "type": "any",
        "description": "Index to identify the global angle with"
      },
      {
        "name": "angle",
        "type": "Angle",
        "description": "Angle to be networked"
      }
    ]
  },
  {
    "name": "SetGlobal2Bool",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Defined a boolean to be automatically networked to clients\n\n<note>Running this function clientside will only set it clientside for the client it is called on!</note>",
    "arguments": [
      {
        "name": "index",
        "type": "any",
        "description": "Index to identify the global boolean with"
      },
      {
        "name": "bool",
        "type": "boolean",
        "description": "Boolean to be networked"
      }
    ]
  },
  {
    "name": "SetGlobal2Entity",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Defines an entity to be automatically networked to clients\n\n<note>Running this function clientside will only set it clientside for the client it is called on!</note>",
    "arguments": [
      {
        "name": "index",
        "type": "any",
        "description": "Index to identify the global entity with"
      },
      {
        "name": "ent",
        "type": "Entity",
        "description": "Entity to be networked"
      }
    ]
  },
  {
    "name": "SetGlobal2Float",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Defines a floating point number to be automatically networked to clients\n\n<warning>This function has a floating point precision error. Use <page>Global.SetGlobalFloat</page> instead</warning>\n<note>Running this function clientside will only set it clientside for the client it is called on!</note>",
    "arguments": [
      {
        "name": "index",
        "type": "any",
        "description": "Index to identify the global float with"
      },
      {
        "name": "float",
        "type": "number",
        "description": "Float to be networked"
      }
    ]
  },
  {
    "name": "SetGlobal2Int",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Sets an integer that is shared between the server and all clients.\n<warning>The integer has a 32 bit limit. Use <page>Global.SetGlobalInt</page> instead</warning>\n<note>Running this function clientside will only set it clientside for the client it is called on!</note>",
    "arguments": [
      {
        "name": "index",
        "type": "string",
        "description": "The unique index to identify the global value with."
      },
      {
        "name": "value",
        "type": "number",
        "description": "The value to set the global value to"
      }
    ]
  },
  {
    "name": "SetGlobal2String",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Defines a string with a maximum of 511 characters to be automatically networked to clients\n\n<note>Running this function clientside will only set it clientside for the client it is called on!</note>",
    "arguments": [
      {
        "name": "index",
        "type": "any",
        "description": "Index to identify the global string with"
      },
      {
        "name": "string",
        "type": "string",
        "description": "String to be networked"
      }
    ]
  },
  {
    "name": "SetGlobal2Var",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Defines a variable to be automatically networked to clients\n\n\n| Allowed Types   |\n| --------------- |\n| Angle           |\n| Boolean         |\n| Entity          |\n| Float           |\n| Int             |\n| String          |\n| Vector          |\n<warning>Trying to network a type that is not listed above will result in a nil value!</warning>\n<note>Running this function clientside will only set it clientside for the client it is called on!</note>",
    "arguments": [
      {
        "name": "index",
        "type": "any",
        "description": "Index to identify the global vector with"
      },
      {
        "name": "value",
        "type": "any",
        "description": "Value to be networked"
      }
    ]
  },
  {
    "name": "SetGlobal2Vector",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Defines a vector to be automatically networked to clients\n\n<note>Running this function clientside will only set it clientside for the client it is called on!</note>",
    "arguments": [
      {
        "name": "index",
        "type": "any",
        "description": "Index to identify the global vector with"
      },
      {
        "name": "vec",
        "type": "Vector",
        "description": "Vector to be networked"
      }
    ]
  },
  {
    "name": "SetGlobalAngle",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Defines an angle to be automatically networked to clients\n\n<warning>There's a 4095 slots Network limit. If you need more, consider using the <page>net</page> library or <page>Global.SetGlobal2Angle</page>. You should also consider the fact that you have way too many variables. You can learn more about this limit here: <page>Networking_Usage</page></warning>\n<note>Running this function clientside will only set it clientside for the client it is called on!</note>",
    "arguments": [
      {
        "name": "index",
        "type": "any",
        "description": "Index to identify the global angle with"
      },
      {
        "name": "angle",
        "type": "Angle",
        "description": "Angle to be networked"
      }
    ]
  },
  {
    "name": "SetGlobalBool",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Defined a boolean to be automatically networked to clients\n\n<warning>There's a 4095 slots Network limit. If you need more, consider using the <page>net</page> library or <page>Global.SetGlobal2Bool</page>. You should also consider the fact that you have way too many variables. You can learn more about this limit here: <page>Networking_Usage</page></warning>\n<note>Running this function clientside will only set it clientside for the client it is called on!</note>",
    "arguments": [
      {
        "name": "index",
        "type": "any",
        "description": "Index to identify the global boolean with"
      },
      {
        "name": "bool",
        "type": "boolean",
        "description": "Boolean to be networked"
      }
    ]
  },
  {
    "name": "SetGlobalEntity",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Defines an entity to be automatically networked to clients\n\n<warning>There's a 4095 slots Network limit. If you need more, consider using the <page>net</page> library or <page>Global.SetGlobal2Entity</page>. You should also consider the fact that you have way too many variables. You can learn more about this limit here: <page>Networking_Usage</page></warning>\n<note>Running this function clientside will only set it clientside for the client it is called on!</note>",
    "arguments": [
      {
        "name": "index",
        "type": "any",
        "description": "Index to identify the global entity with"
      },
      {
        "name": "ent",
        "type": "Entity",
        "description": "Entity to be networked"
      }
    ]
  },
  {
    "name": "SetGlobalFloat",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Defines a floating point number to be automatically networked to clients\n\n<warning>There's a 4095 slots Network limit. If you need more, consider using the <page>net</page> library or <page>Global.SetGlobal2Float</page>. You should also consider the fact that you have way too many variables. You can learn more about this limit here: <page>Networking_Usage</page></warning>\n<note>Running this function clientside will only set it clientside for the client it is called on!</note>",
    "arguments": [
      {
        "name": "index",
        "type": "any",
        "description": "Index to identify the global float with"
      },
      {
        "name": "float",
        "type": "number",
        "description": "Float to be networked"
      }
    ]
  },
  {
    "name": "SetGlobalInt",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Sets an integer that is shared between the server and all clients.\n\n<warning>There's a 4095 slots Network limit. If you need more, consider using the <page>net</page> library or <page>Global.SetGlobal2Int</page>. You should also consider the fact that you have way too many variables. You can learn more about this limit here: <page>Networking_Usage</page></warning>\n<note>Running this function clientside will only set it clientside for the client it is called on!</note>\n<bug issue=\"3374\">This function will not round decimal values as it actually networks a float internally.</bug>",
    "arguments": [
      {
        "name": "index",
        "type": "string",
        "description": "The unique index to identify the global value with."
      },
      {
        "name": "value",
        "type": "number",
        "description": "The value to set the global value to"
      }
    ]
  },
  {
    "name": "SetGlobalString",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Defines a string with a maximum of 199 characters to be automatically networked to clients\n\n<warning>There's a 4095 slots Network limit. If you need more, consider using the <page>net</page> library or <page>Global.SetGlobal2String</page>. You should also consider the fact that you have way too many variables. You can learn more about this limit here: <page>Networking_Usage</page></warning>\n<note>If you want to have a higher characters limit use <page>Global.SetGlobal2String</page></note>\n<note>Running this function clientside will only set it clientside for the client it is called on!</note>",
    "arguments": [
      {
        "name": "index",
        "type": "any",
        "description": "Index to identify the global string with"
      },
      {
        "name": "string",
        "type": "string",
        "description": "String to be networked"
      }
    ]
  },
  {
    "name": "SetGlobalVar",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Defines a variable to be automatically networked to clients\n\n\n| Allowed Types   |\n| --------------- |\n| Angle           |\n| Boolean         |\n| Entity          |\n| Float           |\n| Int             |\n| String          |\n| Vector          |\n<warning>Trying to network a type that is not listed above will result in an error!\nThere's a 4095 slots Network limit. If you need more, consider using the <page>net</page> library or <page>Global.SetGlobal2Var</page>. You should also consider the fact that you have way too many variables. You can learn more about this limit here: <page>Networking_Usage</page></warning>\n\n<note>Running this function clientside will only set it clientside for the client it is called on!</note>",
    "arguments": [
      {
        "name": "index",
        "type": "any",
        "description": "Index to identify the global vector with"
      },
      {
        "name": "value",
        "type": "any",
        "description": "Value to be networked"
      }
    ]
  },
  {
    "name": "SetGlobalVector",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Defines a vector to be automatically networked to clients\n<warning>There's a 4095 slots Network limit. If you need more, consider using the <page>net</page> library or <page>Global.SetGlobal2Vector</page>. You should also consider the fact that you have way too many variables. You can learn more about this limit here: <page>Networking_Usage</page></warning>\n<note>Running this function clientside will only set it clientside for the client it is called on!</note>",
    "arguments": [
      {
        "name": "index",
        "type": "any",
        "description": "Index to identify the global vector with"
      },
      {
        "name": "vec",
        "type": "Vector",
        "description": "Vector to be networked"
      }
    ]
  },
  {
    "name": "setmetatable",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Sets, changes or removes a table's metatable. Returns Tab (the first argument).",
    "arguments": [
      {
        "name": "Tab",
        "type": "table",
        "description": "The table who's metatable to change."
      },
      {
        "name": "Metatable",
        "type": "table",
        "description": "The metatable to assign. <br> If it's nil, the metatable will be removed."
      }
    ],
    "returnValues": [
      {
        "type": "table",
        "description": "The first argument."
      }
    ]
  },
  {
    "name": "SetPhysConstraintSystem",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Called by the engine to set which [constraint system](https://developer.valvesoftware.com/wiki/Phys_constraintsystem) the next created constraints should use.",
    "arguments": [
      {
        "name": "constraintSystem",
        "type": "Entity",
        "description": "Constraint system to use"
      }
    ]
  },
  {
    "name": "SortedPairs",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "This function can be used in a for loop instead of <page>Global.pairs</page>. It sorts all **keys** alphabetically.\n\nFor sorting by specific **value member**, use <page>Global.SortedPairsByMemberValue</page>.\n\n\nFor sorting by **value**, use <page>Global.SortedPairsByValue</page>.",
    "arguments": [
      {
        "name": "table",
        "type": "table",
        "description": "The table to sort"
      },
      {
        "name": "desc",
        "type": "boolean",
        "default": "false",
        "description": "Reverse the sorting order"
      }
    ],
    "returnValues": [
      {
        "type": "function",
        "description": "Iterator function"
      },
      {
        "type": "table",
        "description": "The table being iterated over"
      }
    ],
    "source": {
      "file": "lua/includes/extensions/table.lua",
      "lineStart": 553,
      "lineEnd": 573
    }
  },
  {
    "name": "SortedPairsByMemberValue",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns an iterator function that can be used to loop through a table in order of member values, when the values of the table are also tables and contain that member.\n\nTo sort by **value**, use <page>Global.SortedPairsByValue</page>.\n\n\nTo sort by **keys**, use <page>Global.SortedPairs</page>.",
    "arguments": [
      {
        "name": "table",
        "type": "table",
        "description": "Table to create iterator for."
      },
      {
        "name": "memberKey",
        "type": "any",
        "description": "Key of the value member to sort by."
      },
      {
        "name": "descending",
        "type": "boolean",
        "default": "false",
        "description": "Whether the iterator should iterate in descending order or not."
      }
    ],
    "returnValues": [
      {
        "type": "function",
        "description": "Iterator function"
      },
      {
        "type": "table",
        "description": "The table the iterator was created for."
      }
    ],
    "source": {
      "file": "lua/includes/extensions/table.lua",
      "lineStart": 597,
      "lineEnd": 609
    }
  },
  {
    "name": "SortedPairsByValue",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns an iterator function that can be used to loop through a table in order of its **values**.\n\nTo sort by specific **value member**, use <page>Global.SortedPairsByMemberValue</page>.\n\n\nTo sort by **keys**, use <page>Global.SortedPairs</page>.",
    "arguments": [
      {
        "name": "table",
        "type": "table",
        "description": "Table to create iterator for"
      },
      {
        "name": "descending",
        "type": "boolean",
        "default": "false",
        "description": "Whether the iterator should iterate in descending order or not"
      }
    ],
    "returnValues": [
      {
        "type": "function",
        "description": "Iterator function"
      },
      {
        "type": "table",
        "description": "The table which will be iterated over"
      }
    ],
    "source": {
      "file": "lua/includes/extensions/table.lua",
      "lineStart": 579,
      "lineEnd": 591
    }
  },
  {
    "name": "Sound",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Runs <page>util.PrecacheSound</page> and returns the string.\n\n<bug><page>util.PrecacheSound</page> does nothing and therefore so does this function.</bug>",
    "arguments": [
      {
        "name": "soundPath",
        "type": "string",
        "description": "The soundpath to precache."
      }
    ],
    "returnValues": [
      {
        "type": "string",
        "description": "The string passed as the first argument."
      }
    ],
    "source": {
      "file": "lua/includes/util.lua",
      "lineStart": 127,
      "lineEnd": 130
    }
  },
  {
    "name": "SoundDuration",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns the approximate duration of the specified sound in seconds, for `.wav` and `.mp3` sounds.",
    "arguments": [
      {
        "name": "soundName",
        "type": "string",
        "description": "The sound file path."
      }
    ],
    "returnValues": [
      {
        "type": "number",
        "description": "Sound duration in seconds."
      }
    ]
  },
  {
    "name": "SQLStr",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns the input value in an escaped form so that it can safely be used inside of queries. The returned value is surrounded by quotes unless noQuotes is true. Alias of <page>sql.SQLStr</page>\n\n<note>This function is not meant to be used with external database engines such as `MySQL`. Escaping strings with inadequate functions is dangerous!</note>",
    "arguments": [
      {
        "name": "input",
        "type": "string",
        "description": "String to be escaped"
      },
      {
        "name": "noQuotes",
        "type": "boolean",
        "default": "false",
        "description": "Whether the returned value should be surrounded in quotes or not"
      }
    ],
    "returnValues": [
      {
        "type": "string",
        "description": "Escaped input"
      }
    ]
  },
  {
    "name": "SScale",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "<deprecated>You should be using <page>Global.ScreenScale</page> instead.</deprecated>\n\nReturns a number based on the Size argument and your screen's width. Alias of <page>Global.ScreenScale</page>.",
    "arguments": [
      {
        "name": "Size",
        "type": "number",
        "description": "The number you want to scale."
      }
    ],
    "source": {
      "file": "lua/includes/extensions/client/globals.lua",
      "lineStart": 6,
      "lineEnd": 10
    }
  },
  {
    "name": "STNDRD",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns the ordinal suffix of a given number.",
    "arguments": [
      {
        "name": "number",
        "type": "number",
        "description": "The number to find the ordinal suffix of."
      }
    ],
    "returnValues": [
      {
        "type": "string",
        "description": "suffix"
      }
    ],
    "source": {
      "file": "lua/includes/util.lua",
      "lineStart": 308,
      "lineEnd": 315
    }
  },
  {
    "name": "SuppressHostEvents",
    "parent": "Global",
    "realms": [
      "server"
    ],
    "description": "Suppress any networking from the server to the specified player. This is automatically called by the engine before/after a player fires their weapon, reloads, or causes any other similar shared-predicted event to occur.",
    "arguments": [
      {
        "name": "suppressPlayer",
        "type": "Player",
        "description": "The player to suppress any networking to."
      }
    ]
  },
  {
    "name": "SysTime",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns a highly accurate time in seconds since the start up, ideal for benchmarking. Unlike <page>Global.RealTime</page>, this value will be updated any time the function is called, allowing for sub-think precision.",
    "returnValues": [
      {
        "type": "number",
        "description": "Uptime of the server."
      }
    ]
  },
  {
    "name": "TauntCamera",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Returns a TauntCamera object",
    "returnValues": [
      {
        "type": "table",
        "description": "TauntCamera"
      }
    ]
  },
  {
    "name": "TextEntryLoseFocus",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "Clears focus from any text entries player may have focused."
  },
  {
    "name": "TimedCos",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns a cosine value that fluctuates based on the current time",
    "arguments": [
      {
        "name": "frequency",
        "type": "number",
        "description": "The frequency of fluctuation"
      },
      {
        "name": "min",
        "type": "number",
        "description": "Minimum value"
      },
      {
        "name": "max",
        "type": "number",
        "description": "Maximum value"
      },
      {
        "name": "offset",
        "type": "number",
        "description": "Offset variable that doesn't affect the rate of change, but causes the returned value to be offset by time"
      }
    ],
    "returnValues": [
      {
        "type": "number",
        "description": "Cosine value"
      }
    ],
    "source": {
      "file": "lua/includes/util.lua",
      "lineStart": 327,
      "lineEnd": 329
    }
  },
  {
    "name": "TimedSin",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns a sine value that fluctuates based on <page>Global.CurTime</page>. The value returned will be between the start value plus/minus the range value.\n\n<bug>The range arguments don't work as intended. The existing (bugged) behavior is documented below.</bug>",
    "arguments": [
      {
        "name": "frequency",
        "type": "number",
        "description": "The frequency of fluctuation, in"
      },
      {
        "name": "origin",
        "type": "number",
        "description": "The center value of the sine wave."
      },
      {
        "name": "max",
        "type": "number",
        "description": "This argument's distance from origin defines the size of the full range of the sine wave. For example, if origin is 3 and max is 5, then the full range of the sine wave is 5-3 = 2. 3 is the center point of the sine wave, so the sine wave will range between 2 and 4."
      },
      {
        "name": "offset",
        "type": "number",
        "description": "Offset variable that doesn't affect the rate of change, but causes the returned value to be offset by time"
      }
    ],
    "returnValues": [
      {
        "type": "number",
        "description": "Sine value"
      }
    ],
    "source": {
      "file": "lua/includes/util.lua",
      "lineStart": 320,
      "lineEnd": 322
    }
  },
  {
    "name": "tobool",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Attempts to return an appropriate boolean for the given value",
    "arguments": [
      {
        "name": "input",
        "type": "any",
        "description": "The object to be converted to a boolean"
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "* `false` for the boolean `false`.\n* `false` for `\"false\"`.\n* `false` for `\"0\"`.\n* `false` for numeric `0`.\n* `false` for `nil`.\n* `true` otherwise."
      }
    ],
    "source": {
      "file": "lua/includes/util.lua",
      "lineStart": 273,
      "lineEnd": 276
    }
  },
  {
    "name": "ToggleFavourite",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Toggles whether or not the named map is favorited in the new game list.",
    "arguments": [
      {
        "name": "map",
        "type": "string",
        "description": "Map to toggle favorite."
      }
    ],
    "source": {
      "file": "lua/menu/getmaps.lua",
      "lineStart": 359,
      "lineEnd": 375
    }
  },
  {
    "name": "tonumber",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Attempts to convert the value to a number.",
    "arguments": [
      {
        "name": "value",
        "type": "any",
        "description": "The value to convert. Can be a number or string."
      },
      {
        "name": "base",
        "type": "number",
        "default": "10",
        "description": "The base used in the string. Can be any integer between 2 and 36, inclusive."
      }
    ],
    "returnValues": [
      {
        "type": "number",
        "description": "The numeric representation of the value with the given base, or <page>nil</page> if the conversion failed."
      }
    ]
  },
  {
    "name": "tostring",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Attempts to convert the value to a string. If the value is an object and its metatable has defined the __tostring metamethod, this will call that function.\n\n<page>Global.print</page> also uses this functionality.",
    "arguments": [
      {
        "name": "value",
        "type": "any",
        "description": "The object to be converted to a string."
      }
    ],
    "returnValues": [
      {
        "type": "string",
        "description": "The string representation of the value."
      }
    ]
  },
  {
    "name": "TranslateDownloadableName",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "<deprecated></deprecated>\n<internal></internal>\nReturns \"Lua Cache File\" if the given file name is in a certain string table, nothing otherwise.",
    "arguments": [
      {
        "name": "filename",
        "type": "string",
        "description": "File name to test"
      }
    ],
    "returnValues": [
      {
        "type": "string",
        "description": "\"Lua Cache File\" if the given file name is in a certain string table, nothing otherwise."
      }
    ]
  },
  {
    "name": "type",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns a string representing the name of the type of the passed object.\n<warning>This will return `table` if the input is <page>Global.Color</page>, consider using <page>Global.IsColor</page> in that case.</warning>",
    "arguments": [
      {
        "name": "var",
        "type": "any",
        "description": "The object to get the type of."
      }
    ],
    "returnValues": [
      {
        "type": "string",
        "description": "The name of the object's type."
      }
    ]
  },
  {
    "name": "TypeID",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Gets the associated type ID of the variable. Unlike <page>Global.type</page>, this does not work with <page>no value</page> - an argument must be provided.\n\n<warning>This will return `TYPE_TABLE` for <page>Color</page> objects.</warning>\n<warning>All subclasses of <page>Entity</page> will return `TYPE_ENTITY`.</warning>\n<bug request=\"1120\">This returns garbage for _LOADLIB objects.</bug>\n<bug request=\"1459\">This returns `TYPE_NIL` for <page>proto</page>s.</bug>",
    "arguments": [
      {
        "name": "variable",
        "type": "any",
        "description": "The variable to get the type ID of."
      }
    ],
    "returnValues": [
      {
        "type": "number",
        "description": "The type ID of the variable. See the <page>Enums/TYPE</page>."
      }
    ]
  },
  {
    "name": "unpack",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "This function takes a numeric indexed table and return all the members as a vararg. If specified, it will start at the given index and end at end index.",
    "arguments": [
      {
        "name": "tbl",
        "type": "table",
        "description": "The table to generate the vararg from."
      },
      {
        "name": "startIndex",
        "type": "number",
        "default": "1",
        "description": "Which index to start from. Optional."
      },
      {
        "name": "endIndex",
        "type": "number",
        "default": "#tbl",
        "description": "Which index to end at. Optional, even if you set StartIndex."
      }
    ],
    "returnValues": [
      {
        "type": "vararg",
        "description": "Output values"
      }
    ]
  },
  {
    "name": "UnPredictedCurTime",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns the current asynchronous in-game time. This will not be synced with the players current clock allowing you to get <page>Global.CurTime</page> without interference from <page>Prediction</page>.",
    "returnValues": [
      {
        "type": "number",
        "description": "The asynchronous in-game time."
      }
    ]
  },
  {
    "name": "UpdateAddonDisabledState",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "<internal></internal>\nThis function retrieves the values from <page>Global.GetAddonStatus</page> and passes them to JS(JavaScript).",
    "source": {
      "file": "lua/menu/mainmenu.lua",
      "lineStart": 417,
      "lineEnd": 420
    }
  },
  {
    "name": "UpdateAddonMapList",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "<internal></internal>\nThis function is called by <page>Global.UpdateMapList</page> to pass the AddonMaps to JS to be used for the Search.",
    "source": {
      "file": "lua/menu/getmaps.lua",
      "lineStart": 229,
      "lineEnd": 236
    }
  },
  {
    "name": "UpdateGames",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "<internal></internal>\nUpdates the Gamelist.",
    "source": {
      "file": "lua/menu/mainmenu.lua",
      "lineStart": 396,
      "lineEnd": 403
    }
  },
  {
    "name": "UpdateLanguages",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "<internal></internal>\nThis function searches for all available languages and passes them to JS(JavaScript). JS then updates the Language list with the given languages.",
    "source": {
      "file": "lua/menu/mainmenu.lua",
      "lineStart": 376,
      "lineEnd": 382
    }
  },
  {
    "name": "UpdateLoadPanel",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "Runs JavaScript on the loading screen panel (<page>Global.GetLoadPanel</page>).",
    "arguments": [
      {
        "name": "javascript",
        "type": "string",
        "description": "JavaScript to run on the loading panel."
      }
    ],
    "source": {
      "file": "lua/menu/loading.lua",
      "lineStart": 217,
      "lineEnd": 223
    }
  },
  {
    "name": "UpdateMapList",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "<internal>Called from JS when starting a new game</internal>\nThis function updates the Map List",
    "source": {
      "file": "lua/menu/getmaps.lua",
      "lineStart": 239,
      "lineEnd": 251
    }
  },
  {
    "name": "UpdateServerSettings",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "<internal>Called from JS when starting a new game</internal>\nUpdates the Server Settings when called.",
    "source": {
      "file": "lua/menu/mainmenu.lua",
      "lineStart": 151,
      "lineEnd": 184
    }
  },
  {
    "name": "UpdateSubscribedAddons",
    "parent": "Global",
    "realms": [
      "menu"
    ],
    "description": "<internal></internal>\nUpdates the Addons list.",
    "source": {
      "file": "lua/menu/mainmenu.lua",
      "lineStart": 405,
      "lineEnd": 415
    }
  },
  {
    "name": "UTIL_IsUselessModel",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "<deprecated>You should use <page>Global.IsUselessModel</page> instead.</deprecated>\n\nThis function is an alias of <page>Global.IsUselessModel</page>.\n\nReturns whether or not a model is useless by checking that the file path is that of a proper model.\n\nIf the string \".mdl\" is not found in the model name, the function will return true.\n\nThe function will also return true if any of the following strings are found in the given model name:\n* \"_gesture\"\n* \"_anim\"\n* \"_gst\"\n* \"_pst\"\n* \"_shd\"\n* \"_ss\"\n* \"_posture\"\n* \"_anm\"\n* \"ghostanim\"\n* \"_paths\"\n* \"_shared\"\n* \"anim_\"\n* \"gestures_\"\n* \"shared_ragdoll_\"",
    "arguments": [
      {
        "name": "modelName",
        "type": "string",
        "description": "The model name to be checked"
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "Whether or not the model is useless"
      }
    ],
    "source": {
      "file": "lua/includes/util.lua",
      "lineStart": 285,
      "lineEnd": 301
    }
  },
  {
    "name": "ValidPanel",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "<deprecated>You should use <page>Global.IsValid</page> instead</deprecated>\n\nReturns if a panel is safe to use.",
    "arguments": [
      {
        "name": "panel",
        "type": "Panel",
        "description": "The panel to validate."
      }
    ],
    "source": {
      "file": "lua/includes/extensions/client/panel.lua",
      "lineStart": 465,
      "lineEnd": 471
    }
  },
  {
    "name": "Vector",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Creates a <page>Vector</page> object.\n<warning>Creating Vectors is relatively expensive when used in often running hooks or in operations requiring very frequent calls (like loops for example) due to object creation and garbage collection. It is better to store the vector in a variable or to use the [default vectors](https://wiki.facepunch.com/gmod/Global_Variables#misc) available. See <page>Vector:Add</page>.</warning>",
    "arguments": [
      {
        "name": "x",
        "type": "number",
        "default": "0",
        "description": "The x component of the vector."
      },
      {
        "name": "y",
        "type": "number",
        "default": "0",
        "description": "The y component of the vector."
      },
      {
        "name": "z",
        "type": "number",
        "default": "0",
        "description": "The z component of the vector."
      }
    ],
    "returnValues": [
      {
        "type": "Vector",
        "description": "The created vector object."
      }
    ],
    "overloads": [
      {
        "arguments": [
          {
            "name": "vector",
            "type": "Vector",
            "description": "Creates a new <page>Vector</page> that is a copy of the given <page>Vector</page>."
          }
        ],
        "returnValues": [
          {
            "type": "Vector",
            "description": "The created vector object."
          }
        ]
      },
      {
        "arguments": [
          {
            "name": "vectorString",
            "type": "string",
            "description": "Attempts to parse the input <page>string</page> from the <page>Global.print</page> format of an <page>Vector</page>.\n\nReturns a <page>Vector</page> with its `x`, `y`, and `z` set to `0` if the <page>string</page> cannot be parsed."
          }
        ],
        "returnValues": [
          {
            "type": "Vector",
            "description": "The created vector object."
          }
        ]
      }
    ]
  },
  {
    "name": "VectorRand",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Returns a random vector whose components are each between min(inclusive), max(exclusive).",
    "arguments": [
      {
        "name": "min",
        "type": "number",
        "default": "-1",
        "description": "Min bound inclusive."
      },
      {
        "name": "max",
        "type": "number",
        "default": "1",
        "description": "Max bound exclusive."
      }
    ],
    "returnValues": [
      {
        "type": "Vector",
        "description": "The random direction vector."
      }
    ],
    "source": {
      "file": "lua/includes/util.lua",
      "lineStart": 99,
      "lineEnd": 103
    }
  },
  {
    "name": "VGUIFrameTime",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Identical to <page>Global.SysTime</page>."
  },
  {
    "name": "VGUIRect",
    "parent": "Global",
    "realms": [
      "client"
    ],
    "description": "Creates and returns a <page>DShape</page> rectangle GUI element with the given dimensions.",
    "arguments": [
      {
        "name": "x",
        "type": "number",
        "description": "X position of the created element"
      },
      {
        "name": "y",
        "type": "number",
        "description": "Y position of the created element"
      },
      {
        "name": "w",
        "type": "number",
        "description": "Width of the created element"
      },
      {
        "name": "h",
        "type": "number",
        "description": "Height of the created element"
      }
    ],
    "returnValues": [
      {
        "type": "Panel",
        "description": "<page>DShape</page> element"
      }
    ],
    "source": {
      "file": "lua/vgui/dshape.lua",
      "lineStart": 33,
      "lineEnd": 39
    }
  },
  {
    "name": "VisualizeLayout",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "<internal>Used by the **vgui_visualizelayout** convar</internal>\nBriefly displays layout details of the given panel on-screen",
    "arguments": [
      {
        "name": "panel",
        "type": "Panel",
        "description": "Panel to display layout details of"
      }
    ],
    "source": {
      "file": "lua/includes/util/vgui_showlayout.lua",
      "lineStart": 33,
      "lineEnd": 41
    }
  },
  {
    "name": "WorkshopFileBase",
    "parent": "Global",
    "realms": [
      "client",
      "menu"
    ],
    "description": "<internal></internal>Returns a new WorkshopFileBase element",
    "arguments": [
      {
        "name": "namespace",
        "type": "string",
        "description": "Namespace for the file base"
      },
      {
        "name": "requiredTags",
        "type": "table",
        "description": "Tags required for a Workshop submission to be interacted with by the filebase"
      }
    ],
    "returnValues": [
      {
        "type": "table",
        "description": "WorkshopFileBase element"
      }
    ],
    "source": {
      "file": "lua/includes/util/workshop_files.lua",
      "lineStart": 7,
      "lineEnd": 280
    }
  },
  {
    "name": "WorldToLocal",
    "parent": "Global",
    "realms": [
      "client",
      "server"
    ],
    "description": "Translates the specified position and angle into the specified coordinate system.",
    "arguments": [
      {
        "name": "position",
        "type": "Vector",
        "description": "The position that should be translated from the current to the new system."
      },
      {
        "name": "angle",
        "type": "Angle",
        "description": "The angles that should be translated from the current to the new system."
      },
      {
        "name": "newSystemOrigin",
        "type": "Vector",
        "description": "The origin of the system to translate to."
      },
      {
        "name": "newSystemAngles",
        "type": "Angle",
        "description": "The angles of the system to translate to."
      }
    ],
    "returnValues": [
      {
        "type": "Vector",
        "description": "Local position"
      },
      {
        "type": "Angle",
        "description": "Local angles"
      }
    ]
  },
  {
    "name": "xpcall",
    "parent": "Global",
    "realms": [
      "menu",
      "client",
      "server"
    ],
    "description": "Attempts to call the first function. If the execution succeeds, this returns `true` followed by the returns of the function. If execution fails, this returns `false` and the second function is called with the error message.\n\nUnlike in <page>Global.pcall</page>, the stack is not unwound and can therefore be used for stack analyses with the <page>debug</page>.\n\n<bug issue=\"2036\">This cannot stop errors from hooks called from the engine.</bug>\n\n<bug issue=\"2498\">This does not stop <page>Global.Error</page> and <page>Global.ErrorNoHalt</page> (As well as <page>Global.include</page>) from sending error messages to the server (if called clientside) or calling the <page>GM:OnLuaError</page> hook. The success boolean returned will always return true and thus you will not get the error message returned. <page>Global.error</page> does not exhibit these behaviours.</bug>",
    "arguments": [
      {
        "name": "func",
        "type": "function",
        "description": "The function to call initially."
      },
      {
        "name": "errorCallback",
        "type": "function",
        "description": "The function to be called if execution of the first fails; the error message is passed as a string.\n\nYou cannot throw an <page>Global.error</page>() from this callback: it will have no effect (not even stopping the callback)."
      },
      {
        "name": "arguments",
        "type": "vararg",
        "description": "Arguments to pass to the initial function."
      }
    ],
    "returnValues": [
      {
        "type": "boolean",
        "description": "Status of the execution; `true` for success, `false` for failure."
      },
      {
        "type": "vararg",
        "description": "The returns of the first function if execution succeeded, otherwise the **first** return value of the error callback."
      }
    ]
  }
]
